# Oubliette
#
# An early portal vault featuring an ally. 
# Many thanks to |amethyst, gammafunk, greensnark, PleasingFungus!
#
# About ally placement:
#  - in the arrival subvault
#  - with attributes att:friendly and no_stairs
#  - when placing uniques, make sure they don't exist yet
#  - unless you know what you are doing, no items

# TODO:
#  - killing the ally should give a new milestone ("You killed your friend
#    Sigmund.")
#  - needs a dungeon depth for monster spawning purposes (scroll of summoning)
#  - portal/rock colours are preliminary
#  - no tiles
#  - timer announcement messages need care!

# Principal goal: a very early portal vault, like Sewer or Ossuary, which
# starts with the player liberating or otherwise acquiring an ally, and then
# fighting as a team for the prize.
#
#   - depth range D:3-4
#   - small-ish levels
#   - ideally, both ally or player alone are too weak to win the fight
#     (this is impossible for combos like TrBe, but we should try)
#
# Because of the last goal, the portal vault makes a lot more sense in the
# early game. Also place only one exit, right next to the entrance. (To make
# it harder to skip ally & fighting, and just steal the loot.) The maps will
# be made from subvaults. Choke points can exist, but don't have to.
#
# How to gain ally:
#   1. Ally is fighting some monsters when the player arrives. If the player
#      dawdles or fights badly, the ally dies.
#   2. The ally is imprisoned and the player must defeat the guards. (Can use
#      a small room with a runed door and some glass window. Ally may sleep.)
#   3. Rarely, the ally is weak but has a scroll of summoning or a wand of
#      enslavement (on the floor, in his prison).
#
# What kinds of allies 
# (should be noticeably stronger than a typical player at that stage):
#   1. A humanoid with good weapon: big kobold; gnoll; type 4 demon. Centaur?
#   2. An early unique with good brand: Sigmund; Crazy Yiuf etc.
#   3. Animals (presumably stored for food or labour): yaks.
#   4. An undead (shut away by locals): strong zombie/skeleton; necrophage.
#
# The opposition:
# Should be meat bag melee monsters, rangers may be okay. No casters or
# summoners: this is very early game! The opposition should come in two or
# three waves, so that the player can get a feeling for the combined power
# of character + ally.
#   1. Kobolds (with big kobolds at end).
#   2. Orcs (with orc warrior at end).
#   3. Gnolls (having good weapons at the end).
#   4. Hobgoblin (having axes; ogre at end).
#   5. type 5 demons (type 4 demon at end).
#
# Loot:
#   - the ally will not leave the vault, so is not part of the prize
#   - early loot: some consumable of the ally (e.g. in the prison);
#     should be pre-identified if the ally is intelligent (he can tell you)
#   - I am not sure if I can do this in lua, but it would be cool if the
#     prize could be a randart weapon (base type hand axe, club, spear) like
#     "bane of kobolds", "Sigmund's Friendship", "[player]'s Pride"
#
# The combination ally vs opposition can be random, and in almost all cases a
# player who wants to can make a story out of it. (E.g. gnolls have locked away
# a big kobold, perhaps in a tribe war, or for theft. Or minor demons have
# captured a humanoid, probably for a dark ritual.)
#
# There can also be pre-assigned combinations. Examples:
#   - opposition consists of humanoids (orcs or gnolls or kobolds), the
#     ally is one of them, imprisoned and carrying a wand of enslavement or
#     a scroll of summoning
#   - ally is Pikel, opposition are humans
#   - ally is Duwan (or Duvessa); the other twin is at the end of the map
#   - ally is Natasha; who will sometimes free Boris
#
# For later:
#   - Could sometimes employ religion: e.g. the humanoids who have captured a
#     demon follow Elyvilon, or the kobolds who imprisoned some unique follow
#     an evil god. Should player religion play a role? (We could rationalise
#     this away by saying that you'd only be called for help if you would.)
#   - If the player already has a god, the ally could sometimes have an altar
#     to that god next to him in his prison)... probably made by him during
#     custody. This would explain why and how he called for help.
#   - It is possible to have speech lines depending on branch, I hope this
#     includes special portal vaults. If so, we could have special lines for
#     your buddy Sigmund fighting on your side...
#
# Note: the player can kill his ally (backstabbing). This is intentional and
# should not be punished or commented on within the game. (The log will tell.)


{{
function oubliette_portal(e)
  local timeout_turns = crawl.random_range(600, 800)

  local messager =
    timed_msg {
      initmsg = { "You hear faint moaning.",
                  "There is an entrance to an oubliette on this level. "
                  .. "Hurry and find it before it's too late!" },
      finalmsg = "The moan is almost imperceptible now.",

      verb = 'moaning',
      -- This is always preceded by an article, so...
      noisemaker = 'moaning',
      ranges = {
        { 5000, 'steady ' },  { 4000, '' },
        { 2500, 'desperate ' }, { 1500, 'hopeless ' },
        { 0, 'moribund ' }
      }
    }

  e.lua_marker('O',
      timed_marker {
        disappear = "The moaning has ceased.",
        entity = 'staircase',
        turns = timeout_turns,
        single_timed = true,
        floor = "expired_portal",
        feat_tile = "dngn_portal_oubliette",
        msg = messager })
  e.tags("uniq_oubliette no_monster_gen chance_oubliette")
  e.chance(10000)                   -- CHANGE TO 500 AFTER TESTING!
  e.kfeat("O = enter_oubliette")
  e.colour("' = yellow")            -- COPIED FROM OSSUARY
  e.ftile("' = floor_sandstone")    -- NEEDS SPECIFIC TILES!
  e.tile("c = wall_tomb")           -- AND COLOURS
end

-- Use the following line in destination maps after all SUBSTs
-- : oubliette_setup_features(_G)
-- Note that the function also defines < to be the exit portal.
function oubliette_setup_features(e)
  e.kfeat("< = exit_oubliette")
end
 
  ally_types = {
    { weight = 30000, type = 'humanoid'},
    { weight = 10, type = 'unique' },
    { weight = 5,  type = 'animal' },
    { weight = 5,  type = 'undead' },
    { weight = 1,  type = 'handover'}  -- the ally is weak, but gives you an item
  }

  ally_type = util.random_weighted_from("weight", ally_types).type

  -- Sometimes we place another friendly monster at the prize section;
  -- this "companion" is waiting for the original ally.
  -- E.g. Dowan will always have Duvessa as companion, and vice versa.
  -- But Sigmund will have companion Edmund only rarely.
  uniques_list = {
    { weight = 20,  unique = 'Sigmund', companion = 'Edmund', britem = 'scythe' },
    { weight = 80,  unique = 'Sigmund',                       britem = 'scythe' },
    { weight = 50,  unique = 'Dowan',   companion = 'Duvessa' },
    { weight = 50,  unique = 'Duvessa', companion = 'Dowan' },
    { weight = 10,  unique = 'Pikel' },
    { weight = 1,   unique = 'Natasha', companion = 'Boris' },
    { weight = 10,  unique = 'Natasha'}
  }
-- TODO: check if uniques have not been placed already

  humanoids_list = {
    { weight = 10, humanoid = 'big kobold', britem = 'battle axe' },
    { weight = 10, humanoid = 'orc priest', mob = 2 },
    { weight = 10, humanoid = 'gnoll',      britem = 'halberd' }
  }

  -- Animals can come in larger groups, specify number with "mob".
  animals_list = {
    { weight = 10, animal = 'yak',    mob = 1 },
    { weight = 10, animal = 'wolf',   mob = 2 },
    { weight = 10, animal = 'sheep',  mob = 3 }
  }  

  undead_list = {
    { weight = 10, undead = 'troll zombie' },
    { weight = 10, undead = 'wraith' },
    { weight = 10, undead = 'iron imp',    mob = 3}
  }

  handover_list = {
    { weight = 10, handover = 'kobold', item = 'wand of enslavement charges:12' }
  }

  brands_list = {
    { weight = 10, brand = freezing      },
    { weight = 10, brand = venom         },
    { weight = 10, brand = fire          },
    { weight = 3,  brand = pain          },
    { weight = 3,  brand = draining      },
    { weight = 3,  brand = distortion    },
    { weight = 1,  brand = electrocution }
  }

if britem ~= nil then
  brand = util.random_weighted_from("weight", brands_list)
  ego = " ego:" .. brand
else
  ego = ""
end
  
if ally_type == "unique" then
   chosen = util.random_weighted_from("weight", uniques_list)
   ally = chosen.unique
   companion = chosen.companion
   allyitem = chosen.item
elseif ally_type == "humanoid" then
   chosen = util.random_weighted_from("weight", humanoids_list)
   ally = chosen.humanoid
elseif ally_type == "animal" then
   chosen = util.random_weighted_from("weight", animals_list)   
   ally = chosen.animal
   allies_number = chosen.mob
elseif ally_type == "undead" then
   chosen = util.random_weighted_from("weight", undead_list)   
   ally = chosen.undead
elseif ally_type == "handover" then
   chosen = util.random_weighted_from("weight", handover_list)   
   ally = chosen.handover
   handover_item = chosen.item
end

function place_ally(e)
  -- A weak ally handing over an item to the player
  if handover_item ~= nil then
    e.nsubst("@ = 1:T / *:@")
    e.kitem("T = " .. handover_item .. "ident:all")
  end
  -- Sometimes more than one ally
  if allies_number == nil then
    allies_number = 1
  end
  e.nsubst("@ = " .. allies_number .. ":@ / *:.")
  e.kmons("@ = " .. ally .. " att:friendly no_stairs" .. ego)
end

  arrival_list = {
    { weight = 10, type = "prison" },
    { weight = 10, type = "fight" },
    { weight = 10, type = "free" }
  }

-- There are different types of arrival rooms.
-- Some types of ally force a particular type.
arrival_type = util.random_weighted_from("weight", arrival_list).type
if ally_type == "handover" then
  arrival_type = "prison"
end

  enemy_list = {
    { weight = 10, enemy = 'kobold', mob = 5 },
    { weight = 10, enemy = 'human',  mob = 2 },
    { weight = 10, enemy = 'orc',    mob = 5 },
    { weight = 10, enemy = 'zombie', mob = 5 }
  }

chosen = util.random_weighted_from("weight", enemy_list)
enemy_type = chosen.enemy
enemy_number = chosen.mob

if ally == "Pikel" then 
  enemy_type = "human" -- always fighting his former Slaves
  enemy_number = 2
end

function place_minor_enemies(e)
  e.nsubst("1 = " .. enemy_number .. " =1 / *:.")  
  if enemy_type == "zombie" then
    e.kmons("1 = hound zombie / gnoll zombie / wolf zombie w:5")
  else
    e.kmons("1 = " .. enemy_type)
  end
end

}}

############################################################
# Portal entry vaults

default-depth: D:2
# TODO: Change to D:3-5 later on

NAME:   portal_oubliette_entry_generic_LL
: oubliette_portal(_G)
MAP
...
.O.
...
ENDMAP

#### The destination Oubliette vaults ######################
#
# Each map is built out of several subvaults:
#  - the arrival (containing stone arch, exit, and ally)
#  - minor opposition
#  - boss fight

default-depth: Oubli

#### arrival subvaults (entry, exit, ally) #################

NAME:   oubliette_subvault_arrival_free
TAGS:   oubliette_subvault_arrival_free
WEIGHT: 2
: place_ally(_G)
: oubliette_setup_features(_G)
MAP
xxxxx
x...x
x.A.xx
x@@@.+
x.<.xx
x...x
xxxxx
ENDMAP

NAME:    oubliette_subvault_arrival_prison
TAGS:    oubliette_subvault_arrival_prison
WEIGHT:  2
SUBST:   m = mmx
: place_ally(_G)
: oubliette_setup_features(_G)
MAP
xxxxx
xA.<x
xx+xxx
x....+
xm=mxx
x@@@x
xxxxx
ENDMAP

# For arrival vaults with monsters beating up on the ally: 
# exit should be close to entry position

NAME:    oubliette_subvault_arrival_fight
TAGS:    oubliette_subvault_arrival_fight
MONS:    place:D:4 generate_awake / nothing w:4
: place_ally(_G)
: oubliette_setup_features(_G)
MAP
xxxxx
xA.<x
x...xx
x.1..+
x1@1xx
x@1@x
xxxxx
ENDMAP

NAME:    oubliette_subvault_arrival_fight_zombies
TAGS:    oubliette_subvault_arrival_fight
MONS:    orc zombie / kobold zombie / gnoll zombie generate_awake
: place_ally(_G)
: oubliette_setup_features(_G)
MAP
xxxxx
xA.<x
x...xx
x111.+
x1@1xx
x@1@x
xxxxx
ENDMAP

#### minor subvaults #######################################

NAME:   oubliette_subvault_minor
TAGS:   oubliette_subvault_minor
: place_minor_enemies(_G)
MAP
xxxxxxxxx
x...1...xx
...111...
x...1...xx
xxxxxxxxx
ENDMAP

NAME:   oubliette_subvault_minor_row
TAGS:   oubliette_subvault_minor
: place_minor_enemies(_G)
MAP
xxxxxxxxx
x..xxx..xx
..11111..
x..xxx..xx
xxxxxxxxx
ENDMAP

#### boss subvaults (end monster, loot) ####################

NAME:   oubliette_subvault_boss
TAGS:   oubliette_subvault_boss
MONS:   ogre
{{ 
 if companion ~= nil then
   nsubst("* = 1:X / *:*")
   kmons("X = " .. companion .. " att:friendly no_stairs")
 end
 if allyitem ~= nil then
   nsubst("* = 1:Y / *:*")
   local d = crawl.random2(7)
   kitem("Y = " .. allyitem .. " plus:" .. d)
 end
}}
MAP
xxxxxxxx
 x...x*x
+..1.=*x	
 x...x*x
xxxxxxxx
ENDMAP


#### The full oubliette vaults #############################

NAME:     oubliette_tiny
ORIENT:   encompass
TAGS:     no_rotate
: subvault("A : oubliette_subvault_arrival_" .. arrival_type)
SUBVAULT: B : oubliette_subvault_minor
SUBVAULT: C : oubliette_subvault_boss
: oubliette_setup_features(_G)
MAP
AAAAA
AAAAABBBBBBBBBCCCCCCCC
AAAAAABBBBBBBBBCCCCCCC
AAAAAABBBBBBBBCCCCCCCC
AAAAAABBBBBBBBBCCCCCCC
AAAAABBBBBBBBBCCCCCCCC
AAAAA
ENDMAP
