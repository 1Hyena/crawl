#line 2 "levcomp.lex.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <errno.h>

/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#ifndef _WIN32
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif


/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 44
#define YY_END_OF_BUFFER 45
static yyconst short int yy_acclist[965] =
    {   0,
        3,    3,   45,   43,   44,   42,   43,   44,   42,   44,
       38,   43,   44,   37,   43,   44,   39,   43,   44,   43,
       44,   43,   44,   43,   44,   43,   44,   43,   44,   43,
       44,   43,   44,   43,   44,   43,   44,   43,   44,   43,
       44,   43,   44,   43,   44,   43,   44,   43,   44,    5,
       43,   44,   43,   44,   43,   44,    3,   43,   44,    3,
       37,   43,   44,    3,   39,   43,   44,    3,   43,   44,
        3,   43,   44,    3,   43,   44,    3,   43,   44,    3,
       43,   44,    3,   43,   44,    3,   43,   44,    3,   43,
       44,    3,   43,   44,    3,   43,   44,    3,   43,   44,

        3,   43,   44,    3,   43,   44,    3,   43,   44,    3,
       43,   44,    3,   43,   44,    3,    5,   43,   44,    3,
       43,   44,    3,   43,   44,   43,   44,   41,   42,   44,
       42,   43,   44,   38,   43,   44,   37,   43,   44,   39,
       43,   44,   43,   44,   43,   44,   43,   44,   43,   44,
       43,   44,   43,   44,   43,   44,   43,   44,   43,   44,
       43,   44,   43,   44,   43,   44,   43,   44,   43,   44,
       43,   44,    5,   43,   44,   43,   44,   43,   44,   43,
       44,   22,   42,   43,   44,   21,   42,   44,   42,   43,
       44,   20,   38,   43,   44,   37,   43,   44,   39,   43,

       44,   43,   44,   43,   44,   43,   44,   43,   44,   43,
       44,   43,   44,   43,   44,   43,   44,   43,   44,   43,
       44,   43,   44,   43,   44,   43,   44,   43,   44,   43,
       44,    5,   43,   44,   43,   44,   43,   44,   17,   42,
       43,   44,   18,   42,   44,   42,   43,   44,   16,   37,
       43,   44,   16,   39,   43,   44,   16,   43,   44,   16,
       43,   44,   16,   43,   44,   16,   43,   44,   16,   43,
       44,   16,   43,   44,   16,   43,   44,   16,   43,   44,
       16,   43,   44,   16,   43,   44,   16,   43,   44,   16,
       43,   44,   16,   43,   44,   16,   43,   44,   16,   43,

       44,   16,   43,   44,   16,   43,   44,   16,   43,   44,
       42,   39,    5,    5,    3,    3,   39,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    5,    2,    5,    3,    5,    3,
        3,    5,    3,   40,   41,   42,   39,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,    5,   40,    5,   40,    5,   40,
       40,   42,   21,   42,   42,   39,    5,    5,   17,   42,
       18,   42,   42,   16,   16,   39,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,

       16,   16,   16,   16,    4,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    4,    3,    5,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,    4,   40,   19,   19,   39,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,    5,   19,    4,   19,
        5,   19,   19,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
        4,   16,   30,   31,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,   30,    3,    3,    3,
        3,    3,    3,    3,    3,   31,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   30,   40,   40,   40,
       40,   40,   40,   40,   40,   31,   40,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   30,   19,
       19,   19,   19,   19,   19,   19,   19,   31,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   30,
       16,   16,   16,   16,   16,   16,   16,   16,   31,   15,
        6,   13,   28,   29,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,   28,    3,    3,

       29,   40,   40,   40,   15,   40,    6,   40,   40,   40,
       40,   13,   40,   40,   40,   40,   40,   40,   28,   40,
       40,   29,   40,   19,   19,   19,   15,   19,    6,   19,
       19,   19,   19,   13,   19,   19,   19,   19,   19,   19,
       19,   28,   19,   19,   29,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   28,   16,   16,
       29,    8,   12,   10,    3,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
       40,    8,   40,   12,   40,   40,   10,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,

       19,    8,   19,   12,   19,   19,   10,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   11,    9,   14,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,   11,   40,
        9,   40,   14,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   11,   19,    9,   19,   14,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   27,   26,   36,
       32,   33,   34,   35,    3,    3,   27,    3,    3,   26,
        3,    3,   36,    3,   32,    3,   33,    3,    3,   34,
        3,   35,   40,   27,   40,   40,   26,   40,   40,   36,
       40,   32,   40,   33,   40,   40,   34,   40,   35,   40,
       19,   19,   27,   19,   19,   26,   19,   19,   36,   19,
       32,   19,   33,   19,   19,   34,   19,   35,   16,   16,

       27,   16,   16,   26,   16,   16,   36,   16,   32,   16,
       33,   16,   16,   34,   16,   35,   24,   25,   23,    3,
        3,   24,    3,   25,    3,   23,   40,   24,   40,   25,
       40,   23,   40,   19,   19,   24,   19,   25,   19,   23,
       16,   16,   24,   16,   25,   16,   23,    3,   40,   19,
       16,    3,   40,   19,   16,    3,   40,   19,   16,    7,
        7,   40,    7,   19
    } ;

static yyconst short int yy_accept[818] =
    {   0,
        1,    1,    1,    2,    3,    3,    3,    3,    3,    3,
        3,    4,    6,    9,   11,   14,   17,   20,   22,   24,
       26,   28,   30,   32,   34,   36,   38,   40,   42,   44,
       46,   48,   50,   53,   55,   57,   60,   64,   68,   71,
       74,   77,   80,   83,   86,   89,   92,   95,   98,  101,
      104,  107,  110,  113,  116,  120,  123,  126,  128,  131,
      134,  137,  140,  143,  145,  147,  149,  151,  153,  155,
      157,  159,  161,  163,  165,  167,  169,  171,  173,  176,
      178,  180,  182,  186,  189,  192,  196,  199,  202,  204,
      206,  208,  210,  212,  214,  216,  218,  220,  222,  224,

      226,  228,  230,  232,  235,  237,  239,  243,  246,  249,
      253,  257,  260,  263,  266,  269,  272,  275,  278,  281,
      284,  287,  290,  293,  296,  299,  302,  305,  308,  311,
      312,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  314,  314,
      315,  315,  316,  318,  319,  320,  321,  322,  323,  324,
      325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
      335,  336,  337,  338,  340,  341,  343,  344,  345,  345,
      347,  349,  350,  351,  352,  353,  354,  355,  356,  357,
      358,  359,  360,  361,  362,  363,  364,  365,  367,  368,

      369,  371,  372,  372,  373,  375,  376,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  378,  378,  379,  379,  381,  383,
      384,  385,  387,  388,  389,  390,  391,  392,  393,  394,
      395,  396,  397,  398,  399,  400,  401,  402,  403,  404,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  406,  407,
      408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
      418,  419,  420,  421,  422,  423,  424,  426,  428,  429,
      430,  431,  432,  433,  434,  435,  436,  437,  438,  439,

      440,  441,  442,  443,  444,  445,  447,  448,  450,  451,
      452,  453,  454,  455,  456,  457,  458,  459,  460,  461,
      462,  463,  464,  465,  466,  467,  469,  471,  473,  474,
      475,  476,  477,  478,  479,  480,  481,  482,  483,  484,
      485,  486,  487,  488,  489,  490,  491,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  494,  494,
      494,  494,  494,  494,  494,  494,  495,  496,  497,  498,
      499,  500,  501,  502,  503,  504,  505,  506,  508,  509,
      510,  511,  512,  513,  514,  515,  517,  518,  519,  520,
      521,  522,  523,  524,  525,  526,  527,  529,  530,  531,

      532,  533,  534,  535,  536,  538,  539,  540,  541,  542,
      543,  544,  545,  546,  547,  548,  550,  551,  552,  553,
      554,  555,  556,  557,  559,  560,  561,  562,  563,  564,
      565,  566,  567,  568,  569,  571,  572,  573,  574,  575,
      576,  577,  578,  580,  580,  580,  580,  581,  582,  582,
      582,  582,  583,  583,  583,  583,  583,  583,  584,  584,
      585,  586,  587,  588,  589,  590,  591,  592,  593,  594,
      595,  596,  597,  599,  600,  602,  603,  604,  605,  607,
      609,  610,  611,  612,  614,  615,  616,  617,  618,  619,
      621,  622,  624,  625,  626,  627,  629,  631,  632,  633,

      634,  636,  637,  638,  639,  640,  641,  643,  644,  646,
      647,  648,  649,  650,  651,  652,  653,  654,  655,  656,
      657,  659,  660,  662,  662,  663,  664,  664,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  666,  668,  669,  670,  671,  672,  673,  674,  675,
      676,  677,  678,  679,  680,  681,  682,  684,  686,  687,
      689,  690,  691,  692,  693,  694,  695,  696,  697,  698,
      699,  700,  701,  702,  704,  706,  707,  709,  710,  711,
      712,  713,  714,  715,  716,  717,  718,  719,  720,  721,
      722,  723,  724,  725,  726,  727,  728,  729,  730,  731,

      732,  733,  734,  735,  736,  737,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  739,  740,
      741,  742,  743,  744,  745,  746,  747,  748,  749,  751,
      753,  755,  756,  757,  758,  759,  760,  761,  762,  763,
      764,  765,  766,  768,  770,  772,  773,  774,  775,  776,
      777,  778,  779,  780,  781,  782,  783,  784,  785,  786,
      787,  788,  789,  790,  791,  792,  793,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  795,
      796,  797,  798,  799,  800,  801,  802,  803,  804,  805,
      806,  807,  808,  809,  810,  811,  812,  813,  814,  815,

      816,  817,  818,  819,  820,  821,  822,  823,  824,  825,
      826,  827,  828,  829,  830,  831,  832,  833,  834,  835,
      836,  837,  838,  838,  839,  839,  840,  840,  841,  842,
      843,  843,  844,  845,  846,  848,  849,  851,  852,  854,
      856,  858,  859,  861,  863,  864,  866,  867,  869,  870,
      872,  874,  876,  877,  879,  881,  882,  884,  885,  887,
      888,  890,  892,  894,  895,  897,  899,  900,  902,  903,
      905,  906,  908,  910,  912,  913,  915,  917,  917,  918,
      919,  920,  921,  923,  925,  927,  928,  930,  932,  934,
      935,  937,  939,  941,  942,  944,  946,  948,  948,  949,

      950,  951,  952,  952,  953,  954,  955,  956,  956,  957,
      958,  959,  960,  961,  963,  965,  965
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    5,    6,    6,    6,    1,    6,
        6,    6,    6,    7,    8,    6,    1,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,    1,    6,
        6,    6,    6,    6,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   20,   21,   22,   23,   24,   25,
       20,   26,   27,   28,   20,   20,   20,   20,   29,   20,
        6,    1,    6,    6,   30,    1,   31,   20,   32,   33,

       34,   35,   20,   36,   37,   20,   20,   38,   39,   40,
       41,   42,   20,   43,   44,   45,   46,   47,   48,   20,
       20,   20,    6,    6,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[49] =
    {   0,
        1,    1,    2,    3,    4,    4,    3,    5,    5,    1,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5
    } ;

static yyconst short int yy_base[829] =
    {   0,
        0,   44,   88,  132,  176,  220,  264,  308,  352,  396,
     1561, 1562,   48,   51, 1562, 1562, 1551, 1541, 1543, 1536,
     1532, 1544, 1528, 1532, 1523, 1540, 1516,   25, 1508, 1517,
     1506, 1512,    0,   46,  397,    0,    0, 1536, 1526, 1528,
     1519, 1520, 1516, 1528, 1512, 1516, 1507, 1524, 1500,   27,
     1492, 1501, 1490, 1496,   70,   51,  398,   57,   79,   82,
       74,  136,  137,  140,  141,  145,  146,  149,  224,  153,
      225,  157,  228,  403,  404,  229,  407,  312,  160,  232,
      408,    0,  169,  235,  242, 1562,    0, 1520, 1510, 1512,
     1505, 1501, 1513, 1497, 1501, 1492, 1509, 1485,   29, 1477,

     1486, 1475, 1481,  244,  141,  409,  255,  315,  318,    0,
     1505,    0, 1495, 1497, 1490, 1486, 1498, 1482, 1486, 1477,
     1494, 1470,  209, 1462, 1471, 1460, 1466,  304,  410,  321,
     1490, 1487, 1472, 1485, 1472, 1472, 1474, 1481, 1469, 1473,
     1454, 1444, 1455,  296, 1446, 1439, 1440,    0, 1458,    0,
      411,    0, 1473, 1470, 1455, 1465, 1467, 1454, 1454, 1456,
     1463, 1451, 1455, 1436, 1426, 1437,  297, 1428, 1421, 1422,
       60, 1562,  249,  331, 1440,  341,  412,  165,  259,  417,
      327,  420,  421,  424,  455,  425,  456,  459,  460,  463,
      464,  428,  469,  472,  477,  481,  482,  345,  485,  486,

      489,  490, 1462,  494,  501,  504,  335,  498,  508,  510,
      512,  233,  511,  514,  516,  520,  402,  475,  518,  521,
      522,  526,  527,  537,  529,  538,  541,  545,  553,  556,
        0, 1454, 1451, 1436, 1449, 1436, 1436, 1438, 1445, 1433,
     1437, 1418, 1408, 1419,  522, 1410, 1403, 1404, 1422,  531,
     1423, 1417, 1427, 1416, 1427, 1426, 1427, 1427, 1411, 1406,
     1391, 1394,  527, 1389, 1400, 1387, 1386, 1562, 1407, 1401,
     1406, 1410, 1399, 1410, 1409, 1410, 1410, 1394, 1389, 1374,
     1377,  530, 1372, 1383, 1370, 1369,    0,  577,  565,  578,
      587,  588,  592,  593,  596,  599,  608,  612,  615,  616,

      619,  620,  623,  624,  627,  628, 1411,  559,  530,  574,
      631,  442,  584,  632,   66,  581,  611,  637,  634,  603,
      635,  638,  640,  639,  643,  647, 1410,  657,  648, 1388,
     1382, 1392, 1381, 1392, 1391, 1392, 1392, 1376, 1371, 1356,
     1359,  627, 1354, 1365, 1352, 1351,    0, 1382, 1376, 1366,
     1382, 1381, 1367, 1374, 1364, 1377, 1340, 1562, 1346, 1345,
     1342, 1343, 1345, 1346, 1343, 1562, 1365, 1359, 1365, 1348,
     1364, 1363, 1349, 1356, 1346, 1359, 1322,    0, 1328, 1327,
     1324, 1325, 1327, 1328, 1325,    0,  673,  683,  687,  692,
      693,  696,  702,  703,  706,  707,  711,  716,  719,  720,

      724,  728,  731,  732,  727,  735,  723,  740,  736,  737,
      644,  678,  688,  741,  738, 1358,  742,  743,  747,  748,
      750,  755,  754, 1357, 1345, 1339, 1329, 1345, 1344, 1330,
     1337, 1327, 1340, 1303,    0, 1309, 1308, 1305, 1306, 1308,
     1309, 1306,    0, 1326, 1330, 1329, 1562, 1562, 1310, 1327,
     1315, 1562, 1297, 1292, 1296, 1287, 1294,  732, 1291,  725,
     1314, 1318, 1302, 1316, 1297, 1314, 1302, 1284, 1279, 1283,
     1274, 1281,  744, 1278,  735,  789,  775,  792,  768,  793,
      796,  797,  801,  804,  807,  808,  811,  812,  815,  819,
      816,  824,  823,  825,  827, 1314, 1313,  828,  829,  830,

     1312,  831,  832,  834,  838,  839,  845,  841,  844, 1298,
     1302, 1301, 1282, 1299, 1287, 1269, 1264, 1268, 1259, 1266,
      829, 1263,  820, 1291, 1562, 1562, 1290, 1562, 1289, 1253,
     1266, 1253, 1264, 1251, 1260, 1261, 1257, 1249, 1258, 1254,
     1277,    0, 1276, 1275, 1239, 1252, 1239, 1250, 1237, 1246,
     1247, 1243, 1235, 1244, 1240,  860,  840,  880,  884,  883,
      887,  894,  897,  898,  901,  902,  905,  906,  909,  910,
      913,  914,  863, 1271, 1270,  917, 1269,  919,  879,  650,
      656,  859,  893,  920,  918,  921,  923,  928,  924, 1260,
     1259, 1258, 1222, 1235, 1222, 1233, 1220, 1229, 1230, 1226,

     1218, 1227, 1223, 1562, 1562, 1562, 1248, 1211, 1211, 1208,
     1209, 1214, 1206, 1205, 1208, 1203, 1202, 1237, 1200, 1200,
     1197, 1198, 1203, 1195, 1194, 1197, 1192, 1191,  929,  938,
      948,  952,  959,  963,  964,  967,  968,  971,  972,  977,
      976,  980, 1232, 1231, 1230,  239,  933,  944,  945,  955,
      960,  981,  983,  986,  984,  987, 1223, 1186, 1186, 1183,
     1184, 1189, 1181, 1180, 1183, 1178, 1177, 1187, 1175, 1177,
     1183, 1175, 1171, 1169, 1168, 1175, 1166, 1165, 1176, 1161,
     1160, 1166, 1154, 1141, 1136, 1135, 1138, 1125, 1113,  989,
      990,  997,  998, 1009, 1010, 1017, 1031, 1035, 1038, 1039,

     1016, 1002, 1006, 1021, 1027, 1034, 1028, 1042, 1043, 1046,
     1049, 1122, 1110, 1112, 1118, 1110, 1105, 1103, 1102, 1109,
     1100, 1099, 1109, 1562, 1099, 1562, 1098, 1562, 1562, 1562,
     1108, 1562, 1562, 1105,    0, 1095,    0, 1093,    0,    0,
        0, 1103,    0,    0, 1054, 1055, 1059, 1062, 1063, 1067,
     1073, 1077, 1088, 1091, 1094, 1051, 1132, 1058, 1131, 1068,
     1130, 1129, 1128, 1050, 1126, 1125, 1092,    0, 1078,    0,
     1057,    0,    0,    0,  975,    0,    0,  954, 1562, 1562,
     1562,  953,    0,    0,    0, 1095, 1101, 1105, 1106, 1072,
      932,  864,  858,  734,    0,    0,    0,  730,  726, 1111,

     1084,  715,  718,  640, 1114, 1087,  400,  423,  340, 1115,
     1102,  165, 1562, 1120,  161, 1562, 1156, 1158, 1163, 1168,
     1173, 1178, 1183,   82, 1188, 1193, 1198, 1203
    } ;

static yyconst short int yy_def[829] =
    {   0,
      816,    1,  816,    3,  816,    5,  816,    7,  816,    9,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  817,  816,  816,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  819,  818,  818,  820,  816,  816,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  821,  820,
      820,  822,  816,  816,  816,  816,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,

      822,  822,  822,  823,  822,  822,  816,  816,  816,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  817,  816,  817,
      816,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      825,  816,  825,  819,  818,  826,  818,  820,  820,  816,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  821,  821,  820,

      821,  820,  827,  816,  816,  816,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  828,  827,  828,  827,  816,  816,  816,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  826,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,

      820,  820,  820,  820,  820,  820,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  828,  827,  828,  827,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,

      820,  820,  820,  820,  820,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  827,  827,  827,  827,  827,  827,  827,  827,

      827,  827,  827,  827,  827,  827,  827,  827,  827,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,

      824,  824,  824,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,

      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  816,  816,  816,
      816,  818,  818,  818,  818,  820,  820,  820,  820,  827,
      827,  827,  827,  824,  824,  824,  824,  816,  818,  820,

      827,  824,  816,  818,  820,  827,  824,  816,  818,  820,
      827,  824,  816,  820,  827,    0,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  816
    } ;

static yyconst short int yy_nxt[1611] =
    {   0,
       12,   13,   14,   13,   12,   12,   15,   16,   17,   12,
       12,   12,   18,   19,   12,   20,   12,   12,   12,   12,
       12,   21,   22,   23,   24,   12,   25,   26,   12,   12,
       12,   12,   27,   28,   12,   12,   12,   12,   12,   29,
       12,   30,   12,   31,   12,   12,   12,   32,   33,  130,
      130,  130,  130,  130,  130,  142,  149,  165,  179,  218,
      179,  175,  172,  173,  143,   34,  166,  203,  219,  135,
      171,  171,  172,  173,  158,  179,  171,  179,  412,  171,
      130,  130,  130,  130,  180,  130,  231,   35,   12,   13,
       14,   13,   36,   36,   15,   37,   38,   12,   36,   36,

       39,   40,   41,   42,   36,   36,   36,   36,   36,   43,
       44,   45,   46,   36,   47,   48,   36,   36,   36,   36,
       49,   50,   36,   36,   36,   36,   36,   51,   36,   52,
       36,   53,   36,   36,   36,   54,   55,  179,  179,  179,
      179,  179,  179,  179,  179,  181,  179,  179,  179,  179,
      179,  225,  179,   56,  179,  183,  179,  182,  179,  186,
      179,  199,  203,  199,  211,  184,  179,  190,  179,  185,
      204,  205,  206,  188,  813,   57,   58,   13,   59,   60,
       58,   58,   61,   62,   63,   58,   58,   58,   64,   65,
       58,   66,   58,   58,   58,   58,   58,   67,   68,   69,

       70,   58,   71,   72,   58,   58,   58,   58,   73,   74,
       58,   58,   58,   58,   58,   75,   58,   76,   58,   77,
       58,   58,   58,   78,   79,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  203,  179,  130,  130,  130,  243,
      203,   80,  200,  130,  205,  130,  701,  148,  244,  187,
      148,  172,  173,  189,  313,  185,  228,  229,  230,  195,
      179,  191,  179,   81,   82,   83,   84,   85,   82,   82,
       86,   87,   88,   82,   82,   82,   89,   90,   82,   91,
       82,   82,   82,   82,   82,   92,   93,   94,   95,   82,
       96,   97,   82,   82,   82,   82,   98,   99,   82,   82,

       82,   82,   82,  100,   82,  101,   82,  102,   82,   82,
       82,  103,  104,  179,  249,  179,  130,  130,  130,  130,
      229,  130,  130,  130,  130,  263,  282,  236,  179,  105,
      179,  171,  171,  172,  173,  181,  203,  171,  264,  283,
      171,  148,  148,  308,  148,  197,  199,  148,  199,  813,
      148,  106,   12,  107,  108,  109,   12,   12,   15,  110,
      111,   12,  112,  112,  113,  114,  112,  115,  112,  112,
      112,  112,  112,  116,  117,  118,  119,  112,  120,  121,
      112,  112,  112,  112,  122,  123,  112,  112,  112,  112,
      112,  124,  112,  125,  112,  126,  112,  112,  112,  127,

       33,  150,  176,  203,  179,  179,  179,  179,  179,  179,
      179,  179,  201,  226,  150,  150,  176,  128,  130,  130,
      130,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      289,  179,  813,  192,  291,  812,  318,  146,  169,  129,
      151,  177,  193,  203,  194,  290,  293,  196,  196,  222,
      247,  202,  227,  250,  151,  177,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  409,  295,
      179,  299,  179,  179,  294,  179,  203,  292,  179,  297,
      179,  296,  179,  179,  179,  179,  199,  179,  199,  179,
      199,  179,  199,  179,  201,  204,  205,  206,  298,  203,

      300,  301,  130,  130,  130,  130,  205,  130,  309,  203,
      306,  203,  203,  203,  302,  203,  303,  203,  319,  203,
      311,  203,  203,  203,  315,  305,  304,  203,  203,  314,
      203,  203,  310,  202,  312,  150,  317,  316,  224,  224,
      148,  148,  203,  148,  148,  328,  228,  229,  230,  320,
      321,  342,  406,  327,  130,  130,  130,  130,  229,  130,
      203,  323,  360,  322,  343,  380,  179,  308,  179,  361,
      325,  324,  381,  362,  250,  203,  382,  148,  148,  179,
      148,  179,  203,  148,  329,  203,  148,  387,  179,  179,
      179,  179,  413,  179,  179,  179,  179,  179,  410,  179,

      179,  407,  179,  389,  203,  388,  391,  392,  393,  179,
      394,  179,  203,  179,  390,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  203,  203,  395,  203,  203,  414,  203,  203,
      203,  203,  396,  417,  203,  203,  411,  408,  224,  203,
      148,  203,  328,  148,  399,  403,  398,  203,  224,  397,
      148,  400,  437,  148,  402,  401,  498,  415,  404,  438,
      418,  405,  422,  439,  179,  809,  179,  419,  416,  203,
      647,  420,  421,  423,  179,  476,  179,  424,  179,  203,
      179,  329,  499,  179,  179,  179,  179,  179,  648,  179,

      477,  479,  480,  179,  179,  179,  179,  179,  179,  179,
      179,  500,  179,  478,  179,  484,  482,  179,  481,  179,
      179,  179,  179,  179,  203,  179,  483,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  203,  203,  203,  203,
      494,  203,  203,  203,  203,  496,  497,  493,  203,  203,
      501,  203,  485,  808,  486,  203,  203,  487,  539,  807,
      488,  535,  489,  490,  491,  536,  495,  492,  554,  179,
      804,  179,  540,  550,  803,  802,  179,  551,  179,  537,
      503,  504,  555,  502,  557,  507,  506,  505,  508,  509,
      179,  552,  179,  179,  179,  179,  179,  179,  179,  179,

      179,  558,  179,  556,  179,  179,  560,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  561,  179,  559,  203,  179,  203,  179,  203,  203,
      203,  203,  203,  203,  574,  203,  575,  573,  577,  203,
      203,  179,  203,  179,  562,  203,  203,  564,  567,  563,
      578,  566,  568,  602,  570,  576,  565,  571,  598,  203,
      203,  179,  599,  179,  203,  203,  569,  603,  579,  629,
      581,  572,  643,  580,  584,  583,  600,  588,  585,  587,
      203,  179,  582,  179,  179,  179,  179,  179,  179,  649,
      179,  589,  586,  630,  203,  179,  631,  179,  179,  179,

      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  203,  203,
      203,  203,  203,  646,  203,  203,  644,  633,  645,  203,
      179,  635,  179,  203,  203,  650,  638,  637,  632,  179,
      634,  179,  639,  641,  636,  203,  203,  642,  652,  179,
      640,  179,  651,  179,  653,  179,  203,  656,  655,  690,
      179,  203,  179,  654,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  702,  179,  179,  179,
      179,  179,  203,  179,  203,  203,  703,  203,  203,  704,
      179,  179,  179,  179,  799,  798,  706,  705,  179,  179,

      179,  179,  691,  203,  695,  692,  797,  203,  693,  694,
      179,  179,  179,  179,  696,  697,  698,  203,  179,  699,
      179,  745,  203,  700,  707,  709,  708,  710,  203,  203,
      711,  748,  179,  746,  179,  203,  179,  747,  179,  179,
      179,  179,  179,  203,  203,  757,  758,  203,  756,  749,
      203,  203,  203,  750,  759,  179,  179,  179,  179,  203,
      179,  751,  179,  179,  179,  179,  179,  760,  179,  203,
      179,  753,  762,  203,  179,  752,  179,  761,  179,  764,
      179,  793,  754,  755,  790,  203,  763,  786,  203,  179,
      765,  179,  179,  766,  179,  179,  179,  179,  179,  796,

      791,  787,  179,  203,  179,  788,  179,  179,  179,  179,
      792,  815,  179,  801,  179,  179,  179,  179,  179,  789,
      795,  179,  811,  179,  814,  794,  203,  203,  806,  203,
      203,  203,  203,  203,  785,  784,  800,  783,  782,  781,
      780,  779,  778,  777,  776,  775,  774,  773,  772,  810,
      771,  770,  769,  768,  767,  805,  148,  744,  148,  148,
      148,  152,  152,  174,  174,  174,  174,  174,  178,  743,
      178,  178,  178,  198,  742,  198,  198,  198,  203,  741,
      740,  203,  203,  224,  739,  224,  224,  224,  171,  171,
      171,  171,  171,  288,  738,  288,  288,  288,  307,  737,

      736,  307,  307,  326,  735,  326,  326,  326,  734,  733,
      732,  731,  730,  729,  728,  727,  726,  725,  724,  723,
      722,  721,  720,  719,  718,  717,  716,  715,  714,  713,
      712,  203,  203,  203,  689,  688,  687,  686,  685,  684,
      683,  682,  681,  680,  679,  678,  677,  676,  675,  674,
      673,  672,  671,  670,  669,  668,  667,  666,  665,  664,
      663,  662,  661,  660,  659,  658,  657,  606,  605,  604,
      203,  203,  203,  628,  627,  626,  625,  624,  623,  622,
      621,  620,  619,  618,  606,  605,  604,  617,  616,  615,
      614,  613,  612,  611,  610,  609,  608,  607,  606,  605,

      604,  601,  597,  596,  595,  594,  593,  592,  528,  591,
      526,  525,  590,  203,  203,  203,  553,  549,  548,  547,
      546,  545,  544,  528,  543,  526,  542,  525,  541,  538,
      534,  533,  532,  531,  530,  529,  528,  527,  526,  525,
      524,  523,  522,  521,  520,  519,  518,  517,  516,  452,
      515,  514,  513,  448,  447,  512,  511,  510,  203,  203,
      475,  474,  473,  472,  471,  470,  469,  468,  452,  467,
      466,  465,  448,  447,  464,  463,  462,  461,  460,  459,
      458,  457,  456,  455,  454,  453,  452,  451,  450,  449,
      448,  447,  446,  445,  444,  443,  442,  441,  440,  436,

      435,  434,  433,  432,  431,  430,  429,  428,  427,  426,
      425,  203,  203,  386,  385,  384,  383,  379,  378,  377,
      376,  375,  374,  373,  372,  371,  370,  369,  368,  367,
      366,  365,  364,  363,  359,  358,  357,  356,  355,  354,
      353,  352,  351,  350,  349,  348,  347,  346,  345,  344,
      341,  340,  339,  338,  337,  336,  335,  334,  333,  332,
      331,  330,  232,  203,  287,  286,  285,  284,  281,  280,
      279,  278,  277,  276,  275,  274,  273,  272,  271,  270,
      269,  153,  268,  267,  266,  265,  262,  261,  260,  259,
      258,  257,  256,  255,  254,  253,  252,  251,  131,  248,

      247,  246,  245,  242,  241,  240,  239,  238,  237,  236,
      235,  234,  233,  232,  223,  222,  221,  220,  217,  216,
      215,  214,  213,  212,  211,  210,  209,  208,  207,  170,
      169,  168,  167,  164,  163,  162,  161,  160,  159,  158,
      157,  156,  155,  154,  153,  147,  146,  145,  144,  141,
      140,  139,  138,  137,  136,  135,  134,  133,  132,  131,
      816,   11,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,

      816,  816,  816,  816,  816,  816,  816,  816,  816,  816
    } ;

static yyconst short int yy_chk[1611] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    2,   13,
       13,   13,   14,   14,   14,   28,   34,   50,   58,   99,
       58,   56,  171,  171,   28,    2,   50,  315,   99,   34,
       55,   55,   55,   55,   56,   61,   55,   61,  315,   55,
       59,   59,   59,   60,   60,   60,  824,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    4,   62,   63,   62,
       63,   64,   65,   64,   65,   63,   66,   67,   66,   67,
       68,  105,   68,    4,   70,   65,   70,   64,   72,   68,
       72,   79,  815,   79,  105,   66,  178,   72,  178,   67,
       83,   83,   83,   70,  812,    4,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    6,   69,   71,   69,   71,   73,
       76,   73,   76,   80,  212,   80,   84,   84,   84,  123,
      646,    6,   80,   85,   85,   85,  646,  104,  123,   69,
      104,  173,  173,   71,  212,   80,  107,  107,  107,   76,
      179,   73,  179,    6,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    8,   78,  128,   78,  108,  108,  108,  109,
      109,  109,  130,  130,  130,  144,  167,  128,  181,    8,
      181,  174,  174,  174,  174,  181,  207,  174,  144,  167,
      174,  176,  176,  207,  176,   78,  198,  176,  198,  809,
      176,    8,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

       10,   35,   57,  217,   74,   75,   74,   75,   77,   81,
       77,   81,   81,  106,  129,  151,  177,   10,  180,  180,
      180,  182,  183,  182,  183,  184,  186,  184,  186,  192,
      182,  192,  808,   74,  184,  807,  217,   35,   57,   10,
       35,   57,   74,  312,   75,  183,  186,   77,   81,  106,
      129,   81,  106,  129,  151,  177,  185,  187,  185,  187,
      188,  189,  188,  189,  190,  191,  190,  191,  312,  188,
      193,  192,  193,  194,  187,  194,  218,  185,  195,  190,
      195,  189,  196,  197,  196,  197,  199,  200,  199,  200,
      201,  202,  201,  202,  202,  204,  204,  204,  191,  208,

      193,  194,  205,  205,  205,  206,  206,  206,  208,  209,
      200,  210,  213,  211,  194,  214,  195,  215,  218,  219,
      210,  216,  220,  221,  214,  197,  196,  222,  223,  213,
      225,  309,  209,  202,  211,  250,  216,  215,  224,  226,
      224,  226,  227,  224,  226,  227,  228,  228,  228,  219,
      220,  245,  309,  225,  229,  229,  229,  230,  230,  230,
      308,  221,  263,  220,  245,  282,  289,  308,  289,  263,
      223,  222,  282,  263,  250,  310,  282,  288,  288,  290,
      288,  290,  316,  288,  227,  313,  288,  289,  291,  292,
      291,  292,  316,  293,  294,  293,  294,  295,  313,  295,

      296,  310,  296,  291,  320,  290,  293,  294,  295,  297,
      296,  297,  317,  298,  292,  298,  299,  300,  299,  300,
      301,  302,  301,  302,  303,  304,  303,  304,  305,  306,
      305,  306,  311,  314,  297,  319,  321,  317,  318,  322,
      324,  323,  298,  320,  325,  411,  314,  311,  326,  329,
      326,  580,  329,  326,  301,  303,  300,  581,  328,  299,
      328,  301,  342,  328,  302,  301,  411,  318,  304,  342,
      321,  305,  323,  342,  387,  804,  387,  321,  319,  412,
      580,  321,  322,  324,  388,  387,  388,  325,  389,  413,
      389,  329,  412,  390,  391,  390,  391,  392,  581,  392,

      388,  390,  391,  393,  394,  393,  394,  395,  396,  395,
      396,  413,  397,  389,  397,  395,  393,  398,  392,  398,
      399,  400,  399,  400,  407,  401,  394,  401,  405,  402,
      405,  402,  403,  404,  403,  404,  406,  409,  410,  415,
      407,  408,  414,  417,  418,  409,  410,  406,  419,  420,
      414,  421,  396,  803,  398,  423,  422,  399,  460,  802,
      400,  458,  401,  402,  403,  458,  408,  404,  475,  479,
      799,  479,  460,  473,  798,  794,  477,  473,  477,  458,
      417,  418,  475,  415,  477,  421,  420,  419,  422,  423,
      476,  473,  476,  478,  480,  478,  480,  481,  482,  481,

      482,  478,  483,  476,  483,  484,  482,  484,  485,  486,
      485,  486,  487,  488,  487,  488,  489,  491,  489,  491,
      490,  483,  490,  481,  493,  492,  494,  492,  495,  498,
      499,  500,  502,  503,  494,  504,  495,  493,  499,  505,
      506,  557,  508,  557,  485,  509,  507,  487,  490,  486,
      500,  489,  490,  523,  491,  498,  488,  492,  521,  793,
      582,  556,  521,  556,  573,  792,  490,  523,  502,  556,
      504,  492,  573,  503,  507,  506,  521,  509,  507,  508,
      579,  558,  505,  558,  560,  559,  560,  559,  561,  582,
      561,  509,  507,  559,  583,  562,  561,  562,  563,  564,

      563,  564,  565,  566,  565,  566,  567,  568,  567,  568,
      569,  570,  569,  570,  571,  572,  571,  572,  576,  585,
      578,  584,  586,  579,  587,  589,  576,  563,  578,  588,
      629,  565,  629,  791,  647,  583,  568,  567,  562,  630,
      564,  630,  569,  571,  566,  648,  649,  572,  585,  631,
      570,  631,  584,  632,  586,  632,  650,  589,  588,  632,
      633,  651,  633,  587,  634,  635,  634,  635,  636,  637,
      636,  637,  638,  639,  638,  639,  647,  641,  640,  641,
      640,  642,  652,  642,  653,  655,  648,  654,  656,  649,
      690,  691,  690,  691,  782,  778,  651,  650,  692,  693,

      692,  693,  633,  702,  637,  634,  775,  703,  635,  636,
      694,  695,  694,  695,  638,  639,  640,  701,  696,  641,
      696,  690,  704,  642,  652,  654,  653,  655,  705,  707,
      656,  693,  697,  691,  697,  706,  698,  692,  698,  699,
      700,  699,  700,  708,  709,  702,  703,  710,  701,  694,
      711,  764,  756,  695,  704,  745,  746,  745,  746,  758,
      747,  696,  747,  748,  749,  748,  749,  705,  750,  760,
      750,  698,  707,  790,  751,  697,  751,  706,  752,  709,
      752,  764,  699,  700,  756,  801,  708,  745,  806,  753,
      710,  753,  754,  711,  754,  755,  786,  755,  786,  771,

      758,  747,  787,  811,  787,  749,  788,  789,  788,  789,
      760,  811,  800,  790,  800,  805,  810,  805,  810,  753,
      769,  814,  806,  814,  810,  767,  766,  765,  801,  763,
      762,  761,  759,  757,  742,  738,  786,  736,  734,  731,
      727,  725,  723,  722,  721,  720,  719,  718,  717,  805,
      716,  715,  714,  713,  712,  800,  817,  689,  817,  817,
      817,  818,  818,  819,  819,  819,  819,  819,  820,  688,
      820,  820,  820,  821,  687,  821,  821,  821,  822,  686,
      685,  822,  822,  823,  684,  823,  823,  823,  825,  825,
      825,  825,  825,  826,  683,  826,  826,  826,  827,  682,

      681,  827,  827,  828,  680,  828,  828,  828,  679,  678,
      677,  676,  675,  674,  673,  672,  671,  670,  669,  668,
      667,  666,  665,  664,  663,  662,  661,  660,  659,  658,
      657,  645,  644,  643,  628,  627,  626,  625,  624,  623,
      622,  621,  620,  619,  618,  617,  616,  615,  614,  613,
      612,  611,  610,  609,  608,  607,  603,  602,  601,  600,
      599,  598,  597,  596,  595,  594,  593,  592,  591,  590,
      577,  575,  574,  555,  554,  553,  552,  551,  550,  549,
      548,  547,  546,  545,  544,  543,  541,  540,  539,  538,
      537,  536,  535,  534,  533,  532,  531,  530,  529,  527,

      524,  522,  520,  519,  518,  517,  516,  515,  514,  513,
      512,  511,  510,  501,  497,  496,  474,  472,  471,  470,
      469,  468,  467,  466,  465,  464,  463,  462,  461,  459,
      457,  456,  455,  454,  453,  451,  450,  449,  446,  445,
      444,  442,  441,  440,  439,  438,  437,  436,  434,  433,
      432,  431,  430,  429,  428,  427,  426,  425,  424,  416,
      385,  384,  383,  382,  381,  380,  379,  377,  376,  375,
      374,  373,  372,  371,  370,  369,  368,  367,  365,  364,
      363,  362,  361,  360,  359,  357,  356,  355,  354,  353,
      352,  351,  350,  349,  348,  346,  345,  344,  343,  341,

      340,  339,  338,  337,  336,  335,  334,  333,  332,  331,
      330,  327,  307,  286,  285,  284,  283,  281,  280,  279,
      278,  277,  276,  275,  274,  273,  272,  271,  270,  269,
      267,  266,  265,  264,  262,  261,  260,  259,  258,  257,
      256,  255,  254,  253,  252,  251,  249,  248,  247,  246,
      244,  243,  242,  241,  240,  239,  238,  237,  236,  235,
      234,  233,  232,  203,  175,  170,  169,  168,  166,  165,
      164,  163,  162,  161,  160,  159,  158,  157,  156,  155,
      154,  153,  149,  147,  146,  145,  143,  142,  141,  140,
      139,  138,  137,  136,  135,  134,  133,  132,  131,  127,

      126,  125,  124,  122,  121,  120,  119,  118,  117,  116,
      115,  114,  113,  111,  103,  102,  101,  100,   98,   97,
       96,   95,   94,   93,   92,   91,   90,   89,   88,   54,
       53,   52,   51,   49,   48,   47,   46,   45,   44,   43,
       42,   41,   40,   39,   38,   32,   31,   30,   29,   27,
       26,   25,   24,   23,   22,   21,   20,   19,   18,   17,
       11,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,

      816,  816,  816,  816,  816,  816,  816,  816,  816,  816
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#define INITIAL 0
#line 2 "levcomp.lpp"

// levcomp.l:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
// 
// Based loosely on NetHack's lev_comp.l

#include "AppHdr.h"
#include "levcomp.tab.h"
#include <cstring>

static bool alloced = false;

static void clean()
{
    if (yylval.text && alloced)
        free( (void*) yylval.text);
    yylval.text = NULL;
    alloced = false;
}

static void settext()
{
    clean();
    if ((yylval.text = strdup(yytext)))
        alloced = true;
}

#define MAPDEF 1

#define ARGUMENT 2

#define MNAME 3

#define KEYWORDS 4

#define YY_NEVER_INTERACTIVE 1
#line 1146 "levcomp.lex.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 41 "levcomp.lpp"


#line 1314 "levcomp.lex.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 817 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1562 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 43 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 45 "levcomp.lpp"
;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 47 "levcomp.lpp"
{
                        settext();
                        return MAP_LINE;
                    }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 52 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 54 "levcomp.lpp"
;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 56 "levcomp.lpp"
{ BEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 57 "levcomp.lpp"
return DEFAULT_DEPTH;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 58 "levcomp.lpp"
return DEPTH;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 59 "levcomp.lpp"
return ORIENT;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 60 "levcomp.lpp"
{ BEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 61 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 62 "levcomp.lpp"
return FLAGS;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 63 "levcomp.lpp"
{ BEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 64 "levcomp.lpp"
{ BEGIN(ARGUMENT); return SYMBOL; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 65 "levcomp.lpp"
{ BEGIN(MNAME); return MONS; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 67 "levcomp.lpp"
{ 
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 72 "levcomp.lpp"
;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 73 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 75 "levcomp.lpp"
{ 
                        settext();
                        return MONSTER_NAME; 
                    }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 80 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 81 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 82 "levcomp.lpp"
;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 84 "levcomp.lpp"
return PANDEMONIC;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 85 "levcomp.lpp"
return NO_HMIRROR;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 86 "levcomp.lpp"
return NO_VMIRROR;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 87 "levcomp.lpp"
return NO_ROTATE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 89 "levcomp.lpp"
return ENCOMPASS;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 90 "levcomp.lpp"
return NORTH;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 91 "levcomp.lpp"
return SOUTH;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 92 "levcomp.lpp"
return EAST;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 93 "levcomp.lpp"
return WEST;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 94 "levcomp.lpp"
return NORTHEAST;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 95 "levcomp.lpp"
return NORTHWEST;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 96 "levcomp.lpp"
return SOUTHEAST;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 97 "levcomp.lpp"
return SOUTHWEST;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 98 "levcomp.lpp"
return NORTH_DIS;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 100 "levcomp.lpp"
return DASH;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 101 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 103 "levcomp.lpp"
{
                        clean();
                        yylval.i = atoi(yytext);
                        return INTEGER;
                    }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 109 "levcomp.lpp"
{ 
                        BEGIN(INITIAL);
                        settext();
                        return STRING; 
                    }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 115 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 117 "levcomp.lpp"
;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 119 "levcomp.lpp"
return BAD_CHARACTER;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 121 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 1643 "levcomp.lex.cc"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(MAPDEF):
			case YY_STATE_EOF(ARGUMENT):
			case YY_STATE_EOF(MNAME):
			case YY_STATE_EOF(KEYWORDS):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 817 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 817 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 816);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');
	if ( yy_current_buffer->yy_at_bol )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef _WIN32
#include <unistd.h>
#else
#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 121 "levcomp.lpp"


int yywrap()
{
    clean();
    return 1;
}
