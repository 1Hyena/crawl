#line 2 "levcomp.lex.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvs/root/flex/flex/skel.c,v 1.2 2004/05/07 00:28:17 jkh Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 71
#define YY_END_OF_BUFFER 72
static yyconst short int yy_acclist[3264] =
    {   0,
        3,    3,   72,   70,   71,   64,   70,   71,   65,   71,
       70,   71,   68,   70,   71,   66,   70,   71,   67,   70,
       71,   62,   70,   71,   61,   70,   71,   63,   70,   71,
       70,   71,   70,   71,   70,   71,   70,   71,   70,   71,
       70,   71,   70,   71,   70,   71,   70,   71,   70,   71,
       70,   71,   70,   71,   70,   71,   70,   71,   70,   71,
       70,   71,   70,   71,   70,   71,   70,   71,   70,   71,
       70,   71,   70,   71,   64,   70,   71,   18,   70,   71,
       70,   71,   70,   71,   64,   70,   71,    3,   70,   71,
        3,   66,   70,   71,    3,   67,   70,   71,    3,   61,

       70,   71,    3,   63,   70,   71,    3,   70,   71,    3,
       70,   71,    3,   70,   71,    3,   70,   71,    3,   70,
       71,    3,   70,   71,    3,   70,   71,    3,   70,   71,
        3,   70,   71,    3,   70,   71,    3,   70,   71,    3,
       70,   71,    3,   70,   71,    3,   70,   71,    3,   70,
       71,    3,   70,   71,    3,   70,   71,    3,   70,   71,
        3,   70,   71,    3,   70,   71,    3,   70,   71,    3,
       70,   71,   64,   70,   71,    3,   18,   70,   71,    3,
       70,   71,    3,   70,   71,    3,   70,   71,   70,   71,
       17,   65,   71,   70,   71,   68,   70,   71,   66,   70,

       71,   67,   70,   71,   62,   70,   71,   61,   70,   71,
       63,   70,   71,   70,   71,   70,   71,   70,   71,   70,
       71,   70,   71,   70,   71,   70,   71,   70,   71,   70,
       71,   70,   71,   70,   71,   70,   71,   70,   71,   70,
       71,   70,   71,   70,   71,   70,   71,   70,   71,   70,
       71,   70,   71,   70,   71,   70,   71,   18,   70,   71,
       70,   71,   70,   71,   70,   71,   15,   64,   70,   71,
       12,   65,   71,   15,   70,   71,   68,   70,   71,   66,
       70,   71,   67,   70,   71,   14,   62,   70,   71,   61,
       70,   71,   63,   70,   71,   70,   71,   70,   71,   70,

       71,   70,   71,   70,   71,   70,   71,   70,   71,   70,
       71,   70,   71,   70,   71,   70,   71,   70,   71,   70,
       71,   70,   71,   70,   71,   70,   71,   70,   71,   70,
       71,   70,   71,   70,   71,   70,   71,   70,   71,   15,
       64,   70,   71,   18,   70,   71,   70,   71,   70,   71,
        6,   64,   70,   71,    7,   65,   71,   70,   71,    5,
       61,   70,   71,    5,   63,   70,   71,    5,   70,   71,
        5,   70,   71,    5,   70,   71,    5,   70,   71,    5,
       70,   71,    5,   70,   71,    5,   70,   71,    5,   70,
       71,    5,   70,   71,    5,   70,   71,    5,   70,   71,

        5,   70,   71,    5,   70,   71,    5,   70,   71,    5,
       70,   71,    5,   70,   71,    5,   70,   71,    5,   70,
       71,    5,   70,   71,    5,   70,   71,    5,   70,   71,
        5,   70,   71,    6,   64,   70,   71,    5,   70,   71,
        5,   70,   71,   70,   71,   10,   64,   70,   71,   11,
       65,   71,   70,   71,   68,   70,   71,   66,   70,   71,
       67,   70,   71,    9,   62,   70,   71,   61,   70,   71,
       63,   70,   71,   70,   71,   70,   71,   70,   71,   70,
       71,   70,   71,   70,   71,   70,   71,   70,   71,   70,
       71,   70,   71,   70,   71,   70,   71,   70,   71,   70,

       71,   70,   71,   70,   71,   70,   71,   70,   71,   70,
       71,   70,   71,   70,   71,   70,   71,   10,   64,   70,
       71,   18,   70,   71,   70,   71,   70,   71,   64,   65,
       63,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   64,   18,
       18,   69,   69,   69,    4,    4,   64,    3,    3,   63,
        3,   69,    3,   69,    3,   69,    3,   69,    3,   69,
        3,   69,    3,   69,    3,   69,    3,   69,    3,   69,
        3,   69,    3,   69,    3,   69,    3,   69,    3,   69,

        3,   69,    3,   69,    3,   69,    3,   69,    3,   69,
        3,   69,    3,   69,    3,   69,    3,   69,    3,   69,
        3,   69,    3,   69,    4,   64,    4,   18,   18,    2,
       18,    3,   18,    3,   69,    3,   69,    3,   69,    3,
       69,    3,   69,   16,   17,   65,   16,   63,   16,   69,
       16,   69,   16,   69,   16,   69,   16,   69,   16,   69,
       16,   69,   16,   69,   16,   69,   16,   69,   16,   69,
       16,   69,   16,   69,   16,   69,   16,   69,   16,   69,
       16,   69,   16,   69,   16,   69,   16,   69,   16,   69,
       16,   69,   16,   69,   16,   69,   16,   69,   16,   69,

       16,   69,   16,   18,   18,   16,   69,   16,   69,   16,
       69,   15,   64,   12,   15,   12,   65,   63,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   15,   64,   18,   69,   69,
       69,    6,   64,    7,    7,   65,    5,    5,   63,    5,
       69,    5,   69,    5,   69,    5,   69,    5,   69,    5,
       69,    5,   69,    5,   69,    5,   69,    5,   69,    5,
       69,    5,   69,    5,   69,    5,   69,    5,   69,    5,
       69,    5,   69,    5,   69,    5,   69,    5,   69,    5,

       69,    5,   69,    5,   69,    5,   69,    5,   69,    5,
       69,    5,   69,    6,   64,    5,   69,    5,   69,    5,
       69,   10,   64,   11,   11,   65,   63,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   10,   64,   18,   69,   69,   69,
       69,   69,   69,   69,   69,   40,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   19,   69,    3,   69,    3,   69,    3,

       69,    3,   69,    3,   69,    3,   40,   69,    3,   69,
        3,   69,    3,   69,    3,   69,    3,   69,    3,   69,
        3,   69,    3,   69,    3,   69,    3,   69,    3,   69,
        3,   69,    3,   69,    3,   69,    3,   69,    3,   69,
        3,   69,    3,   69,    3,   69,    3,   69,    3,   69,
        3,   69,    3,   69,    3,   69,    3,   69,    3,   69,
        3,   40,   69,    3,   19,   69,    3,   69,   16,   69,
       16,   69,   16,   69,   16,   69,   16,   69,   16,   40,
       69,   16,   69,   16,   69,   16,   69,   16,   69,   16,
       69,   16,   69,   16,   69,   16,   69,   16,   69,   16,

       69,   16,   69,   16,   69,   16,   69,   16,   69,   16,
       69,   16,   69,   16,   69,   16,   69,   16,   69,   16,
       69,   16,   69,   16,   69,   16,   69,   16,   69,   16,
       69,   16,   69,   16,   19,   69,   13,   13,   63,   13,
       69,   13,   69,   13,   69,   13,   69,   13,   69,   13,
       69,   13,   40,   69,   13,   69,   13,   69,   13,   69,
       13,   69,   13,   69,   13,   69,   13,   69,   13,   69,
       13,   69,   13,   69,   13,   69,   13,   69,   13,   69,
       13,   69,   13,   69,   13,   69,   13,   69,   13,   69,
       13,   69,   13,   69,   13,   69,   13,   69,   13,   69,

       13,   69,   13,   69,   13,   69,   13,   18,   13,   19,
       69,   13,   69,   13,   69,   13,   69,    5,   69,    5,
       69,    5,   69,    5,   69,    5,   69,    5,   40,   69,
        5,   69,    5,   69,    5,   69,    5,   69,    5,   69,
        5,   69,    5,   69,    5,   69,    5,   69,    5,   69,
        5,   69,    5,   69,    5,   69,    5,   69,    5,   69,
        5,   69,    5,   69,    5,   69,    5,   69,    5,   69,
        5,   69,    5,   69,    5,   69,    5,   69,    5,   69,
        5,   69,    5,   19,   69,    8,    8,   63,    8,   69,
        8,   69,    8,   69,    8,   69,    8,   69,    8,   69,

        8,   40,   69,    8,   69,    8,   69,    8,   69,    8,
       69,    8,   69,    8,   69,    8,   69,    8,   69,    8,
       69,    8,   69,    8,   69,    8,   69,    8,   69,    8,
       69,    8,   69,    8,   69,    8,   69,    8,   69,    8,
       69,    8,   69,    8,   69,    8,   69,    8,   69,    8,
       69,    8,   69,    8,   69,    8,   18,    8,   19,   69,
        8,   69,    8,   69,    8,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       54,   69,   69,   69,   69,   69,   69,   69,   69,   69,

       55,   69,    3,   69,    3,   69,    3,   69,    3,   69,
        3,   69,    3,   69,    3,   69,    3,   69,    3,   69,
        3,   69,    3,   69,    3,   69,    3,   69,    3,   69,
        3,   69,    3,   69,    3,   69,    3,   69,    3,   69,
        3,   69,    3,   69,    3,   69,    3,   69,    3,   69,
        3,   54,   69,    3,   69,    3,   69,    3,   69,    3,
       69,    3,   69,    3,   69,    3,   69,    3,   69,    3,
       55,   69,    3,   69,    3,   69,   16,   69,   16,   69,
       16,   69,   16,   69,   16,   69,   16,   69,   16,   69,
       16,   69,   16,   69,   16,   69,   16,   69,   16,   69,

       16,   69,   16,   69,   16,   69,   16,   69,   16,   69,
       16,   69,   16,   69,   16,   69,   16,   69,   16,   69,
       16,   69,   16,   69,   16,   54,   69,   16,   69,   16,
       69,   16,   69,   16,   69,   16,   69,   16,   69,   16,
       69,   16,   69,   16,   55,   69,   13,   69,   13,   69,
       13,   69,   13,   69,   13,   69,   13,   69,   13,   69,
       13,   69,   13,   69,   13,   69,   13,   69,   13,   69,
       13,   69,   13,   69,   13,   69,   13,   69,   13,   69,
       13,   69,   13,   69,   13,   69,   13,   69,   13,   69,
       13,   69,   13,   69,   13,   54,   69,   13,   69,   13,

       69,   13,   69,   13,   69,   13,   69,   13,   69,   13,
       69,   13,   69,   13,   55,   69,    5,   69,    5,   69,
        5,   69,    5,   69,    5,   69,    5,   69,    5,   69,
        5,   69,    5,   69,    5,   69,    5,   69,    5,   69,
        5,   69,    5,   69,    5,   69,    5,   69,    5,   69,
        5,   69,    5,   69,    5,   69,    5,   69,    5,   69,
        5,   69,    5,   69,    5,   54,   69,    5,   69,    5,
       69,    5,   69,    5,   69,    5,   69,    5,   69,    5,
       69,    5,   69,    5,   55,   69,    8,   69,    8,   69,
        8,   69,    8,   69,    8,   69,    8,   69,    8,   69,

        8,   69,    8,   69,    8,   69,    8,   69,    8,   69,
        8,   69,    8,   69,    8,   69,    8,   69,    8,   69,
        8,   69,    8,   69,    8,   69,    8,   69,    8,   69,
        8,   69,    8,   69,    8,   54,   69,    8,   69,    8,
       69,    8,   69,    8,   69,    8,   69,    8,   69,    8,
       69,    8,   69,    8,   55,   69,   69,   69,   69,   69,
       34,   69,   69,   69,   69,   69,   30,   39,   69,   29,
       69,   20,   69,   69,   69,   69,   69,   69,   69,   69,
       27,   69,   69,   60,   69,   69,   69,   69,   52,   69,
       69,   53,   69,    3,   69,    3,   69,    3,   69,    3,

       69,    3,   69,    3,   69,    3,   69,    3,   69,    3,
       69,    3,   39,   69,    3,   69,    3,   69,    3,   69,
        3,   69,    3,   69,    3,   69,    3,   69,    3,   69,
        3,   69,    3,   69,    3,   69,    3,   60,   69,    3,
       69,    3,   69,    3,   69,    3,   52,   69,    3,   69,
        3,   53,   69,    3,   69,    3,   69,   16,   69,   16,
       69,   16,   69,   16,   69,   16,   34,   16,   69,   16,
       69,   16,   69,   16,   69,   16,   69,   16,   30,   16,
       39,   69,   16,   29,   16,   69,   16,   20,   16,   69,
       16,   69,   16,   69,   16,   69,   16,   69,   16,   69,

       16,   69,   16,   69,   16,   27,   16,   69,   16,   69,
       16,   60,   69,   16,   69,   16,   69,   16,   69,   16,
       52,   69,   16,   69,   16,   53,   69,   13,   69,   13,
       69,   13,   69,   13,   69,   13,   34,   13,   69,   13,
       69,   13,   69,   13,   69,   13,   69,   13,   30,   13,
       39,   69,   13,   29,   13,   69,   13,   20,   13,   69,
       13,   69,   13,   69,   13,   69,   13,   69,   13,   69,
       13,   69,   13,   69,   13,   27,   13,   69,   13,   69,
       13,   60,   69,   13,   69,   13,   69,   13,   69,   13,
       52,   69,   13,   69,   13,   53,   69,    5,   69,    5,

       69,    5,   69,    5,   69,    5,   69,    5,   69,    5,
       69,    5,   69,    5,   69,    5,   39,   69,    5,   69,
        5,   69,    5,   69,    5,   69,    5,   69,    5,   69,
        5,   69,    5,   69,    5,   69,    5,   69,    5,   69,
        5,   60,   69,    5,   69,    5,   69,    5,   69,    5,
       52,   69,    5,   69,    5,   53,   69,    8,   69,    8,
       69,    8,   69,    8,   69,    8,   34,    8,   69,    8,
       69,    8,   69,    8,   69,    8,   69,    8,   30,    8,
       39,   69,    8,   29,    8,   69,    8,   20,    8,   69,
        8,   69,    8,   69,    8,   69,    8,   69,    8,   69,

        8,   69,    8,   69,    8,   27,    8,   69,    8,   69,
        8,   60,   69,    8,   69,    8,   69,    8,   69,    8,
       52,   69,    8,   69,    8,   53,   69,   69,   69,   69,
       22,   69,   69,   69,   26,   69,   69,   69,   24,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,    3,   69,    3,   69,    3,
       69,    3,   69,    3,   69,    3,   69,    3,   69,    3,
       69,    3,   69,    3,   69,    3,   69,    3,   69,    3,
       69,    3,   69,    3,   69,    3,   69,    3,   69,    3,
       69,    3,   69,    3,   69,    3,   69,    3,   69,    3,

       69,    3,   69,    3,   69,    1,    3,   69,   16,   69,
       16,   69,   16,   69,   16,   22,   16,   69,   16,   69,
       16,   69,   16,   26,   16,   69,   16,   69,   16,   69,
       16,   24,   16,   69,   16,   69,   16,   69,   16,   69,
       16,   69,   16,   69,   16,   69,   16,   69,   16,   69,
       16,   69,   16,   69,   16,   69,   16,   69,   16,   69,
       16,   69,   16,   69,   13,   69,   13,   69,   13,   69,
       13,   22,   13,   69,   13,   69,   13,   69,   13,   26,
       13,   69,   13,   69,   13,   69,   13,   24,   13,   69,
       13,   69,   13,   69,   13,   69,   13,   69,   13,   69,

       13,   69,   13,   69,   13,   69,   13,   69,   13,   69,
       13,   69,   13,   69,   13,   69,   13,   69,   13,   69,
        5,   69,    5,   69,    5,   69,    5,   69,    5,   69,
        5,   69,    5,   69,    5,   69,    5,   69,    5,   69,
        5,   69,    5,   69,    5,   69,    5,   69,    5,   69,
        5,   69,    5,   69,    5,   69,    5,   69,    5,   69,
        5,   69,    5,   69,    5,   69,    5,   69,    5,   69,
        8,   69,    8,   69,    8,   69,    8,   22,    8,   69,
        8,   69,    8,   69,    8,   26,    8,   69,    8,   69,
        8,   69,    8,   24,    8,   69,    8,   69,    8,   69,

        8,   69,    8,   69,    8,   69,    8,   69,    8,   69,
        8,   69,    8,   69,    8,   69,    8,   69,    8,   69,
        8,   69,    8,   69,    8,   69,   35,   69,   25,   33,
       69,   69,   69,   69,   69,   69,   23,   69,   41,   69,
       69,   69,   28,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,    3,   69,    3,   33,   69,    3,   69,
        3,   69,    3,   69,    3,   69,    3,   69,    3,   69,
        3,   69,    3,   69,    3,   69,    3,   69,    3,   69,
        3,   69,    3,   69,    3,   69,    3,   69,    3,   69,
        3,   69,    3,   69,    3,   69,   16,   35,   16,   69,

       16,   25,   16,   33,   69,   16,   69,   16,   69,   16,
       69,   16,   69,   16,   69,   16,   23,   16,   69,   16,
       41,   16,   69,   16,   69,   16,   69,   16,   28,   16,
       69,   16,   69,   16,   69,   16,   69,   16,   69,   16,
       69,   16,   69,   16,   69,   16,   69,   16,   69,   13,
       35,   13,   69,   13,   25,   13,   33,   69,   13,   69,
       13,   69,   13,   69,   13,   69,   13,   69,   13,   23,
       13,   69,   13,   41,   13,   69,   13,   69,   13,   69,
       13,   28,   13,   69,   13,   69,   13,   69,   13,   69,
       13,   69,   13,   69,   13,   69,   13,   69,   13,   69,

       13,   69,    5,   69,    5,   33,   69,    5,   69,    5,
       69,    5,   69,    5,   69,    5,   69,    5,   69,    5,
       69,    5,   69,    5,   69,    5,   69,    5,   69,    5,
       69,    5,   69,    5,   69,    5,   69,    5,   69,    5,
       69,    5,   69,    5,   69,    8,   35,    8,   69,    8,
       25,    8,   33,   69,    8,   69,    8,   69,    8,   69,
        8,   69,    8,   69,    8,   23,    8,   69,    8,   41,
        8,   69,    8,   69,    8,   69,    8,   28,    8,   69,
        8,   69,    8,   69,    8,   69,    8,   69,    8,   69,
        8,   69,    8,   69,    8,   69,    8,   69,   69,   69,

       69,   69,   69,   45,   69,   69,   69,   69,   31,   69,
       69,   69,   69,   69,   69,   69,   69,   69,    3,   69,
        3,   69,    3,   69,    3,   69,    3,   69,    3,   45,
       69,    3,   69,    3,   69,    3,   69,    3,    3,   69,
        3,   69,    3,   69,    3,   69,    3,   69,    3,   69,
        3,   69,    3,   69,    3,   69,   16,   69,   16,   69,
       16,   69,   16,   69,   16,   69,   16,   45,   69,   16,
       69,   16,   69,   16,   69,   16,   31,   16,   16,   69,
       16,   69,   16,   69,   16,   69,   16,   69,   16,   69,
       16,   69,   16,   69,   16,   69,   13,   69,   13,   69,

       13,   69,   13,   69,   13,   69,   13,   45,   69,   13,
       69,   13,   69,   13,   69,   13,   31,   13,   13,   69,
       13,   69,   13,   69,   13,   69,   13,   69,   13,   69,
       13,   69,   13,   69,   13,   69,    5,   69,    5,   69,
        5,   69,    5,   69,    5,   69,    5,   45,   69,    5,
       69,    5,   69,    5,   69,    5,    5,   69,    5,   69,
        5,   69,    5,   69,    5,   69,    5,   69,    5,   69,
        5,   69,    5,   69,    8,   69,    8,   69,    8,   69,
        8,   69,    8,   69,    8,   45,   69,    8,   69,    8,
       69,    8,   69,    8,   31,    8,    8,   69,    8,   69,

        8,   69,    8,   69,    8,   69,    8,   69,    8,   69,
        8,   69,    8,   69,   69,   69,   69,   44,   69,   69,
       69,   69,   51,   69,   69,   50,   69,   69,   56,   69,
       57,   69,   69,   58,   69,   59,   69,    3,   69,    3,
       69,    3,   69,    3,   69,    3,   69,    3,   69,    3,
       69,    3,    3,   51,   69,    3,   69,    3,   50,   69,
        3,   69,    3,   56,   69,    3,   57,   69,    3,   69,
        3,   58,   69,    3,   59,   69,   16,   69,   16,   69,
       16,   69,   16,   44,   16,   69,   16,   69,   16,   69,
       16,   69,   16,   16,   51,   69,   16,   69,   16,   50,

       69,   16,   69,   16,   56,   69,   16,   57,   69,   16,
       69,   16,   58,   69,   16,   59,   69,   13,   69,   13,
       69,   13,   69,   13,   44,   13,   69,   13,   69,   13,
       69,   13,   69,   13,   13,   51,   69,   13,   69,   13,
       50,   69,   13,   69,   13,   56,   69,   13,   57,   69,
       13,   69,   13,   58,   69,   13,   59,   69,    5,   69,
        5,   69,    5,   69,    5,   69,    5,   69,    5,   69,
        5,   69,    5,    5,   51,   69,    5,   69,    5,   50,
       69,    5,   69,    5,   56,   69,    5,   57,   69,    5,
       69,    5,   58,   69,    5,   59,   69,    8,   69,    8,

       69,    8,   69,    8,   44,    8,   69,    8,   69,    8,
       69,    8,   69,    8,    8,   51,   69,    8,   69,    8,
       50,   69,    8,   69,    8,   56,   69,    8,   57,   69,
        8,   69,    8,   58,   69,    8,   59,   69,   32,   69,
       43,   69,   69,   69,   69,   48,   69,   49,   69,   47,
       69,    3,   69,    3,   69,    3,   69,    3,   69,    3,
       69,    3,    3,   48,   69,    3,   49,   69,    3,   47,
       69,   16,   32,   16,   69,   16,   43,   16,   69,   16,
       69,   16,   69,   16,   69,   16,   16,   48,   69,   16,
       49,   69,   16,   47,   69,   13,   32,   13,   69,   13,

       43,   13,   69,   13,   69,   13,   69,   13,   69,   13,
       13,   48,   69,   13,   49,   69,   13,   47,   69,    5,
       69,    5,   69,    5,   69,    5,   69,    5,   69,    5,
        5,   48,   69,    5,   49,   69,    5,   47,   69,    8,
       32,    8,   69,    8,   43,    8,   69,    8,   69,    8,
       69,    8,   69,    8,    8,   48,   69,    8,   49,   69,
        8,   47,   69,   46,   69,   69,   42,   69,   36,    3,
       46,   69,    3,   69,    3,   69,    3,   16,   46,   69,
       16,   69,   16,   42,   16,   69,   16,   36,   16,   13,
       46,   69,   13,   69,   13,   42,   13,   69,   13,   36,

       13,    5,   46,   69,    5,   69,    5,   69,    5,    8,
       46,   69,    8,   69,    8,   42,    8,   69,    8,   36,
        8,   69,   38,    3,   69,    3,   16,   69,   16,   38,
       16,   13,   69,   13,   38,   13,    5,   69,    5,    8,
       69,    8,   38,    8,   37,    3,   16,   37,   16,   13,
       37,   13,    5,    8,   37,    8,   21,   16,   21,   13,
       21,    8,   21
    } ;

static yyconst short int yy_accept[1715] =
    {   0,
        1,    1,    1,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    4,    6,    9,   11,   13,   16,   19,
       22,   25,   28,   31,   33,   35,   37,   39,   41,   43,
       45,   47,   49,   51,   53,   55,   57,   59,   61,   63,
       65,   67,   69,   71,   73,   75,   78,   81,   83,   85,
       88,   91,   95,   99,  103,  107,  110,  113,  116,  119,
      122,  125,  128,  131,  134,  137,  140,  143,  146,  149,
      152,  155,  158,  161,  164,  167,  170,  173,  176,  180,
      183,  186,  189,  191,  194,  196,  199,  202,  205,  208,
      211,  214,  216,  218,  220,  222,  224,  226,  228,  230,

      232,  234,  236,  238,  240,  242,  244,  246,  248,  250,
      252,  254,  256,  258,  261,  263,  265,  267,  271,  274,
      277,  280,  283,  286,  290,  293,  296,  298,  300,  302,
      304,  306,  308,  310,  312,  314,  316,  318,  320,  322,
      324,  326,  328,  330,  332,  334,  336,  338,  340,  344,
      347,  349,  351,  355,  358,  360,  364,  368,  371,  374,
      377,  380,  383,  386,  389,  392,  395,  398,  401,  404,
      407,  410,  413,  416,  419,  422,  425,  428,  431,  434,
      438,  441,  444,  446,  450,  453,  455,  458,  461,  464,
      468,  471,  474,  476,  478,  480,  482,  484,  486,  488,

      490,  492,  494,  496,  498,  500,  502,  504,  506,  508,
      510,  512,  514,  516,  518,  522,  525,  527,  529,  530,
      531,  532,  533,  534,  535,  536,  537,  538,  539,  540,
      541,  542,  543,  544,  545,  546,  547,  548,  549,  550,
      551,  552,  553,  554,  555,  556,  557,  558,  559,  560,
      561,  562,  563,  564,  565,  566,  568,  569,  571,  573,
      575,  577,  579,  581,  583,  585,  587,  589,  591,  593,
      595,  597,  599,  601,  603,  605,  607,  609,  611,  613,
      615,  617,  619,  621,  623,  625,  627,  629,  630,  631,
      632,  634,  636,  638,  640,  642,  644,  645,  645,  647,

      649,  651,  653,  655,  657,  659,  661,  663,  665,  667,
      669,  671,  673,  675,  677,  679,  681,  683,  685,  687,
      689,  691,  693,  695,  697,  699,  701,  703,  705,  706,
      708,  710,  712,  712,  714,  715,  716,  718,  719,  720,
      721,  722,  723,  724,  725,  726,  727,  728,  729,  730,
      731,  732,  733,  734,  735,  736,  737,  738,  739,  740,
      741,  742,  743,  744,  745,  746,  748,  749,  750,  751,
      752,  754,  755,  755,  757,  758,  760,  762,  764,  766,
      768,  770,  772,  774,  776,  778,  780,  782,  784,  786,
      788,  790,  792,  794,  796,  798,  800,  802,  804,  806,

      808,  810,  812,  814,  816,  818,  820,  822,  822,  824,
      825,  825,  827,  828,  829,  830,  831,  832,  833,  834,
      835,  836,  837,  838,  839,  840,  841,  842,  843,  844,
      845,  846,  847,  848,  849,  850,  851,  852,  853,  854,
      855,  857,  858,  859,  860,  861,  862,  863,  864,  865,
      866,  868,  869,  870,  871,  872,  873,  874,  875,  876,
      877,  878,  879,  880,  881,  882,  883,  884,  885,  886,
      887,  888,  889,  890,  891,  892,  893,  894,  896,  898,
      900,  902,  904,  906,  909,  911,  913,  915,  917,  919,
      921,  923,  925,  927,  929,  931,  933,  935,  937,  939,

      941,  943,  945,  947,  949,  951,  953,  955,  957,  959,
      961,  964,  967,  969,  971,  973,  975,  977,  979,  982,
      984,  986,  988,  990,  992,  994,  996,  998, 1000, 1002,
     1004, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 1020, 1022,
     1024, 1026, 1028, 1030, 1032, 1034, 1037, 1038, 1040, 1042,
     1044, 1046, 1048, 1050, 1052, 1055, 1057, 1059, 1061, 1063,
     1065, 1067, 1069, 1071, 1073, 1075, 1077, 1079, 1081, 1083,
     1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 1101, 1103,
     1105, 1107, 1109, 1112, 1114, 1116, 1118, 1120, 1122, 1124,
     1126, 1128, 1131, 1133, 1135, 1137, 1139, 1141, 1143, 1145,

     1147, 1149, 1151, 1153, 1155, 1157, 1159, 1161, 1163, 1165,
     1167, 1169, 1171, 1173, 1175, 1177, 1179, 1181, 1183, 1186,
     1187, 1189, 1191, 1193, 1195, 1197, 1199, 1201, 1204, 1206,
     1208, 1210, 1212, 1214, 1216, 1218, 1220, 1222, 1224, 1226,
     1228, 1230, 1232, 1234, 1236, 1238, 1240, 1242, 1244, 1246,
     1248, 1250, 1252, 1254, 1256, 1258, 1261, 1263, 1265, 1267,
     1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277,
     1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287,
     1288, 1289, 1290, 1291, 1293, 1294, 1295, 1296, 1297, 1298,
     1299, 1300, 1301, 1303, 1305, 1307, 1309, 1311, 1313, 1315,

     1317, 1319, 1321, 1323, 1325, 1327, 1329, 1331, 1333, 1335,
     1337, 1339, 1341, 1343, 1345, 1347, 1349, 1351, 1354, 1356,
     1358, 1360, 1362, 1364, 1366, 1368, 1370, 1373, 1375, 1377,
     1379, 1381, 1383, 1385, 1387, 1389, 1391, 1393, 1395, 1397,
     1399, 1401, 1403, 1405, 1407, 1409, 1411, 1413, 1415, 1417,
     1419, 1421, 1423, 1425, 1428, 1430, 1432, 1434, 1436, 1438,
     1440, 1442, 1444, 1447, 1449, 1451, 1453, 1455, 1457, 1459,
     1461, 1463, 1465, 1467, 1469, 1471, 1473, 1475, 1477, 1479,
     1481, 1483, 1485, 1487, 1489, 1491, 1493, 1495, 1498, 1500,
     1502, 1504, 1506, 1508, 1510, 1512, 1514, 1517, 1519, 1521,

     1523, 1525, 1527, 1529, 1531, 1533, 1535, 1537, 1539, 1541,
     1543, 1545, 1547, 1549, 1551, 1553, 1555, 1557, 1559, 1561,
     1563, 1565, 1568, 1570, 1572, 1574, 1576, 1578, 1580, 1582,
     1584, 1587, 1589, 1591, 1593, 1595, 1597, 1599, 1601, 1603,
     1605, 1607, 1609, 1611, 1613, 1615, 1617, 1619, 1621, 1623,
     1625, 1627, 1629, 1631, 1633, 1635, 1638, 1640, 1642, 1644,
     1646, 1648, 1650, 1652, 1654, 1657, 1658, 1659, 1660, 1661,
     1662, 1663, 1664, 1665, 1666, 1667, 1668, 1670, 1671, 1672,
     1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682,
     1683, 1684, 1686, 1687, 1688, 1689, 1691, 1692, 1694, 1696,

     1698, 1700, 1702, 1704, 1706, 1708, 1710, 1712, 1715, 1717,
     1719, 1721, 1723, 1725, 1727, 1729, 1731, 1733, 1735, 1737,
     1740, 1742, 1744, 1746, 1749, 1751, 1754, 1756, 1758, 1760,
     1762, 1764, 1766, 1768, 1770, 1772, 1774, 1776, 1778, 1780,
     1783, 1785, 1787, 1789, 1791, 1793, 1795, 1797, 1799, 1801,
     1803, 1805, 1807, 1809, 1811, 1814, 1816, 1818, 1820, 1823,
     1825, 1828, 1830, 1832, 1834, 1836, 1838, 1840, 1842, 1844,
     1846, 1848, 1850, 1853, 1855, 1857, 1859, 1861, 1863, 1865,
     1867, 1869, 1871, 1873, 1875, 1877, 1879, 1881, 1884, 1886,
     1888, 1890, 1893, 1895, 1898, 1900, 1902, 1904, 1906, 1908,

     1910, 1912, 1914, 1916, 1919, 1921, 1923, 1925, 1927, 1929,
     1931, 1933, 1935, 1937, 1939, 1941, 1944, 1946, 1948, 1950,
     1953, 1955, 1958, 1960, 1962, 1964, 1966, 1968, 1970, 1972,
     1974, 1976, 1978, 1980, 1983, 1985, 1987, 1989, 1991, 1993,
     1995, 1997, 1999, 2001, 2003, 2005, 2007, 2009, 2011, 2014,
     2016, 2018, 2020, 2023, 2025, 2028, 2029, 2030, 2031, 2032,
     2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042,
     2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052,
     2053, 2054, 2055, 2056, 2058, 2060, 2062, 2064, 2066, 2068,
     2070, 2072, 2074, 2076, 2078, 2080, 2082, 2084, 2086, 2088,

     2090, 2092, 2094, 2096, 2098, 2100, 2102, 2104, 2106, 2109,
     2111, 2113, 2115, 2117, 2119, 2121, 2123, 2125, 2127, 2129,
     2131, 2133, 2135, 2137, 2139, 2141, 2143, 2145, 2147, 2149,
     2151, 2153, 2155, 2157, 2159, 2161, 2163, 2165, 2167, 2169,
     2171, 2173, 2175, 2177, 2179, 2181, 2183, 2185, 2187, 2189,
     2191, 2193, 2195, 2197, 2199, 2201, 2203, 2205, 2207, 2209,
     2211, 2213, 2215, 2217, 2219, 2221, 2223, 2225, 2227, 2229,
     2231, 2233, 2235, 2237, 2239, 2241, 2243, 2245, 2247, 2249,
     2251, 2253, 2255, 2257, 2259, 2261, 2263, 2265, 2267, 2269,
     2271, 2273, 2275, 2277, 2279, 2281, 2283, 2285, 2287, 2289,

     2291, 2293, 2295, 2297, 2299, 2301, 2303, 2305, 2307, 2309,
     2311, 2313, 2315, 2317, 2319, 2321, 2323, 2325, 2327, 2328,
     2329, 2330, 2332, 2333, 2334, 2335, 2336, 2337, 2338, 2339,
     2340, 2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348, 2349,
     2350, 2351, 2352, 2353, 2354, 2356, 2359, 2361, 2363, 2365,
     2367, 2369, 2371, 2373, 2375, 2377, 2379, 2381, 2383, 2385,
     2387, 2389, 2391, 2393, 2395, 2397, 2399, 2401, 2403, 2406,
     2408, 2410, 2412, 2414, 2416, 2418, 2420, 2422, 2424, 2426,
     2428, 2430, 2432, 2434, 2436, 2438, 2440, 2442, 2444, 2446,
     2448, 2450, 2452, 2454, 2456, 2459, 2461, 2463, 2465, 2467,

     2469, 2471, 2473, 2475, 2477, 2479, 2481, 2483, 2485, 2487,
     2489, 2491, 2493, 2495, 2497, 2499, 2501, 2503, 2505, 2508,
     2510, 2512, 2514, 2516, 2518, 2520, 2522, 2524, 2526, 2528,
     2530, 2532, 2534, 2536, 2538, 2540, 2542, 2544, 2546, 2548,
     2550, 2552, 2555, 2557, 2559, 2561, 2563, 2565, 2567, 2569,
     2571, 2573, 2575, 2577, 2579, 2581, 2583, 2585, 2587, 2589,
     2591, 2593, 2595, 2597, 2599, 2600, 2601, 2602, 2603, 2604,
     2606, 2607, 2608, 2609, 2610, 2610, 2611, 2612, 2613, 2614,
     2615, 2616, 2617, 2618, 2619, 2621, 2623, 2625, 2627, 2629,
     2632, 2634, 2636, 2638, 2639, 2641, 2643, 2645, 2647, 2649,

     2651, 2653, 2655, 2657, 2659, 2661, 2663, 2665, 2667, 2670,
     2672, 2674, 2676, 2678, 2679, 2681, 2683, 2685, 2687, 2689,
     2691, 2693, 2695, 2697, 2699, 2701, 2703, 2705, 2707, 2710,
     2712, 2714, 2716, 2718, 2719, 2721, 2723, 2725, 2727, 2729,
     2731, 2733, 2735, 2737, 2739, 2741, 2743, 2745, 2747, 2750,
     2752, 2754, 2756, 2757, 2759, 2761, 2763, 2765, 2767, 2769,
     2771, 2773, 2775, 2777, 2779, 2781, 2783, 2785, 2788, 2790,
     2792, 2794, 2796, 2797, 2799, 2801, 2803, 2805, 2807, 2809,
     2811, 2813, 2815, 2816, 2817, 2818, 2819, 2820, 2821, 2822,
     2823, 2823, 2825, 2826, 2828, 2829, 2831, 2833, 2834, 2836,

     2838, 2840, 2842, 2844, 2846, 2848, 2850, 2852, 2853, 2856,
     2858, 2861, 2863, 2866, 2869, 2871, 2874, 2877, 2879, 2881,
     2883, 2885, 2887, 2889, 2891, 2893, 2894, 2897, 2899, 2902,
     2904, 2907, 2910, 2912, 2915, 2918, 2920, 2922, 2924, 2926,
     2928, 2930, 2932, 2934, 2935, 2938, 2940, 2943, 2945, 2948,
     2951, 2953, 2956, 2959, 2961, 2963, 2965, 2967, 2969, 2971,
     2973, 2974, 2977, 2979, 2982, 2984, 2987, 2990, 2992, 2995,
     2998, 3000, 3002, 3004, 3006, 3008, 3010, 3012, 3014, 3015,
     3018, 3020, 3023, 3025, 3028, 3031, 3033, 3036, 3039, 3040,
     3041, 3042, 3043, 3044, 3045, 3046, 3046, 3048, 3050, 3052,

     3054, 3056, 3058, 3060, 3062, 3063, 3066, 3069, 3072, 3074,
     3076, 3078, 3080, 3082, 3084, 3086, 3087, 3090, 3093, 3096,
     3098, 3100, 3102, 3104, 3106, 3108, 3110, 3111, 3114, 3117,
     3120, 3122, 3124, 3126, 3128, 3130, 3131, 3134, 3137, 3140,
     3142, 3144, 3146, 3148, 3150, 3152, 3154, 3155, 3158, 3161,
     3164, 3166, 3167, 3168, 3169, 3170, 3170, 3173, 3175, 3177,
     3178, 3181, 3183, 3185, 3187, 3189, 3190, 3193, 3195, 3197,
     3199, 3201, 3202, 3205, 3207, 3209, 3210, 3213, 3215, 3217,
     3219, 3221, 3222, 3223, 3224, 3224, 3226, 3227, 3229, 3231,
     3232, 3234, 3236, 3237, 3239, 3240, 3242, 3244, 3245, 3246,

     3246, 3247, 3249, 3250, 3252, 3253, 3254, 3256, 3257, 3258,
     3260, 3262, 3264, 3264
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    8,    8,    8,    1,    9,
       10,    8,    8,   11,   12,    8,    1,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,    1,    8,
        8,    8,    8,    8,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       24,   31,   32,   33,   34,   35,   24,   36,   37,   24,
        8,    1,    8,    8,   38,    1,   39,   24,   40,   41,

       42,   43,   24,   44,   45,   24,   24,   46,   47,   48,
       49,   50,   24,   51,   52,   53,   54,   55,   56,   24,
       24,   24,    8,    8,    8,    8,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[57] =
    {   0,
        1,    1,    2,    3,    1,    1,    4,    4,    4,    4,
        5,    6,    7,    1,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7
    } ;

static yyconst short int yy_base[1738] =
    {   0,
        0,   55,  107,  162,  214,  269,  321,  376,  428,  483,
      535,  590, 4681, 4682,   56, 4682, 4677, 4682, 4682, 4682,
     4682, 4682, 4666,    0, 4647, 4655, 4657,   31, 4649, 4641,
     4654, 4643, 4656, 4639,   37, 4640,   43, 4653, 4625,   27,
     4620, 4616, 4625, 4614, 4620,   66,    0,   54,   43,   72,
        0,    0,    0,    0, 4648,   77,  163,  170,  176,  270,
      276,  282,  189,  377,   89,  383,  389,  484,  490,  195,
      591,  597,  603,  611,  617,  631,  643,   74,  306,  496,
      654,  679,   86, 4682, 4657,   98,  207,  295,  299,  314,
      400,  731,  745,  143,   74,  381,  392,  135,   75,  162,

      175, 4628,  488,  244,  250,  379,  145,  470,  376,  264,
      349,  351,  377,  524,  396,  627,    0,  668, 4682,  690,
        0,    0,    0, 4682,    0, 4645,  776,  790,  283,  476,
      489,  395,  456,  502,  565,  599, 4626,  670,  603,  571,
      613,  480,  626,  485,  628,  636,  650,  604,  705,  700,
      653,  717,  711, 4682, 4653,    0, 4642, 4642,  688,  625,
      705,  690,  708,  746,  710,  619,  715,  749,  781,  758,
      752,  748,  759,  755,  760,  713,  793,  761,  797,  810,
      807,  799,    0,  825, 4682, 4650,    0,    0,    0, 4682,
        0, 4639,  851,  865,  802,  659,  806,  792,  690,  812,

      809,  810, 4620,  819,  818,  847,  849,  813,  837,  789,
      850,  851,  852,  855,  900,  764,  877,  860,  893, 4682,
     4637,    0, 4634, 4633,  890,  882, 4624,  896, 4627, 4610,
     4616, 4616, 4619, 4626, 4617, 4624,  897, 4604, 4610, 4615,
     4592, 4582, 4593, 4583,  162, 4583, 4576, 4577,  911,    0,
        0, 4598, 4612,  867, 4682,  919,    0, 4613,  920,  926,
      935,  944,  950,  963,  970,  981,  994, 1000, 1006, 1012,
     1029, 1038, 1044, 1055, 1061, 1067, 1078, 1093, 1099, 1105,
     1111, 1117, 1123, 1130, 1140,  990,    0,  885, 4682,  936,
     1161, 1169, 1181, 1187, 1197, 1209,  944,  961, 4682, 1021,

     4594,  996, 1027, 1061,  963,  900, 1051,  936,  499,  956,
     1126,  938, 1113, 1009, 1128, 1026, 1127, 1142, 1125,  974,
     1052, 1058, 1000, 1103, 1152, 1149, 1170, 1221, 1225, 1066,
     1155, 1183, 1180, 1229, 4682, 1235, 4682, 1239, 1261, 1275,
     4609, 1227, 1231, 1228, 1243, 1205,  902, 1250, 1095, 1230,
     4608, 1233, 4607, 1271, 1240, 1264,  601, 1277, 1198, 1278,
     1159, 1279, 1280, 1245, 1281, 1299, 1303, 1282, 4606, 1283,
     1319, 4682, 4617, 4682,    0, 4606, 4606, 1301, 1314, 1307,
     1313, 1320, 1326, 1328, 1299, 1324, 1330, 1333, 1336, 1337,
     1338, 1342, 1332, 1346, 1349,  850, 1350, 1351, 1352, 1355,

     1356, 1353, 1357, 1372, 1048, 1366, 1360, 1378, 1392, 4682,
     4614, 4682, 1387, 1412, 1426, 4601, 1422, 1370, 1367, 1369,
     1396, 1390, 1371, 1424, 1393, 4600, 1430, 4599, 1429, 1395,
     1428, 1294, 1432, 1408, 1433, 1415, 1434, 1435, 1441, 1442,
     1463, 1475, 1444, 4598, 1454, 4584, 4583, 4595, 4576, 4591,
     4580, 4575, 4572, 4583, 4574, 4575, 4582, 4568, 4580, 4579,
     4580, 4568, 4561, 4569, 4560, 4572, 4575, 4558, 4550, 4535,
     4538, 4547, 1427, 4532, 4543, 4530, 4529,    0, 1480, 1489,
     1495, 1504, 1511, 1517, 1523, 1531, 1538, 1548, 1558, 1564,
     1572, 1579, 1587, 1593, 1604, 1610, 1616, 1626, 1638, 1644,

     1654, 1660, 1666, 1672, 1681, 1688, 1694, 1700, 1706, 1715,
     1721, 1728, 1742, 1521, 1547, 1469, 1430, 1445, 1600, 4550,
     1460, 1530, 1505, 1612, 1590, 1531, 1611, 1618, 1576, 1714,
     1722, 1484, 1559, 1522, 1624, 1726, 1626, 1652, 1695, 1646,
     1730, 1724, 1731, 1733, 1734, 4549, 1761, 1765, 4564, 1754,
     1756, 4563, 1758, 1677, 1719, 1656, 1760, 1696, 1600, 1761,
     1764, 1765, 1775, 1777, 1783, 1774, 1780, 1784, 1786, 1788,
     1789, 1791, 1792, 1795, 1796, 1797, 1798, 1801, 1800, 1802,
     1803, 1822, 4562, 1805, 4561, 1807, 1809, 1816, 1817, 1813,
     1826, 1835, 1827, 1818, 1840, 1828, 1838, 1848, 1851, 1852,

     1854, 1857, 1856, 1858, 1860, 1863, 1866, 1864, 1865, 1867,
      367, 1869, 1870, 1875, 1876, 1879, 1878, 1881, 4563, 1893,
     1897, 4559, 1879, 1885, 4558, 1888, 1897, 1874, 1893, 1889,
     1890, 1908, 1900, 1913, 1901, 1920, 1921, 1926, 1910, 1927,
     1929, 1930, 1931, 1932, 1934, 1935, 1902, 1937, 1938, 1941,
     1942, 1943, 1944, 1945, 1960, 4557, 1952, 4556, 1953, 4553,
     4552, 4534, 4545, 4552, 4536, 4527, 4525, 4530, 4530, 4546,
     4533, 1955, 4544, 4529, 4537, 4532, 4528, 4515, 4514, 4531,
     4521, 4535, 4494,    0, 4500, 4493, 4498, 4495, 4496, 4498,
     4499, 4496,    0, 1992, 2003, 2009, 2015, 2021, 2032, 2038,

     2044, 2055, 2061, 2069, 2081, 2087, 2096, 2104, 2114, 2127,
     2133, 2139, 2145, 2153, 2159, 2172, 2182, 2188, 2194, 2200,
     2207, 2213, 2219, 2225, 2235, 2248, 2263, 2271, 2281, 1956,
     1958, 1945, 1950, 1976, 1962, 1977, 2028, 2026, 4508, 2018,
     1952, 2041, 2071, 1975, 2007, 2086, 2099, 2100, 2147, 2098,
     2005, 2084, 2133, 4507, 2053, 2187, 2097, 2125, 2199, 2180,
     2207, 2208, 4506, 2155, 2233, 2248, 2246, 2161, 2184, 2250,
     2236, 2244, 2270, 2280, 2281, 2283, 2288, 2284, 2290, 2104,
     2289, 2291, 2295, 2298, 2296, 2305, 1554, 4521,  983, 2269,
     2299, 2302, 2306, 2308, 2312, 2311, 4520, 2318, 2319, 2316,

     2312, 2325, 2320, 2326, 2048, 2328, 2330, 2329, 2332, 2333,
     2345, 2336, 2350, 2344, 2353, 2356, 2358, 2360, 2359, 2361,
     2362, 4522, 2146, 2364, 2365, 2366, 2371, 2369, 2372, 2375,
     4521, 2374, 2375, 2367, 2371, 2383, 2370, 2385, 2387, 2388,
     2380, 2390, 2395, 2393, 2409, 2412, 2413, 2414, 2415, 2416,
     2418, 2419, 2420, 2428, 2391, 4517, 2421, 2394, 2423, 2429,
     2433, 2431, 2435, 2437, 4516, 4508, 4510, 4502, 4513, 4682,
     4498, 4487, 4497, 4509, 4484, 4682,    0, 4682, 4502, 4682,
     4487, 4505, 4483, 4484, 4499, 4497, 4488, 4487, 4682, 4466,
     4461,    0, 4465, 4456, 4463, 2409, 4460, 2411, 2450, 2475,

     2481, 2488, 2496, 2502, 2508, 2518, 2529, 2535, 2541, 2547,
     2554, 2562, 2569, 2575, 2581, 2596, 2602, 2608, 2617, 2623,
     2629, 2635, 2641, 2648, 2654, 2661, 2668, 2684, 2433, 2442,
     2440, 2455, 2517, 2236, 2461, 2502, 2544, 2563, 2677, 4475,
     2703, 2482, 2707, 2443, 2582, 2588, 2567, 2590, 2534, 2658,
     2669, 2711, 2500, 2609, 4474, 2652, 2542, 2675, 2679, 2432,
     2683, 2650, 2703, 2508, 2709, 2724, 2704, 2712, 2619, 2716,
     2713, 2731, 4489, 2732, 2723, 2738, 2726, 2730, 2731, 2732,
     2670, 2734, 2738, 2741, 2752, 2733, 2740, 4488, 2743, 2745,
     2746, 2747, 2748, 2754, 2756, 2758, 2759, 2760, 2764, 2761,

     2770, 2769, 2763, 4490, 2768, 2772, 2788, 2774, 2781, 2794,
     2795, 2782, 2792, 2800, 2803, 4489, 2804, 2805, 2807, 2808,
     2809, 2812, 2807, 2808, 2810, 2816, 2830, 2811, 2813, 2818,
     2823, 2819, 2838, 4485, 2839, 2840, 2858, 2832, 2847, 2851,
     2852, 2854, 2855, 2857, 2861, 2872, 2833, 2860, 4484, 2863,
     2827, 2866, 2867, 2869, 2873, 2875, 4484, 4464, 4682, 4464,
     4468, 4462, 4682, 4476, 4461, 4477, 4682, 4475, 4475, 4459,
     4468, 4467, 4471, 4431, 4444, 4431, 4442, 4429, 4440, 4436,
     4428, 4437, 4433, 2887, 2910, 2918, 2924, 2930, 2936, 2952,
     2963, 2969, 2977, 2988, 2996, 3002, 3008, 3021, 3029, 3035,

     3041, 3047, 3053, 3059, 3068, 3081, 3087, 3093, 3099, 2935,
     2876, 2867, 2950, 2860, 2875, 2872, 2986, 2904, 4443, 2927,
     3068, 2932, 2936, 2883, 2982, 2988, 2951, 2993, 2995, 3001,
     3048, 3033, 3081, 3082, 2991, 3083, 3085, 3103, 3114, 3100,
     3129, 3104, 3110, 3108, 3136, 3066, 3117, 3128, 3142, 4458,
     3131, 3124, 3135, 3136, 3142, 3134, 1955, 3137, 2984, 3143,
     3144, 3043, 3146, 3145, 3147, 3151, 3152, 3158, 3160, 3155,
     3161, 3159, 2962, 3163, 3166, 3184, 3156, 3167, 3178, 3187,
     3162, 3168, 3188, 3190, 3191, 3192, 3193, 3194, 3197, 3196,
     3196, 3198, 3201, 3215, 3208, 3203, 3209, 3217, 3210, 3206,

     3218, 3242, 4457, 3231, 3233, 3234, 3235, 3237, 3211, 3240,
     3241, 3242, 3243, 3244, 3245, 3246, 3250, 3248, 4682, 4452,
     4682,    0, 4437, 4437, 4447, 4438, 4434, 4682, 4431, 4682,
     4438, 4433, 4448, 4682, 4449, 4408, 4408, 4405, 4406, 4404,
     4403, 4406, 4401, 4400, 3259, 3265, 3289, 3295, 3302, 3308,
     3321, 3331, 3337, 3347, 3359, 3371, 3377, 3383, 3389, 3395,
     3401, 3407, 3413, 3423, 3429, 3280, 3257, 3330, 4420, 3260,
     3293, 3249, 3277, 3319, 3356, 3341, 3422, 3295, 3413, 3305,
     3443, 3437, 3419, 3311, 3317, 3343, 3420, 3421, 3409, 3424,
     3425, 3458, 3439, 3460, 4435, 3349, 3451, 3385, 3271, 3452,

     3477, 3454, 3484, 3459, 3463, 3476, 3490, 3482, 3449, 3337,
     3455, 3361, 3465, 3472, 3481, 3483, 3484, 3488, 4437, 3490,
     3493, 3491, 3492, 3494, 3497, 3501, 3498, 3502, 4436, 3499,
     3503, 3506, 3507, 3508, 3510, 3518, 3520, 3521, 3532, 3523,
     3538, 4432, 3524, 3529, 3526, 3534, 3533, 3548, 3530, 3550,
     3541, 3553, 3555, 3569, 3563, 3561, 3531, 3562, 3565, 3566,
     3569, 3564, 3570, 3571, 4426, 4426, 4423, 4429, 4416,    0,
     4415, 4411, 4406, 4682, 4397, 4385, 4387, 4393, 4385, 4380,
     4379, 4386, 4377, 4376, 3580, 3586, 3599, 3617, 3625, 3631,
     3637, 3645, 3652, 4387, 3658, 3668, 3674, 3680, 3686, 3692,

     3699, 3711, 3718, 3571, 3611, 3397, 3583, 3573, 4396, 3705,
     3572, 3586, 3667, 3710, 3627, 3579, 3682, 3642, 3701, 3702,
     3605, 3703, 3704, 3722, 3728, 3682, 3726, 3723, 4411, 3733,
     3731, 3735, 3756, 3760, 3737, 3738, 3748, 3751, 3752, 3754,
     3757, 3755, 3758, 3636, 3762, 3763, 3764, 3765, 4413, 3767,
     3693, 3770, 4383, 3768, 3773, 3771, 3774, 3776, 3780, 3782,
     3783, 3784, 3784, 3791, 3794, 3783, 3799, 4408, 3802, 3797,
     3801, 3816, 3830, 3804, 3809, 3815, 3816, 3823, 3824, 3825,
     3826, 3827, 4403, 4382, 4397, 4682, 4381, 4373, 4370, 4381,
     4354,    0, 4341,    0, 4339,    0,    0, 4349,    0,    0,

     3836, 3852, 3877, 3885, 3891, 3897, 3903, 4343, 3909, 3920,
     3926, 3932, 3938, 3944, 3950, 3956, 3965, 3835, 4352, 3837,
     3850, 3838, 3841, 3844, 3851, 3965, 4351, 3857, 4337, 3871,
     4333, 4331, 3850, 4330, 4326, 3964, 3832, 3966, 3918, 3967,
     3922, 3961, 3969, 3983, 4340, 3946, 4339, 3971, 4328, 4324,
     3972, 4322, 4321, 3980, 3977, 3986, 3914, 3981, 3987, 3989,
     4290, 4318, 3990, 4317, 3991, 4310, 4303, 3992, 4296, 4285,
     3991, 3995, 4001, 4015, 3994, 3998, 4003, 4012, 4028, 4278,
     4004, 4272, 4009, 4271, 4264, 4013, 4261, 4260, 4682, 4242,
     4682, 4238, 4257, 4235, 4247, 4207,    0,    0,    0, 4036,

     4042, 4049, 4057, 4065, 4203, 4073, 4082, 4088, 4034, 4055,
     4097, 4072, 4079, 4221, 4090, 4103, 4210, 4205, 4183, 4107,
     4096, 4111, 4099, 4103, 4047, 4105, 4120, 4129, 4069, 4056,
     4103, 4111, 4112, 4115, 4117, 3997, 4028, 4023, 4017, 4132,
     4115, 4134, 4117, 4126, 4123, 4128, 4147, 3934, 3881, 3838,
        0, 3282, 4682, 3214, 4682, 2927, 4148, 4154, 4164, 2860,
     2671, 2621, 4163, 4155, 4175, 4179, 2571, 4144, 4185, 4174,
     4189, 4190, 2193, 4170, 4136, 2027, 1507, 4178, 4194, 4188,
     4202, 4203, 1240, 4682, 1154, 4203, 1072, 4192, 4214, 4220,
     4206, 4224, 4225, 4186,  721, 4219, 4226, 4233, 4682,  689,

      472, 4235, 4240, 4244, 4245,  279, 4246, 4253, 4682, 4258,
     4263, 4268, 4682,   71, 4277, 4284, 4288, 4292, 4299, 4306,
     4313, 4320, 4327, 4334, 4341, 4343, 4345, 4352, 4359, 4366,
     4373, 4380, 4387, 4394, 4401, 4408, 4415
    } ;

static yyconst short int yy_def[1738] =
    {   0,
     1713,    1, 1713,    3, 1713,    5, 1713,    7, 1713,    9,
     1713,   11, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
     1714, 1714, 1714, 1714, 1714, 1713, 1715, 1714, 1714, 1716,
     1717, 1717, 1717, 1717, 1717, 1718, 1718, 1718, 1718, 1718,
     1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718,
     1718, 1718, 1718, 1718, 1718, 1718, 1718, 1716, 1719, 1718,
     1718, 1718, 1720, 1713, 1713, 1720, 1720, 1720, 1720, 1720,
     1720, 1721, 1721,   93,   93,   93,   93,   93,   93,   93,

       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93, 1722,   93,   93, 1723, 1713, 1713, 1713,
     1723, 1723, 1723, 1713, 1723, 1723, 1724, 1724,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128, 1713, 1725,
      128,  128, 1713, 1713, 1713, 1726, 1726, 1727, 1727, 1727,
     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1713,
     1727, 1727, 1728, 1713, 1713, 1713, 1728, 1728, 1728, 1713,
     1728, 1728, 1729, 1729,  194,  194,  194,  194,  194,  194,

      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194, 1713, 1730,  194,  194, 1713, 1713,
     1713, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1713, 1715,
     1715, 1714, 1714, 1714, 1713, 1713, 1717, 1717, 1718, 1718,
     1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718,
     1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718,
     1718, 1718, 1718, 1718, 1718, 1713, 1715, 1731, 1713, 1731,
     1719, 1718, 1718, 1718, 1718, 1718, 1720, 1720, 1713, 1720,

       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93, 1722, 1722,   93,
       93,   93, 1732, 1713, 1713, 1713, 1713, 1732, 1733, 1733,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340, 1713, 1734,  340,  340,  340,
     1713, 1713, 1713, 1713, 1726, 1726, 1727, 1727, 1727, 1727,
     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,

     1727, 1727, 1727, 1713, 1727, 1727, 1727, 1735, 1713, 1713,
     1713, 1713, 1735, 1736, 1736,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
     1713, 1737,  415,  415,  415, 1714, 1714, 1714, 1714, 1714,
     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1718, 1718,
     1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718,
     1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718,

     1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718,
     1718, 1718, 1718,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93, 1732, 1732,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340, 1734,  340,  340,  340,  340, 1727, 1727, 1727, 1727,
     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,

     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1735,
     1735,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415, 1737,  415,  415,  415,  415, 1714,
     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
     1714, 1714, 1714, 1718, 1718, 1718, 1718, 1718, 1718, 1718,

     1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718,
     1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718,
     1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340, 1727, 1727, 1727,

     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
     1727,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415, 1714, 1714, 1714, 1714, 1713,
     1714, 1714, 1714, 1714, 1714, 1713, 1714, 1713, 1714, 1713,
     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1713, 1714,
     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1718, 1718,

     1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718,
     1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718,
     1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718,   93,   93,
       93,   93, 1720,   93,   93,   93,   93,   93, 1720,   93,
     1720,   93, 1720,   93,   93,   93,   93,   93,   93,   93,
       93, 1720,   93,   93,   93,   93,   93,   93,   93,   93,
       93,  340,  340,  340,  340, 1732,  340,  340,  340,  340,
      340, 1732,  340, 1732,  340, 1732,  340,  340,  340,  340,
      340,  340,  340,  340, 1732,  340,  340,  340,  340,  340,
      340,  340,  340,  340, 1727, 1727, 1727, 1727, 1727, 1727,

     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
     1727, 1727,  415,  415,  415,  415, 1735,  415,  415,  415,
      415,  415, 1735,  415, 1735,  415, 1735,  415,  415,  415,
      415,  415,  415,  415,  415, 1735,  415,  415,  415,  415,
      415,  415,  415,  415,  415, 1714, 1714, 1714, 1713, 1714,
     1714, 1714, 1713, 1714, 1714, 1714, 1713, 1714, 1714, 1714,
     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
     1714, 1714, 1714, 1718, 1718, 1718, 1718, 1718, 1718, 1718,
     1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718,

     1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718,   93,
       93,   93, 1720,   93,   93,   93, 1720,   93,   93,   93,
     1720,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,  340,  340,  340,
     1732,  340,  340,  340, 1732,  340,  340,  340, 1732,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340, 1727, 1727, 1727, 1727, 1727,
     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
      415,  415,  415, 1735,  415,  415,  415, 1735,  415,  415,

      415, 1735,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415, 1713, 1714,
     1713, 1714, 1714, 1714, 1714, 1714, 1714, 1713, 1714, 1713,
     1714, 1714, 1714, 1713, 1714, 1714, 1714, 1714, 1714, 1714,
     1714, 1714, 1714, 1714, 1718, 1718, 1718, 1718, 1718, 1718,
     1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718,
     1718, 1718, 1718, 1718, 1718, 1720,   93, 1720,   93,   93,
       93,   93,   93,   93, 1720,   93, 1720,   93,   93,   93,
     1720,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93, 1732,  340, 1732,  340,  340,  340,  340,  340,  340,

     1732,  340, 1732,  340,  340,  340, 1732,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340, 1727, 1727, 1727,
     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1735,  415,
     1735,  415,  415,  415,  415,  415,  415, 1735,  415, 1735,
      415,  415,  415, 1735,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415, 1714, 1714, 1714, 1714, 1714, 1714,
     1714, 1714, 1714, 1713, 1713, 1714, 1714, 1714, 1714, 1714,
     1714, 1714, 1714, 1714, 1718, 1718, 1718, 1718, 1718, 1718,
     1718, 1718, 1718, 1717, 1718, 1718, 1718, 1718, 1718, 1718,

     1718, 1718, 1718,   93,   93,   93,   93,   93,   93,   93,
       93,   93, 1720, 1720,   93,   93,   93,   93,   93,   93,
       93,   93,   93,  340,  340,  340,  340,  340,  340,  340,
      340,  340, 1732, 1732,  340,  340,  340,  340,  340,  340,
      340,  340,  340, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
     1727, 1727, 1726, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
     1727, 1727,  415,  415,  415,  415,  415,  415,  415,  415,
      415, 1735, 1735,  415,  415,  415,  415,  415,  415,  415,
      415,  415, 1714, 1714, 1714, 1713, 1714, 1714, 1714, 1714,
     1713, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,

     1718, 1718, 1718, 1718, 1718, 1718, 1718, 1717, 1718, 1718,
     1718, 1718, 1718, 1718, 1718, 1718, 1718,   93,   93,   93,
     1720,   93,   93,   93,   93, 1720,   93,   93,   93,   93,
       93,   93,   93,   93,   93,  340,  340,  340, 1732,  340,
      340,  340,  340, 1732,  340,  340,  340,  340,  340,  340,
      340,  340,  340, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
     1726, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
      415,  415,  415, 1735,  415,  415,  415,  415, 1735,  415,
      415,  415,  415,  415,  415,  415,  415,  415, 1713, 1714,
     1713, 1714, 1714, 1714, 1714, 1713, 1714, 1714, 1714, 1718,

     1718, 1718, 1718, 1718, 1717, 1718, 1718, 1718, 1720,   93,
     1720,   93,   93,   93,   93, 1720,   93,   93,   93, 1732,
      340, 1732,  340,  340,  340,  340, 1732,  340,  340,  340,
     1727, 1727, 1727, 1727, 1727, 1726, 1727, 1727, 1727, 1735,
      415, 1735,  415,  415,  415,  415, 1735,  415,  415,  415,
     1714, 1714, 1713, 1714, 1713, 1713, 1718, 1718, 1718, 1717,
       93,   93, 1720,   93, 1720, 1720,  340,  340, 1732,  340,
     1732, 1732, 1727, 1727, 1727, 1726,  415,  415, 1735,  415,
     1735, 1735, 1714, 1713, 1713, 1718, 1717,   93, 1720, 1720,
      340, 1732, 1732, 1727, 1726,  415, 1735, 1735, 1713, 1713,

     1717, 1720, 1720, 1732, 1732, 1726, 1735, 1735, 1713, 1720,
     1732, 1735,    0, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713
    } ;

static yyconst short int yy_nxt[4739] =
    {   0,
       14,   15,   16,   17,   15,   18,   14,   14,   19,   20,
       21,   22,   23,   14,   24,   25,   26,   27,   28,   29,
       24,   24,   30,   24,   24,   31,   32,   33,   34,   35,
       36,   37,   38,   24,   24,   24,   24,   24,   24,   24,
       39,   40,   41,   24,   24,   24,   24,   42,   24,   43,
       24,   44,   24,   24,   24,   45,   46,  219,  226,   46,
      219,   47,  234,  235,  238,  242,  227,  249,  252,  253,
      249,  236,  250,  256,  243,  286,  219,  222,  249,  239,
      287,   48,  231,  257,  257,  257,  257,  298,  257,  298,
      298,  247,  304,  309,  254,  257,  257,  257,  257,  298,

      257,  298,  298,  269,  301,  301,   49,   14,   15,   16,
       17,   50,   18,   51,   51,   52,   53,   21,   54,   55,
       14,   56,   57,   58,   59,   60,   61,   56,   56,   62,
       56,   56,   63,   64,   65,   66,   67,   68,   69,   70,
       56,   56,   56,   56,   56,   56,   56,   71,   72,   73,
       56,   56,   56,   56,   74,   56,   75,   56,   76,   56,
       56,   56,   77,   46,  303,  301,   78,  308,   79,  257,
      257,  257,  257,  301,  257,  301,  257,  257,  257,  257,
       80,  257,  257,  257,  257,  257,  320,  257,   81,  311,
      310,  261,  301,  260,  262,  257,  257,  257,  257,  473,

      257,  257,  257,  257,  257,  301,  257,  267,  298,  277,
      298,  298,  474,   82,   83,   15,   84,   85,   15,   86,
       83,   83,   87,   88,   89,   90,   91,   83,   92,   93,
       94,   95,   96,   97,   92,   92,   98,   92,   92,   99,
      100,  101,  102,  103,  104,  105,  106,   92,   92,   92,
       92,   92,   92,   92,  107,  108,  109,   92,   92,   92,
       92,  110,   92,  111,   92,  112,   92,   92,   92,  113,
       46,  317,  316,   46,  301,  114,  257,  257,  257,  257,
      301,  257,  257,  257,  257,  257,  318,  257,  257,  257,
      257,  257, 1709,  257,  301,  115,  298,  263,  298,  298,

      298,  265,  298,  298,  341,  264,  288,  288,  289,  290,
      288,  288,  324,  339,  266,  298,  288,  298,  298,  288,
      116,  117,  118,  119,  120,  118,  121,  117,  117,  122,
      123,  124,  125,  126,  117,  127,  128,  129,  130,  131,
      132,  127,  127,  133,  127,  127,  134,  135,  136,  137,
      138,  139,  140,  141,  127,  127,  127,  127,  127,  127,
      127,  142,  143,  144,  127,  127,  127,  127,  145,  127,
      146,  127,  147,  127,  127,  127,  148,  149,  375,  301,
      149,  301,  150,  257,  257,  257,  257,  325,  257,  257,
      257,  257,  257,  319,  257,  257,  257,  257,  257,  326,

      257,  298,  151,  298,  298,  268,  301,  301,  305,  301,
      330,  301,  300,  270,  271,  272,  306,  307,  327,  822,
      345,  323,  301,  273,  310,  339,  301,  152,   14,  153,
      154,  155,  153,   18,   14,   14,   19,   20,   21,  156,
      157,   14,  158,  159,  160,  161,  162,  163,  158,  158,
      164,  158,  158,  165,  166,  167,  168,  169,  170,  171,
      172,  158,  158,  158,  158,  158,  158,  158,  173,  174,
      175,  158,  158,  158,  158,  176,  158,  177,  158,  178,
      158,  158,  158,  179,  180, 1709,  339,  180,  346,   47,
      257,  257,  257,  257,  342,  257,  257,  257,  257,  257,

      301,  257,  257,  257,  257,  257,  339,  257,  321,  181,
      339,  275,  274,  313,  314,  339,  343,  322,  301,  339,
      347,  358,  315,  292,  344,  329,  276,  329,  329,  301,
      361,  264,  339,  525,  182,  183,  184,  185,  186,  184,
      187,  183,  183,  188,  189,  190,  191,  192,  183,  193,
      194,  195,  196,  197,  198,  193,  193,  199,  193,  193,
      200,  201,  202,  203,  204,  205,  206,  207,  193,  193,
      193,  193,  193,  193,  193,  208,  209,  210,  193,  193,
      193,  193,  211,  193,  212,  193,  213,  193,  193,  193,
      214,  215,  355,  348,  215,  339,  216,  257,  257,  257,

      257,  339,  257,  257,  257,  257,  257,  356,  257,  257,
      257,  257,  257,  349,  257,  549,  217,  257,  257,  257,
      257,  572,  257,  257,  257,  257,  257,  357,  257,  339,
      375,  354,  278,  339,  339,  279,  375,  257,  257,  257,
      257,  218,  257,  339,  280,  365,  379,  386,  281,  257,
      257,  257,  257,  331,  257,  283,  339,  301,  339,  282,
      257,  257,  257,  257,  359,  257,  339,  368,  293,  334,
      335,  336,  334,  360,  363,  326,  362,  417,  332,  284,
      339,  348,  268,  339,  285,  257,  257,  257,  257,  414,
      257,  336,  337,  336,  336,  351,  352,  294,  364,  375,

      339,  375, 1709,  251,  353,  295,  366,  335,  336,  366,
      251,  250,  371,  372,  373,  371,  375,  381,  378,  375,
      414,  375,  421,  380,  375,  382,  375,  284,  385,  387,
      296,  297,  298,  383,  298,  298,  297,  297,  297,  297,
      297,  297,  297,  369,  297,  297,  298,  339,  298,  298,
      297,  297,  297,  297,  297,  297,  297,  375,  297,  375,
      375,  400,  395,  375, 1706,  364,  375,  251,  370,  375,
      375,  375,  375,  393,  251,  302,  333,  333,  384,  388,
      333,  333,  333,  333,  333,  333,  392,  333,  394,  333,
      333,  333,  375,  397,  333,  333,  333,  333,  333,  333,

      396,  333,  398,  333,  375,  399,  389,  390,  375,  402,
      375,  404,  372,  373,  404,  391,  250,  420,  375,  414,
      340,  405,  414,  416,  424,  406,  409,  410,  411,  409,
      422,  401,  414,  418,  436,  386,  414,  423,  403,  414,
      414,  419,  414,  414,  426,  427,  429,  402,  414,  414,
      407,  408,  408,  428,  433,  408,  408,  408,  408,  408,
      408,  375,  408,  432,  408,  408,  408,  414,  430,  408,
      408,  408,  408,  408,  408,  434,  408,  414,  408,  414,
      414,  414,  414,  431,  435,  414,  444,  289,  290,  438,
      414,  443,  610,  253,  219,  415,  440,  219,  437,  451,

      439,  441,  410,  411,  441,  423,  250,  414,  439,  448,
      454,  445,  249,  464,  452,  249,  549,  250,  254,  449,
      219,  450,  521,  219,  455,  465,  257,  257,  257,  257,
      301,  257,  257,  257,  257,  257,  561,  257,  289,  290,
      479,  257,  257,  257,  257,  298,  257,  298,  298,  480,
      257,  257,  257,  257,  524,  257,  257,  257,  257,  257,
      528,  257,  298,  481,  298,  298,  301,  484,  301,  257,
      257,  257,  257,  482,  257,  483,  257,  257,  257,  257,
      519,  257,  485,  526,  487,  486,  301,  257,  257,  257,
      257,  249,  257,  301,  249,  520,  250,  549,  488,  489,

      257,  257,  257,  257,  301,  257,  257,  257,  257,  257,
      514,  257,  257,  257,  257,  257,  537,  257,  257,  257,
      257,  257,  298,  257,  298,  298,  301,  491,  490,  987,
      301,  530,  492,  300,  493,  257,  257,  257,  257,  301,
      257,  515,  532,  494,  257,  257,  257,  257,  540,  257,
      257,  257,  257,  257,  533,  257,  301,  301,  496,  375,
      495,  257,  257,  257,  257,  522,  257,  257,  257,  257,
      257,  497,  257,  257,  257,  257,  257,  619,  257,  523,
      516,  301,  301,  498,  257,  257,  257,  257,  301,  257,
      517,  301,  518,  500,  499,  546,  301,  539,  501,  257,

      257,  257,  257,  538,  257,  257,  257,  257,  257,  549,
      257,  257,  257,  257,  257, 1701,  257,  257,  257,  257,
      257,  563,  257,  257,  257,  257,  257,  529,  257,  257,
      257,  257,  257,  301,  257,  502,  257,  257,  257,  257,
      541,  257,  531,  301,  504,  536,  257,  257,  257,  257,
      503,  257,  527,  542,  506,  301,  301,  301,  301,  505,
      534,  288,  288,  289,  290,  288,  288,  507,  535,  330,
      508,  288,  301,  549,  288,  257,  257,  257,  257,  301,
      257,  333,  301,  509,  333,  301,  511,  257,  257,  257,
      257,  510,  257,  257,  257,  257,  257, 1700,  257,  543,

      301,  485,  544,  257,  257,  257,  257,  576,  257,  331,
      512,  293,  549,  301,  513,  257,  257,  257,  257,  549,
      257,  545,  329,  560,  329,  329,  329,  294,  329,  329,
      334,  335,  336,  334,  332,  295,  336,  335,  336,  336,
      333,  549,  549,  333,  549,  549,  552,  549,  555,  574,
      557,  548,  564, 1699,  549,  566,  553,  558,  554,  549,
      296,  547,  333,  556,  549,  333,  547,  547,  547,  547,
      547,  559,  547,  570,  547,  547,  333,  562,  549,  333,
      547,  547,  547,  547,  547,  549,  547,  568,  547,  550,
      571,  549,  549,  549,  549,  549,  549,  549,  580,  569,

      366,  335,  336,  366,  367,  250,  251,  367,  622,  585,
      375,  583,  375,  251,  645,  587,  577,  575,  375,  573,
      371,  372,  373,  371,  375,  375,  589,  579,  588,  578,
      592,  375,  581,  598,  586,  375,  590,  375,  591,  375,
      595,  375,  594,  375,  375,  593,  597,  375,  375,  375,
      602,  599,  604,  375,  596,  601,  600,  375,  605,  603,
      375,  375,  375,  375,  375,  607,  375,  375,  375,  609,
      606,  375,  608,  404,  372,  373,  404,  375,  250,  408,
      405,  622,  408,  631,  622,  622,  406,  628,  408,  630,
      612,  408,  614,  409,  410,  411,  409,  632,  635,  621,

      613,  611,  629,  616,  622,  615,  617,  622,  618,  622,
      622,  407,  620,  408,  633,  637,  408,  620,  620,  620,
      620,  620,  622,  620,  634,  620,  620,  408,  643,  622,
      408,  620,  620,  620,  620,  620,  622,  620,  622,  620,
      623,  625,  622,  622,  622,  641,  622,  622,  622,  622,
      636,  626,  639,  627,  644,  622,  622,  642,  622,  647,
      301,  734,  733,  649,  441,  410,  411,  441,  622,  250,
      687,  650,  648,  656,  646,  301,  442,  688,  251,  442,
      658,  689,  652,  732,  651,  251,  257,  257,  257,  257,
      301,  257,  737,  654,  653,  257,  257,  257,  257,  301,

      257,  257,  257,  257,  257,  659,  257,  694,  748,  696,
      257,  257,  257,  257,  301,  257,  695,  257,  257,  257,
      257,  622,  257,  257,  257,  257,  257,  698,  257,  257,
      257,  257,  257,  739,  257,  301,  697,  257,  257,  257,
      257,  750,  257,  699,  257,  257,  257,  257,  730,  257,
      738,  301,  301,  700,  257,  257,  257,  257,  702,  257,
      301,  301,  742,  701,  257,  257,  257,  257,  549,  257,
      257,  257,  257,  257,  731,  257,  703,  301,  257,  257,
      257,  257,  705,  257,  704,  257,  257,  257,  257,  301,
      257,  749,  745,  257,  257,  257,  257,  707,  257,  257,

      257,  257,  257,  706,  257,  708,  301,  986,  741,  709,
      257,  257,  257,  257,  549,  257,  257,  257,  257,  257,
      301,  257,  257,  257,  257,  257,  735,  257,  773,  743,
      301,  710,  257,  257,  257,  257,  744,  257,  740,  751,
      712,  301,  301,  711,  257,  257,  257,  257,  301,  257,
      257,  257,  257,  257,  301,  257,  301,  714,  713,  715,
      257,  257,  257,  257,  753,  257,  257,  257,  257,  257,
      549,  257,  257,  257,  257,  257,  301,  257,  257,  257,
      257,  257,  301,  257,  756,  716,  770,  257,  257,  257,
      257,  549,  257,  768,  257,  257,  257,  257,  717,  257,

      257,  257,  257,  257,  754,  257,  257,  257,  257,  257,
      549,  257,  257,  257,  257,  257,  772,  257,  718,  720,
      719,  257,  257,  257,  257,  301,  257,  257,  257,  257,
      257,  721,  257,  549,  257,  257,  257,  257,  722,  257,
      725,  746,  723,  755,  301,  769,  724,  728,  257,  257,
      257,  257,  301,  257,  301,  747,  301,  752,  726,  729,
      301,  301,  333,  301,  301,  333,  333,  727,  549,  333,
      549,  761,  549,  757,  549,  549,  760,  548,  549,  549,
      758,  764,  775,  765,  759,  762,  763,  774,  549,  549,
      767,  549,  771,  777,  549,  778,  776,  549,  549,  779,

      549,  780,  549,  549,  785,  549,  549,  784,  782,  549,
      549,  549,  549,  781,  549,  549,  549,  549,  783,  549,
      375,  549,  786,  367,  375,  251,  367,  375,  375,  375,
      787,  800,  251,  585,  583,  790,  798,  375,  375,  375,
      795,  791,  802,  799,  789,  801,  375,  788,  792,  375,
      805,  375,  793,  794,  796,  797,  807,  804,  586,  375,
      806,  803,  375,  375,  808,  375,  809,  375,  375,  375,
      811,  375,  812,  813,  375,  375,  375,  375,  375,  819,
      375,  375,  810,  814,  816,  818,  375,  375,  622,  375,
      375,  815,  375,  622,  408,  817,  820,  408,  408,  622,

      837,  408,  622,  622,  622,  821,  832,  622,  824,  621,
      840,  622,  833,  836,  622,  622,  622,  823,  825,  829,
      835,  839,  622,  838,  622,  826,  842,  622,  828,  827,
      830,  843,  844,  831,  622,  622,  841,  848,  845,  846,
      622,  622,  847,  622,  622,  622,  622,  853,  622,  622,
      852,  622,  622,  850,  856,  622,  622,  622,  622,  622,
      849,  442,  851,  251,  442,  854,  622,  622,  878,  549,
      251,  932,  929,  855,  930,  301,  858,  940,  931,  658,
      301,  656,  301,  863,  859,  857,  301,  879,  301,  933,
      934,  860,  301, 1309,  862,  861,  864,  865,  257,  257,

      257,  257,  944,  257,  659,  301,  301,  301,  899,  257,
      257,  257,  257,  935,  257,  257,  257,  257,  257,  900,
      257,  257,  257,  257,  257,  945,  257,  257,  257,  257,
      257,  939,  257,  951,  870,  301,  902,  301,  257,  257,
      257,  257,  901,  257,  257,  257,  257,  257,  301,  257,
      257,  257,  257,  257,  941,  257,  301,  937,  301,  375,
      903,  257,  257,  257,  257,  936,  257,  257,  257,  257,
      257,  301,  257,  942,  904,  257,  257,  257,  257, 1695,
      257,  905,  876,  301,  943, 1001,  906,  257,  257,  257,
      257,  907,  257,  257,  257,  257,  257,  952,  257,  954,

      878,  301,  257,  257,  257,  257,  908,  257,  946,  880,
      257,  257,  257,  257,  301,  257,  301,  950,  549,  909,
      257,  257,  257,  257,  947,  257,  979,  301,  301,  301,
      301,  910,  911,  257,  257,  257,  257,  948,  257,  257,
      257,  257,  257,  956,  257,  257,  257,  257,  257,  912,
      257,  257,  257,  257,  257,  301,  257,  375,  913,  257,
      257,  257,  257,  301,  257,  257,  257,  257,  257,  549,
      257,  962,  916,  957,  966,  549,  914,  301,  257,  257,
      257,  257,  915,  257,  949,  889,  953,  917,  257,  257,
      257,  257, 1015,  257,  257,  257,  257,  257,  549,  257,

      257,  257,  257,  257,  375,  257,  257,  257,  257,  257,
      301,  257,  967,  257,  257,  257,  257,  301,  257,  257,
      257,  257,  257,  959,  257,  257,  257,  257,  257,  301,
      257,  257,  257,  257,  257,  918,  257,  301,  301,  955,
      919,  257,  257,  257,  257,  958,  257,  549,  960,  963,
      549,  961,  920,  921,  257,  257,  257,  257,  549,  257,
      549,  922,  549, 1114,  549,  923,  301,  965,  924,  257,
      257,  257,  257,  969,  257,  970,  925,  257,  257,  257,
      257,  964,  257,  549,  549,  927,  968,  257,  257,  257,
      257,  926,  257,  972,  549,  549,  974,  549,  549,  903,

      971,  976,  549,  549,  549,  549,  973,  928,  978,  549,
      549,  977,  549,  549,  980,  975,  549,  983,  985,  549,
      549,  988,  549,  375,  984,  549,  549,  375,  981,  375,
      375,  375,  982,  998,  995,  996,  375,  375,  870,  375,
      375,  375,  876,  375,  375,  989,  878,  375,  999,  997,
      990,  992,  991,  993,  994,  375,  375, 1004,  880, 1002,
     1003,  375, 1000, 1006,  375, 1005, 1008,  375, 1007,  375,
      375,  375,  375,  375,  889,  375,  375,  375, 1009, 1012,
      375,  622,  375,  375,  622,  622,  375, 1013,  622,  622,
     1023, 1024, 1026, 1010,  622, 1011, 1027,  622, 1028,  622,

     1025,  622,  622, 1033,  622,  622, 1035,  622,  622,  622,
     1032, 1017, 1020, 1021, 1018, 1014, 1016, 1019, 1022, 1031,
     1034, 1029, 1037,  622, 1030, 1036,  622,  622,  622,  622,
      622, 1039,  622,  622,  622,  622, 1040,  622, 1044, 1038,
     1041, 1046,  622,  622, 1047,  622, 1049,  622, 1045,  622,
     1079,  622, 1082, 1042, 1110, 1043,  257,  257,  257,  257,
     1111,  257,  301,  301, 1080, 1112, 1083, 1048, 1113, 1050,
      301, 1084,  301,  301, 1053, 1120, 1054, 1051, 1135, 1052,
     1055,  257,  257,  257,  257,  301,  257,  257,  257,  257,
      257,  301,  257, 1085,  257,  257,  257,  257, 1115,  257,

     1119, 1059,  257,  257,  257,  257, 1086,  257,  257,  257,
      257,  257,  301,  257,  257,  257,  257,  257,  298,  257,
      298,  298,  549, 1087,  257,  257,  257,  257, 1116,  257,
      301, 1063,  301, 1140, 1089,  257,  257,  257,  257, 1088,
      257,  257,  257,  257,  257, 1128,  257,  257,  257,  257,
      257, 1125,  257,  257,  257,  257,  257, 1117,  257, 1091,
      257,  257,  257,  257,  301,  257, 1090, 1067,  257,  257,
      257,  257,  301,  257,  301,  257,  257,  257,  257, 1092,
      257,  257,  257,  257,  257,  549,  257,  257,  257,  257,
      257, 1095,  257,  301, 1131, 1121, 1093,  301, 1096, 1123,

     1118, 1094,  257,  257,  257,  257, 1124,  257,  257,  257,
      257,  257,  301,  257,  257,  257,  257,  257,  301,  257,
      301, 1097, 1122,  257,  257,  257,  257, 1098,  257,  257,
      257,  257,  257,  549,  257,  257,  257,  257,  257,  301,
      257,  257,  257,  257,  257, 1144,  257,  257,  257,  257,
      257, 1688,  257, 1099,  257,  257,  257,  257, 1129,  257,
      257,  257,  257,  257,  549,  257, 1100,  257,  257,  257,
      257, 1138,  257, 1101,  257,  257,  257,  257,  298,  257,
      298,  298,  301, 1126,  549, 1103, 1152, 1102,  301, 1104,
      257,  257,  257,  257, 1127,  257, 1130, 1109,  927,  301,

     1106,  301, 1107, 1105,  298,  301,  298,  298,  298,  301,
      298,  298,  298,  301,  298,  298, 1108,  549,  549, 1132,
     1133, 1139, 1141,  549, 1136,  333,  549,  549,  333, 1145,
      549, 1142,  333,  333, 1134,  333,  333,  549, 1137,  333,
      549, 1147,  333, 1149,  549,  549,  549,  549,  549, 1143,
     1146, 1153,  549,  333,  549,  549,  333,  549, 1148,  549,
      549,  549,  549, 1154, 1151, 1150, 1155,  375,  549,  375,
      375,  375,  375, 1059,  375,  375, 1167, 1166, 1156,  375,
      375,  375, 1063,  375, 1168,  375, 1173, 1158, 1161, 1157,
     1160, 1169,  375,  375, 1163, 1164, 1171, 1159, 1170,  375,

     1172, 1067, 1162,  375, 1174,  375,  375, 1179, 1175, 1165,
     1177,  375, 1178, 1176,  375,  375,  375, 1180,  375,  375,
      375,  622,  622,  375,  622,  622, 1192,  622, 1191, 1194,
      622,  408,  622,  622,  408, 1193, 1198,  622, 1195,  408,
      408,  622,  408,  408, 1197, 1181,  622,  622, 1183, 1186,
     1196, 1185, 1182, 1189,  622, 1188, 1199, 1184, 1200,  408,
     1202,  622,  408, 1187, 1201,  622,  622, 1190,  622,  622,
     1205,  622, 1206,  408,  622,  622,  408,  622, 1209, 1212,
      622,  622, 1207,  622, 1204, 1203, 1208,  622, 1219, 1268,
      301, 1270, 1220,  257,  257,  257,  257,  301,  257, 1269,

     1219, 1271,  301, 1272, 1245,  301,  301, 1211, 1214, 1210,
     1213, 1278, 1687,  301, 1217, 1216,  257,  257,  257,  257,
     1273,  257, 1215, 1221,  257,  257,  257,  257, 1218,  257,
      257,  257,  257,  257,  301,  257,  257,  257,  257,  257,
     1275,  257,  257,  257,  257,  257, 1276,  257, 1266, 1277,
     1246,  298, 1267,  298,  298, 1247, 1248,  301,  257,  257,
      257,  257,  301,  257, 1281,  301,  301, 1249, 1250,  257,
      257,  257,  257,  375,  257,  257,  257,  257,  257, 1685,
      257,  301, 1228,  257,  257,  257,  257,  298,  257,  298,
      298, 1252, 1324, 1251,  257,  257,  257,  257,  549,  257,

     1279, 1230,  257,  257,  257,  257, 1280,  257,  257,  257,
      257,  257,  301,  257,  257,  257,  257,  257,  301,  257,
     1254,  301, 1311,  301, 1253,  301, 1255,  257,  257,  257,
      257,  301,  257, 1283, 1234,  257,  257,  257,  257, 1289,
      257,  257,  257,  257,  257, 1282,  257,  257,  257,  257,
      257, 1284,  257,  257,  257,  257,  257,  549,  257,  257,
      257,  257,  257,  301,  257,  257,  257,  257,  257,  298,
      257,  298,  298, 1257,  257,  257,  257,  257,  301,  257,
      549, 1256, 1299, 1286, 1314, 1259, 1285,  257,  257,  257,
      257, 1258,  257,  257,  257,  257,  257, 1261,  257,  257,

      257,  257,  257, 1260,  257,  257,  257,  257,  257, 1262,
      257,  301,  301,  301,  549,  301, 1292,  549,  549, 1287,
     1293, 1290,  549, 1288,  549, 1264, 1291, 1294,  549, 1263,
      333,  549, 1295,  333, 1265, 1296, 1297,  333,  549, 1298,
      333, 1301,  549,  333, 1303,  549,  333, 1300,  549,  549,
      549,  549, 1304, 1305, 1306, 1307,  549,  549,  549,  549,
      549,  549,  375,  375, 1219, 1221,  375,  375, 1318,  375,
      375,  375,  375,  375,  375, 1323, 1228,  375,  375,  375,
     1325, 1321, 1313, 1316, 1326, 1327, 1308, 1310, 1317,  375,
     1319, 1320, 1322, 1312, 1315,  375, 1328, 1230,  375,  375,

     1234,  375,  375,  375,  375,  375, 1330,  375,  375, 1339,
      622, 1341,  622, 1340, 1329,  622,  408,  622,  408,  408,
      622,  408,  622,  622,  622,  622, 1346, 1684, 1332, 1344,
     1334, 1348,  622, 1342, 1335, 1337, 1347, 1338, 1331, 1343,
     1345, 1333, 1336,  408, 1350,  622,  408,  622,  622,  622,
     1354,  622, 1352, 1353,  622,  622,  622,  622,  622,  622,
      622, 1351,  622, 1355,  622,  257,  257,  257,  257, 1407,
      257,  257,  257,  257,  257, 1404,  257, 1385, 1356,  301,
     1358,  298, 1360,  298,  298,  549, 1361,  301, 1363, 1364,
      301, 1357, 1405, 1359, 1362,  257,  257,  257,  257, 1428,

      257,  257,  257,  257,  257, 1408,  257,  301,  257,  257,
      257,  257, 1683,  257,  257,  257,  257,  257, 1413,  257,
     1411, 1386, 1388,  301, 1406,  301, 1387,  257,  257,  257,
      257,  298,  257,  298,  298,  301, 1389,  257,  257,  257,
      257,  301,  257,  257,  257,  257,  257,  301,  257,  301,
     1409,  549, 1390,  257,  257,  257,  257,  298,  257,  298,
      298, 1416, 1392,  549, 1391,  257,  257,  257,  257, 1417,
      257,  301, 1374,  301, 1410,  549, 1393,  257,  257,  257,
      257, 1425, 1394,  257,  257,  257,  257, 1436,  257,  257,
      257,  257,  257, 1418,  257,  257,  257,  257,  257,  549,

      257,  257,  257,  257,  257, 1427,  257,  257,  257,  257,
      257, 1438,  257,  257,  257,  257,  257, 1520,  257,  257,
      257,  257,  257,  298,  257,  298,  298,  301, 1395,  257,
      257,  257,  257, 1396,  257,  257,  257,  257,  257,  301,
      257, 1397, 1412,  301,  298, 1398,  298,  298, 1414,  301,
      301,  301, 1399,  549,  301,  301, 1421, 1424, 1400,  333,
     1401,  333,  333,  549,  333,  549,  549,  301,  549,  549,
     1415, 1419, 1420,  549, 1402, 1422, 1423,  549,  333,  549,
     1403,  333, 1426, 1429, 1431,  333,  549, 1430,  333, 1433,
      549,  333, 1432, 1434,  333,  549,  549,  549,  549,  375,

     1435,  375,  375,  375,  375,  375, 1444, 1437,  375,  375,
      375, 1447,  375,  375,  375, 1374, 1439,  375,  375,  375,
     1448,  375, 1445, 1440, 1446, 1449, 1451, 1452, 1441,  375,
     1450,  375,  375,  408, 1442, 1443,  408,  622,  622,  408,
      622, 1463,  408,  622,  622,  622, 1466,  622,  622,  408,
     1454,  408,  408, 1455,  408,  622, 1464, 1457, 1456, 1458,
     1465, 1459, 1467, 1469, 1468, 1460, 1470,  622, 1472,  622,
      408, 1461, 1462,  408, 1473,  622,  622,  622,  622,  622,
      622, 1475, 1471,  622,  622,  622,  257,  257,  257,  257,
     1518,  257,  257,  257,  257,  257, 1521,  257, 1522, 1501,

     1524,  301,  301,  301, 1502,  257,  257,  257,  257,  301,
      257, 1480, 1474,  301, 1476, 1477,  301, 1478, 1525, 1503,
     1479, 1481, 1482,  257,  257,  257,  257, 1528,  257, 1519,
     1486,  257,  257,  257,  257,  301,  257,  257,  257,  257,
      257,  301,  257,  257,  257,  257,  257,  375,  257, 1533,
     1504,  257,  257,  257,  257, 1554,  257,  301,  257,  257,
      257,  257, 1505,  257,  257,  257,  257,  257,  298,  257,
      298,  298,  301, 1506,  257,  257,  257,  257, 1527,  257,
      257,  257,  257,  257, 1507,  257,  257,  257,  257,  257,
     1530,  257,  257,  257,  257,  257,  549,  257,  257,  257,

      257,  257, 1538,  257,  375,  257,  257,  257,  257, 1509,
      257,  298,  301,  298,  298, 1511, 1510,  257,  257,  257,
      257, 1559,  257, 1529,  257,  257,  257,  257, 1512,  257,
     1523,  301,  301,  301,  301,  301,  549,  549, 1513, 1539,
      549, 1536,  549, 1515, 1514,  549, 1537,  549, 1540,  549,
     1526,  549,  549, 1531, 1532, 1534, 1535,  333, 1541, 1542,
      333,  333,  549, 1516,  333,  549,  549, 1543,  549,  549,
     1517,  549,  549,  375,  375,  375,  375, 1486,  375,  375,
     1555,  375,  375, 1556,  375,  375, 1546,  375, 1545, 1547,
     1557,  375, 1558,  375,  375,  375, 1574,  622,  622, 1548,

     1544, 1551, 1560, 1571, 1549,  622, 1550, 1552,  622, 1572,
     1553,  622, 1564,  622, 1573,  622,  622,  408,  622, 1562,
      408, 1563, 1565,  622, 1575, 1577, 1568, 1576, 1566,  622,
      622,  408, 1567, 1578,  408, 1569, 1570,  622,  622,  622,
      622,  622,  257,  257,  257,  257,  549,  257, 1609, 1589,
     1611,  298,  622,  298,  298, 1580, 1582, 1581,  257,  257,
      257,  257, 1621,  257, 1583,  301, 1612,  301,  301, 1586,
     1579,  301, 1615, 1613,  301, 1584, 1585, 1614, 1587, 1588,
      301,  301, 1600,  257,  257,  257,  257,  301,  257, 1619,
     1591,  257,  257,  257,  257,  622,  257,  257,  257,  257,

      257,  301,  257,  257,  257,  257,  257, 1617,  257,  257,
      257,  257,  257, 1601,  257,  257,  257,  257,  257,  333,
      257, 1618,  333, 1602, 1604,  375,  257,  257,  257,  257,
     1603,  257,  257,  257,  257,  257,  549,  257,  257,  257,
      257,  257, 1632,  257,  257,  257,  257,  257,  622,  257,
      257,  257,  257,  257, 1624,  257,  257,  257,  257,  257,
      549,  257,  257,  257,  257,  257,  298,  257,  298,  298,
     1606,  257,  257,  257,  257,  549,  257, 1620,  549, 1622,
      549,  549, 1607,  549,  333,  549,  549,  333,  375, 1608,
     1626,  375,  375, 1589, 1625, 1623, 1628,  375,  375, 1591,

      375,  375,  375,  375, 1640,  622, 1616, 1631,  622,  622,
     1635, 1630,  622, 1633, 1642,  622,  408,  622,  622,  408,
     1634, 1629, 1643,  622, 1627, 1641,  622,  622,  375,  408,
     1644, 1639,  408, 1646,  375,  298, 1645,  298,  298,  375,
     1637, 1638,  257,  257,  257,  257, 1676,  257,  257,  257,
      257,  257, 1650,  257, 1648,  257,  257,  257,  257, 1649,
      257,  549, 1653,  257,  257,  257,  257, 1657,  257, 1647,
      549,  257,  257,  257,  257, 1658,  257, 1670, 1655,  257,
      257,  257,  257,  549,  257,  301, 1661, 1659,  257,  257,
      257,  257, 1663,  257,  257,  257,  257,  257,  298,  257,

      298,  298,  301, 1665,  298, 1662,  298,  298,  333,  301,
      549,  333,  333,  549,  375,  333, 1669,  549, 1671,  549,
      301,  333,  375,  375,  333, 1653,  375, 1667,  375,  622,
     1655,  622, 1668,  408, 1673,  408,  408,  622,  408, 1679,
      622, 1681,  622,  549, 1674, 1675, 1677,  375,  408, 1684,
     1678,  408, 1666, 1680,  257,  257,  257,  257,  549,  257,
      257,  257,  257,  257,  298,  257,  298,  298, 1689, 1672,
      257,  257,  257,  257, 1691,  257,  298, 1684,  298,  298,
      298,  375,  298,  298, 1686,  301,  333, 1692,  549,  333,
      333,  333,  622,  333,  333,  408, 1682,  375,  408, 1699,

     1694, 1697,  622,  408,  408, 1702,  408,  408, 1696,  257,
      257,  257,  257,  301,  257,  298, 1699,  298,  298, 1704,
      549,  298,  301,  298,  298,  333,  333,  408,  333,  333,
      408, 1690, 1707,  622,  408,  301,  298,  408,  298,  298,
      301,  298, 1693,  298,  298,  333,  333,  408,  333,  333,
      408, 1664, 1660, 1710,  408, 1698, 1656,  408, 1711,  298,
     1655,  298,  298, 1703,  333, 1654, 1712,  333, 1705,  408,
     1653, 1652,  408, 1651,  622,  622, 1708,  251,  622,  251,
      251,  251,  251,  251,  255,  622,  622,  255,  255,  255,
      255,  257,  622,  257,  257,  259,  375,  259,  259,  291,

      291,  291,  291,  291,  291,  291,  297,  375,  297,  297,
      297,  297,  297,  301,  375,  301,  301,  301,  301,  301,
      328,  375,  328,  328,  328,  328,  328,  333,  375,  375,
      333, 1636,  333,  333,  339,  549,  549,  339,  549,  339,
      339,  367,  549,  367,  367,  367,  367,  367,  375,  375,
      377,  377,  408,  549,  549,  408,  301,  408,  408,  414,
      301,  301,  414,  301,  414,  414,  442,  301,  442,  442,
      442,  442,  442,  288,  288,  288,  288,  288,  288,  288,
      547,  301, 1610,  547, 1605,  547,  547,  549, 1599, 1598,
      549, 1597,  549,  549,  582, 1596,  582,  582,  582,  582,

      582,  620, 1595, 1594,  620, 1593,  620,  620,  622, 1592,
     1591,  622, 1590,  622,  622,  655, 1589,  655,  655,  655,
      655,  655,  622, 1561,  375,  549,  301, 1508, 1500, 1499,
     1498, 1497, 1496, 1495, 1494, 1493, 1492, 1491, 1490, 1489,
     1488, 1487, 1486, 1485, 1484, 1483,  622, 1453,  375,  549,
      301, 1384, 1383, 1382, 1381, 1380, 1379, 1378, 1377, 1376,
     1375, 1374, 1373, 1372, 1371, 1370, 1369, 1368, 1367, 1366,
     1365, 1349, 1302, 1274, 1244, 1243, 1242, 1241, 1240, 1239,
     1238, 1237, 1236, 1235, 1234, 1233, 1232, 1231, 1230, 1229,
     1228, 1227, 1226, 1225, 1224, 1223, 1222, 1221,  622,  622,

      375,  375,  549,  549,  301,  301, 1081, 1078, 1077, 1076,
     1075, 1074, 1073, 1072, 1071, 1070, 1069, 1068, 1067, 1066,
     1065, 1064, 1063, 1062, 1061, 1060, 1059, 1058, 1057, 1056,
      622,  622,  375,  375,  549,  549,  301,  301,  938,  898,
      897,  896,  895,  894,  893,  892,  891,  890,  889,  888,
      887,  886,  885,  884,  883,  882,  881,  880,  877,  876,
      875,  874,  873,  872,  871,  870,  869,  868,  867,  866,
      657,  622,  834,  622,  375,  584,  549,  766,  549,  301,
      736,  693,  692,  691,  690,  686,  685,  684,  683,  682,
      681,  680,  679,  678,  677,  676,  675,  674,  673,  672,

      671,  670,  669,  668,  667,  666,  665,  664,  663,  662,
      661,  660,  657,  640,  638,  624,  410,  375,  376,  372,
      584,  567,  565,  551,  301,  258,  252,  478,  477,  476,
      475,  472,  471,  470,  469,  468,  467,  466,  463,  462,
      461,  460,  459,  458,  457,  456,  453,  447,  446,  221,
      425,  413,  412,  375,  376,  374,  350,  338,  312,  299,
      258,  248,  247,  246,  245,  244,  241,  240,  237,  233,
      232,  231,  230,  229,  228,  225,  224,  223,  221,  220,
     1713,   13, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,

     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713
    } ;

static yyconst short int yy_chk[4739] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    2,   15,   28,    2,
       15,    2,   35,   35,   37,   40,   28,   46,   48,   49,
       46,   35,   46,   50,   40,   78,   50, 1714,   78,   37,
       78,    2,   48,   56,   56,   56,   56,   83,   56,   83,
       83,   49,   95,   99,   49,   65,   65,   65,   65,   86,

       65,   86,   86,   65,   95,   99,    2,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    4,   94,   98,    4,   98,    4,   57,
       57,   57,   57,   94,   57,  107,   58,   58,   58,   58,
        4,   58,   59,   59,   59,   59,  107,   59,    4,  101,
      100,   58,  100,   57,   59,   63,   63,   63,   63,  245,

       63,   70,   70,   70,   70,  101,   70,   63,   87,   70,
       87,   87,  245,    4,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        6,  105,  104,    6,  104,    6,   60,   60,   60,   60,
      105,   60,   61,   61,   61,   61,  105,   61,   62,   62,
       62,   62, 1706,   62,  110,    6,   88,   60,   88,   88,

       89,   61,   89,   89,  129,   60,   79,   79,   79,   79,
       79,   79,  110,  129,   62,   90,   79,   90,   90,   79,
        6,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    8,  611,  111,
        8,  112,    8,   64,   64,   64,   64,  111,   64,   66,
       66,   66,   66,  106,   66,   67,   67,   67,   67,  112,

       67,   91,    8,   91,   91,   64,  109,  113,   96,  106,
      115,   96,   91,   66,   67,   67,   96,   97,  113,  611,
      132,  109,   97,   67,  115,  132,  115,    8,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,   10, 1701,  133,   10,  133,   10,
       68,   68,   68,   68,  130,   68,   69,   69,   69,   69,

      108,   69,   80,   80,   80,   80,  130,   80,  108,   10,
      142,   69,   68,  103,  103,  144,  131,  108,  103,  131,
      134,  142,  103,   80,  131,  114,   69,  114,  114,  309,
      144,   80,  134,  309,   10,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   12,  140,  135,   12,  135,   12,   71,   71,   71,

       71,  140,   71,   72,   72,   72,   72,  140,   72,   73,
       73,   73,   73,  136,   73,  357,   12,   74,   74,   74,
       74,  357,   74,   75,   75,   75,   75,  141,   75,  136,
      166,  139,   71,  139,  148,   72,  160,   76,   76,   76,
       76,   12,   76,  141,   72,  148,  160,  166,   73,   77,
       77,   77,   77,  116,   77,   75,  143,  116,  145,   74,
       81,   81,   81,   81,  143,   81,  146,  151,   81,  118,
      118,  118,  118,  143,  146,  116,  145,  196,  116,   76,
      147,  151,   81,  151,   77,   82,   82,   82,   82,  196,
       82,  120,  120,  120,  120,  138,  138,   82,  147,  159,

      138,  162, 1700,  150,  138,   82,  149,  149,  149,  149,
      150,  149,  153,  153,  153,  153,  161,  162,  159,  163,
      199,  165,  199,  161,  176,  162,  167,   82,  165,  167,
       82,   92,   92,  163,   92,   92,   92,   92,   92,   92,
       92,   92,   92,  152,   92,   93,   93,  152,   93,   93,
       93,   93,   93,   93,   93,   93,   93,  164,   93,  172,
      168,  176,  172,  171, 1695,  152,  174,  216,  152,  170,
      173,  175,  178,  171,  216,   93,  127,  127,  164,  168,
      127,  127,  127,  127,  127,  127,  170,  127,  171,  127,
      128,  128,  169,  174,  128,  128,  128,  128,  128,  128,

      173,  128,  174,  128,  177,  175,  169,  169,  179,  178,
      182,  180,  180,  180,  180,  169,  180,  198,  181,  210,
      128,  181,  198,  195,  202,  182,  184,  184,  184,  184,
      200,  177,  195,  197,  210,  181,  197,  201,  179,  201,
      202,  197,  200,  208,  204,  204,  205,  182,  205,  204,
      182,  193,  193,  204,  208,  193,  193,  193,  193,  193,
      193,  396,  193,  207,  193,  194,  194,  209,  206,  194,
      194,  194,  194,  194,  194,  209,  194,  206,  194,  207,
      211,  212,  213,  206,  209,  214,  218,  288,  288,  212,
      218,  217,  396,  254,  219,  194,  214,  219,  211,  226,

      213,  215,  215,  215,  215,  217,  215,  217,  218,  225,
      228,  218,  249,  237,  226,  249,  347,  249,  254,  225,
      256,  225,  306,  256,  228,  237,  259,  259,  259,  259,
      306,  259,  260,  260,  260,  260,  347,  260,  290,  290,
      260,  261,  261,  261,  261,  297,  261,  297,  297,  261,
      262,  262,  262,  262,  308,  262,  263,  263,  263,  263,
      312,  263,  298,  262,  298,  298,  308,  263,  312,  264,
      264,  264,  264,  262,  264,  262,  265,  265,  265,  265,
      305,  265,  263,  310,  265,  264,  310,  266,  266,  266,
      266,  286,  266,  305,  286,  305,  286,  789,  265,  266,

      267,  267,  267,  267,  320,  267,  268,  268,  268,  268,
      302,  268,  269,  269,  269,  269,  320,  269,  270,  270,
      270,  270,  300,  270,  300,  300,  302,  268,  267,  789,
      323,  314,  269,  300,  270,  271,  271,  271,  271,  314,
      271,  303,  316,  271,  272,  272,  272,  272,  323,  272,
      273,  273,  273,  273,  316,  273,  316,  303,  273,  405,
      272,  274,  274,  274,  274,  307,  274,  275,  275,  275,
      275,  274,  275,  276,  276,  276,  276,  405,  276,  307,
      304,  307,  321,  274,  277,  277,  277,  277,  322,  277,
      304,  304,  304,  276,  275,  330,  330,  322,  277,  278,

      278,  278,  278,  321,  278,  279,  279,  279,  279,  349,
      279,  280,  280,  280,  280, 1687,  280,  281,  281,  281,
      281,  349,  281,  282,  282,  282,  282,  313,  282,  283,
      283,  283,  283,  324,  283,  278,  284,  284,  284,  284,
      324,  284,  315,  313,  280,  319,  285,  285,  285,  285,
      279,  285,  311,  324,  282,  319,  311,  317,  315,  281,
      317,  291,  291,  291,  291,  291,  291,  282,  318,  331,
      283,  291,  318,  361,  291,  292,  292,  292,  292,  326,
      292,  333,  325,  284,  333,  331,  292,  293,  293,  293,
      293,  285,  293,  294,  294,  294,  294, 1685,  294,  325,

      327,  292,  326,  295,  295,  295,  295,  361,  295,  332,
      293,  295,  359,  332,  294,  296,  296,  296,  296,  346,
      296,  327,  328,  346,  328,  328,  329,  296,  329,  329,
      334,  334,  334,  334,  332,  296,  336,  336,  336,  336,
      338,  342,  344,  338,  350,  343,  342,  352,  343,  359,
      344,  338,  350, 1683,  355,  352,  342,  345,  342,  364,
      296,  339,  339,  343,  348,  339,  339,  339,  339,  339,
      339,  345,  339,  355,  339,  340,  340,  348,  356,  340,
      340,  340,  340,  340,  340,  354,  340,  354,  340,  340,
      356,  358,  360,  362,  363,  365,  368,  370,  364,  354,

      366,  366,  366,  366,  367,  366,  367,  367,  432,  370,
      385,  368,  378,  367,  432,  378,  362,  360,  380,  358,
      371,  371,  371,  371,  381,  379,  380,  363,  379,  362,
      381,  382,  365,  385,  370,  386,  380,  383,  380,  384,
      383,  387,  382,  393,  388,  381,  384,  389,  390,  391,
      389,  386,  391,  392,  383,  388,  387,  394,  392,  390,
      395,  397,  398,  399,  402,  393,  400,  401,  403,  395,
      392,  407,  394,  404,  404,  404,  404,  406,  404,  408,
      406,  419,  408,  420,  418,  423,  407,  418,  413,  419,
      398,  413,  400,  409,  409,  409,  409,  420,  423,  413,

      399,  397,  418,  401,  422,  400,  402,  425,  403,  430,
      421,  407,  414,  414,  421,  425,  414,  414,  414,  414,
      414,  414,  434,  414,  422,  414,  415,  415,  430,  436,
      415,  415,  415,  415,  415,  415,  417,  415,  424,  415,
      415,  417,  431,  429,  427,  429,  433,  435,  437,  438,
      424,  417,  427,  417,  431,  439,  440,  429,  443,  434,
      517,  518,  517,  436,  441,  441,  441,  441,  445,  441,
      473,  437,  435,  443,  433,  518,  442,  473,  442,  442,
      445,  473,  438,  516,  437,  442,  479,  479,  479,  479,
      521,  479,  521,  440,  439,  480,  480,  480,  480,  516,

      480,  481,  481,  481,  481,  445,  481,  479,  532,  481,
      482,  482,  482,  482,  532,  482,  480,  483,  483,  483,
      483, 1677,  483,  484,  484,  484,  484,  483,  484,  485,
      485,  485,  485,  523,  485,  523,  482,  486,  486,  486,
      486,  534,  486,  484,  487,  487,  487,  487,  514,  487,
      522,  514,  534,  485,  488,  488,  488,  488,  487,  488,
      522,  526,  526,  486,  489,  489,  489,  489,  787,  489,
      490,  490,  490,  490,  515,  490,  488,  515,  491,  491,
      491,  491,  490,  491,  489,  492,  492,  492,  492,  533,
      492,  533,  529,  493,  493,  493,  493,  492,  493,  494,

      494,  494,  494,  491,  494,  493,  529,  787,  525,  494,
      495,  495,  495,  495,  559,  495,  496,  496,  496,  496,
      525,  496,  497,  497,  497,  497,  519,  497,  559,  527,
      519,  495,  498,  498,  498,  498,  528,  498,  524,  535,
      497,  527,  524,  496,  499,  499,  499,  499,  528,  499,
      500,  500,  500,  500,  535,  500,  537,  499,  498,  500,
      501,  501,  501,  501,  537,  501,  502,  502,  502,  502,
      556,  502,  503,  503,  503,  503,  540,  503,  504,  504,
      504,  504,  538,  504,  540,  501,  556,  505,  505,  505,
      505,  554,  505,  554,  506,  506,  506,  506,  502,  506,

      507,  507,  507,  507,  538,  507,  508,  508,  508,  508,
      558,  508,  509,  509,  509,  509,  558,  509,  503,  505,
      504,  510,  510,  510,  510,  539,  510,  511,  511,  511,
      511,  506,  511,  555,  512,  512,  512,  512,  506,  512,
      508,  530,  506,  539,  530,  555,  507,  511,  513,  513,
      513,  513,  531,  513,  542,  531,  536,  536,  509,  513,
      541,  543,  547,  544,  545,  547,  548,  510,  550,  548,
      551,  543,  553,  541,  557,  560,  542,  548,  561,  562,
      541,  550,  561,  551,  541,  544,  545,  560,  566,  563,
      553,  564,  557,  563,  567,  564,  562,  565,  568,  565,

      569,  566,  570,  571,  571,  572,  573,  570,  568,  574,
      575,  576,  577,  567,  579,  578,  580,  581,  569,  584,
      587,  586,  572,  582,  590,  582,  582,  588,  589,  594,
      573,  589,  582,  586,  584,  576,  587,  591,  593,  596,
      579,  577,  591,  588,  575,  590,  592,  574,  577,  597,
      594,  595,  577,  578,  580,  581,  596,  593,  586,  598,
      595,  592,  599,  600,  597,  601,  598,  603,  602,  604,
      600,  605,  601,  602,  606,  608,  609,  607,  610,  608,
      612,  613,  599,  603,  605,  607,  614,  615,  628,  617,
      616,  604,  618,  623,  620,  606,  609,  620,  621,  624,

      628,  621,  626,  630,  631,  610,  623,  629,  613,  621,
      631,  627,  624,  627,  633,  635,  647,  612,  614,  616,
      626,  630,  632,  629,  639,  614,  633,  634,  615,  614,
      617,  634,  635,  618,  636,  637,  632,  639,  636,  637,
      638,  640,  638,  641,  642,  643,  644,  644,  645,  646,
      643,  648,  649,  641,  647,  650,  651,  652,  653,  654,
      640,  655,  642,  655,  655,  645,  657,  659,  672, 1157,
      655,  733,  730,  646,  731,  732,  649,  741,  732,  659,
      733,  657,  741,  652,  650,  648,  730,  672,  731,  734,
      735,  650,  735, 1157,  651,  650,  653,  654,  694,  694,

      694,  694,  744,  694,  659,  744,  734,  736,  694,  695,
      695,  695,  695,  736,  695,  696,  696,  696,  696,  695,
      696,  697,  697,  697,  697,  745,  697,  698,  698,  698,
      698,  740,  698,  751,  698,  751,  697,  745,  699,  699,
      699,  699,  696,  699,  700,  700,  700,  700,  740,  700,
      701,  701,  701,  701,  742,  701,  738,  738,  737,  805,
      699,  702,  702,  702,  702,  737,  702,  703,  703,  703,
      703,  742,  703,  742,  700,  704,  704,  704,  704, 1676,
      704,  701,  704,  755,  743,  805,  702,  705,  705,  705,
      705,  703,  705,  706,  706,  706,  706,  752,  706,  755,

      706,  743,  707,  707,  707,  707,  705,  707,  746,  707,
      708,  708,  708,  708,  752,  708,  746,  750,  780,  706,
      709,  709,  709,  709,  747,  709,  780,  757,  750,  747,
      748,  708,  709,  710,  710,  710,  710,  748,  710,  711,
      711,  711,  711,  757,  711,  712,  712,  712,  712,  710,
      712,  713,  713,  713,  713,  758,  713,  823,  711,  714,
      714,  714,  714,  753,  714,  715,  715,  715,  715,  764,
      715,  764,  714,  758,  768,  768,  712,  749,  716,  716,
      716,  716,  713,  716,  749,  716,  753,  715,  717,  717,
      717,  717,  823,  717,  718,  718,  718,  718,  769,  718,

      719,  719,  719,  719, 1673,  719,  720,  720,  720,  720,
      760,  720,  769,  721,  721,  721,  721,  756,  721,  722,
      722,  722,  722,  760,  722,  723,  723,  723,  723,  759,
      723,  724,  724,  724,  724,  717,  724,  761,  762,  756,
      719,  725,  725,  725,  725,  759,  725,  765,  761,  765,
      771,  762,  720,  721,  726,  726,  726,  726,  772,  726,
      767,  722,  766,  934,  770,  723,  934,  767,  724,  727,
      727,  727,  727,  771,  727,  772,  725,  728,  728,  728,
      728,  766,  728,  790,  773,  728,  770,  729,  729,  729,
      729,  726,  729,  774,  774,  775,  776,  776,  778,  728,

      773,  777,  777,  781,  779,  782,  775,  729,  779,  783,
      785,  778,  784,  791,  781,  776,  792,  784,  786,  786,
      793,  790,  794,  801,  785,  796,  795,  800,  782,  798,
      799,  803,  783,  801,  798,  799,  802,  804,  802,  806,
      808,  807,  808,  809,  810,  791,  810,  812,  803,  800,
      792,  794,  793,  795,  796,  814,  811,  809,  811,  806,
      807,  813,  804,  812,  815,  810,  814,  816,  813,  817,
      819,  818,  820,  821,  820,  824,  825,  826,  815,  818,
      828,  834,  827,  829,  837,  835,  830,  819,  832,  833,
      832,  833,  835,  816,  841,  817,  836,  836,  837,  838,

      834,  839,  840,  842,  842,  855,  844,  844,  858,  843,
      841,  825,  828,  829,  826,  821,  824,  827,  830,  840,
      843,  838,  845,  845,  839,  844,  846,  847,  848,  849,
      850,  847,  851,  852,  853,  857,  848,  859,  852,  846,
      849,  854,  854,  860,  855,  862,  858,  861,  853,  863,
      896,  864,  898,  850,  929,  851,  899,  899,  899,  899,
      930,  899,  960,  929,  896,  931,  898,  857,  932,  859,
      931,  899,  930,  944,  862,  944,  863,  860,  960,  861,
      864,  900,  900,  900,  900,  932,  900,  901,  901,  901,
      901,  935,  901,  900,  902,  902,  902,  902,  935,  902,

      942,  902,  903,  903,  903,  903,  901,  903,  904,  904,
      904,  904,  942,  904,  905,  905,  905,  905,  933,  905,
      933,  933,  964,  903,  906,  906,  906,  906,  936,  906,
      953,  906,  936,  964,  905,  907,  907,  907,  907,  904,
      907,  908,  908,  908,  908,  953,  908,  909,  909,  909,
      909,  949,  909,  910,  910,  910,  910,  937,  910,  909,
      911,  911,  911,  911,  949,  911,  907,  911,  912,  912,
      912,  912,  957,  912,  937,  913,  913,  913,  913,  910,
      913,  914,  914,  914,  914, 1667,  914,  915,  915,  915,
      915,  914,  915,  938,  957,  945,  912,  947,  915,  947,

      938,  913,  916,  916,  916,  916,  948,  916,  917,  917,
      917,  917,  945,  917,  918,  918,  918,  918,  946,  918,
      948,  916,  946,  919,  919,  919,  919,  917,  919,  920,
      920,  920,  920,  969,  920,  921,  921,  921,  921,  954,
      921,  922,  922,  922,  922,  969,  922,  923,  923,  923,
      923, 1662,  923,  918,  924,  924,  924,  924,  954,  924,
      925,  925,  925,  925,  962,  925,  919,  926,  926,  926,
      926,  962,  926,  921,  927,  927,  927,  927,  939,  927,
      939,  939,  956,  950,  981,  923,  981,  922,  950,  924,
      928,  928,  928,  928,  951,  928,  956,  927,  928,  951,

      925, 1661,  926,  924,  941,  958,  941,  941,  943,  959,
      943,  943,  952,  961,  952,  952,  926,  963,  967,  958,
      959,  963,  965,  965,  961,  966,  968,  971,  966,  970,
      970,  967,  972,  974,  959,  972,  974,  975,  961,  976,
      977,  975,  976,  978,  978,  979,  980,  986,  982,  968,
      971,  982,  983,  985,  987,  984,  985,  989,  977,  990,
      991,  992,  993,  983,  980,  979,  984,  995,  994,  996,
      997,  998, 1000,  998, 1003,  999,  996,  995,  986, 1005,
     1002, 1001, 1002, 1006,  997, 1008, 1005,  989,  992,  987,
      991,  999, 1009, 1012,  993,  994, 1001,  990, 1000, 1007,

     1003, 1007,  992, 1013, 1006, 1010, 1011, 1012, 1008,  994,
     1010, 1014, 1011, 1009, 1015, 1017, 1018, 1013, 1019, 1020,
     1021, 1023, 1024, 1022, 1025, 1028, 1024, 1029, 1023, 1026,
     1026, 1027, 1030, 1032, 1027, 1025, 1031, 1031, 1028, 1033,
     1035, 1051, 1033, 1035, 1030, 1014, 1038, 1047, 1017, 1020,
     1029, 1019, 1015, 1022, 1036, 1021, 1032, 1018, 1036, 1037,
     1039, 1039, 1037, 1020, 1038, 1040, 1041, 1022, 1042, 1043,
     1042, 1044, 1043, 1046, 1048, 1045, 1046, 1050, 1047, 1051,
     1052, 1053, 1044, 1054, 1041, 1040, 1045, 1055, 1056, 1111,
     1114, 1114, 1056, 1084, 1084, 1084, 1084, 1112, 1084, 1112,

     1084, 1115, 1116, 1116, 1084, 1115, 1111, 1050, 1053, 1048,
     1052, 1124, 1660, 1124, 1055, 1054, 1085, 1085, 1085, 1085,
     1118, 1085, 1053, 1085, 1086, 1086, 1086, 1086, 1055, 1086,
     1087, 1087, 1087, 1087, 1118, 1087, 1088, 1088, 1088, 1088,
     1120, 1088, 1089, 1089, 1089, 1089, 1122, 1089, 1110, 1123,
     1086, 1113, 1110, 1113, 1113, 1087, 1088, 1120, 1090, 1090,
     1090, 1090, 1122, 1090, 1127, 1110, 1123, 1089, 1090, 1091,
     1091, 1091, 1091, 1173, 1091, 1092, 1092, 1092, 1092, 1656,
     1092, 1127, 1092, 1093, 1093, 1093, 1093, 1117, 1093, 1117,
     1117, 1093, 1173, 1091, 1094, 1094, 1094, 1094, 1159, 1094,

     1125, 1094, 1095, 1095, 1095, 1095, 1126, 1095, 1096, 1096,
     1096, 1096, 1125, 1096, 1097, 1097, 1097, 1097, 1126, 1097,
     1096, 1135, 1159, 1128, 1095, 1129, 1097, 1098, 1098, 1098,
     1098, 1130, 1098, 1129, 1098, 1099, 1099, 1099, 1099, 1135,
     1099, 1100, 1100, 1100, 1100, 1128, 1100, 1101, 1101, 1101,
     1101, 1130, 1101, 1102, 1102, 1102, 1102, 1162, 1102, 1103,
     1103, 1103, 1103, 1132, 1103, 1104, 1104, 1104, 1104, 1121,
     1104, 1121, 1121, 1100, 1105, 1105, 1105, 1105, 1131, 1105,
     1146, 1099, 1146, 1132, 1162, 1102, 1131, 1106, 1106, 1106,
     1106, 1101, 1106, 1107, 1107, 1107, 1107, 1104, 1107, 1108,

     1108, 1108, 1108, 1103, 1108, 1109, 1109, 1109, 1109, 1105,
     1109, 1133, 1134, 1136, 1140, 1137, 1138, 1138, 1142, 1133,
     1138, 1136, 1144, 1134, 1143, 1107, 1137, 1139, 1139, 1106,
     1141, 1147, 1140, 1141, 1108, 1142, 1143, 1145, 1152, 1144,
     1145, 1148, 1148, 1149, 1151, 1151, 1149, 1147, 1156, 1153,
     1154, 1158, 1152, 1153, 1154, 1155, 1155, 1160, 1161, 1164,
     1163, 1165, 1166, 1167, 1166, 1167, 1170, 1177, 1166, 1168,
     1172, 1169, 1171, 1181, 1174, 1172, 1174, 1175, 1178, 1182,
     1175, 1170, 1161, 1164, 1177, 1178, 1156, 1158, 1165, 1179,
     1168, 1169, 1171, 1160, 1163, 1176, 1179, 1176, 1180, 1183,

     1180, 1184, 1185, 1186, 1187, 1188, 1182, 1190, 1189, 1191,
     1191, 1192, 1192, 1191, 1181, 1193, 1194, 1196, 1198, 1194,
     1200, 1198, 1195, 1197, 1199, 1209, 1199, 1654, 1184, 1196,
     1186, 1201, 1201, 1193, 1187, 1189, 1200, 1190, 1183, 1195,
     1197, 1185, 1188, 1202, 1204, 1204, 1202, 1205, 1206, 1207,
     1208, 1208, 1206, 1207, 1210, 1211, 1212, 1213, 1214, 1215,
     1216, 1205, 1218, 1209, 1217, 1245, 1245, 1245, 1245, 1272,
     1245, 1246, 1246, 1246, 1246, 1267, 1246, 1245, 1210, 1272,
     1212, 1266, 1214, 1266, 1266, 1299, 1215, 1267, 1217, 1218,
     1270, 1211, 1270, 1213, 1216, 1247, 1247, 1247, 1247, 1299,

     1247, 1248, 1248, 1248, 1248, 1273, 1248, 1273, 1249, 1249,
     1249, 1249, 1652, 1249, 1250, 1250, 1250, 1250, 1280, 1250,
     1278, 1247, 1249, 1271, 1271, 1278, 1248, 1251, 1251, 1251,
     1251, 1268, 1251, 1268, 1268, 1280, 1250, 1252, 1252, 1252,
     1252, 1284, 1252, 1253, 1253, 1253, 1253, 1285, 1253, 1274,
     1274, 1310, 1251, 1254, 1254, 1254, 1254, 1275, 1254, 1275,
     1275, 1284, 1253, 1296, 1252, 1255, 1255, 1255, 1255, 1285,
     1255, 1276, 1255, 1286, 1276, 1312, 1254, 1256, 1256, 1256,
     1256, 1296, 1256, 1257, 1257, 1257, 1257, 1310, 1257, 1258,
     1258, 1258, 1258, 1286, 1258, 1259, 1259, 1259, 1259, 1298,

     1259, 1260, 1260, 1260, 1260, 1298, 1260, 1261, 1261, 1261,
     1261, 1312, 1261, 1262, 1262, 1262, 1262, 1406, 1262, 1263,
     1263, 1263, 1263, 1277, 1263, 1277, 1277, 1406, 1257, 1264,
     1264, 1264, 1264, 1258, 1264, 1265, 1265, 1265, 1265, 1289,
     1265, 1259, 1279, 1279, 1281, 1260, 1281, 1281, 1282, 1283,
     1287, 1288, 1261, 1293, 1290, 1291, 1289, 1293, 1262, 1292,
     1263, 1294, 1292, 1309, 1294, 1297, 1300, 1282, 1302, 1311,
     1283, 1287, 1288, 1304, 1264, 1290, 1291, 1305, 1301, 1313,
     1265, 1301, 1297, 1300, 1304, 1303, 1314, 1302, 1303, 1306,
     1306, 1307, 1305, 1308, 1307, 1315, 1308, 1316, 1317, 1318,

     1309, 1320, 1322, 1323, 1321, 1324, 1318, 1311, 1325, 1327,
     1330, 1322, 1326, 1328, 1331, 1328, 1313, 1332, 1333, 1334,
     1323, 1335, 1320, 1314, 1321, 1324, 1326, 1327, 1315, 1336,
     1325, 1337, 1338, 1339, 1316, 1317, 1339, 1340, 1343, 1341,
     1345, 1340, 1341, 1344, 1349, 1357, 1345, 1347, 1346, 1348,
     1330, 1350, 1348, 1331, 1350, 1351, 1343, 1333, 1332, 1334,
     1344, 1335, 1346, 1349, 1347, 1336, 1351, 1352, 1353, 1353,
     1354, 1337, 1338, 1354, 1355, 1356, 1358, 1355, 1362, 1359,
     1360, 1357, 1352, 1361, 1363, 1364, 1385, 1385, 1385, 1385,
     1404, 1385, 1386, 1386, 1386, 1386, 1407, 1386, 1408, 1385,

     1411, 1404, 1411, 1408, 1386, 1387, 1387, 1387, 1387, 1416,
     1387, 1362, 1356, 1407, 1358, 1359, 1412, 1360, 1412, 1387,
     1361, 1363, 1364, 1388, 1388, 1388, 1388, 1416, 1388, 1405,
     1388, 1389, 1389, 1389, 1389, 1421, 1389, 1390, 1390, 1390,
     1390, 1405, 1390, 1391, 1391, 1391, 1391, 1444, 1391, 1421,
     1389, 1392, 1392, 1392, 1392, 1444, 1392, 1415, 1393, 1393,
     1393, 1393, 1391, 1393, 1395, 1395, 1395, 1395, 1413, 1395,
     1413, 1413, 1418, 1392, 1396, 1396, 1396, 1396, 1415, 1396,
     1397, 1397, 1397, 1397, 1393, 1397, 1398, 1398, 1398, 1398,
     1418, 1398, 1399, 1399, 1399, 1399, 1426, 1399, 1400, 1400,

     1400, 1400, 1426, 1400, 1451, 1401, 1401, 1401, 1401, 1395,
     1401, 1414, 1417, 1414, 1414, 1397, 1396, 1402, 1402, 1402,
     1402, 1451, 1402, 1417, 1403, 1403, 1403, 1403, 1398, 1403,
     1410, 1419, 1420, 1422, 1423, 1410, 1424, 1428, 1399, 1427,
     1427, 1424, 1425, 1401, 1400, 1431, 1425, 1430, 1428, 1432,
     1414, 1435, 1436, 1419, 1420, 1422, 1423, 1433, 1430, 1431,
     1433, 1434, 1437, 1402, 1434, 1438, 1439, 1432, 1440, 1442,
     1403, 1441, 1443, 1445, 1446, 1447, 1448, 1447, 1450, 1454,
     1445, 1452, 1456, 1446, 1455, 1457, 1436, 1458, 1435, 1437,
     1448, 1459, 1450, 1460, 1461, 1462, 1466, 1466, 1463, 1438,

     1434, 1441, 1452, 1463, 1439, 1464, 1440, 1442, 1465, 1464,
     1443, 1470, 1456, 1467, 1465, 1471, 1469, 1472, 1474, 1454,
     1472, 1455, 1457, 1475, 1467, 1470, 1460, 1469, 1458, 1476,
     1477, 1473, 1459, 1471, 1473, 1461, 1462, 1478, 1479, 1480,
     1481, 1482, 1501, 1501, 1501, 1501, 1537, 1501, 1518, 1501,
     1520, 1521, 1650, 1521, 1521, 1474, 1476, 1475, 1502, 1502,
     1502, 1502, 1537, 1502, 1477, 1518, 1522, 1520, 1522, 1480,
     1473, 1523, 1525, 1523, 1524, 1478, 1479, 1524, 1481, 1482,
     1533, 1525, 1502, 1503, 1503, 1503, 1503, 1528, 1503, 1533,
     1503, 1504, 1504, 1504, 1504, 1649, 1504, 1505, 1505, 1505,

     1505, 1530, 1505, 1506, 1506, 1506, 1506, 1528, 1506, 1507,
     1507, 1507, 1507, 1504, 1507, 1509, 1509, 1509, 1509, 1539,
     1509, 1530, 1539, 1505, 1507, 1557, 1510, 1510, 1510, 1510,
     1506, 1510, 1511, 1511, 1511, 1511, 1541, 1511, 1512, 1512,
     1512, 1512, 1557, 1512, 1513, 1513, 1513, 1513, 1648, 1513,
     1514, 1514, 1514, 1514, 1541, 1514, 1515, 1515, 1515, 1515,
     1546, 1515, 1516, 1516, 1516, 1516, 1526, 1516, 1526, 1526,
     1510, 1517, 1517, 1517, 1517, 1542, 1517, 1536, 1536, 1538,
     1538, 1540, 1512, 1543, 1544, 1548, 1551, 1544, 1555, 1515,
     1543, 1554, 1558, 1554, 1542, 1540, 1546, 1556, 1559, 1556,

     1560, 1563, 1565, 1568, 1571, 1571, 1526, 1555, 1575, 1572,
     1560, 1551, 1576, 1558, 1573, 1573, 1574, 1577, 1581, 1574,
     1559, 1548, 1575, 1583, 1544, 1572, 1578, 1586, 1639, 1579,
     1576, 1568, 1579, 1578, 1638, 1609, 1577, 1609, 1609, 1637,
     1563, 1565, 1600, 1600, 1600, 1600, 1636, 1600, 1601, 1601,
     1601, 1601, 1586, 1601, 1581, 1602, 1602, 1602, 1602, 1583,
     1602, 1625, 1602, 1603, 1603, 1603, 1603, 1600, 1603, 1579,
     1630, 1604, 1604, 1604, 1604, 1601, 1604, 1625, 1604, 1606,
     1606, 1606, 1606, 1629, 1606, 1610, 1610, 1603, 1607, 1607,
     1607, 1607, 1613, 1607, 1608, 1608, 1608, 1608, 1611, 1608,

     1611, 1611, 1612, 1615, 1616, 1612, 1616, 1616, 1620, 1613,
     1621, 1620, 1622, 1623, 1631, 1622, 1624, 1624, 1626, 1626,
     1615, 1627, 1632, 1633, 1627, 1633, 1634, 1621, 1635, 1641,
     1635, 1643, 1623, 1640, 1631, 1642, 1640, 1645, 1642, 1644,
     1644, 1646, 1646, 1628, 1632, 1634, 1641, 1675, 1647, 1675,
     1643, 1647, 1616, 1645, 1657, 1657, 1657, 1657, 1668, 1657,
     1658, 1658, 1658, 1658, 1663, 1658, 1663, 1663, 1664, 1627,
     1659, 1659, 1659, 1659, 1668, 1659, 1665, 1659, 1665, 1665,
     1666, 1674, 1666, 1666, 1658, 1664, 1669, 1670, 1670, 1669,
     1671, 1672, 1678, 1671, 1672, 1679, 1647, 1694, 1679, 1694,

     1674, 1680, 1680, 1681, 1682, 1688, 1681, 1682, 1678, 1686,
     1686, 1686, 1686, 1619, 1686, 1689, 1686, 1689, 1689, 1691,
     1691, 1690, 1688, 1690, 1690, 1692, 1693, 1697, 1692, 1693,
     1697, 1666, 1696, 1696, 1698, 1618, 1702, 1698, 1702, 1702,
     1617, 1703, 1672, 1703, 1703, 1704, 1705, 1707, 1704, 1705,
     1707, 1614, 1605, 1703, 1708, 1682, 1596, 1708, 1705, 1710,
     1595, 1710, 1710, 1690, 1711, 1594, 1708, 1711, 1693, 1712,
     1593, 1592, 1712, 1590, 1588, 1587, 1698, 1715, 1585, 1715,
     1715, 1715, 1715, 1715, 1716, 1584, 1582, 1716, 1716, 1716,
     1716, 1717, 1580, 1717, 1717, 1718, 1570, 1718, 1718, 1719,

     1719, 1719, 1719, 1719, 1719, 1719, 1720, 1569, 1720, 1720,
     1720, 1720, 1720, 1721, 1567, 1721, 1721, 1721, 1721, 1721,
     1722, 1566, 1722, 1722, 1722, 1722, 1722, 1723, 1564, 1562,
     1723, 1561, 1723, 1723, 1724, 1553, 1552, 1724, 1550, 1724,
     1724, 1725, 1549, 1725, 1725, 1725, 1725, 1725, 1726, 1726,
     1727, 1727, 1728, 1547, 1545, 1728, 1535, 1728, 1728, 1729,
     1534, 1532, 1729, 1531, 1729, 1729, 1730, 1529, 1730, 1730,
     1730, 1730, 1730, 1731, 1731, 1731, 1731, 1731, 1731, 1731,
     1732, 1527, 1519, 1732, 1508, 1732, 1732, 1733, 1498, 1495,
     1733, 1493, 1733, 1733, 1734, 1491, 1734, 1734, 1734, 1734,

     1734, 1735, 1490, 1489, 1735, 1488, 1735, 1735, 1736, 1487,
     1485, 1736, 1484, 1736, 1736, 1737, 1483, 1737, 1737, 1737,
     1737, 1737, 1468, 1453, 1449, 1429, 1409, 1394, 1384, 1383,
     1382, 1381, 1380, 1379, 1378, 1377, 1376, 1375, 1373, 1372,
     1371, 1369, 1368, 1367, 1366, 1365, 1342, 1329, 1319, 1295,
     1269, 1244, 1243, 1242, 1241, 1240, 1239, 1238, 1237, 1236,
     1235, 1233, 1232, 1231, 1229, 1227, 1226, 1225, 1224, 1223,
     1220, 1203, 1150, 1119, 1083, 1082, 1081, 1080, 1079, 1078,
     1077, 1076, 1075, 1074, 1073, 1072, 1071, 1070, 1069, 1068,
     1066, 1065, 1064, 1062, 1061, 1060, 1058, 1057, 1049, 1034,

     1016, 1004,  988,  973,  955,  940,  897,  895,  894,  893,
      891,  890,  888,  887,  886,  885,  884,  883,  882,  881,
      879,  875,  874,  873,  872,  871,  869,  868,  867,  866,
      865,  856,  831,  822,  797,  788,  763,  754,  739,  692,
      691,  690,  689,  688,  687,  686,  685,  683,  682,  681,
      680,  679,  678,  677,  676,  675,  674,  673,  671,  670,
      669,  668,  667,  666,  665,  664,  663,  662,  661,  660,
      658,  656,  625,  622,  619,  585,  583,  552,  549,  546,
      520,  477,  476,  475,  474,  472,  471,  470,  469,  468,
      467,  466,  465,  464,  463,  462,  461,  460,  459,  458,

      457,  456,  455,  454,  453,  452,  451,  450,  449,  448,
      447,  446,  444,  428,  426,  416,  411,  377,  376,  373,
      369,  353,  351,  341,  301,  258,  253,  252,  248,  247,
      246,  244,  243,  242,  241,  240,  239,  238,  236,  235,
      234,  233,  232,  231,  230,  229,  227,  224,  223,  221,
      203,  192,  186,  158,  157,  155,  137,  126,  102,   85,
       55,   45,   44,   43,   42,   41,   39,   38,   36,   34,
       33,   32,   31,   30,   29,   27,   26,   25,   23,   17,
       13, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,

     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#define INITIAL 0
#line 2 "levcomp.lpp"

// levcomp.l:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
// 
// Based loosely on NetHack's lev_comp.l

#include "AppHdr.h"
#include "levcomp.tab.h"
#include <cstring>
#include <queue>

static bool alloced = false;

std::queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(20);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

static void settext()
{
    clean();
    if ((yylval.text = strdup(yytext)))
        alloced = true;
}

#define MAPDEF 1

#define ARGUMENT 2

#define MNAME 3

#define KEYWORDS 4

#define ITEM_LIST 5

#define YY_NEVER_INTERACTIVE 1
#line 2405 "levcomp.lex.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 61 "levcomp.lpp"


#line 2562 "levcomp.lex.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1714 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4682 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 63 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 65 "levcomp.lpp"
;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 67 "levcomp.lpp"
{
                        settext();
                        return MAP_LINE;
                    }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 71 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 73 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 78 "levcomp.lpp"
;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 79 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 81 "levcomp.lpp"
{ 
                        settext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 86 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 87 "levcomp.lpp"
;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 88 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 90 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 92 "levcomp.lpp"
{ 
                        settext();
                        return MONSTER_NAME; 
                    }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 97 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 98 "levcomp.lpp"
;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 100 "levcomp.lpp"
{ 
                        BEGIN(INITIAL);
                        settext();
                        return STRING; 
                    }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 106 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 108 "levcomp.lpp"
;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 110 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 113 "levcomp.lpp"
{ BEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 114 "levcomp.lpp"
return DEFAULT_DEPTH;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 115 "levcomp.lpp"
return DEPTH;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 116 "levcomp.lpp"
return ORIENT;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 117 "levcomp.lpp"
{ BEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 118 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 119 "levcomp.lpp"
return FLAGS;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 120 "levcomp.lpp"
{ BEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 121 "levcomp.lpp"
{ BEGIN(ARGUMENT); return SYMBOL; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 122 "levcomp.lpp"
{ BEGIN(MNAME); return MONS; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 123 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 124 "levcomp.lpp"
{ BEGIN(ARGUMENT); return SHUFFLE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 126 "levcomp.lpp"
return BRANCH;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 127 "levcomp.lpp"
return DEFAULT;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 128 "levcomp.lpp"
return DESC;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 129 "levcomp.lpp"
return BRANCH;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 130 "levcomp.lpp"
return ROOT_DEPTH;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 131 "levcomp.lpp"
return FLOOR_COLOUR;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 132 "levcomp.lpp"
return ROCK_COLOUR;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 134 "levcomp.lpp"
return LEVEL;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 135 "levcomp.lpp"
return END;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 136 "levcomp.lpp"
return PVAULT;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 137 "levcomp.lpp"
return PMINIVAULT;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 139 "levcomp.lpp"
{ BEGIN(ARGUMENT); return ENTRY_MSG; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 140 "levcomp.lpp"
{ BEGIN(ARGUMENT); return EXIT_MSG; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 142 "levcomp.lpp"
return MONSTERS;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 143 "levcomp.lpp"
return ENDMONSTERS;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 146 "levcomp.lpp"
return PANDEMONIC;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 147 "levcomp.lpp"
return NO_HMIRROR;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 148 "levcomp.lpp"
return NO_VMIRROR;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 149 "levcomp.lpp"
return NO_ROTATE;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 151 "levcomp.lpp"
return ENCOMPASS;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 152 "levcomp.lpp"
return NORTH;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 153 "levcomp.lpp"
return SOUTH;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 154 "levcomp.lpp"
return EAST;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 155 "levcomp.lpp"
return WEST;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 156 "levcomp.lpp"
return NORTHEAST;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 157 "levcomp.lpp"
return NORTHWEST;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 158 "levcomp.lpp"
return SOUTHEAST;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 159 "levcomp.lpp"
return SOUTHWEST;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 160 "levcomp.lpp"
return FLOAT;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 162 "levcomp.lpp"
return DASH;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 163 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 165 "levcomp.lpp"
{
                        clean();
                        yylval.i = atoi(yytext);
                        return INTEGER;
                    }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 171 "levcomp.lpp"
;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 172 "levcomp.lpp"
;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 174 "levcomp.lpp"
return OPAREN;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 175 "levcomp.lpp"
return CPAREN;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 177 "levcomp.lpp"
return QUOTE;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 179 "levcomp.lpp"
{
                        settext();
                        return IDENTIFIER;
                    }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 184 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 186 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 3032 "levcomp.lex.cc"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(MAPDEF):
			case YY_STATE_EOF(ARGUMENT):
			case YY_STATE_EOF(MNAME):
			case YY_STATE_EOF(KEYWORDS):
			case YY_STATE_EOF(ITEM_LIST):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1714 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1714 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1713);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');
	if ( yy_current_buffer->yy_at_bol )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 186 "levcomp.lpp"


int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}
