#line 2 "levcomp.lex.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvs/root/flex/flex/skel.c,v 1.2 2004/05/07 00:28:17 jkh Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 77
#define YY_END_OF_BUFFER 78
static yyconst short int yy_acclist[2226] =
    {   0,
       78,   76,   77,   70,   76,   77,   71,   77,   76,   77,
       74,   76,   77,   72,   76,   77,   73,   76,   77,   68,
       76,   77,   67,   76,   77,   69,   76,   77,   76,   77,
       76,   77,   76,   77,   76,   77,   76,   77,   76,   77,
       76,   77,   76,   77,   76,   77,   76,   77,   76,   77,
       76,   77,   76,   77,   76,   77,   76,   77,   76,   77,
       76,   77,   76,   77,   76,   77,   76,   77,   76,   77,
       76,   77,   76,   77,   70,   76,   77,   21,   76,   77,
       76,   77,   76,   77,   77,    6,   77,   77,   77,    4,
       77,    2,   77,    3,    6,   77,   77,   77,    2,    4,

       77,    2,   77,    2,   77,   76,   77,   20,   71,   77,
       76,   77,   74,   76,   77,   72,   76,   77,   73,   76,
       77,   68,   76,   77,   67,   76,   77,   69,   76,   77,
       76,   77,   76,   77,   76,   77,   76,   77,   76,   77,
       76,   77,   76,   77,   76,   77,   76,   77,   76,   77,
       76,   77,   76,   77,   76,   77,   76,   77,   76,   77,
       76,   77,   76,   77,   76,   77,   76,   77,   76,   77,
       76,   77,   76,   77,   76,   77,   21,   76,   77,   76,
       77,   76,   77,   76,   77,   18,   70,   76,   77,   15,
       71,   77,   18,   76,   77,   74,   76,   77,   72,   76,

       77,   73,   76,   77,   17,   68,   76,   77,   67,   76,
       77,   69,   76,   77,   76,   77,   76,   77,   76,   77,
       76,   77,   76,   77,   76,   77,   76,   77,   76,   77,
       76,   77,   76,   77,   76,   77,   76,   77,   76,   77,
       76,   77,   76,   77,   76,   77,   76,   77,   76,   77,
       76,   77,   76,   77,   76,   77,   76,   77,   76,   77,
       18,   70,   76,   77,   21,   76,   77,   76,   77,   76,
       77,    8,   70,   76,   77,    9,   71,   77,   76,   77,
        7,   67,   76,   77,    7,   69,   76,   77,    7,   76,
       77,    7,   76,   77,    7,   76,   77,    7,   76,   77,

        7,   76,   77,    7,   76,   77,    7,   76,   77,    7,
       76,   77,    7,   76,   77,    7,   76,   77,    7,   76,
       77,    7,   76,   77,    7,   76,   77,    7,   76,   77,
        7,   76,   77,    7,   76,   77,    7,   76,   77,    7,
       76,   77,    7,   76,   77,    7,   76,   77,    7,   76,
       77,    7,   76,   77,    7,   76,   77,    8,   70,   76,
       77,    7,   76,   77,    7,   76,   77,   11,   77,   13,
       77,   14,   77,   77,   12,   77,   70,   71,   69,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,

       75,   75,   75,   75,   75,   75,   75,   75,   75,   70,
       21,   21,   75,   75,   75,    6,    5,    2,    3,    6,
        2,    2,    2,   19,   20,   71,   19,   69,   19,   75,
       19,   75,   19,   75,   19,   75,   19,   75,   19,   75,
       19,   75,   19,   75,   19,   75,   19,   75,   19,   75,
       19,   75,   19,   75,   19,   75,   19,   75,   19,   75,
       19,   75,   19,   75,   19,   75,   19,   75,   19,   75,
       19,   75,   19,   75,   19,   75,   19,   75,   19,   75,
       19,   75,   19,   75,   19,   75,   19,   75,   19,   21,
       21,   19,   75,   19,   75,   19,   75,   18,   70,   15,

       18,   15,   71,   69,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   18,   70,   21,   75,   75,   75,
        8,   70,    9,    9,   71,    7,    7,   69,    7,   75,
        7,   75,    7,   75,    7,   75,    7,   75,    7,   75,
        7,   75,    7,   75,    7,   75,    7,   75,    7,   75,
        7,   75,    7,   75,    7,   75,    7,   75,    7,   75,
        7,   75,    7,   75,    7,   75,    7,   75,    7,   75,
        7,   75,    7,   75,    7,   75,    7,   75,    7,   75,

        7,   75,    7,   75,    7,   75,    7,   75,    8,   70,
        7,   75,    7,   75,    7,   75,   10,   13,   14,   75,
       75,   75,   75,   75,   46,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   22,   75,    2,   19,   75,
       19,   75,   19,   75,   19,   75,   19,   75,   19,   46,
       75,   19,   75,   19,   75,   19,   75,   19,   75,   19,
       75,   19,   75,   19,   75,   19,   75,   19,   75,   19,
       75,   19,   75,   19,   75,   19,   75,   19,   75,   19,

       75,   19,   75,   19,   75,   19,   75,   19,   75,   19,
       75,   19,   75,   19,   75,   19,   75,   19,   75,   19,
       75,   19,   75,   19,   75,   19,   75,   19,   75,   19,
       22,   75,   16,   16,   69,   16,   75,   16,   75,   16,
       75,   16,   75,   16,   75,   16,   75,   16,   46,   75,
       16,   75,   16,   75,   16,   75,   16,   75,   16,   75,
       16,   75,   16,   75,   16,   75,   16,   75,   16,   75,
       16,   75,   16,   75,   16,   75,   16,   75,   16,   75,
       16,   75,   16,   75,   16,   75,   16,   75,   16,   75,
       16,   75,   16,   75,   16,   75,   16,   75,   16,   75,

       16,   75,   16,   75,   16,   75,   16,   75,   16,   21,
       16,   22,   75,   16,   75,   16,   75,   16,   75,    7,
       75,    7,   75,    7,   75,    7,   75,    7,   75,    7,
       46,   75,    7,   75,    7,   75,    7,   75,    7,   75,
        7,   75,    7,   75,    7,   75,    7,   75,    7,   75,
        7,   75,    7,   75,    7,   75,    7,   75,    7,   75,
        7,   75,    7,   75,    7,   75,    7,   75,    7,   75,
        7,   75,    7,   75,    7,   75,    7,   75,    7,   75,
        7,   75,    7,   75,    7,   75,    7,   75,    7,   75,
        7,   22,   75,   75,   75,   75,   75,   75,   75,   75,

       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       60,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       61,   75,    2,   19,   75,   19,   75,   19,   75,   19,
       75,   19,   75,   19,   75,   19,   75,   19,   75,   19,
       75,   19,   75,   19,   75,   19,   75,   19,   75,   19,
       75,   19,   75,   19,   75,   19,   75,   19,   75,   19,
       75,   19,   75,   19,   75,   19,   75,   19,   75,   19,
       75,   19,   75,   19,   75,   19,   75,   19,   60,   75,
       19,   75,   19,   75,   19,   75,   19,   75,   19,   75,

       19,   75,   19,   75,   19,   75,   19,   61,   75,   16,
       75,   16,   75,   16,   75,   16,   75,   16,   75,   16,
       75,   16,   75,   16,   75,   16,   75,   16,   75,   16,
       75,   16,   75,   16,   75,   16,   75,   16,   75,   16,
       75,   16,   75,   16,   75,   16,   75,   16,   75,   16,
       75,   16,   75,   16,   75,   16,   75,   16,   75,   16,
       75,   16,   75,   16,   60,   75,   16,   75,   16,   75,
       16,   75,   16,   75,   16,   75,   16,   75,   16,   75,
       16,   75,   16,   61,   75,    7,   75,    7,   75,    7,
       75,    7,   75,    7,   75,    7,   75,    7,   75,    7,

       75,    7,   75,    7,   75,    7,   75,    7,   75,    7,
       75,    7,   75,    7,   75,    7,   75,    7,   75,    7,
       75,    7,   75,    7,   75,    7,   75,    7,   75,    7,
       75,    7,   75,    7,   75,    7,   75,    7,   75,    7,
       60,   75,    7,   75,    7,   75,    7,   75,    7,   75,
        7,   75,    7,   75,    7,   75,    7,   75,    7,   61,
       75,   75,   75,   75,   75,   40,   75,   75,   75,   75,
       75,   33,   75,   75,   75,   45,   75,   32,   75,   23,
       75,   75,   75,   75,   75,   75,   75,   75,   30,   75,
       75,   66,   75,   75,   75,   75,   58,   75,   75,   59,

       75,    2,   19,   75,   19,   75,   19,   75,   19,   75,
       19,   40,   19,   75,   19,   75,   19,   75,   19,   75,
       19,   75,   19,   33,   19,   75,   19,   75,   19,   75,
       19,   45,   75,   19,   32,   19,   75,   19,   23,   19,
       75,   19,   75,   19,   75,   19,   75,   19,   75,   19,
       75,   19,   75,   19,   75,   19,   30,   19,   75,   19,
       75,   19,   66,   75,   19,   75,   19,   75,   19,   75,
       19,   58,   75,   19,   75,   19,   59,   75,   16,   75,
       16,   75,   16,   75,   16,   75,   16,   40,   16,   75,
       16,   75,   16,   75,   16,   75,   16,   75,   16,   33,

       16,   75,   16,   75,   16,   75,   16,   45,   75,   16,
       32,   16,   75,   16,   23,   16,   75,   16,   75,   16,
       75,   16,   75,   16,   75,   16,   75,   16,   75,   16,
       75,   16,   30,   16,   75,   16,   75,   16,   66,   75,
       16,   75,   16,   75,   16,   75,   16,   58,   75,   16,
       75,   16,   59,   75,    7,   75,    7,   75,    7,   75,
        7,   75,    7,   75,    7,   75,    7,   75,    7,   75,
        7,   75,    7,   75,    7,   75,    7,   75,    7,   45,
       75,    7,   75,    7,   75,    7,   75,    7,   75,    7,
       75,    7,   75,    7,   75,    7,   75,    7,   75,    7,

       75,    7,   75,    7,   66,   75,    7,   75,    7,   75,
        7,   75,    7,   58,   75,    7,   75,    7,   59,   75,
       75,   75,   75,   25,   75,   75,   75,   29,   75,   35,
       36,   37,   75,   75,   27,   75,   75,   75,   75,   75,
       31,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,    1,    2,   19,   75,   19,   75,   19,   75,   19,
       25,   19,   75,   19,   75,   19,   75,   19,   29,   19,
       75,   19,   35,   19,   36,   19,   37,   19,   75,   19,
       75,   19,   27,   19,   75,   19,   75,   19,   75,   19,
       75,   19,   75,   19,   31,   19,   75,   19,   75,   19,

       75,   19,   75,   19,   75,   19,   75,   19,   75,   19,
       75,   19,   75,   19,   75,   16,   75,   16,   75,   16,
       75,   16,   25,   16,   75,   16,   75,   16,   75,   16,
       29,   16,   75,   16,   35,   16,   36,   16,   37,   16,
       75,   16,   75,   16,   27,   16,   75,   16,   75,   16,
       75,   16,   75,   16,   75,   16,   31,   16,   75,   16,
       75,   16,   75,   16,   75,   16,   75,   16,   75,   16,
       75,   16,   75,   16,   75,   16,   75,    7,   75,    7,
       75,    7,   75,    7,   75,    7,   75,    7,   75,    7,
       75,    7,   75,    7,   75,    7,   75,    7,   75,    7,

       75,    7,   75,    7,   75,    7,   75,    7,   75,    7,
       75,    7,   75,    7,   75,    7,   75,    7,   75,    7,
       75,    7,   75,    7,   75,   41,   75,   28,   39,   75,
       75,   75,   75,   75,   75,   26,   75,   47,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   19,   41,   19,   75,   19,   28,   19,   39,   75,
       19,   75,   19,   75,   19,   75,   19,   75,   19,   75,
       19,   26,   19,   75,   19,   47,   19,   75,   19,   75,
       19,   75,   19,   75,   19,   75,   19,   75,   19,   75,
       19,   75,   19,   75,   19,   75,   19,   75,   19,   75,

       19,   75,   16,   41,   16,   75,   16,   28,   16,   39,
       75,   16,   75,   16,   75,   16,   75,   16,   75,   16,
       75,   16,   26,   16,   75,   16,   47,   16,   75,   16,
       75,   16,   75,   16,   75,   16,   75,   16,   75,   16,
       75,   16,   75,   16,   75,   16,   75,   16,   75,   16,
       75,   16,   75,    7,   75,    7,   39,   75,    7,   75,
        7,   75,    7,   75,    7,   75,    7,   75,    7,   75,
        7,   75,    7,   75,    7,   75,    7,   75,    7,   75,
        7,   75,    7,   75,    7,   75,    7,   75,    7,   75,
        7,   75,    7,   75,    7,   75,   75,   75,   75,   75,

       75,   51,   75,   75,   75,   75,   34,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   19,   75,   19,   75,
       19,   75,   19,   75,   19,   75,   19,   51,   75,   19,
       75,   19,   75,   19,   75,   19,   34,   19,   19,   75,
       19,   75,   19,   75,   19,   75,   19,   75,   19,   75,
       19,   75,   19,   75,   19,   75,   16,   75,   16,   75,
       16,   75,   16,   75,   16,   75,   16,   51,   75,   16,
       75,   16,   75,   16,   75,   16,   34,   16,   16,   75,
       16,   75,   16,   75,   16,   75,   16,   75,   16,   75,
       16,   75,   16,   75,   16,   75,    7,   75,    7,   75,

        7,   75,    7,   75,    7,   75,    7,   51,   75,    7,
       75,    7,   75,    7,   75,    7,    7,   75,    7,   75,
        7,   75,    7,   75,    7,   75,    7,   75,    7,   75,
        7,   75,    7,   75,   75,   75,   75,   50,   75,   75,
       75,   75,   57,   75,   75,   56,   75,   75,   62,   75,
       63,   75,   75,   64,   75,   65,   75,   19,   75,   19,
       75,   19,   75,   19,   50,   19,   75,   19,   75,   19,
       75,   19,   75,   19,   19,   57,   75,   19,   75,   19,
       56,   75,   19,   75,   19,   62,   75,   19,   63,   75,
       19,   75,   19,   64,   75,   19,   65,   75,   16,   75,

       16,   75,   16,   75,   16,   50,   16,   75,   16,   75,
       16,   75,   16,   75,   16,   16,   57,   75,   16,   75,
       16,   56,   75,   16,   75,   16,   62,   75,   16,   63,
       75,   16,   75,   16,   64,   75,   16,   65,   75,    7,
       75,    7,   75,    7,   75,    7,   75,    7,   75,    7,
       75,    7,   75,    7,    7,   57,   75,    7,   75,    7,
       56,   75,    7,   75,    7,   62,   75,    7,   63,   75,
        7,   75,    7,   64,   75,    7,   65,   75,   38,   75,
       49,   75,   75,   75,   75,   54,   75,   55,   75,   53,
       75,   19,   38,   19,   75,   19,   49,   19,   75,   19,

       75,   19,   75,   19,   75,   19,   19,   54,   75,   19,
       55,   75,   19,   53,   75,   16,   38,   16,   75,   16,
       49,   16,   75,   16,   75,   16,   75,   16,   75,   16,
       16,   54,   75,   16,   55,   75,   16,   53,   75,    7,
       75,    7,   75,    7,   75,    7,   75,    7,   75,    7,
        7,   54,   75,    7,   55,   75,    7,   53,   75,   52,
       75,   75,   48,   75,   42,   19,   52,   75,   19,   75,
       19,   48,   19,   75,   19,   42,   19,   16,   52,   75,
       16,   75,   16,   48,   16,   75,   16,   42,   16,    7,
       52,   75,    7,   75,    7,   75,    7,   75,   44,   19,

       75,   19,   44,   19,   16,   75,   16,   44,   16,    7,
       75,    7,   43,   19,   43,   19,   16,   43,   16,    7,
       24,   19,   24,   16,   24
    } ;

static yyconst short int yy_accept[1238] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    4,    7,    9,   11,   14,   17,
       20,   23,   26,   29,   31,   33,   35,   37,   39,   41,
       43,   45,   47,   49,   51,   53,   55,   57,   59,   61,
       63,   65,   67,   69,   71,   73,   75,   78,   81,   83,
       85,   86,   88,   89,   90,   92,   94,   97,   98,   99,
      102,  104,  106,  108,  111,  113,  116,  119,  122,  125,
      128,  131,  133,  135,  137,  139,  141,  143,  145,  147,
      149,  151,  153,  155,  157,  159,  161,  163,  165,  167,
      169,  171,  173,  175,  177,  180,  182,  184,  186,  190,

      193,  196,  199,  202,  205,  209,  212,  215,  217,  219,
      221,  223,  225,  227,  229,  231,  233,  235,  237,  239,
      241,  243,  245,  247,  249,  251,  253,  255,  257,  259,
      261,  265,  268,  270,  272,  276,  279,  281,  285,  289,
      292,  295,  298,  301,  304,  307,  310,  313,  316,  319,
      322,  325,  328,  331,  334,  337,  340,  343,  346,  349,
      352,  355,  358,  362,  365,  368,  370,  372,  374,  375,
      377,  378,  379,  380,  381,  382,  383,  384,  385,  386,
      387,  388,  389,  390,  391,  392,  393,  394,  395,  396,
      397,  398,  399,  400,  401,  402,  403,  404,  405,  406,

      407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
      417,  418,  418,  418,  419,  421,  421,  421,  422,  423,
      424,  425,  425,  427,  429,  431,  433,  435,  437,  439,
      441,  443,  445,  447,  449,  451,  453,  455,  457,  459,
      461,  463,  465,  467,  469,  471,  473,  475,  477,  479,
      481,  483,  485,  487,  489,  491,  492,  494,  496,  498,
      498,  500,  501,  502,  504,  505,  506,  507,  508,  509,
      510,  511,  512,  513,  514,  515,  516,  517,  518,  519,
      520,  521,  522,  523,  524,  525,  526,  527,  528,  529,
      530,  531,  532,  533,  534,  535,  537,  538,  539,  540,

      541,  543,  544,  544,  546,  547,  549,  551,  553,  555,
      557,  559,  561,  563,  565,  567,  569,  571,  573,  575,
      577,  579,  581,  583,  585,  587,  589,  591,  593,  595,
      597,  599,  601,  603,  605,  607,  609,  611,  613,  615,
      617,  618,  618,  619,  620,  620,  621,  622,  623,  624,
      625,  627,  628,  629,  630,  631,  632,  633,  634,  635,
      636,  637,  638,  639,  640,  641,  642,  643,  644,  645,
      646,  647,  648,  649,  650,  651,  652,  653,  654,  655,
      656,  658,  659,  661,  663,  665,  667,  669,  672,  674,
      676,  678,  680,  682,  684,  686,  688,  690,  692,  694,

      696,  698,  700,  702,  704,  706,  708,  710,  712,  714,
      716,  718,  720,  722,  724,  726,  728,  730,  733,  734,
      736,  738,  740,  742,  744,  746,  748,  751,  753,  755,
      757,  759,  761,  763,  765,  767,  769,  771,  773,  775,
      777,  779,  781,  783,  785,  787,  789,  791,  793,  795,
      797,  799,  801,  803,  805,  807,  809,  811,  814,  816,
      818,  820,  822,  824,  826,  828,  830,  833,  835,  837,
      839,  841,  843,  845,  847,  849,  851,  853,  855,  857,
      859,  861,  863,  865,  867,  869,  871,  873,  875,  877,
      879,  881,  883,  885,  887,  889,  891,  894,  895,  896,

      897,  898,  899,  900,  901,  902,  903,  904,  905,  906,
      907,  908,  909,  910,  911,  912,  913,  914,  915,  916,
      917,  918,  919,  920,  921,  923,  924,  925,  926,  927,
      928,  929,  930,  931,  933,  934,  936,  938,  940,  942,
      944,  946,  948,  950,  952,  954,  956,  958,  960,  962,
      964,  966,  968,  970,  972,  974,  976,  978,  980,  982,
      984,  986,  988,  991,  993,  995,  997,  999, 1001, 1003,
     1005, 1007, 1010, 1012, 1014, 1016, 1018, 1020, 1022, 1024,
     1026, 1028, 1030, 1032, 1034, 1036, 1038, 1040, 1042, 1044,
     1046, 1048, 1050, 1052, 1054, 1056, 1058, 1060, 1062, 1064,

     1067, 1069, 1071, 1073, 1075, 1077, 1079, 1081, 1083, 1086,
     1088, 1090, 1092, 1094, 1096, 1098, 1100, 1102, 1104, 1106,
     1108, 1110, 1112, 1114, 1116, 1118, 1120, 1122, 1124, 1126,
     1128, 1130, 1132, 1134, 1136, 1138, 1140, 1143, 1145, 1147,
     1149, 1151, 1153, 1155, 1157, 1159, 1162, 1163, 1164, 1165,
     1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175,
     1176, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186,
     1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1197,
     1199, 1200, 1202, 1203, 1205, 1207, 1209, 1211, 1213, 1215,
     1217, 1219, 1221, 1223, 1225, 1227, 1229, 1231, 1234, 1236,

     1238, 1240, 1242, 1244, 1246, 1248, 1250, 1252, 1254, 1256,
     1258, 1260, 1262, 1265, 1267, 1269, 1271, 1274, 1276, 1279,
     1281, 1283, 1285, 1287, 1289, 1291, 1293, 1295, 1297, 1299,
     1301, 1303, 1305, 1307, 1310, 1312, 1314, 1316, 1318, 1320,
     1322, 1324, 1326, 1328, 1330, 1332, 1334, 1336, 1338, 1341,
     1343, 1345, 1347, 1350, 1352, 1355, 1357, 1359, 1361, 1363,
     1365, 1367, 1369, 1371, 1373, 1375, 1377, 1379, 1382, 1384,
     1386, 1388, 1390, 1392, 1394, 1396, 1398, 1400, 1402, 1404,
     1407, 1409, 1411, 1413, 1416, 1418, 1421, 1422, 1423, 1424,
     1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434,

     1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444,
     1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1454, 1456,
     1458, 1460, 1462, 1464, 1466, 1468, 1470, 1472, 1474, 1476,
     1478, 1480, 1482, 1484, 1486, 1488, 1490, 1492, 1494, 1496,
     1498, 1500, 1502, 1504, 1506, 1508, 1510, 1512, 1514, 1516,
     1518, 1520, 1522, 1524, 1526, 1528, 1530, 1532, 1534, 1536,
     1538, 1540, 1542, 1544, 1546, 1548, 1550, 1552, 1554, 1556,
     1558, 1560, 1562, 1564, 1566, 1568, 1570, 1572, 1574, 1576,
     1578, 1580, 1582, 1584, 1586, 1588, 1590, 1592, 1594, 1596,
     1598, 1600, 1602, 1604, 1606, 1608, 1610, 1612, 1614, 1616,

     1618, 1620, 1622, 1624, 1626, 1627, 1628, 1629, 1631, 1632,
     1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642,
     1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652,
     1654, 1656, 1658, 1661, 1663, 1665, 1667, 1669, 1671, 1673,
     1675, 1677, 1679, 1681, 1683, 1685, 1687, 1689, 1691, 1693,
     1695, 1697, 1699, 1701, 1703, 1705, 1707, 1709, 1712, 1714,
     1716, 1718, 1720, 1722, 1724, 1726, 1728, 1730, 1732, 1734,
     1736, 1738, 1740, 1742, 1744, 1746, 1748, 1750, 1752, 1754,
     1756, 1759, 1761, 1763, 1765, 1767, 1769, 1771, 1773, 1775,
     1777, 1779, 1781, 1783, 1785, 1787, 1789, 1791, 1793, 1795,

     1797, 1798, 1799, 1800, 1801, 1802, 1804, 1805, 1806, 1807,
     1808, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816,
     1817, 1819, 1821, 1823, 1825, 1827, 1830, 1832, 1834, 1836,
     1838, 1839, 1841, 1843, 1845, 1847, 1849, 1851, 1853, 1855,
     1857, 1859, 1861, 1863, 1865, 1867, 1870, 1872, 1874, 1876,
     1878, 1879, 1881, 1883, 1885, 1887, 1889, 1891, 1893, 1895,
     1897, 1899, 1901, 1903, 1905, 1907, 1910, 1912, 1914, 1916,
     1917, 1919, 1921, 1923, 1925, 1927, 1929, 1931, 1933, 1935,
     1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1943, 1945,
     1946, 1948, 1949, 1951, 1953, 1954, 1956, 1958, 1960, 1962,

     1964, 1966, 1968, 1970, 1972, 1974, 1975, 1978, 1980, 1983,
     1985, 1988, 1991, 1993, 1996, 1999, 2001, 2003, 2005, 2007,
     2009, 2011, 2013, 2015, 2016, 2019, 2021, 2024, 2026, 2029,
     2032, 2034, 2037, 2040, 2042, 2044, 2046, 2048, 2050, 2052,
     2054, 2055, 2058, 2060, 2063, 2065, 2068, 2071, 2073, 2076,
     2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2086, 2088,
     2090, 2092, 2094, 2096, 2098, 2100, 2102, 2104, 2106, 2107,
     2110, 2113, 2116, 2118, 2120, 2122, 2124, 2126, 2128, 2130,
     2131, 2134, 2137, 2140, 2142, 2144, 2146, 2148, 2150, 2151,
     2154, 2157, 2160, 2162, 2163, 2164, 2165, 2166, 2166, 2169,

     2171, 2173, 2175, 2177, 2178, 2181, 2183, 2185, 2187, 2189,
     2190, 2193, 2195, 2197, 2198, 2199, 2200, 2200, 2202, 2204,
     2205, 2207, 2209, 2210, 2212, 2213, 2214, 2214, 2216, 2217,
     2219, 2220, 2221, 2222, 2224, 2226, 2226
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    1,    1,    1,    1,    8,
        9,    1,    1,   10,   11,    1,    1,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   13,    1,    1,
        1,    1,    1,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       23,   30,   31,   32,   33,   34,   23,   35,   36,   23,
        1,    1,    1,    1,   37,    1,   38,   23,   39,   40,

       41,   42,   23,   43,   44,   23,   23,   45,   46,   47,
       48,   49,   23,   50,   51,   52,   53,   54,   55,   23,
       23,   23,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[56] =
    {   0,
        1,    2,    3,    4,    2,    1,    1,    1,    1,    5,
        6,    7,    1,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7
    } ;

static yyconst short int yy_base[1256] =
    {   0,
        0,   54,   59,   65,  116,  170,  221,  275,  326,  380,
       71,   82, 3039, 3040,   55, 3040, 3035, 3040, 3040, 3040,
     3040, 3040, 3025,    0, 3006, 3014, 3016,   44, 3008, 3000,
       69, 3013, 3002, 3015, 2998,   64, 2999,   44, 3012, 2984,
       55, 2979, 2975, 2984, 2973, 2979,   92,    0,   68,   52,
     3040, 3040, 3016,  103, 3040,    0, 3040, 3015,  106,    0,
     2990,  155,  110, 3040, 3013,  174,  178,  182,  186,  190,
      195,  431,  444,   83,  163,  174,  173,  178,  259,  184,
      183,  175, 2985,  258,  187,  265,  273,  144,  261,  249,
      263,  182,  266,  272,  214,  276,  360,    0,  313, 3040,

      317,    0,    0,    0, 3040,    0, 3002,  474,  487,  517,
      538,  556,  364,  361,  375,  365,  377,  389,  270,  388,
      390,  435,  393,  431,  464,  432,  399,  392,  436,  474,
      501,  503,  506,  533,  550, 3040, 3010,    0, 3000, 3000,
      467,  510,  518,  539,  298,  432,  560,  524,  296,  384,
      559,  562,  458,  564,  566,  449,  561,  503,  373,  499,
      565,  579,  598,  581,  567,  602,  619, 3040, 3007, 3040,
      609, 3040, 2997,    0, 2994, 2993,  597,  293, 2984,  584,
     2987, 2986, 2971, 2974, 2967, 2973, 2973, 2976, 2983, 2974,
     2981,  445, 2961, 2978, 2972, 2949, 2939, 2950, 2940,  569,

     2940, 2933, 2934,  625,    0,    0, 2955, 2969,  584, 3040,
     3040, 2979,  633,    0, 3040, 2978,  636, 2963, 2952,  599,
      629,  640, 3040,  644, 2948,  502,  629,  632,  635,  625,
      640,  639,  642,  634,  643,  595,  647,  649,  654,  664,
      658,  667,  670,  652,  497,  663,  657,  659,  662,  660,
      665,  666,  661,  673,  702,  707,  687,  691,  692,  718,
      723, 3040,  727, 3040,  732,  744,  757,  771,  785,  778,
      784,  798,  770,  801,  792,  806,  809,  817,  823,  828,
      837,  836,  850,  844,  851,  859,  866,  858,  872,  873,
      877,  880,  891,  895,  900,  930,  731,  921,  925,  934,

      964, 3040, 2974, 3040,    0, 2964, 2964,  728,  791,  930,
      737,  745,  944,  729,  763,  807,  772,  727,  834,  749,
      811,  902,  872,  904,  946,  820,  931,  851,  865,  894,
      882,  916,  936,  418,  917,  925,  975,  960,  970,  964,
      986,  990,  994, 3040, 2971, 2946, 2945, 2957, 2938, 2953,
     2942, 2937, 2934, 2945, 2936, 2937, 2948, 2943, 2933, 2941,
     2927, 2939, 2938, 2939, 2927, 2920, 2928, 2919, 2931, 2918,
     2917, 2909, 2894, 2897, 2906,  950, 2891, 2902, 2889, 2888,
        0, 2913,  975,  976,  980,  977,  971,  982, 2908,  981,
      994,  988,  991, 1005, 1002,  995, 1008,  997, 1011, 1012,

     1007, 1004, 1003, 1015, 1014, 1021, 1017, 1019, 1022, 1013,
     1023, 1024, 1025, 1026, 1027, 1028, 1029, 2907, 1059, 1061,
     1053, 1058, 1064, 1078, 1067, 1084, 1075, 1089, 1092, 1097,
     1103, 1110, 1111, 1119, 1083, 1125, 1116, 1133, 1139, 1130,
     1136, 1147, 1150, 1153, 1158, 1164, 1167, 1171, 1172, 1175,
     1188, 1189, 1196, 1202, 1209, 1215, 1245, 1222, 1233, 1240,
     1237, 1063, 1186, 1200, 1160,  642, 1149, 1058, 1205, 1225,
     1177, 1246, 1259, 1211, 1247, 1264, 1122, 1265, 1266, 1219,
     1254, 1094, 1188, 1267, 1268, 1249, 1274, 1275, 1278, 1162,
     1279, 1281, 1280, 1282, 1284, 1285, 2925, 2919, 2918, 2900,

     2911, 2918, 2902, 2893, 2891, 2896, 2896, 2912, 2892, 2897,
     2891, 2896, 1284, 2907, 2892, 2900, 2895, 2891, 2878, 2877,
     2894, 2880, 2898, 2857,    0, 2863, 2856, 2861, 2858, 2859,
     2861, 2862, 2859,    0, 2887, 1278, 1282, 1270, 1280, 1289,
     1276, 1040, 1277, 1290, 2870, 1296, 1293, 1285, 1297, 1304,
     1320, 1325, 1312, 1323, 1318, 1319, 1317, 1321, 1326, 1327,
     1330, 1316, 2869, 1331, 1332, 1333, 1334, 1335, 1337, 1342,
     1343, 2868, 1359, 1373, 1366, 1372, 1381, 1377, 1388, 1392,
     1396, 1401, 1409, 1414, 1418, 1422, 1423, 1437, 1442, 1443,
     1446, 1457, 1462, 1461, 1465, 1466, 1480, 1487, 1484, 1488,

     1495, 1491, 1502, 1509, 1513, 1520, 1527, 1531, 1516, 1355,
     1398, 1365, 1405, 1357, 1407, 1423, 1376, 1447, 1452, 1512,
     1425, 1478, 1523, 1541, 1554, 1516, 1456, 1490, 1542, 1544,
     1550, 1559, 1560, 1428, 1562, 1519, 2886, 1565, 1525, 1567,
     1569, 1570, 1571, 1574, 1577, 2885, 2874, 2876, 2868, 2879,
     3040, 2864, 2853, 2863, 2875, 2850, 3040, 2873, 2872, 2871,
        0, 3040, 2865, 3040, 2850, 2868, 2846, 2847, 2862, 2860,
     2851, 2862, 3040, 2829, 2824,    0, 2828, 2819, 2826, 1542,
     2823, 1543, 2839, 1569, 1571, 1570, 1578, 1600, 1576, 1582,
     1592, 1579, 1591, 1621, 1580, 1594, 1614, 2837, 1627, 1612,

     1631, 1607, 1621, 1611, 1608, 1627, 1629, 1622, 1635, 1651,
     1619, 1620, 2836, 1624, 1628, 1630, 1631, 1632, 1636, 1652,
     1666, 1663, 1674, 1665, 1671, 1670, 1685, 1693, 1689, 1674,
     1696, 1700, 1704, 1709, 1732, 1723, 1734, 1724, 1731, 1730,
     1738, 1747, 1754, 1755, 1762, 1743, 1758, 1763, 1769, 1776,
     1777, 1780, 1785, 1796, 1802, 1747, 1754, 1685, 1719, 1786,
     1710, 1791, 1817, 1799, 1821, 1824, 1828, 2854, 1827, 1790,
     1833, 1836, 1837, 1735, 1838, 1839, 1840, 1807, 1812, 2853,
      797, 1808, 1843, 1845, 1847, 1848, 1849, 2850, 2830, 3040,
     2830, 2834, 2828, 3040, 2842, 3040, 3040, 3040, 2827, 2843,

     3040, 2841, 2841, 2825, 2834, 2833, 3040, 2798, 2811, 2798,
     2809, 2796, 2807, 2803, 2795, 2804, 2800,    0, 1850, 1852,
     1841, 1870, 1846, 1853, 1854, 1886, 1862, 1892, 1897, 1902,
     2810, 1868, 1906, 1891, 1882, 1885, 1645, 1896, 1914, 1879,
     1887, 1890, 1892, 1893, 1894, 1749, 1897, 1898, 1903, 1922,
     1929, 1918, 1950, 1935, 1942, 1938, 1954, 1946, 1974, 1976,
     1978, 1955, 1969, 1985, 1975, 1978, 1974, 1992, 1995, 1990,
     1989, 1996, 2000, 2009, 2013, 2014, 2017, 2020, 2035, 2036,
     2058, 1959, 1985, 2026, 1990, 2045, 1918, 2042, 2048, 2067,
     2049, 1935, 2068, 2069, 2059, 2063, 2071, 2072, 2073, 2074,

     2077, 2078, 2079, 2081, 3040, 2821, 3040,    0, 2806, 2806,
     2816, 2807, 2803, 3040, 2800, 3040, 2807, 2802, 2817, 2818,
     2777, 2777, 2774, 2775, 2773, 2772, 2775, 2770, 2769, 2089,
     2077, 2094, 2789, 2070, 2073, 1992, 2078, 2083, 2123, 2086,
     2127, 2005, 2104, 2107, 2094, 2079, 2085, 2106, 2109, 2110,
     2111, 2108, 2112, 2113, 2142, 2138, 2143, 2141, 2146, 2152,
     2160, 2157, 2163, 2144, 2168, 2148, 2171, 2174, 2185, 2196,
     2189, 2192, 2193, 2200, 2207, 2215, 2218, 2222, 2233, 2155,
     2807, 2163, 2199, 2228, 2140, 2202, 2173, 2232, 2206, 2141,
     2806,  932, 2217, 2243, 2221, 2245, 2248, 2244, 2249, 2250,

     2797, 2797, 2794, 2800, 2787,    0, 2786, 2778, 2769, 3040,
     2760, 2748, 2746, 2752, 2744, 2735, 2734, 2741, 2722, 2717,
     2244, 2250, 2249, 2257, 2247, 2738, 2251, 2255, 2256, 2288,
     2300, 2252, 2259, 2267, 2264, 2268, 2276, 2279, 2280, 2281,
     2295, 2298, 2315, 2312, 2320, 2319, 2328, 2333, 2336, 2273,
     2316, 2341, 2347, 2344, 2350, 2355, 2358, 2371, 2372, 2375,
     2311, 2394, 2360, 2302, 2371, 2756, 2372, 2308, 2326, 2722,
     2377, 2382, 2388, 2397, 2398, 2400, 2402, 2403, 2405, 2748,
     2730, 2740, 3040, 2718, 2707, 2700, 2711, 2690,    0, 2668,
        0, 2643,    0,    0, 2653,    0,    0, 2404, 2661, 2405,

     2417, 2395, 2401, 2406, 2411, 2438, 2660, 2408, 2659, 2414,
     2658, 2657, 2417, 2655, 2654, 2440, 2432, 2441, 2463, 2447,
     2454, 2458, 2461, 2479, 2469, 2474, 2475, 2478, 2482, 2483,
     2496, 2500, 2503, 2497, 2437, 2505, 2409, 2463, 2488, 2512,
     2642, 2668, 2506, 2667, 2515, 2660, 2650, 2519, 2649, 2648,
     3040, 2618, 3040, 2590, 2601, 2575, 2555, 2504,    0,    0,
        0, 2534, 2510, 2540, 2513, 2524, 2466, 2534, 2546, 2419,
     2396, 2324, 2547, 2538, 2557, 2541, 2542, 2547, 2562, 2577,
     2561, 2565, 2568, 2552, 2574, 2575, 2578, 2587, 2293, 2198,
     2086, 1988,    0, 1908, 3040, 1855, 3040, 1542, 1475, 1344,

     2599, 2589, 2607, 2611, 2591, 2598, 2616, 2611, 2629, 2630,
     1307, 2595, 2625,  846,  706, 3040,  551, 2620, 2639, 2643,
     2633, 2649, 2651, 2626,  366, 3040,  299, 2653, 2663, 2664,
     2668,   88, 3040, 2670, 2675, 3040, 2694, 2701, 2708,   51,
     2715, 2722, 2729, 2736, 2743, 2750, 2757, 2764, 2771, 2773,
     2775, 2782, 2789, 2796, 2803
    } ;

static yyconst short int yy_def[1256] =
    {   0,
     1236,    1, 1237, 1238, 1236,    5, 1236,    7, 1236,    9,
     1239, 1239, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1236, 1241, 1240, 1240,
     1236, 1236, 1236, 1242, 1236, 1243, 1236, 1236, 1242, 1243,
     1243, 1243, 1244, 1236, 1236, 1244, 1244, 1244, 1244, 1244,
     1244, 1245, 1245,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73, 1246,   73,   73, 1247, 1236, 1236,

     1236, 1247, 1247, 1247, 1236, 1247, 1247, 1248, 1248, 1248,
     1248, 1248,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
     1236, 1249,  112,  112, 1236, 1236, 1236, 1250, 1250, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1236, 1251, 1251, 1252, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,

     1240, 1240, 1240, 1236, 1241, 1241, 1240, 1240, 1240, 1236,
     1236, 1236, 1236, 1243, 1236, 1236, 1236, 1243, 1243, 1243,
     1244, 1244, 1236, 1244,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73, 1246, 1246,   73,   73,   73, 1253,
     1236, 1236, 1236, 1236, 1253, 1254, 1254, 1254, 1254,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269, 1236, 1255,  269,  269,  269,

     1236, 1236, 1236, 1236, 1250, 1250, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1236, 1251, 1251, 1251,
     1252, 1252, 1236, 1236, 1236, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1243,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73, 1253, 1253,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269, 1255,  269,  269,  269,
      269, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1240, 1240, 1240,

     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1243,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,

      269,  269,  269,  269,  269,  269,  269,  269,  269, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1240, 1240, 1240, 1240,
     1236, 1240, 1240, 1240, 1240, 1240, 1236, 1240, 1240, 1240,
     1240, 1236, 1240, 1236, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1236, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1243,   73,   73,   73,   73, 1244,   73,   73,
       73,   73,   73, 1244,   73,   73,   73,   73, 1244,   73,

     1244,   73,   73,   73,   73,   73,   73,   73,   73, 1244,
       73,   73,   73,   73,   73,   73,   73,   73,   73,  269,
      269,  269,  269, 1253,  269,  269,  269,  269,  269, 1253,
      269,  269,  269,  269, 1253,  269, 1253,  269,  269,  269,
      269,  269,  269,  269,  269, 1253,  269,  269,  269,  269,
      269,  269,  269,  269,  269, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1240, 1240, 1240, 1236,
     1240, 1240, 1240, 1236, 1240, 1236, 1236, 1236, 1240, 1240,

     1236, 1240, 1240, 1240, 1240, 1240, 1236, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1243,   73,   73,
       73, 1244,   73,   73,   73, 1244,   73, 1244, 1244, 1244,
       73,   73, 1244,   73,   73,   73,   73,   73, 1244,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,  269,
      269,  269, 1253,  269,  269,  269, 1253,  269, 1253, 1253,
     1253,  269,  269, 1253,  269,  269,  269,  269,  269, 1253,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,

     1251, 1251, 1251, 1251, 1236, 1240, 1236, 1240, 1240, 1240,
     1240, 1240, 1240, 1236, 1240, 1236, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1244,
       73, 1244,   73,   73,   73,   73,   73,   73, 1244,   73,
     1244,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73, 1253,  269, 1253,  269,  269,  269,
      269,  269,  269, 1253,  269, 1253,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,

     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1236,
     1236, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
       73,   73,   73,   73,   73,   73,   73,   73,   73, 1244,
     1244,   73,   73,   73,   73,   73,   73,   73,   73,   73,
      269,  269,  269,  269,  269,  269,  269,  269,  269, 1253,
     1253,  269,  269,  269,  269,  269,  269,  269,  269,  269,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1250,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1240,
     1240, 1240, 1236, 1240, 1240, 1240, 1240, 1236, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240,   73,   73,   73,

     1244,   73,   73,   73,   73, 1244,   73,   73,   73,   73,
       73,   73,   73,   73,   73,  269,  269,  269, 1253,  269,
      269,  269,  269, 1253,  269,  269,  269,  269,  269,  269,
      269,  269,  269, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1250, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1236, 1240, 1236, 1240, 1240, 1240, 1240, 1236, 1240, 1240,
     1240, 1244,   73, 1244,   73,   73,   73,   73, 1244,   73,
       73,   73, 1253,  269, 1253,  269,  269,  269,  269, 1253,
      269,  269,  269, 1251, 1251, 1251, 1251, 1251, 1250, 1251,
     1251, 1251, 1240, 1240, 1236, 1240, 1236, 1236,   73,   73,

     1244,   73, 1244, 1244,  269,  269, 1253,  269, 1253, 1253,
     1251, 1251, 1251, 1250, 1240, 1236, 1236,   73, 1244, 1244,
      269, 1253, 1253, 1251, 1250, 1236, 1236, 1244, 1244, 1253,
     1253, 1250, 1236, 1244, 1253,    0, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236
    } ;

static yyconst short int yy_nxt[3096] =
    {   0,
       14,   15,   16,   17,   15,   18,   14,   19,   20,   21,
       22,   23,   14,   24,   25,   26,   27,   28,   29,   24,
       24,   30,   24,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   24,   24,   24,   24,   24,   24,   24,   40,
       41,   42,   24,   24,   24,   24,   43,   24,   44,   24,
       45,   24,   24,   24,   46,   47,  171,  174,   47,  171,
       48,   52,   53,   54,  193,   55,   51,   57,   58,   59,
      178,   60,  167,  168,  169,  167,  194,  208,  179,   49,
      170,  207,   61,  167,  168,  169,  167,  182,  189,  190,
      183,  170,  197,  204,  184,  186,  204,  191,  205,  202,

     1233,  198,  209,  227,   50,  210,  212,  213,  215,  216,
      217,  222,  225,  222,  222,   62,   63,   15,   64,   65,
       15,   66,   63,   67,   68,   69,   70,   71,   63,   72,
       73,   74,   75,   76,   77,   72,   72,   78,   72,   79,
       80,   81,   82,   83,   84,   85,   86,   87,   72,   72,
       72,   72,   72,   72,   72,   88,   89,   90,   72,   72,
       72,   72,   91,   72,   92,   72,   93,   72,   72,   72,
       94,   47,  219,  225,   47,  222,   95,  222,  222,  222,
      228,  222,  222,  222,  247,  222,  222,  222,  238,  222,
      222,  222,  225,  222,  222,   96,  222,  231,  222,  222,

      229,  236,  225,  225,  225,  220,  224,  225,  230,  232,
      237,  225,  225,  225,  243,  256,  225,  256,  256,  252,
       97,   98,   99,  100,  101,   99,  102,   98,  103,  104,
      105,  106,  107,   98,  108,  109,  110,  111,  112,  113,
      108,  108,  114,  108,  115,  116,  117,  118,  119,  120,
      121,  122,  123,  108,  108,  108,  108,  108,  108,  108,
      124,  125,  126,  108,  108,  108,  108,  127,  108,  128,
      108,  129,  108,  108,  108,  130,  131,  233,  225,  131,
      234,  132,  240,  241,  235,  244,  246,  225,  225,  257,
      225,  242,  225,  250,  225,  225,  266,  245,  248,  280,

      133,  225,  225,  237,  266,  225,  305,  249,  305,  351,
      251, 1233,  254,  253,  261,  262,  263,  261,  263,  264,
      263,  263,  313,  319,  352,  134,   14,  135,  136,  137,
      135,   18,   14,   19,   20,   21,  138,  139,   14,  140,
      141,  142,  143,  144,  145,  140,  140,  146,  140,  147,
      148,  149,  150,  151,  152,  153,  154,  155,  140,  140,
      140,  140,  140,  140,  140,  156,  157,  158,  140,  140,
      140,  140,  159,  140,  160,  140,  161,  140,  140,  140,
      162,  163,  277,  305,  163,  258,   48,  266,  272,  225,
      266,  266,  273,  274,  305,  266,  275,  320,  266,  266,

      276,  266,  279,  266,  278,  164,  287,  253, 1232,  266,
      259,  266,  281,  282,  266,  266,  266,  284,  266,  266,
      333,  283,  266,  266,  266,  266,  266,  266,  305,  293,
      165,  221,  222,  266,  222,  222,  221,  221,  221,  221,
      221,  221,  305,  221,  221,  222,  292,  222,  222,  221,
      221,  221,  221,  221,  221,  285,  221,  266,  266,  305,
      367,  266,  266,  314,  494,  266,  266,  286,  305,  266,
      266,  288,  368,  226,  260,  260,  291,  305,  260,  260,
      260,  260,  260,  294,  260,  325,  260,  260,  260,  329,
      266,  260,  260,  260,  260,  260,  308,  260,  266,  260,

      266,  289,  296,  262,  263,  296,  206,  205,  266,  305,
      290,  407,  206,  305,  295,  383,  267,  260,  260,  298,
      305,  260,  260,  260,  260,  260,  225,  260,  305,  260,
      309,  225,  266,  278,  305,  310,  334,  268,  260,  260,
      266,  318,  260,  260,  260,  260,  260,  332,  260,  305,
      260,  301,  302,  303,  301,  269,  260,  260,  299,  266,
      260,  260,  260,  260,  260,  311,  260,  266,  260,  305,
      305,  305,  305,  312,  305,  305,  305,  305,  315,  328,
      294,  316,  270,  300,  326,  317,  322,  323,  321,  305,
      271,  305,  339, 1227,  338,  324,  327,  354,  330,  337,

      302,  303,  337,  342,  205,  376,  342,  331,  319,  208,
      171,  355,  335,  171,  335,  348,  219,  340,  377,  336,
      343,  344,  345,  343,  225,  349,  204,  350,  397,  204,
      222,  205,  222,  222,  209,  210,  212,  213,  215,  216,
      217,  222,  384,  222,  222,  222,  390,  222,  222,  220,
      385,  388,  305,  391,  225,  224,  393,  614,  225,  394,
      386,  225,  387,  225,  225,  395,  389,  392,  225,  225,
      396,  225,  225,  398,  399,  400,  225,  401,  225,  402,
      403,  225,  408,  225,  406,  404,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  405,  409,  225,

      411,  413,  225,  256,  257,  256,  256,  412,  256,  410,
      256,  256,  415,  416,  414,  418,  225,  258, 1226,  260,
      225,  225,  260,  417,  261,  262,  263,  261,  263,  262,
      263,  263,  297,  260,  206,  297,  260,  305,  305,  305,
      206,  462,  259,  420,  419,  260,  472,  305,  260,  419,
      419,  419,  419,  467,  419,  305,  419,  419,  260,  305,
      476,  260,  419,  419,  419,  419,  469,  419,  468,  419,
      422,  419,  260,  305,  478,  260,  419,  419,  419,  419,
      473,  419,  305,  419,  423,  419,  260,  432,  421,  260,
      419,  419,  419,  419,  427,  419,  421,  419,  421,  475,

      421,  305,  421,  424,  463,  429,  421,  305,  421,  428,
      421,  430,  421,  425,  421,  426,  421,  305,  433,  421,
      421,  305,  421,  434,  421,  431,  421,  421,  421,  421,
      305,  421,  479,  435,  421,  421,  421,  421,  474,  421,
      897,  421,  436,  437,  305,  421,  421,  421,  438,  439,
      440,  421,  485,  421,  421,  421,  421,  441,  421,  443,
      477,  305,  421,  442,  421,  421,  421,  421,  421,  421,
      487,  444,  421,  446,  421,  305,  421,  421,  421,  421,
      421,  421,  305,  445,  421,  447,  421,  421,  421,  421,
      421,  421,  305,  481,  421,  421,  421, 1225,  421,  448,

      421,  421,  421,  421,  305,  421,  488,  421,  421,  421,
      421,  450,  305,  421,  305,  480,  452,  482,  421,  421,
      490,  421,  449,  421,  451,  421,  305,  305,  421,  453,
      421,  296,  262,  263,  296,  305,  205,  454,  459,  421,
      305,  305,  305,  421,  489,  486,  305,  455,  464,  458,
      456,  421,  421,  421,  305,  421,  305,  470,  465,  460,
      466,  483,  421,  491,  421,  301,  302,  303,  301,  495,
      305,  471,  492,  484,  305,  496,  337,  302,  303,  337,
      305,  205, 1071,  338,  461,  493,  540,  342,  497,  339,
      342,  342,  528,  538,  342,  343,  344,  345,  343,  529,

      225,  536,  537,  530,  225,  225,  225,  541,  539,  225,
      225,  225,  543,  544,  340,  545,  546,  225,  547,  548,
      225,  549,  554,  225,  225,  550,  225,  551,  552,  553,
      555,  225,  225,  225,  225,  556,  225,  225,  557,  559,
      225,  225,  225,  225,  225,  558,  225,  560,  225,  561,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  562,
      260,  565,  260,  260,  563,  260,  570,  566,  305,  225,
      564,  421,  420,  305,  567,  690,  421,  569,  568,  571,
      572,  421,  421,  421,  573,  421,  421,  616,  421,  610,
      574,  575,  421,  421,  421,  421,  421,  421,  576,  577,

      578,  421,  421,  421,  305,  421,  421,  421,  421,  586,
      421,  421,  421,  421,  421,  421,  581,  421,  579,  421,
      421,  421,  421,  580,  584,  421,  630,  421,  421,  421,
      582,  421,  305,  421,  421,  583,  585,  421,  421,  421,
      421,  421,  587,  421,  421,  591,  588,  421,  421,  421,
      589,  421,  625,  421,  421,  421,  590,  421,  421,  305,
      421,  421,  592,  421,  421,  421,  421,  421,  421,  421,
      305,  421,  305,  594,  615,  421,  596,  421,  421,  593,
      421,  421,  421,  421,  595,  421,  421,  305,  421,  421,
      421,  613,  421,  421,  597,  421,  305,  598,  305,  421,

      421,  421,  421,  421,  619,  421,  421,  421,  599,  638,
      305,  631,  611,  612,  421,  305,  421,  421,  421,  421,
      421,  305,  601,  600,  421,  602,  421,  421,  622,  305,
      421,  603,  421,  421,  628,  305,  617,  421,  604,  421,
      421,  607,  605,  421,  618,  421,  297,  606,  206,  297,
      421,  421,  421,  459,  206,  421,  305,  305,  421,  305,
      608,  458,  460,  421,  305,  421,  609,  421,  421,  305,
      421,  620,  621,  623,  305,  305,  305,  305,  305,  634,
      629,  624,  626,  627,  305,  305,  633,  461,  305,  305,
      305,  305,  305,  684,  305,  305,  662,  685,  632,  225,

      687,  688,  686,  689,  635,  225,  225,  225,  694,  225,
      696,  225,  636,  691,  225,  663,  639,  305,  225,  225,
      692,  644,  225,  640,  695,  225,  225,  697,  698,  637,
      641,  643,  699,  225,  642,  645,  646,  701,  702,  704,
      703,  225,  710,  705,  708,  225,  225,  225,  225,  225,
      225,  700,  225,  706,  225,  225,  225,  707,  709,  225,
      225,  225,  225,  225,  225,  305,  225,  305,  711,  651,
      756,  225,  225, 1218,  720,  305,  712,  421,  714,  717,
      716,  715,  718,  713,  421,  719,  305,  421,  721,  421,
      421,  421,  723,  724,  421,  421,  421,  758,  722,  421,

      421,  421,  421,  421,  725,  421,  421,  421,  305,  421,
      421,  421,  762,  757,  421,  305,  421,  305,  421,  421,
      421,  730,  421,  726,  421,  759,  728,  421,  727,  421,
      729,  421,  421,  305,  760,  305,  421,  421,  305,  421,
      421,  421,  421,  732,  421,  731,  421,  734,  421,  735,
      421,  421,  733,  421,  737,  421,  765,  305,  761,  777,
      421,  421,  305,  739,  421,  421,  305,  421,  736,  738,
      421,  421,  421,  421,  421,  421,  421,  763,  740,  421,
      421,  764,  770,  421,  744,  421,  741,  421,  305,  421,
      421,  421,  421,  421,  421,  421,  421,  742,  421,  746,

      305,  743,  421,  766,  225,  421,  421,  771,  421,  421,
      421,  745,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  305,  421,  657,  421,  305,  421,  664,  305,
      421,  421,  421,  305,  421,  305,  747,  421,  421,  421,
      748,  421,  749,  421,  421,  421,  421,  750,  421,  421,
      421,  305,  305,  767,  305,  421,  751,  421,  752,  421,
      305,  421,  753,  772,  305,  768,  662,  754,  773,  305,
      305,  778,  305,  755,  673,  305,  780,  305,  776,  305,
      305,  305,  813,  816,  305,  769,  774,  305,  820,  819,
      822,  826,  828, 1217,  821,  775,  814,  817,  225,  225,

      225,  222,  823,  222,  222,  225,  829,  225,  225,  225,
      779,  225,  781,  784,  785,  783,  782,  825,  824,  786,
      225,  225,  222,  225,  222,  222,  830,  827,  222,  831,
      222,  222,  222,  833,  222,  222,  225,  225,  832,  835,
      225,  225,  836,  225,  834,  837,  838,  839,  225,  225,
      225,  225,  222,  225,  222,  222,  225,  225,  225,  225,
      225,  225,  943,  840,  225,  225,  260,  842,  841,  260,
      421,  845,  850,  844,  225,  260,  848,  847,  260,  843,
      421,  421,  421,  851,  421,  846,  853,  852,  421,  421,
      849,  421,  421,  421,  421,  305,  421,  854,  421,  421,

      421,  421,  421,  421,  421,  857,  855,  421,  859,  883,
      856,  421,  860,  421,  421,  421,  861,  421,  421,  421,
      305,  421,  421,  421,  421,  858,  421,  421,  421,  305,
      421,  790,  421,  260,  421,  260,  260,  421,  260,  421,
      862,  421,  421,  864,  260,  305,  885,  260,  421,  421,
      892,  421,  421,  421,  421,  863,  421,  305,  421,  421,
      421,  421,  867,  865,  305,  421,  421,  881,  421,  866,
      868,  882,  421,  421,  870,  421,  421,  421,  225,  869,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  951,
      421,  421,  421,  421,  421,  421,  305,  421,  421,  421,

      305,  305,  871,  421,  421,  421,  421,  421,  421,  305,
      421,  872,  884,  421,  421,  421,  886,  305,  305,  873,
      421,  889,  305,  875,  421,  876,  421,  305,  874,  794,
      421,  305,  421,  796,  305,  887,  797,  305,  305,  877,
      798,  878,  879,  305,  888,  801,  305,  305,  305,  305,
      305,  895,  807,  305,  893,  305,  880,  305,  305,  898,
      896,  905,  930,  894,  932,  906,  931, 1216,  891,  890,
      225,  222,  933,  222,  222,  225,  934,  937,  935,  225,
      939,  225,  225,  225,  936,  900,  899,  222,  903,  222,
      222,  225,  902,  222,  941,  222,  222,  225,  222,  901,

      222,  222,  904,  222,  940,  222,  222,  222,  225,  222,
      222,  225,  942,  944,  225,  222,  225,  222,  222,  225,
      225,  225,  225,  225,  946,  225,  225,  225,  305,  948,
      945,  950,  225,  985,  955,  953,  421, 1215,  956,  947,
      421,  957,  949,  954,  952,  305,  421,  421,  421,  958,
      421,  260,  421,  421,  260,  260,  421,  421,  260,  421,
      421,  962,  988,  421,  421,  959,  421,  960,  961,  305,
      421,  907,  421,  421,  421,  260,  421,  260,  260,  260,
      260,  964,  260,  421,  963,  421,  260,  421,  965,  260,
      966,  260,  421,  421,  260,  305,  421,  421,  305,  421,

      305,  967,  421,  421,  421,  421,  421,  421,  421,  968,
      421, 1024,  969,  421,  421,  983,  981,  421,  421,  421,
      421,  225,  421,  421,  421,  421,  421,  421,  421, 1028,
      421,  421,  421,  971,  225,  421,  305,  421,  421,  421,
      970,  421,  421,  421,  421,  421,  973,  421,  421,  972,
      421,  975,  305,  421,  421,  305,  982,  976,  305,  305,
      914,  916,  974,  421,  421,  421,  421,  977,  305,  305,
      905,  986,  978,  305,  980,  984,  979,  305,  305,  305,
      987,  305,  305,  305,  305,  989,  990,  305,  305,  305,
      222,  305,  222,  222, 1021,  222,  305,  222,  222,  225,

      992, 1022,  225, 1023, 1031, 1025,  225,  225,  225,  994,
      991,  996,  225, 1026,  225,  225,  999,  997, 1027, 1030,
      993, 1000,  995,  225,  222,  998,  222,  222,  222, 1032,
      222,  222, 1029,  225, 1033,  225,  225,  225,  225,  225,
      225,  225,  225,  260,  260,  260,  260,  260,  260,  260,
      305,  305,  260, 1010, 1038, 1041,  421, 1034, 1035,  421,
     1036, 1037, 1039, 1040,  421,  305,  421, 1065,  421,  421,
      421,  421, 1061,  305,  421,  421,  421, 1042,  421, 1044,
      421,  421, 1043,  305, 1045,  421,  421,  421,  421,  421,
      421,  421,  421, 1046, 1062, 1048,  421, 1050,  421,  421,

     1047,  421, 1049,  421,  421, 1067, 1051,  421,  305,  305,
      421,  421,  305,  421,  421,  421,  305,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  305,  421, 1063,
      421,  305, 1066,  421, 1069,  421,  421,  421,  305, 1052,
      421, 1053,  305,  421, 1054,  421,  421, 1064,  421, 1055,
      421,  421,  421,  305,  305,  305, 1068, 1056,  305,  305,
      305,  421, 1098,  421, 1058, 1057, 1072, 1099, 1100, 1101,
     1074, 1102, 1059,  225,  260, 1103,  225,  260,  225,  225,
      225,  225, 1104, 1060,  225,  225,  225, 1105,  225,  222,
     1077,  222,  222,  225, 1073, 1075,  225,  225, 1076, 1078,

     1079,  222, 1107,  222,  222,  225, 1108, 1109,  225,  225,
      225, 1110,  305, 1116, 1083, 1117,  421,  260,  305, 1111,
      260,  305, 1113,  421, 1119,  421,  421, 1112,  421, 1134,
      421, 1114, 1115,  421, 1118, 1139,  305,  421,  421, 1106,
      421, 1214,  421,  421, 1120,  421,  421,  421,  421,  421,
      421,  421, 1121,  225,  421, 1124,  421, 1140,  421,  421,
     1122,  421,  421,  421,  421,  421,  421, 1123,  421,  421,
      305,  421,  421,  421,  421,  421,  421,  421,  421, 1136,
      421,  305,  305,  421, 1127,  421,  421,  305,  421,  421,
      421, 1125,  305,  421, 1126, 1137, 1138, 1128,  305,  421,

      421,  421,  421,  421,  305,  421, 1129,  305,  305, 1130,
      305, 1135,  305,  305, 1131,  305, 1162, 1164,  222,  305,
      222,  222, 1165, 1132,  225,  225, 1133, 1142, 1144, 1143,
      225, 1168, 1166,  225,  225,  225, 1185,  225, 1167,  222,
      225,  222,  222,  225, 1145, 1148,  225,  305,  225, 1146,
      421, 1147, 1173, 1175, 1149, 1172, 1150, 1170,  421,  421,
      421, 1174,  421, 1171,  260,  421, 1184,  260,  421,  421,
      421,  421,  421,  305, 1176,  421,  421,  421, 1169,  421,
      260, 1179,  421,  260,  421, 1177,  421,  421,  421,  421,
     1178,  421,  421,  421, 1186, 1202,  421,  421,  305,  421,

      421,  421,  421,  421,  421,  421,  421,  305,  421, 1151,
      421,  421,  421,  421,  421,  305,  305, 1153,  421, 1180,
     1187,  421,  305, 1181,  421,  305,  421, 1182,  421,  305,
      421,  421, 1188,  421, 1183,  222, 1201,  222,  222,  225,
     1199,  222,  225,  222,  222, 1200, 1203,  222,  260,  222,
      222,  260, 1198,  225, 1207, 1190,  421, 1192,  260,  421,
      421,  260,  305,  225, 1191,  421,  421, 1197, 1205,  421,
      421,  421,  421, 1206, 1209,  421, 1208,  421,  260,  421,
      421,  260, 1211,  421,  305,  305,  421, 1195,  305,  421,
      421,  421,  421,  421, 1204,  421,  421,  305,  421, 1197,

      222, 1219,  222,  222, 1196,  305, 1212, 1213,  222,  421,
      222,  222,  222, 1195,  222,  222,  421,  260,  225,  421,
      260,  421, 1194, 1222, 1224, 1210,  421, 1221,  421,  421,
      260,  260, 1228,  260,  260,  305,  305, 1216, 1226,  421,
      222,  421,  222,  222,  222, 1230,  222,  222, 1193,  225,
      260,  421,  260,  260,  222,  260,  222,  222,  305,  305,
      305,  421, 1220,  421,  222,  260,  222,  222,  260,  260,
      305,  222,  260,  222,  222, 1234,  260,  305,  305,  260,
     1235, 1223, 1189,  225,  225, 1229,  225,  225,  225,  225,
     1163, 1161, 1160, 1231,   51,   51,   51,   51,   51,   51,

       51,   56,   56,   56,   56,   56,   56,   56,  166,  166,
      166,  166,  166,  166,  166,  206,  206, 1159,  206,  206,
      206,  206,  211,  211,  211,  211,  211,  211,  211,  214,
     1158, 1157, 1156,  214,  214,  214,  221,  221, 1155,  221,
      221,  221,  221,  225,  225, 1154,  225,  225,  225,  225,
      255,  255, 1153,  255,  255,  255,  255,  260,  260, 1152,
     1151, 1141,  260,  260,  266,  266,  305,  225, 1097,  266,
      266,  297,  297, 1096,  297,  297,  297,  297,  305,  305,
      307,  307,  341,  341, 1095, 1094, 1093,  341,  341,  419,
      419, 1092, 1091, 1090,  419,  419,  421,  421, 1089, 1088,

     1087,  421,  421,  457,  457, 1086,  457,  457,  457,  457,
     1085, 1084, 1083, 1082, 1081, 1080, 1070,  305,  225, 1020,
     1019, 1018, 1017, 1016, 1015, 1014, 1013, 1012, 1011, 1010,
     1009, 1008, 1007, 1006, 1005, 1004, 1003, 1002, 1001,  938,
      929,  928,  927,  926,  925,  924,  923,  922,  921,  920,
      919,  918,  917,  916,  915,  914,  913,  912,  911,  910,
      909,  908,  907,  305,  305,  225,  225,  818,  815,  812,
      811,  810,  809,  808,  807,  806,  805,  804,  803,  802,
      801,  800,  799,  798,  797,  796,  795,  794,  793,  792,
      791,  790,  789,  788,  787,  305,  305,  225,  225,  693,

      683,  682,  681,  680,  679,  678,  677,  676,  675,  674,
      673,  672,  671,  670,  669,  668,  667,  666,  665,  664,
      661,  660,  659,  658,  657,  656,  655,  654,  653,  652,
      651,  650,  649,  648,  647,  305,  225,  542,  535,  534,
      533,  532,  531,  527,  526,  525,  524,  523,  522,  521,
      520,  519,  518,  517,  516,  515,  514,  513,  512,  511,
      510,  509,  508,  507,  506,  505,  504,  503,  502,  501,
      500,  499,  498,  344,  305,  306,  302,  225,  218,  382,
      215,  210,  207,  381,  380,  379,  378,  375,  374,  373,
      372,  371,  370,  369,  366,  365,  364,  363,  362,  361,

      360,  359,  358,  357,  356,  353,  347,  346,  173,  344,
      305,  306,  304,  265,  239,  223,  218,  215,  210,  203,
      202,  201,  200,  199,  196,  195,  192,  188,  187,  186,
      185,  181,  180,  177,  176,  175,  173,  172, 1236,   13,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236

    } ;

static yyconst short int yy_chk[3096] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,   15, 1240,    2,   15,
        2,    3,    3,    3,   38,    3,    4,    4,    4,    4,
       28,    4,   11,   11,   11,   11,   38,   50,   28,    2,
       11,   49,    4,   12,   12,   12,   12,   31,   36,   36,
       31,   12,   41,   47,   31,   49,   47,   36,   47,   50,

     1232,   41,   50,   74,    2,   54,   54,   54,   59,   59,
       59,   63,   74,   63,   63,    4,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    6,   62,   88,    6,   66,    6,   66,   66,   67,
       75,   67,   67,   68,   88,   68,   68,   69,   82,   69,
       69,   70,   75,   70,   70,    6,   71,   77,   71,   71,

       76,   80,   77,   76,   82,   62,   71,   78,   76,   78,
       81,   92,   81,   80,   85,   95,   85,   95,   95,   92,
        6,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    8,   79,   90,    8,
       79,    8,   84,   84,   79,   86,   87,   84,   79,   96,
       89,   84,   91,   90,   86,   93,  119,   86,   89,  119,

        8,   94,   87,   96,  119,   96,  149,   89,  145,  178,
       91, 1227,   94,   93,   99,   99,   99,   99,  101,  101,
      101,  101,  145,  149,  178,    8,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,   10,  116,  159,   10,   97,   10,  114,  113,   97,
      113,  116,  114,  115,  150,  114,  115,  150,  113,  116,

      115,  115,  118,  117,  117,   10,  123,   97, 1225,  115,
       97,  117,  120,  120,  120,  118,  121,  121,  128,  123,
      159,  120,  120,  118,  121,  127,  128,  123,  334,  128,
       10,   72,   72,  127,   72,   72,   72,   72,   72,   72,
       72,   72,  146,   72,   73,   73,  127,   73,   73,   73,
       73,   73,   73,   73,   73,  122,   73,  124,  126,  156,
      192,  122,  129,  146,  334,  124,  126,  122,  153,  122,
      129,  124,  192,   73,  108,  108,  126,  141,  108,  108,
      108,  108,  108,  129,  108,  153,  108,  109,  109,  156,
      125,  109,  109,  109,  109,  109,  141,  109,  125,  109,

      130,  125,  131,  131,  131,  131,  132,  131,  130,  160,
      125,  245,  132,  158,  130,  226,  109,  110,  110,  133,
      142,  110,  110,  110,  110,  110,  245,  110,  143,  110,
      142,  226,  133,  133,  148,  143,  160,  110,  111,  111,
      133,  148,  111,  111,  111,  111,  111,  158,  111,  144,
      111,  135,  135,  135,  135,  111,  112,  112,  134,  134,
      112,  112,  112,  112,  112,  144,  112,  134,  112,  151,
      147,  157,  152,  144,  154,  161,  155,  165,  147,  155,
      134,  147,  112,  134,  154,  147,  152,  152,  151,  162,
      112,  164,  165, 1217,  164,  152,  154,  180,  157,  163,

      163,  163,  163,  166,  163,  200,  166,  157,  164,  209,
      171,  180,  161,  171,  165,  177,  220,  165,  200,  162,
      167,  167,  167,  167,  236,  177,  204,  177,  236,  204,
      221,  204,  221,  221,  209,  213,  213,  213,  217,  217,
      217,  222,  227,  222,  222,  224,  230,  224,  224,  220,
      228,  229,  466,  231,  230,  224,  232,  466,  227,  233,
      228,  228,  228,  234,  229,  234,  229,  231,  232,  231,
      235,  233,  235,  237,  238,  239,  237,  240,  238,  241,
      242,  244,  246,  239,  244,  243,  247,  241,  248,  250,
      253,  249,  246,  240,  251,  252,  242,  243,  247,  243,

      249,  251,  254,  255,  258,  255,  255,  250,  256,  248,
      256,  256,  252,  253,  251,  257,  257,  259, 1215,  260,
      258,  259,  260,  254,  261,  261,  261,  261,  263,  263,
      263,  263,  297,  265,  297,  297,  265,  318,  308,  314,
      297,  308,  259,  265,  266,  266,  314,  311,  266,  266,
      266,  266,  266,  311,  266,  312,  266,  267,  267,  320,
      318,  267,  267,  267,  267,  267,  312,  267,  311,  267,
      267,  268,  268,  315,  320,  268,  268,  268,  268,  268,
      315,  268,  317,  268,  268,  269,  269,  273,  273,  269,
      269,  269,  269,  269,  270,  269,  270,  269,  273,  317,

      273,  309,  271,  269,  309,  271,  270,  781,  270,  270,
      275,  272,  271,  269,  271,  269,  272,  316,  274,  274,
      275,  321,  275,  275,  276,  272,  272,  277,  272,  274,
      326,  274,  321,  276,  276,  278,  276,  277,  316,  277,
      781,  279,  277,  278,  319,  278,  280,  278,  279,  280,
      281,  279,  326,  279,  282,  281,  280,  282,  280,  284,
      319,  328,  284,  283,  282,  281,  282,  281,  283,  285,
      328,  284,  284,  286,  284,  329,  288,  286,  283,  285,
      283,  285,  323,  285,  287,  287,  288,  286,  288,  286,
      289,  290,  331,  323,  287,  291,  287, 1214,  292,  288,

      289,  290,  289,  290,  330,  291,  329,  291,  292,  293,
      292,  290,  322,  294,  324,  322,  292,  324,  295,  293,
      331,  293,  289,  294,  291,  294,  332,  335,  295,  292,
      295,  296,  296,  296,  296,  336,  296,  293,  299,  298,
      310,  327,  992,  299,  330,  327,  333,  294,  310,  298,
      295,  298,  300,  299,  313,  299,  325,  313,  310,  300,
      310,  325,  300,  332,  300,  301,  301,  301,  301,  335,
      338,  313,  333,  325,  340,  336,  337,  337,  337,  337,
      339,  337,  992,  339,  300,  333,  387,  341,  338,  340,
      341,  342,  376,  385,  342,  343,  343,  343,  343,  376,

      387,  383,  384,  376,  383,  384,  386,  388,  386,  385,
      390,  388,  390,  391,  340,  392,  393,  392,  394,  395,
      393,  396,  401,  391,  396,  397,  398,  398,  399,  400,
      402,  395,  403,  402,  394,  403,  401,  397,  404,  406,
      399,  400,  410,  405,  404,  405,  407,  407,  408,  408,
      406,  409,  411,  412,  413,  414,  415,  416,  417,  409,
      419,  412,  420,  419,  410,  420,  415,  413,  468,  542,
      411,  421,  420,  462,  413,  542,  422,  414,  413,  416,
      417,  421,  423,  421,  422,  425,  422,  468,  422,  462,
      423,  424,  423,  427,  423,  425,  424,  425,  425,  426,

      427,  435,  426,  427,  482,  427,  424,  428,  424,  435,
      429,  435,  426,  435,  426,  430,  430,  428,  428,  428,
      429,  431,  429,  429,  433,  430,  482,  430,  432,  433,
      431,  431,  477,  431,  437,  432,  434,  434,  432,  433,
      432,  433,  436,  436,  437,  440,  437,  434,  440,  434,
      438,  438,  477,  436,  441,  436,  439,  439,  440,  467,
      440,  438,  441,  438,  441,  442,  441,  439,  443,  439,
      465,  444,  490,  443,  467,  442,  445,  442,  443,  442,
      443,  444,  446,  444,  444,  447,  445,  471,  445,  448,
      449,  465,  446,  450,  446,  447,  463,  447,  483,  448,

      449,  448,  449,  450,  471,  450,  451,  452,  448,  490,
      464,  483,  463,  464,  453,  469,  451,  452,  451,  452,
      454,  474,  450,  449,  453,  451,  453,  455,  474,  480,
      454,  452,  454,  456,  480,  470,  469,  455,  452,  455,
      458,  454,  452,  456,  470,  456,  457,  453,  457,  457,
      458,  459,  458,  460,  457,  461,  472,  475,  460,  486,
      455,  459,  461,  459,  481,  461,  456,  461,  460,  473,
      460,  472,  473,  475,  476,  478,  479,  484,  485,  486,
      481,  476,  478,  479,  487,  488,  485,  461,  489,  491,
      493,  492,  494,  536,  495,  496,  513,  537,  484,  538,

      539,  540,  538,  541,  487,  541,  543,  536,  546,  539,
      548,  537,  488,  543,  548,  513,  491, 1211,  540,  544,
      544,  494,  547,  492,  547,  546,  549,  549,  550,  489,
      492,  493,  551,  550,  492,  495,  496,  552,  553,  555,
      554,  553,  561,  556,  559,  562,  557,  555,  556,  551,
      558,  551,  554,  557,  552,  559,  560,  558,  560,  561,
      564,  565,  566,  567,  568,  610,  569,  614,  562,  614,
      610,  570,  571, 1200,  573,  612,  564,  573,  566,  569,
      568,  567,  570,  565,  575,  571,  617,  573,  574,  573,
      576,  574,  576,  577,  575,  578,  575,  612,  575,  577,

      576,  574,  576,  574,  578,  578,  579,  578,  611,  577,
      580,  577,  617,  611,  581,  613,  579,  615,  579,  582,
      580,  583,  580,  579,  581,  613,  581,  583,  580,  582,
      582,  582,  584,  616,  615,  621,  585,  583,  634,  583,
      586,  587,  584,  585,  584,  584,  585,  587,  585,  588,
      586,  587,  586,  587,  589,  588,  621,  618,  616,  634,
      589,  590,  619,  591,  591,  588,  627,  588,  588,  590,
      589,  590,  589,  590,  591,  592,  591,  618,  592,  594,
      593,  619,  627,  595,  596,  592,  593,  592,  622,  594,
      593,  594,  593,  595,  596,  595,  596,  594,  597,  598,

      628,  595,  599,  622, 1199,  598,  600,  628,  597,  602,
      597,  597,  599,  601,  599,  598,  600,  598,  600,  602,
      603,  602,  620,  601,  620,  601,  626,  604,  626,  636,
      603,  605,  603,  623,  609,  639,  599,  604,  606,  604,
      601,  605,  602,  605,  609,  607,  609,  603,  606,  608,
      606,  624,  629,  623,  630,  607,  604,  607,  605,  608,
      631,  608,  606,  629,  625,  624,  625,  607,  630,  632,
      633,  636,  635,  608,  635,  638,  639,  640,  633,  641,
      642,  643,  680,  682,  644,  625,  631,  645,  685,  684,
      687,  692,  695, 1198,  686,  632,  680,  682,  684,  686,

      685,  688,  689,  688,  688,  689,  696,  687,  692,  695,
      638,  690,  640,  643,  644,  642,  641,  691,  690,  645,
      693,  691,  694,  696,  694,  694,  697,  693,  699,  700,
      699,  699,  701,  703,  701,  701,  702,  705,  702,  705,
      704,  700,  706,  697,  704,  707,  708,  709,  711,  712,
      703,  708,  710,  714,  710,  710,  706,  715,  707,  716,
      717,  718,  837,  711,  709,  719,  724,  714,  712,  724,
      720,  717,  720,  716,  837,  730,  719,  718,  730,  715,
      720,  722,  720,  721,  721,  717,  723,  722,  726,  725,
      719,  722,  723,  722,  721,  758,  721,  725,  726,  725,

      726,  725,  723,  727,  723,  728,  726,  729,  731,  758,
      727,  728,  732,  727,  731,  727,  733,  729,  732,  729,
      761,  728,  733,  728,  731,  729,  731,  734,  732,  759,
      732,  759,  733,  735,  733,  737,  735,  734,  737,  734,
      736,  736,  738,  739,  746,  774,  761,  746,  740,  739,
      774,  736,  738,  736,  738,  738,  741,  756,  740,  739,
      740,  739,  742,  740,  757,  742,  741,  756,  741,  741,
      743,  757,  743,  744,  745,  742,  747,  742,  846,  744,
      745,  748,  743,  744,  743,  744,  747,  749,  747,  846,
      745,  748,  745,  748,  750,  751,  760,  749,  752,  749,

      770,  762,  747,  753,  750,  751,  750,  751,  752,  764,
      752,  748,  760,  753,  754,  753,  762,  778,  782,  750,
      755,  770,  779,  752,  754,  753,  754,  763,  751,  763,
      755,  765,  755,  765,  766,  764,  766,  769,  767,  753,
      767,  754,  755,  771,  769,  771,  772,  773,  775,  776,
      777,  778,  777,  783,  775,  784,  755,  785,  786,  782,
      779,  787,  819,  776,  820,  787,  819, 1196,  773,  772,
      821,  822,  821,  822,  822,  823,  823,  827,  824,  819,
      832,  820,  824,  825,  825,  784,  783,  826,  786,  826,
      826,  827,  785,  828,  835,  828,  828,  832,  829,  784,

      829,  829,  786,  830,  834,  830,  830,  833,  840,  833,
      833,  835,  836,  838,  836,  839,  841,  839,  839,  842,
      834,  843,  844,  845,  841,  838,  847,  848,  887,  843,
      840,  845,  849,  887,  850,  848,  852, 1194,  850,  842,
      850,  851,  844,  849,  847,  892,  852,  851,  852,  852,
      850,  853,  850,  854,  853,  857,  856,  851,  857,  851,
      855,  858,  892,  854,  858,  854,  856,  855,  856,  882,
      855,  882,  855,  862,  858,  859,  858,  860,  859,  861,
      860,  863,  861,  862,  862,  862,  864,  863,  865,  864,
      866,  870,  867,  865,  870,  883,  866,  863, 1192,  863,

      885,  867,  867,  865,  867,  865,  866,  871,  866,  868,
      868,  936,  869,  869,  872,  885,  883,  871,  873,  871,
      868,  936,  868,  869,  872,  869,  872,  874,  873,  942,
      873,  875,  876,  872,  942,  877,  884,  874,  878,  874,
      871,  875,  876,  875,  876,  877,  874,  877,  878,  873,
      878,  876,  888,  879,  880,  886,  884,  877,  889,  891,
      889,  891,  875,  879,  880,  879,  880,  878,  881,  895,
      881,  888,  879,  896,  881,  886,  880,  890,  893,  894,
      890,  897,  898,  899,  900,  893,  894,  901,  902,  903,
      930,  904,  930,  930,  931,  932, 1191,  932,  932,  934,

      896,  934,  935,  935,  945,  937,  931,  937,  946,  898,
      895,  900,  938,  938,  947,  940,  903,  901,  940,  944,
      897,  904,  899,  945,  939,  902,  939,  939,  941,  946,
      941,  941,  943,  943,  947,  948,  944,  952,  949,  950,
      951,  953,  954,  955,  957,  964,  955,  957,  964,  966,
      985,  990,  966,  990,  952,  956,  956,  948,  949,  958,
      950,  951,  953,  954,  959,  980,  956,  985,  956,  958,
      960,  958,  980,  982,  959,  962,  959,  959,  961,  961,
      960,  963,  960,  987,  962,  962,  965,  962,  961,  967,
      961,  963,  968,  963,  982,  967,  965,  969,  965,  967,

      965,  967,  968,  969,  968,  987,  970,  971, 1190,  983,
      972,  973,  986,  969,  970,  969,  989,  971,  974,  971,
      972,  973,  972,  973,  970,  975,  970,  993,  974,  983,
      974,  995,  986,  976,  989,  975,  977,  975,  984,  971,
      978,  972,  988,  976,  973,  976,  977,  984,  977,  974,
      978,  979,  978,  994,  998,  996,  988,  975,  997,  999,
     1000,  979, 1021,  979,  977,  976,  993, 1022, 1023, 1024,
      995, 1025,  978, 1021, 1050, 1027, 1025, 1050, 1023, 1022,
     1027, 1032, 1028,  979, 1028, 1029, 1024, 1029, 1033, 1030,
      998, 1030, 1030, 1035,  994,  996, 1034, 1036,  997,  999,

     1000, 1031, 1032, 1031, 1031, 1037, 1033, 1034, 1038, 1039,
     1040, 1035, 1064, 1041, 1064, 1042, 1042, 1051, 1068, 1036,
     1051, 1061, 1038, 1041, 1044, 1041, 1042, 1037, 1042, 1061,
     1044, 1039, 1040, 1043, 1043, 1068, 1069, 1046, 1045, 1031,
     1044, 1189, 1044, 1043, 1045, 1043, 1047, 1046, 1045, 1046,
     1045, 1048, 1047, 1172, 1049, 1051, 1047, 1069, 1047, 1052,
     1048, 1048, 1054, 1048, 1049, 1053, 1049, 1049, 1055, 1052,
     1063, 1052, 1054, 1056, 1054, 1053, 1057, 1053, 1055, 1063,
     1055, 1065, 1067, 1056, 1054, 1056, 1057, 1071, 1057, 1058,
     1059, 1052, 1072, 1060, 1053, 1065, 1067, 1055, 1073, 1058,

     1059, 1058, 1059, 1060, 1062, 1060, 1056, 1074, 1075, 1057,
     1076, 1062, 1077, 1078, 1058, 1079, 1098, 1100, 1101, 1137,
     1101, 1101, 1102, 1059, 1102, 1171, 1060, 1071, 1073, 1072,
     1103, 1105, 1103, 1098, 1100, 1104, 1137, 1108, 1104, 1106,
     1105, 1106, 1106, 1110, 1074, 1077, 1113, 1135, 1170, 1075,
     1117, 1076, 1116, 1118, 1078, 1113, 1079, 1108, 1116, 1118,
     1117, 1117, 1117, 1110, 1119, 1120, 1135, 1119, 1116, 1118,
     1116, 1118, 1121, 1138, 1120, 1120, 1122, 1120, 1106, 1123,
     1124, 1123, 1121, 1124, 1121, 1121, 1122, 1125, 1122, 1123,
     1122, 1123, 1126, 1127, 1138, 1167, 1128, 1125, 1139, 1125,

     1129, 1130, 1126, 1127, 1126, 1127, 1128, 1134, 1128, 1134,
     1129, 1130, 1129, 1130, 1131, 1136, 1143, 1136, 1132, 1124,
     1139, 1133, 1140, 1126, 1131, 1145, 1131, 1128, 1132, 1148,
     1132, 1133, 1140, 1133, 1131, 1162, 1166, 1162, 1162, 1163,
     1163, 1164, 1165, 1164, 1164, 1165, 1168, 1169, 1173, 1169,
     1169, 1173, 1158, 1166, 1177, 1143, 1174, 1148, 1175, 1176,
     1177, 1175, 1184, 1168, 1145, 1178, 1174, 1157, 1174, 1176,
     1177, 1176, 1177, 1176, 1179, 1178, 1178, 1178, 1180, 1181,
     1179, 1180, 1184, 1182, 1185, 1186, 1183, 1186, 1187, 1181,
     1179, 1181, 1179, 1182, 1169, 1182, 1183, 1188, 1183, 1188,

     1201, 1202, 1201, 1201, 1156, 1212, 1185, 1187, 1203, 1205,
     1203, 1203, 1204, 1155, 1204, 1204, 1206, 1207, 1202, 1205,
     1207, 1205, 1154, 1208, 1212, 1180, 1206, 1206, 1206, 1208,
     1209, 1210, 1218, 1209, 1210, 1213, 1224, 1213, 1224, 1208,
     1219, 1208, 1219, 1219, 1220, 1221, 1220, 1220, 1152, 1218,
     1222, 1221, 1223, 1222, 1228, 1223, 1228, 1228, 1150, 1149,
     1147, 1221, 1204, 1221, 1229, 1230, 1229, 1229, 1230, 1231,
     1146, 1234, 1231, 1234, 1234, 1229, 1235, 1144, 1142, 1235,
     1231, 1210, 1141, 1115, 1114, 1220, 1112, 1111, 1109, 1107,
     1099, 1095, 1092, 1223, 1237, 1237, 1237, 1237, 1237, 1237,

     1237, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1241, 1241, 1090, 1241, 1241,
     1241, 1241, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1243,
     1088, 1087, 1086, 1243, 1243, 1243, 1244, 1244, 1085, 1244,
     1244, 1244, 1244, 1245, 1245, 1084, 1245, 1245, 1245, 1245,
     1246, 1246, 1082, 1246, 1246, 1246, 1246, 1247, 1247, 1081,
     1080, 1070, 1247, 1247, 1248, 1248, 1066, 1026, 1020, 1248,
     1248, 1249, 1249, 1019, 1249, 1249, 1249, 1249, 1250, 1250,
     1251, 1251, 1252, 1252, 1018, 1017, 1016, 1252, 1252, 1253,
     1253, 1015, 1014, 1013, 1253, 1253, 1254, 1254, 1012, 1011,

     1009, 1254, 1254, 1255, 1255, 1008, 1255, 1255, 1255, 1255,
     1007, 1005, 1004, 1003, 1002, 1001,  991,  981,  933,  929,
      928,  927,  926,  925,  924,  923,  922,  921,  920,  919,
      918,  917,  915,  913,  912,  911,  910,  909,  906,  831,
      817,  816,  815,  814,  813,  812,  811,  810,  809,  808,
      806,  805,  804,  803,  802,  800,  799,  795,  793,  792,
      791,  789,  788,  780,  768,  713,  698,  683,  681,  679,
      678,  677,  675,  674,  672,  671,  670,  669,  668,  667,
      666,  665,  663,  660,  659,  658,  656,  655,  654,  653,
      652,  650,  649,  648,  647,  646,  637,  572,  563,  545,

      535,  533,  532,  531,  530,  529,  528,  527,  526,  524,
      523,  522,  521,  520,  519,  518,  517,  516,  515,  514,
      512,  511,  510,  509,  508,  507,  506,  505,  504,  503,
      502,  501,  500,  499,  498,  497,  418,  389,  382,  380,
      379,  378,  377,  375,  374,  373,  372,  371,  370,  369,
      368,  367,  366,  365,  364,  363,  362,  361,  360,  359,
      358,  357,  356,  355,  354,  353,  352,  351,  350,  349,
      348,  347,  346,  345,  307,  306,  303,  225,  219,  218,
      216,  212,  208,  207,  203,  202,  201,  199,  198,  197,
      196,  195,  194,  193,  191,  190,  189,  188,  187,  186,

      185,  184,  183,  182,  181,  179,  176,  175,  173,  169,
      140,  139,  137,  107,   83,   65,   61,   58,   53,   46,
       45,   44,   43,   42,   40,   39,   37,   35,   34,   33,
       32,   30,   29,   27,   26,   25,   23,   17,   13, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236

    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#define INITIAL 0
#line 2 "levcomp.lpp"

// levcomp.lpp:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
// 
// Based loosely on NetHack's lev_comp.l

#include "AppHdr.h"
#include "levcomp.tab.h"
#include <cstring>
#include <queue>

static bool alloced = false;

std::queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(20);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

static void settext()
{
    clean();
    if ((yylval.text = strdup(yytext)))
        alloced = true;
}

#define MAPDEF 1

#define ARGUMENT 2

#define MNAME 3

#define KEYWORDS 4

#define ITEM_LIST 5

#define YY_NEVER_INTERACTIVE 1
#line 1772 "levcomp.lex.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 61 "levcomp.lpp"


#line 1929 "levcomp.lex.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1237 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3040 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 63 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 65 "levcomp.lpp"
{
                        settext();
                        return MAP_LINE;
                    }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 70 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 71 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 72 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 74 "levcomp.lpp"
;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 76 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 81 "levcomp.lpp"
;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 82 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 84 "levcomp.lpp"
{ 
                        settext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 89 "levcomp.lpp"
{
                        settext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 94 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 95 "levcomp.lpp"
;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 96 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 98 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 100 "levcomp.lpp"
{ 
                        settext();
                        return MONSTER_NAME; 
                    }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 105 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 106 "levcomp.lpp"
;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 108 "levcomp.lpp"
{ 
                        BEGIN(INITIAL);
                        settext();
                        return STRING; 
                    }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 114 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 116 "levcomp.lpp"
;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 118 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 121 "levcomp.lpp"
{ BEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 122 "levcomp.lpp"
return DEFAULT_DEPTH;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 123 "levcomp.lpp"
return DEPTH;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 124 "levcomp.lpp"
return ORIENT;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 125 "levcomp.lpp"
{ BEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 126 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 127 "levcomp.lpp"
return FLAGS;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 128 "levcomp.lpp"
{ BEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 129 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return SUBST; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 130 "levcomp.lpp"
{ BEGIN(MNAME); return MONS; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 131 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 132 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return SHUFFLE; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 134 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KFEAT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 135 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KITEM; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 136 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KMONS; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 138 "levcomp.lpp"
return BRANCH;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 139 "levcomp.lpp"
return DEFAULT;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 140 "levcomp.lpp"
return DESC;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 141 "levcomp.lpp"
return BRANCH;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 142 "levcomp.lpp"
return ROOT_DEPTH;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 143 "levcomp.lpp"
return FLOOR_COLOUR;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 144 "levcomp.lpp"
return ROCK_COLOUR;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 146 "levcomp.lpp"
return LEVEL;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 147 "levcomp.lpp"
return END;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 148 "levcomp.lpp"
return PVAULT;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 149 "levcomp.lpp"
return PMINIVAULT;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 151 "levcomp.lpp"
{ BEGIN(ARGUMENT); return ENTRY_MSG; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 152 "levcomp.lpp"
{ BEGIN(ARGUMENT); return EXIT_MSG; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 154 "levcomp.lpp"
return MONSTERS;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 155 "levcomp.lpp"
return ENDMONSTERS;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 158 "levcomp.lpp"
return PANDEMONIC;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 159 "levcomp.lpp"
return NO_HMIRROR;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 160 "levcomp.lpp"
return NO_VMIRROR;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 161 "levcomp.lpp"
return NO_ROTATE;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 163 "levcomp.lpp"
return ENCOMPASS;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 164 "levcomp.lpp"
return NORTH;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 165 "levcomp.lpp"
return SOUTH;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 166 "levcomp.lpp"
return EAST;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 167 "levcomp.lpp"
return WEST;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 168 "levcomp.lpp"
return NORTHEAST;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 169 "levcomp.lpp"
return NORTHWEST;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 170 "levcomp.lpp"
return SOUTHEAST;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 171 "levcomp.lpp"
return SOUTHWEST;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 172 "levcomp.lpp"
return FLOAT;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 174 "levcomp.lpp"
return DASH;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 175 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 177 "levcomp.lpp"
{
                        clean();
                        yylval.i = atoi(yytext);
                        return INTEGER;
                    }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 183 "levcomp.lpp"
;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 184 "levcomp.lpp"
;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 186 "levcomp.lpp"
return OPAREN;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 187 "levcomp.lpp"
return CPAREN;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 189 "levcomp.lpp"
return QUOTE;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 191 "levcomp.lpp"
{
                        settext();
                        return IDENTIFIER;
                    }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 196 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 198 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 2432 "levcomp.lex.cc"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(MAPDEF):
			case YY_STATE_EOF(ARGUMENT):
			case YY_STATE_EOF(MNAME):
			case YY_STATE_EOF(KEYWORDS):
			case YY_STATE_EOF(ITEM_LIST):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1237 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1237 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1236);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');
	if ( yy_current_buffer->yy_at_bol )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 198 "levcomp.lpp"


int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}
