#line 2 "levcomp.lex.cc"

#line 4 "levcomp.lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 76
#define YY_END_OF_BUFFER 77
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1538] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   77,   75,   69,   70,   75,   73,   71,   72,
       67,   66,   68,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   69,   20,   75,   75,
       76,    6,   76,   76,    4,    2,    3,   76,   76,    2,
        2,    2,   75,   19,   75,   73,   71,   72,   67,   66,
       68,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   20,   75,   75,   75,   17,   14,

       17,   73,   71,   72,   16,   66,   68,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       17,   20,   75,   75,    8,    9,   75,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    8,    7,    7,   75,   12,   13,   75,   73,
       71,   72,   11,   66,   68,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   12,   20,

       75,   75,   69,   70,   68,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   69,   20,   20,   74,   74,
       74,    6,    5,    0,    0,    2,    3,    0,    0,    2,
        2,    2,   18,    0,   19,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   20,   18,   18,
       18,    0,   17,   14,   17,   14,   68,   74,   74,   74,

       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   17,   20,   74,
       74,   74,    8,    9,    0,    9,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    8,    7,
        7,    7,    0,   12,   13,    0,   13,   68,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,

       74,   74,   74,   74,   74,   74,   74,   74,   12,   20,
       74,   74,   74,   74,   74,   74,   74,   74,   45,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   21,    2,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,

       10,   10,   10,   10,   10,   10,   10,   10,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   59,   74,   74,   74,   74,
       74,   74,   74,   74,   60,    2,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   74,   74,   74,   74,   39,   74,

       74,   74,   74,   74,   32,   74,   74,   74,   44,   31,
       74,   22,   74,   74,   74,   74,   74,   74,   74,   74,
       29,   74,   74,   65,   74,   74,   74,   57,   74,   58,
        2,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       74,   74,   74,   24,   74,   74,   74,   28,   74,   34,
       35,   36,   74,   74,   26,   74,   74,   74,   74,   74,
       30,   74,   74,   74,   74,   74,   74,   74,   74,   74,

       74,    1,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,

       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   40,
       74,   27,   38,   74,   74,   74,   74,   74,   25,   74,
       46,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       74,   74,   74,   74,   74,   50,   74,   74,   74,   33,
        0,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   74,
       74,   74,   49,   74,   74,   74,   74,    0,   56,   74,
       55,   74,   61,   62,   74,   63,   64,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   37,   74,
       48,   74,   74,   74,   74,    0,   53,   54,   52,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,    7,    7,    7,    7,    7,    7,    7,    7,    7,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   51,   74,   47,   74,   41,    0,   18,   18,   18,
       18,   18,   18,   15,   15,   15,   15,   15,   15,    7,

        7,    7,    7,   10,   10,   10,   10,   10,   10,   74,
       43,    0,   18,   18,   18,   15,   15,   15,    7,    7,
       10,   10,   10,   42,    0,   18,   18,   15,   15,    7,
       10,   10,   23,   18,   15,   10,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    1,    1,    1,    1,    8,
        9,    1,    1,   10,   11,    1,    1,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   13,    1,    1,
        1,    1,    1,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       23,   30,   31,   32,   33,   34,   23,   35,   36,   23,
        1,    1,    1,    1,   37,    1,   38,   23,   39,   40,

       41,   42,   23,   43,   44,   23,   23,   45,   46,   47,
       48,   49,   23,   50,   51,   52,   53,   54,   55,   23,
       23,   23,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[56] =
    {   0,
        1,    2,    3,    4,    2,    1,    1,    1,    1,    5,
        6,    7,    1,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7
    } ;

static yyconst flex_int16_t yy_base[1561] =
    {   0,
        0,   54,   59,   65,  116,  170,  221,  275,  326,  380,
      431,  485, 4249, 4250,   55, 4250, 4245, 4250, 4250, 4250,
     4250, 4250, 4235,    0, 4216, 4224, 4226,   38, 4218, 4210,
       52, 4223, 4212, 4225, 4208,   50, 4209,   56, 4222, 4194,
       41, 4189, 4185, 4194, 4183, 4189,   80,    0,   67,   60,
     4250, 4250, 4226,   87, 4250,    0, 4250, 4225,   93,    0,
     4200,  155,   97, 4250, 4223,  102,  108,  174,  178,  182,
      186,  536,  549,   73,  163,  162,   84,  169,  181,  184,
      180,  190, 4195,  253,  185,  260,  270,  144,  256,   70,
      164,  179,  258,  175,  287,  281,  272,    0,  310, 4250,

      314,    0,    0,    0, 4250,    0, 4212,  579,  592,  622,
      643,  661,  272,  356,  367,  372,  368,  370,  374,  385,
      386,  395,  474,  269,  467,  373,  462,  388,  464,  480,
      515,  388,  499,  556,  526, 4250, 4220,    0, 4210, 4210,
      294,  406,  482,  497,  297,  484,  550,  485,  495,  552,
      522,  584,  537,  556,  557,  567,  564,  528,  487,  601,
      605,  585,  673,  606,  631,    0,  681, 4250, 4217,    0,
        0,    0, 4250,    0, 4207,  696,  709,  739,  760,  778,
      611,  605,  673,  646,  586,  692,  694,  708,  703,  737,
      722,  747,  763,  620,  728,  765,  767,  777,  804,  560,

      800,  790,  685, 4250, 4206,    0, 4203, 4202,  694,  764,
     4193,  698, 4196, 4195, 4180, 4183, 4176, 4182, 4182, 4185,
     4192, 4183, 4190,  643, 4170, 4187, 4181, 4158, 4148, 4159,
     4149,  569, 4149, 4142, 4143,  749,    0,    0, 4164, 4178,
      702, 4250, 4250, 4188,  816,    0, 4250, 4187,  819, 4172,
     4161,  607,  689,  827, 4250,  832, 4157,  745,  763,  820,
      813,  818,  828,  829,  834,  765,  825,  291,  827,  399,
      838,  832,  839,  849,  850,  837,  856,  845,  842,  474,
      843,  844,  846,  847,  165,  851,  883,  893,  860,  877,
      873,  899,  906, 4250,  910, 4250,  914,  926,  939,  953,

      967,  960,  966,  980,  952,  983,  974,  988,  991,  999,
     1005, 1010, 1019, 1018, 1032, 1026, 1033, 1041, 1048, 1040,
     1054, 1055, 1059, 1062, 1073, 1077, 1082,  918, 1093, 1090,
     1096, 1097, 1132, 4250, 4183, 4250,    0, 4173, 4173,  973,
     1103, 1113,  919,  895, 1127,  815,  882,  931,  954,  979,
     1016,  989,  907, 1129,  927, 1135, 1134, 1042, 1065, 1024,
     1047, 1107, 1118, 1111, 1128, 1120, 1012, 1136, 1149, 1150,
     1149, 1155, 1166, 1170, 4250, 4180, 4250, 1178, 1206, 1219,
     1233, 1247, 1165, 1169, 1243, 1174, 1232, 1170, 1251, 1254,
     1262, 1268, 1246, 1276, 1279, 1290, 1284, 1287, 1307, 1304,

     1298, 1312, 1313, 1318, 1327, 1326, 1331, 1340, 1376, 1383,
     1363, 1376, 1370, 4155, 4154, 4166, 4147, 4162, 4151, 4146,
     4143, 4154, 4145, 4146, 4157, 4152, 4142, 4150, 4136, 4148,
     4147, 4148, 4136, 4129, 4137, 4128, 4140, 4127, 4126, 4118,
     4103, 4106, 4115, 1311, 4100, 4111, 4098, 4097,    0, 4122,
     1237, 1284, 1155, 1186,  927, 1266, 4117, 1199, 1156, 1215,
     1304, 1272, 1192, 1298, 1321, 1206, 1356, 1379, 1179, 1340,
     1342, 1140, 1368, 1383, 1373, 1380, 1338, 1376, 1378, 1382,
     1384, 1385, 1229, 1387, 1388, 4116, 1414, 1420, 1404, 1417,
     1422, 1428, 1431, 1436, 1435, 1439, 1452, 1456, 1460, 1467,

     1463, 1481, 1476, 1490, 1482, 1496, 1499, 1504, 1505, 1510,
     1518, 1519, 1525, 1526, 1533, 1534, 1539, 1540, 1547, 1555,
     1548, 1561, 1564, 1568, 1602, 1584, 1592, 1600, 1599, 1418,
     1445, 1613, 1529,  721, 1505,  630, 1549, 1486,  993, 1591,
     1621, 1413, 1463, 1462, 1491, 1564, 1578, 1337, 1583, 1493,
     1076, 1611, 1615, 1622, 1625, 1166,  563, 1597, 1535, 1626,
     1627, 1628, 1629, 1630, 4134, 1642, 1646, 1623, 1630, 1636,
     1656, 1659, 1655, 1670, 1664, 1673, 1678, 1684, 1691, 1692,
     1700, 1697, 1714, 1706, 1720, 1723, 1728, 1729, 1734, 1742,
     1743, 1749, 1750, 1757, 1758, 1763, 1764, 1771, 1779, 1772,

     1785, 1788, 1792, 1826, 1808, 1816, 1824, 1823, 4128, 4127,
     4109, 4120, 4127, 4111, 4102, 4100, 4105, 4105, 4121, 4101,
     4106, 4100, 4105, 1695, 4116, 4101, 4109, 4104, 4100, 4087,
     4086, 4103, 4089, 4107, 4066,    0, 4072, 4065, 4070, 4067,
     4068, 4070, 4071, 4068,    0, 4096, 1630, 1684, 1818, 1643,
     1828, 1706, 1636, 1769, 1754, 4079, 1833, 1788, 1720, 1826,
     1834, 1837, 1847, 1835, 1843, 1775, 1841, 1838, 1842, 1851,
     1802, 1863, 1848, 4078, 1850, 1852, 1853, 1854, 1857, 1400,
     1856, 1783, 4077, 1869, 1876, 1887, 1890, 1895, 1894, 1898,
     1909, 1912, 1918, 1923, 1926, 1934, 1937, 1942, 1951, 1956,

     1957, 1960, 1971, 1976, 1975, 1979, 1943, 1990, 1984, 1995,
     1998, 1999, 2004, 2012, 2013, 2018, 2031, 2034, 2038, 2047,
     1878, 1899, 1879, 1719, 1919, 1922, 2000, 1940, 1928, 2009,
     2027, 2014, 1651, 2023, 2048, 2057, 2066, 2044, 1981, 2061,
     2069, 2071, 2073, 2074, 2075, 2077, 2076, 4095,   47, 2040,
     2080, 1933, 2084, 2085, 2086, 2088, 4094, 2082, 2086, 2085,
     2103, 2090, 2114, 2117, 2118, 2121, 2132, 2125, 2138, 2145,
     2146, 2153, 2160, 2167, 2166, 2181, 2182, 2189, 2186, 2190,
     2197, 2203, 2211, 2210, 2214, 2218, 2217, 2225, 2231, 2236,
     2247, 2239, 2254, 2255, 4083, 4085, 4077, 4088, 4250, 4073,

     4062, 4072, 4084, 4059, 4250, 4082, 4081, 4080,    0, 4250,
     4074, 4250, 4059, 4077, 4055, 4056, 4071, 4069, 4060, 4071,
     4250, 4038, 4033,    0, 4037, 4028, 4035, 2065, 4032, 2084,
     4048, 1734, 2082, 2158, 2128, 2287, 2160, 2129, 2176, 2264,
     2201, 2291, 2268, 2274, 2275, 4046, 2297, 2105, 2304, 2221,
     2287, 2173, 2227, 2245, 2151, 2282, 2290, 2309, 2280, 2285,
     4045, 2286, 2288, 2289, 2291, 2292, 2294, 2308, 2323, 2326,
     2331, 2321, 2334, 2337, 2350, 2351, 2354, 2326, 2358, 2359,
     2373, 2365, 2393, 2381, 2401, 2382, 2396, 2388, 2389, 2407,
     2411, 2410, 2418, 2441, 2425, 2426, 2429, 2432, 2433, 2440,

     2448, 2449, 2463, 2337, 2325, 2461, 2421, 2348, 2356, 2439,
     2470, 2462, 2477, 2480, 2485, 4063, 2489, 2442, 2495, 2476,
     2490, 2486, 2494, 2498, 2501, 2149, 2502, 4062, 2422, 2504,
     2505, 2506, 2508, 2509, 2505, 2509, 2506, 2526, 2527, 2539,
     2534, 2543, 2554, 2557, 2528, 2562, 2571, 2576, 2568, 2539,
     2585, 2541, 2577, 2598, 2591, 2599, 2605, 2616, 2613, 2624,
     2575, 2620, 2621, 2627, 2635, 2638, 2642, 2643, 2649, 2656,
     2535, 4059, 4039, 4250, 4039, 4043, 4037, 4250, 4051, 4250,
     4250, 4250, 4036, 4052, 4250, 4050, 4050, 4034, 4043, 4042,
     4250, 4007, 4020, 4007, 4018, 4005, 4016, 4012, 4004, 4013,

     4009,    0, 2646, 2529, 2583, 2687, 2548, 2593, 2651, 2697,
     2582, 2701, 2705, 2710, 4019, 2647, 2714, 2674, 2670, 2666,
     2690, 2695, 2719, 2530, 2367, 2222, 2386, 2687, 2692, 2697,
     2696, 2698, 2699, 2722, 2729, 2714, 2729, 2728, 2735, 2736,
     2747, 2752, 2767, 2768, 2772, 2756, 2763, 2786, 2770, 2777,
     2774, 2791, 2794, 2793, 2785, 2788, 2799, 2802, 2805, 2810,
     2813, 2816, 2827, 2831, 2840, 2767, 2768, 2832, 2615, 2848,
     2850, 2841, 2856, 2859, 2863, 2857, 2745, 2864, 2786, 2866,
     2682, 2867, 2869, 2870, 2872, 2873, 2876, 2875, 2878, 2881,
     2870, 2888, 2896, 2903, 2899, 2901, 2904, 2934, 2935, 2936,

     2923, 2930, 2942, 2931, 2938, 2927, 2945, 2952, 2963, 2953,
     2956, 2959, 2960, 2973, 2977, 2981, 2982, 2988, 3002, 4250,
     4030, 4250,    0, 4015, 4011, 4017, 4008, 4004, 4250, 3997,
     4250, 4004, 3999, 4008, 4005, 3964, 3964, 3957, 3958, 3956,
     3949, 3948, 3943, 3942, 3023, 2732, 3030, 3958, 2866, 3006,
     2973, 2896, 3008, 3040, 2947, 3044, 2999, 3011, 2918, 2881,
     2965, 2936, 3017, 3020, 2967, 2969, 3021, 3022, 3023, 3052,
     3046, 3053, 3047, 3052, 3060, 3066, 3071, 3063, 3054, 3074,
     3058, 3079, 3082, 3093, 3098, 3097, 3101, 3102, 3106, 3115,
     3121, 3124, 3128, 3139, 3069, 3976, 3056, 3107, 2581, 3108,

     3130, 3112, 3138, 3085, 3149, 3975, 3131, 3128, 2962, 3153,
     3154, 3156, 3162, 3163, 3164, 3175, 3165, 3183, 3162, 3168,
     3173, 3191, 3197, 3198, 3184, 3202, 3193, 3205, 3213, 3224,
     3227, 3220, 3228, 3221, 3235, 3241, 3246, 3255, 3250, 3264,
     3956, 3952, 3949, 3955, 3938,    0, 3937, 3933, 3922, 4250,
     3907, 3889, 3886, 3892, 3884, 3867, 3849, 3856, 3847, 3846,
     3042, 2797, 3188, 3193, 3237, 3857, 3238, 3252, 3257, 3286,
     3294, 3270, 3171, 3264, 3274, 3273, 3276, 3279, 3277, 3278,
     3295, 3313, 3316, 3320, 3321, 3324, 3329, 3337, 3338, 3243,
     3336, 3342, 3343, 3356, 3359, 3363, 3367, 3370, 3381, 3387,

     3299, 3158, 3300, 3306, 3302, 3872, 3352, 3353, 3305, 3842,
     3369, 3373, 3368, 3384, 3372, 3391, 3392, 3393, 3394, 3394,
     3409, 3422, 3418, 3425, 3429, 3436, 3440, 3443, 3406, 3424,
     3447, 3451, 3454, 3458, 3462, 3465, 3471, 3478, 3482, 3868,
     3845, 3853, 4250, 3834, 3823, 3821, 3828, 3798,    0, 3787,
        0, 3779,    0,    0, 3759,    0,    0, 3404, 3767, 3422,
     3514, 3458, 3473, 3490, 3491, 3520, 3746, 3211, 3711, 3478,
     3685, 3662, 3496, 3642, 3636, 3514, 3510, 3518, 3546, 3525,
     3531, 3536, 3545, 3566, 3551, 3554, 3558, 3559, 3562, 3565,
     3579, 3582, 3583, 3525, 3575, 3546, 3547, 3568, 3446, 3521,

     3505, 3499, 3581, 3493, 3584, 3481, 3452, 3586, 3419, 3411,
     3604, 3597, 3611, 3601, 3610, 3617, 3624, 3631, 3617, 3625,
     3632, 3640, 3645, 3646, 3649, 3654, 3660, 3665, 4250, 3328,
     4250, 3279, 3263, 3085, 3049, 2868,    0,    0,    0, 3695,
     3182, 3699, 3637, 3602, 2858, 3607, 3703, 2781, 2618, 2491,
     3685, 3683, 3704, 3691, 3698, 3702, 3706, 3711, 3699, 3707,
     3715, 3541, 3588, 3634, 3712, 3675, 2298, 2214, 2041, 1985,
     3738, 3720, 3743, 3728, 3737, 3734, 3754, 3753, 3743, 3750,
     3751,    0, 1905, 4250, 1878, 4250, 1718, 1448, 1254, 3773,
     3668, 3782, 3786, 3770, 3774, 3790, 3781, 3804, 3806, 1212,

     3785, 3803,  904, 3788, 3794, 3816, 3813, 3825, 3826,  892,
     4250,  756, 3741, 3831, 3841, 3821, 3846, 3851, 3809,  646,
     3828, 3858, 3859, 4250,  411, 3863, 3867, 3868, 3872,  272,
     3874, 3884, 4250, 3886, 3890, 3891, 4250, 3902, 3909,  212,
     3916, 3923, 3930, 3937, 3944, 3951, 3958, 3965, 3972, 3974,
     3976, 3983, 3990, 3997, 4004, 4011, 4018, 4025, 4032, 4039
    } ;

static yyconst flex_int16_t yy_def[1561] =
    {   0,
     1537,    1, 1538, 1539, 1537,    5, 1537,    7, 1537,    9,
     1537,   11, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1540, 1540, 1540, 1540, 1540, 1540, 1540,
     1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540,
     1540, 1540, 1540, 1540, 1540, 1540, 1537, 1541, 1540, 1540,
     1537, 1537, 1537, 1542, 1537, 1543, 1537, 1537, 1542, 1543,
     1543, 1543, 1544, 1537, 1537, 1544, 1544, 1544, 1544, 1544,
     1544, 1545, 1545,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73, 1546,   73,   73, 1547, 1537, 1537,

     1537, 1547, 1547, 1547, 1537, 1547, 1547, 1548, 1548, 1548,
     1548, 1548,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
     1537, 1549,  112,  112, 1537, 1537, 1537, 1550, 1550, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1537, 1551, 1551, 1552, 1537, 1537, 1537, 1552,
     1552, 1552, 1537, 1552, 1552, 1553, 1553, 1553, 1553, 1553,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180, 1537, 1554,

      180,  180, 1537, 1537, 1537, 1540, 1540, 1540, 1540, 1540,
     1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540,
     1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540,
     1540, 1540, 1540, 1540, 1540, 1537, 1541, 1541, 1540, 1540,
     1540, 1537, 1537, 1537, 1537, 1543, 1537, 1537, 1537, 1543,
     1543, 1543, 1544, 1544, 1537, 1544,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73, 1546, 1546,   73,   73,
       73, 1555, 1537, 1537, 1537, 1537, 1555, 1556, 1556, 1556,

     1556,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301, 1537, 1557,  301,
      301,  301, 1537, 1537, 1537, 1537, 1550, 1550, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1537, 1551,
     1551, 1551, 1558, 1537, 1537, 1537, 1537, 1558, 1559, 1559,
     1559, 1559,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,

      382,  382,  382,  382,  382,  382,  382,  382, 1537, 1560,
      382,  382,  382, 1540, 1540, 1540, 1540, 1540, 1540, 1540,
     1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540,
     1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540,
     1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1543,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73, 1555, 1555,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,

      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301, 1557,  301,  301,  301,  301, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1558, 1558,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,

      382,  382,  382, 1560,  382,  382,  382,  382, 1540, 1540,
     1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540,
     1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540,
     1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540,
     1540, 1540, 1540, 1540, 1540, 1543,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,

      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382, 1540, 1540, 1540, 1540, 1537, 1540,

     1540, 1540, 1540, 1540, 1537, 1540, 1540, 1540, 1540, 1537,
     1540, 1537, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540,
     1537, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540,
     1543,   73,   73,   73,   73, 1544,   73,   73,   73,   73,
       73, 1544,   73,   73,   73,   73, 1544,   73, 1544,   73,
       73,   73,   73,   73,   73,   73,   73, 1544,   73,   73,
       73,   73,   73,   73,   73,   73,   73,  301,  301,  301,
      301, 1555,  301,  301,  301,  301,  301, 1555,  301,  301,
      301,  301, 1555,  301, 1555,  301,  301,  301,  301,  301,
      301,  301,  301, 1555,  301,  301,  301,  301,  301,  301,

      301,  301,  301, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551,  382,  382,  382,  382, 1558,  382,
      382,  382,  382,  382, 1558,  382,  382,  382,  382, 1558,
      382, 1558,  382,  382,  382,  382,  382,  382,  382,  382,
     1558,  382,  382,  382,  382,  382,  382,  382,  382,  382,
     1540, 1540, 1540, 1537, 1540, 1540, 1540, 1537, 1540, 1537,
     1537, 1537, 1540, 1540, 1537, 1540, 1540, 1540, 1540, 1540,
     1537, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540,

     1540, 1543,   73,   73,   73, 1544,   73,   73,   73, 1544,
       73, 1544, 1544, 1544,   73,   73, 1544,   73,   73,   73,
       73,   73, 1544,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,  301,  301,  301, 1555,  301,  301,  301,
     1555,  301, 1555, 1555, 1555,  301,  301, 1555,  301,  301,
      301,  301,  301, 1555,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,  382,  382,
      382, 1558,  382,  382,  382, 1558,  382, 1558, 1558, 1558,

      382,  382, 1558,  382,  382,  382,  382,  382, 1558,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382, 1537,
     1540, 1537, 1540, 1540, 1540, 1540, 1540, 1540, 1537, 1540,
     1537, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540,
     1540, 1540, 1540, 1540, 1544,   73, 1544,   73,   73,   73,
       73,   73,   73, 1544,   73, 1544,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73, 1555,
      301, 1555,  301,  301,  301,  301,  301,  301, 1555,  301,
     1555,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301, 1551, 1551, 1551, 1551, 1551, 1551,

     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1558,  382, 1558,  382,  382,
      382,  382,  382,  382, 1558,  382, 1558,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
     1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1537,
     1537, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540,
       73,   73,   73,   73,   73,   73,   73,   73,   73, 1544,
     1544,   73,   73,   73,   73,   73,   73,   73,   73,   73,
      301,  301,  301,  301,  301,  301,  301,  301,  301, 1555,
     1555,  301,  301,  301,  301,  301,  301,  301,  301,  301,

     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1550,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,  382,
      382,  382,  382,  382,  382,  382,  382,  382, 1558, 1558,
      382,  382,  382,  382,  382,  382,  382,  382,  382, 1540,
     1540, 1540, 1537, 1540, 1540, 1540, 1540, 1537, 1540, 1540,
     1540, 1540, 1540, 1540, 1540, 1540, 1540,   73,   73,   73,
     1544,   73,   73,   73,   73, 1544,   73,   73,   73,   73,
       73,   73,   73,   73,   73,  301,  301,  301, 1555,  301,
      301,  301,  301, 1555,  301,  301,  301,  301,  301,  301,
      301,  301,  301, 1551, 1551, 1551, 1551, 1551, 1551, 1551,

     1550, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
      382,  382,  382, 1558,  382,  382,  382,  382, 1558,  382,
      382,  382,  382,  382,  382,  382,  382,  382, 1537, 1540,
     1537, 1540, 1540, 1540, 1540, 1537, 1540, 1540, 1540, 1544,
       73, 1544,   73,   73,   73,   73, 1544,   73,   73,   73,
     1555,  301, 1555,  301,  301,  301,  301, 1555,  301,  301,
      301, 1551, 1551, 1551, 1551, 1551, 1550, 1551, 1551, 1551,
     1558,  382, 1558,  382,  382,  382,  382, 1558,  382,  382,
      382, 1540, 1540, 1537, 1540, 1537, 1537,   73,   73, 1544,
       73, 1544, 1544,  301,  301, 1555,  301, 1555, 1555, 1551,

     1551, 1551, 1550,  382,  382, 1558,  382, 1558, 1558, 1540,
     1537, 1537,   73, 1544, 1544,  301, 1555, 1555, 1551, 1550,
      382, 1558, 1558, 1537, 1537, 1544, 1544, 1555, 1555, 1550,
     1558, 1558, 1537, 1544, 1555, 1558,    0, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537
    } ;

static yyconst flex_int16_t yy_nxt[4306] =
    {   0,
       14,   15,   16,   17,   15,   18,   14,   19,   20,   21,
       22,   23,   14,   24,   25,   26,   27,   28,   29,   24,
       24,   30,   24,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   24,   24,   24,   24,   24,   24,   24,   40,
       41,   42,   24,   24,   24,   24,   43,   24,   44,   24,
       45,   24,   24,   24,   46,   47,  203,  337,   47,  203,
       48,   52,   53,   54,  210,   55,   51,   57,   58,   59,
      214,   60,  211,  215,  221,  222,  225,  216,  229,   49,
      239,  236,   61,  223,  236,  240,  237,  230,  226,  242,
      244,  245,  927,  259,  218,  247,  248,  249,  254,  257,

      254,  254,  257,  254,   50,  254,  254,  234,  263,  254,
      241,  254,  254,  257,  282,   62,   63,   15,   64,   65,
       15,   66,   63,   67,   68,   69,   70,   71,   63,   72,
       73,   74,   75,   76,   77,   72,   72,   78,   72,   79,
       80,   81,   82,   83,   84,   85,   86,   87,   72,   72,
       72,   72,   72,   72,   72,   88,   89,   90,   72,   72,
       72,   72,   91,   72,   92,   72,   93,   72,   72,   72,
       94,   47,  251,  257,   47,  254,   95,  254,  254,  254,
      260,  254,  254,  254,  279,  254,  254,  254,  261,  254,
      254,  257,  257,  257,  257,   96,  262,  256,  257,  265,

      264,  268,  266,  270,  257,  252,  267,  269,  257,  257,
      257,  283,  275,  257,  257,  286,  284,  484,  206,  257,
       97,   98,   99,  100,  101,   99,  102,   98,  103,  104,
      105,  106,  107,   98,  108,  109,  110,  111,  112,  113,
      108,  108,  114,  108,  115,  116,  117,  118,  119,  120,
      121,  122,  123,  108,  108,  108,  108,  108,  108,  108,
      124,  125,  126,  108,  108,  108,  108,  127,  108,  128,
      108,  129,  108,  108,  108,  130,  131,  272,  273,  131,
      276,  132,  257,  278, 1533,  257,  274,  257,  288,  257,
      288,  288,  277,  280,  289,  298,  304,  290,  298,  257,

      133,  257,  281,  298,  337,  285,  298,  337,  269,  320,
      257,  293,  294,  295,  293,  295,  296,  295,  295,  285,
      257,  345,  291,  340,  465,  134,   14,  135,  136,  137,
      135,   18,   14,   19,   20,   21,  138,  139,   14,  140,
      141,  142,  143,  144,  145,  140,  140,  146,  140,  147,
      148,  149,  150,  151,  152,  153,  154,  155,  140,  140,
      140,  140,  140,  140,  140,  156,  157,  158,  140,  140,
      140,  140,  159,  140,  160,  140,  161,  140,  140,  140,
      162,  163,  298,  311,  163,  306,   48,  305,  307,  309,
      298,  238,  308,  298,  298,  310,  298,  238,  298,  298,

      298,  298,  298,  312,  298,  164,  298,  298,  298,  313,
      314,  298,  298,  316,  298,  317,  337,  323,  315,  298,
      298,  298,  298, 1533,  467,  325,  341,  318,  257,  298,
      165,  166,  167,  168,  169,  167,  170,  166,  171,  172,
      173,  174,  175,  166,  176,  177,  178,  179,  180,  181,
      176,  176,  182,  176,  183,  184,  185,  186,  187,  188,
      189,  190,  191,  176,  176,  176,  176,  176,  176,  176,
      192,  193,  194,  176,  176,  176,  176,  195,  176,  196,
      176,  197,  176,  176,  176,  198,  199,  319,  298,  199,
      298,  200,  337,  298,  337,  337,  298,  337,  298,  342,

      298,  298,  350,  257,  321,  337,  298,  337,  298,  324,
      201,  326,  330,  322,  298,  346,  328,  294,  295,  328,
      327,  237,  351,  343,  478,  298,  310,  333,  334,  335,
      333,  344,  337,  298,  365,  202,  253,  254,  337,  254,
      254,  253,  253,  253,  253,  253,  253,  337,  253,  253,
      254,  353,  254,  254,  253,  253,  253,  253,  253,  253,
      337,  253,  337,  238,  357,  352,  337,  337,  347,  238,
      360,  348,  364,  337,  337,  349,  358,  337,  258,  292,
      292,  331,  298,  292,  292,  292,  292,  292,  359,  292,
      298,  292,  292,  292,  337,  337,  292,  292,  292,  292,

      292,  362,  292,  326,  292,  444,  332,  361,  354,  355,
      363,  337,  379,  391,  748,  337,  337,  356,  445,  370,
      379,  299,  292,  292,  251,  368,  292,  292,  292,  292,
      292,  379,  292,  351,  292,  385,  386,  379,  366,  379,
      337,  337,  300,  292,  292,  379,  379,  292,  292,  292,
      292,  292,  367,  292,  379,  292,  371,  252,  435,  727,
      301,  292,  292,  390,  404,  292,  292,  292,  292,  292,
      436,  292,  379,  292,  369,  334,  335,  369,  367,  237,
      379,  372,  374,  375,  376,  374,  203,  302, 1530,  203,
      254,  387,  254,  254,  388,  303,  373,  373,  389,  379,

      373,  373,  373,  373,  373,  392,  373,  379,  373,  373,
      373,  422,  416,  373,  373,  373,  373,  373,  379,  373,
      379,  373,  417,  393,  418,  423,  379,  240,  379,  379,
      397,  337,  394,  395,  379,  400,  725,  379,  380,  373,
      373,  396,  379,  373,  373,  373,  373,  373,  379,  373,
      236,  373,  241,  236,  379,  237,  379,  398,  451,  381,
      373,  373,  379,  379,  373,  373,  373,  373,  373,  399,
      373,  379,  373,  379,  257,  405,  452,  382,  373,  373,
      419,  379,  373,  373,  373,  373,  373,  401,  373,  379,
      373,  379,  257,  379,  257,  420,  463,  379, 1525,  379,

      402,  379,  406,  379,  383,  409,  375,  376,  409,  403,
      237,  379,  384,  411,  407,  412,  379,  408,  242,  244,
      245,  247,  248,  249,  379,  337,  379,  391,  254,  456,
      254,  254,  540,  254,  379,  254,  254,  407,  453,  458,
      413,  459,  257,  256,  457,  469,  461,  257,  454,  257,
      455,  462,  464,  466,  257,  460,  257,  257,  257,  468,
      470,  257,  471,  257,  476,  472,  257,  257,  257,  474,
      475,  257,  257,  257,  257,  257,  257,  473,  257,  257,
      257,  479,  481,  477,  288,  257,  288,  288,  486,  257,
      289,  480,  337,  483,  288,  482,  288,  288,  290,  541,

      292,  485,  257,  292, 1524,  337,  257,  293,  294,  295,
      293,  295,  294,  295,  295,  292,  537,  337,  292,  328,
      294,  295,  328,  291,  237,  488,  487,  292,  547,  337,
      292,  487,  487,  487,  487,  535,  487,  337,  487,  487,
      292,  337,  651,  292,  487,  487,  487,  487,  549,  487,
      536,  487,  490,  487,  292, 1520,  257,  292,  487,  487,
      487,  487,  542,  487,  337,  487,  491,  487,  292,  500,
      489,  292,  487,  487,  487,  487,  495,  487,  489,  487,
      489,  543,  489,  337,  489,  492,  530,  497,  489,  337,
      489,  496,  489,  498,  489,  493,  489,  494,  489,  337,

      501,  489,  489,  337,  489,  502,  489,  499,  489,  489,
      489,  489,  544,  489,  546,  503,  489,  489,  489,  489,
      730,  489,  337,  489,  504,  505,  337,  489,  489,  489,
      506,  507,  508,  489,  337,  489,  489,  489,  489,  509,
      489,  511,  545,  555,  489,  510,  489,  489,  489,  489,
      489,  489,  337,  512,  489,  514,  489,  337,  489,  489,
      489,  489,  489,  489,  563,  513,  489,  515,  489,  489,
      489,  489,  489,  489,  553,  337,  489,  489,  489,  554,
      489,  516,  489,  489,  489,  489,  337,  489,  556,  489,
      489,  489,  489,  518,  329,  489,  238,  329,  520,  742,

      489,  489,  238,  489,  517,  489,  519,  489,  489,  527,
      489,  521,  489,  337,  489,  489,  531,  337,  526,  522,
      489,  337,  528,  337,  489,  489,  489,  489,  337,  523,
      337,  532,  524,  333,  334,  335,  333,  337,  337,  337,
      538,  533,  548,  534,  337,  337,  337,  529,  550,  551,
      369,  334,  335,  369,  539,  237,  558,  557,  559,  337,
      337,  552,  370,  668,  560,  337,  562,  373,  649,  257,
      373,  374,  375,  376,  374,  655,  337,  561,  565,  373,
      371,  574,  373,  568,  257,  257,  564,  568,  568,  567,
      576,  579,  568,  568,  665,  568,  575,  568,  568,  568,

      568,  581,  568,  747,  568,  372,  566,  373,  257,  659,
      373,  566,  566,  566,  566,  257,  566,  650,  566,  566,
      373,  257,  337,  373,  566,  566,  566,  566,  257,  566,
      654,  566,  569,  566,  373,  257,  662,  373,  566,  566,
      566,  566,  656,  566,  257,  566,  570,  566,  373,  580,
      568,  373,  566,  566,  566,  566,  577,  566,  257,  566,
      568,  568,  568,  647,  568,  571,  257,  586,  681,  568,
      578,  568,  568,  568,  568,  572,  568,  573,  582,  568,
      568,  568,  568, 1513,  568,  658,  568,  583,  584,  587,
      568,  652,  568,  585,  568,  257,  568,  568,  568,  590,

      588,  257,  568,  589,  568,  568,  568,  568,  568,  568,
      648,  591,  568,  257,  568,  568,  568,  568,  568,  592,
      568,  593,  568,  594,  660,  568,  568,  257,  568,  657,
      568,  568,  568,  257,  568,  568,  568,  568,  661,  595,
      568,  568,  568,  568,  568,  568,  568,  337,  568,  568,
      257,  597,  739,  639,  568,  568,  568,  568,  568,  568,
      640,  568,  596,  599,  641,  598,  666,  257,  568,  257,
      568,  257,  601,  663,  667,  673,  600,  409,  375,  376,
      409,  568,  237,  602,  410,  257,  238,  410,  568,  606,
      603,  605,  238,  568,  568,  607,  664,  257,  568,  669,

      568,  670,  257,  671,  568,  257,  568,  257,  257,  257,
      672,  257,  257,  257,  257,  292,  257,  257,  292,  676,
      608,  292,  489,  337,  292,  675,  677,  674,  337,  257,
      733,  488,  489,  678,  489,  489,  680,  679,  682,  683,
      489,  686,  865,  684,  721,  489,  489,  489,  685,  489,
      489,  688,  489,  489,  489,  337,  489,  489,  489,  489,
      689,  489,  687,  489,  489,  489,  489,  489,  690,  489,
      489,  722,  337,  337,  489,  692,  695,  257,  489,  735,
      489,  489,  489,  691,  489,  489,  489,  693,  489,  734,
      489,  489,  694,  489,  489,  489,  337,  489,  696,  489,

      489,  337,  697,  337,  489,  729,  489,  698,  489,  489,
      489,  489,  699,  700,  489,  337,  701,  489,  489,  702,
      489,  736,  489,  489,  489,  741,  489,  489,  489,  489,
      726,  703,  489,  489,  489,  489,  489,  489,  489,  337,
      489,  705,  704,  707,  489,  337,  489,  489,  489,  489,
      706,  489,  489,  489,  489,  489,  708,  489,  489,  337,
      724,  489,  489,  709,  489,  489,  489,  489,  489,  489,
      489,  710,  750,  489,  337,  489,  489,  489,  489,  489,
      728,  737,  489,  489,  713,  489,  489,  712,  337,  489,
      711,  489,  489,  337,  489,  738,  489,  714,  489,  717,

      718,  337,  489,  329,  715,  238,  329,  337,  716,  740,
      489,  238,  489,  527,  489,  719,  731,  489,  489,  720,
      526,  337,  489,  337,  528,  337,  723,  489,  489,  489,
      489,  337,  337,  744,  732,  337,  337,  337,  337,  337,
      337,  568,  743,  373,  749,  832,  373,  373,  568,  529,
      373,  568,  745,  568,  568,  746,  758,  567,  568,  257,
      568,  337,  759,  835,  568,  257,  568,  755,  751,  760,
      762,  838,  257,  568,  568,  752,  914,  568,  754,  753,
      756,  757,  568,  568,  568,  568,  568,  568,  568,  568,
      761,  568,  568,  764,  568,  763,  568,  766,  568,  833,

      568,  568,  568,  568,  765,  769,  568,  810,  568,  568,
      568,  767,  568,  257,  568,  568,  768,  770,  568,  568,
      568,  568,  568,  771,  568,  568,  811,  568,  568,  337,
      568,  772,  568,  837,  568,  257,  773,  774,  568,  907,
      775,  568,  568,  776,  568,  844,  568,  568,  568,  257,
      568,  568,  568,  568, 1003,  777,  568,  568,  568,  568,
      568,  568,  568,  257,  568,  779,  778,  781,  568, 1512,
      568,  568,  568,  568,  780,  568,  568,  568,  568,  568,
      782,  568,  568,  257,  840,  568,  568,  783,  568,  568,
      568,  568,  568,  568,  568,  784,  852,  568,  257,  568,

      568,  568,  568,  568,  257,  839,  568,  568,  787,  568,
      568,  786,  257,  568,  785,  568,  568,  257,  568,  843,
      568,  788,  568,  791,  792,  867,  568,  410,  789,  238,
      410,  257,  790,  857,  568,  238,  568,  606,  568,  793,
      836,  568,  568,  794,  605,  842,  568,  257,  607,  847,
      834,  568,  568,  568,  568,  257,  845,  257,  846,  849,
      851,  850,  257,  257,  257,  853,  257,  257,  848,  856,
      257,  257,  257,  608,  854,  858,  257,  257,  855,  257,
      257,  257,  257,  257,  868,  257,  257,  489,  337,  337,
     1511,  869,  257,  904,  489,  860,  866,  489,  862,  489,

      859,  863,  864,  861,  489,  489,  489,  872,  489,  337,
      871,  906,  489,  489,  905,  489,  489,  489,  489,  870,
      489,  873,  489,  489,  489,  489,  489,  489,  489,  337,
      489,  799,  337,  874, 1510,  878,  489,  489,  337,  489,
      489,  489,  876,  337,  489,  875,  489,  877,  489,  908,
      337,  489,  489,  489,  489,  489,  489,  879,  911,  880,
      489,  892,  489,  883,  489,  489,  882,  881,  885,  489,
      489,  489,  489,  489,  489,  489,  910,  887,  489,  489,
      930,  489,  884,  886,  489,  489,  489,  489,  489,  489,
      489,  337,  888,  489,  489,  337,  894,  489,  919,  489,

      889,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      337,  890,  489,  489,  489,  891,  489,  489,  489,  337,
      489,  893,  489,  489,  337,  489,  489,  489,  489,  489,
      489,  489,  489,  337,  489,  909,  489,  337,  912,  805,
      489,  489,  489,  489,  896,  913,  489,  895,  489,  489,
      337,  337,  489,  915,  337,  897,  489,  898,  337,  489,
      899,  489,  489,  900,  489,  489,  489,  337,  489,  810,
      918,  337,  916,  901,  902,  489,  337,  489,  812,  337,
      903,  337,  920,  337,  337,  337,  337,  337,  917,  821,
      337,  928,  924,  921,  337,  337,  337,  935,  337, 1004,

      568,  936,  939,  568,  568,  997,  925,  922,  568,  923,
      568,  257,  568,  568,  568,  568,  568,  937,  568,  998,
      568,  568, 1015,  938, 1000,  929,  933,  932,  926,  931,
      934,  568,  568,  568,  257,  568,  568,  945, 1001,  568,
     1006,  940,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  943,  941,  568,  942,  568,  568,  257,  257,  337,
      568,  944,  568,  568,  568, 1008,  568, 1021,  568,  946,
      947,  568,  950,  568,  568,  568,  948,  949,  568,  952,
      257,  568, 1005,  568,  568,  568, 1007,  257,  568,  257,
      568,  951,  953, 1079,  568,  568,  568,  568,  954,  568,

      568, 1009,  257,  955,  568,  257, 1018,  568,  568,  568,
      568,  568,  568,  956,  568,  959,  568,  568,  568,  568,
      568,  568,  957,  961,  337,  568,  958,  568,  568,  568,
      257,  568,  568,  568,  960,  568,  568, 1011,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      257,  257, 1016,  568,  568,  568,  257,  568, 1019,  568,
     1020,  568,  962,  963,  568,  568,  568,  568,  964,  568,
      965, 1162,  568,  568,  257,  568, 1010,  568,  966,  969,
     1012,  967,  568,  568,  568,  568, 1013, 1014,  254,  968,
      254,  254,  254,  257,  254,  254,  970,  257,  254, 1017,

      254,  254, 1023,  257,  257,  254, 1022,  254,  254,  257,
      254,  257,  254,  254,  257,  257,  257,  257,  257,  257,
      257,  257,  292,  257, 1024,  292,  489,  292, 1034, 1026,
      292, 1029, 1028, 1025, 1032,  337,  489, 1031,  489, 1027,
     1035,  489, 1066, 1037,  489, 1030, 1503,  337, 1033,  489,
     1036,  489,  489,  489,  489,  489,  489, 1065,  337,  489,
     1038,  489,  489, 1041,  489,  489,  337,  489,  489,  489,
     1043, 1044,  489, 1039, 1068, 1040,  489,  489,  489,  489,
      489,  489,  489,  489,  489, 1045,  489,  489,  489,  489,
     1042,  489, 1069,  489,  292,  489,  257,  292, 1046,  489,

      489,  489,  292,  489, 1161,  292,  489,  489, 1048,  489,
      489,  489,  489, 1047,  489,  257,  489,  489,  489,  489,
     1050, 1049, 1051, 1163,  489,  489,  489, 1052,  489,  489,
     1054,  337,  337,  974, 1053,  489,  489,  489,  489,  489,
      489,  489,  292,  489,  489,  292,  489,  489,  489,  337,
      489,  489,  337,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489, 1070, 1081,  489,  489,  489, 1055,
      489,  337,  337, 1073, 1056, 1057,  489,  489,  489,  489,
      337,  489,  978, 1059, 1058, 1067,  337,  337, 1060,  980,
      337,  489,  981,  489, 1062,  337,  337,  982, 1071,  337,

      337, 1076, 1061, 1063,  337,  337, 1072,  985,  337, 1074,
     1077,  337,  337,  991,  337,  337,  337, 1064,  337,  337,
      257, 1075, 1078,  568,  568, 1089, 1090,  568,  373,  373,
     1091,  373,  373,  568,  568,  568,  568,  568, 1092,  568,
      373, 1147,  373,  373,  568,  373, 1084, 1120, 1083, 1087,
     1080, 1121,  568, 1086,  568, 1082,  568,  568,  257,  257,
     1085,  568,  568, 1088,  568, 1093, 1096,  568, 1095,  568,
     1094,  568,  568,  568, 1098,  568,  373,  257, 1149,  373,
      568, 1160,  568, 1099,  568,  568,  568,  568, 1100,  568,
      568,  337,  568, 1097,  568,  568,  568, 1152,  568,  568,

     1304,  568, 1101,  568,  568,  568,  568,  568, 1102,  568,
     1103,  257,  257,  568, 1148,  568,  568,  568, 1150,  568,
     1106,  568,  257,  568, 1104,  337,  568,  568,  568,  568,
     1105,  568, 1107,  568,  568,  568, 1109, 1108,  568,  568,
     1198,  568,  568,  568,  568,  568,  568,  257,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568, 1145, 1154,
      568,  568, 1146,  568, 1110,  568,  568,  568,  568, 1111,
      568,  568,  568,  568,  568,  257,  257,  568, 1112,  568,
      257, 1151, 1156, 1115,  568, 1114,  568, 1155,  254, 1113,
      254,  254,  337, 1157, 1117,  257, 1118, 1116,  254,  257,

      254,  254,  254,  257,  254,  254,  254, 1158,  254,  254,
     1119,  254, 1159,  254,  254,  254,  257,  254,  254,  257,
      254,  257,  254,  254,  257,  257,  257,  257,  257, 1165,
      292, 1208,  489,  292, 1170, 1168, 1164, 1166, 1171, 1169,
      489, 1172,  489, 1167,  489, 1173,  489,  489,  292, 1261,
      489,  292,  489,  489,  489,  337,  489,  489, 1174,  489,
     1175,  257, 1204,  489,  489,  489, 1176, 1177,  292,  292,
      489,  292,  292,  292,  489, 1179,  292,  337,  337, 1122,
      489,  489,  489, 1180,  489, 1178,  489,  292,  489, 1181,
      292,  489,  489,  489,  292,  489,  337,  292,  489, 1196,

      489, 1182,  489,  489,  489,  489,  489,  489, 1183,  489,
      257, 1184,  489,  489, 1359,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489, 1186,  257,  489,  489,  489,
      489,  489,  489,  489,  489,  489, 1185, 1206,  489, 1188,
      489,  489,  337,  489,  489,  489,  489, 1190, 1187,  489,
      337,  337, 1120, 1191, 1189,  489, 1195,  489,  337,  489,
      337,  489, 1197, 1192, 1193, 1200,  337,  337, 1129,  337,
     1201, 1194, 1202,  337,  337, 1131,  337,  337, 1199,  337,
      337, 1205,  337,  337, 1203,  337,  337, 1491,  568,  373,
     1216, 1271,  373, 1218, 1217,  257,  568, 1262,  568,  568,

      568, 1219,  373, 1207, 1209,  373,  568, 1211,  568,  568,
      257,  568, 1212, 1214,  568, 1215, 1487,  568, 1210, 1223,
     1213,  568,  568, 1265,  568,  257, 1220,  568, 1221, 1222,
     1270,  568,  568,  568,  568,  373,  373,  373,  373,  373,
      373,  568, 1225,  373, 1226,  568,  373,  257,  568,  568,
     1227,  568, 1224,  568, 1228,  568,  568,  568,  568,  568,
      568,  568, 1229,  568,  373,  257,  568,  373,  568, 1230,
      568,  568,  337,  568,  568,  568,  257,  568,  568, 1267,
      568,  568,  568,  568,  568, 1273,  568,  568,  568,  568,
      568,  568, 1264, 1232,  257,  568,  257, 1234,  257,  568,

      568,  568,  257,  568, 1231,  568,  568,  568, 1233,  568,
      568,  568,  568, 1313, 1236, 1272,  568, 1276,  568, 1277,
      568, 1237, 1235, 1268,  254, 1239,  254,  254,  257, 1238,
      568,  254,  568,  254,  254,  257, 1263,  257, 1266, 1269,
      257,  254, 1240,  254,  254,  254,  257,  254,  254,  257,
      257,  257,  257,  292,  292,  292,  292,  292,  292,  292,
     1358, 1486,  292, 1281,  489,  489,  337, 1278, 1274, 1275,
      489,  257, 1279, 1280,  489,  489,  489,  489,  489,  337,
      489,  489,  489, 1282,  489, 1284, 1301, 1302,  489,  489,
     1283,  489,  489, 1286,  489,  337,  489,  489, 1285,  489,

      489,  489,  489, 1288,  489, 1290, 1287,  489, 1291,  489,
     1289,  489,  489, 1309, 1485,  489,  489,  337,  337,  489,
      489,  489,  337,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489, 1305,  489, 1303,  337,  489,
      337,  337,  489,  489, 1307,  489,  489, 1292,  337,  489,
     1293,  489,  489, 1294,  489, 1295,  489,  489,  489,  337,
     1306, 1250, 1308,  337,  337, 1296,  337,  489,  337,  489,
     1298, 1297,  337,  337,  337, 1395,  373, 1312, 1299,  373,
      568, 1311, 1320,  568,  373,  373,  568,  373,  373, 1300,
      568,  568,  568,  568,  373,  568,  568,  373,  568, 1321,

      257,  568, 1314, 1322, 1315, 1361, 1316, 1360, 1317,  568,
     1323,  257, 1488, 1318, 1319,  568,  568,  257, 1368,  568,
      568,  568,  257,  568, 1324,  568,  568,  568, 1325, 1327,
      568,  568,  568,  568, 1326,  568, 1329, 1330,  568,  568,
      257, 1328,  568,  568,  292,  568,  568,  292,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
     1448, 1362, 1363,  568,  568,  568,  257,  257,  568,  568,
     1331,  568, 1333,  568,  568, 1484,  568, 1332,  568, 1364,
      568,  257,  568,  568, 1334,  568,  257,  254, 1365,  254,
      254, 1335,  568,  257,  568,  254, 1336,  254,  254,  257,

     1338, 1337,  257,  257, 1369,  257,  257,  257,  257,  337,
      337, 1483,  337, 1376, 1339,  337,  337, 1394, 1343, 1396,
     1367, 1370, 1373,  489, 1371,  489, 1397, 1372, 1374, 1375,
     1377,  489, 1379, 1366,  489, 1378, 1400,  292,  489,  489,
      292,  489,  489,  489,  489, 1380,  489,  489,  489,  489,
      489,  489,  489, 1381,  489,  489,  489,  489, 1482,  489,
      489,  489,  337,  337, 1382,  489,  489,  489,  489, 1383,
      489,  489,  489,  489,  489, 1384, 1398,  489,  337,  337,
     1399,  489,  337,  337,  489,  489,  489,  489,  489,  489,
     1386,  489, 1385,  489,  337,  489, 1387,  489,  489,  489,

      489,  337,  337,  337,  337,  489, 1388,  373, 1404,  489,
      373,  489, 1411, 1391, 1389,  489, 1440,  489, 1390, 1402,
     1403,  337,  568, 1406,  568,  373, 1412,  568,  373,  337,
     1414, 1405, 1392,  257, 1442, 1408,  568,  568, 1393,  568,
      568, 1413, 1407,  568, 1409, 1410,  568,  568,  568, 1415,
      568,  257,  568,  568,  568,  568,  337,  568,  568,  568,
     1416,  568,  337, 1419,  568,  568,  568, 1417,  568,  568,
      568,  568,  568,  568, 1418,  568,  568,  568, 1465,  568,
      568,  568,  568,  568,  568, 1443,  568,  257,  568,  568,
      568,  337,  568,  568, 1422,  568,  568, 1420, 1421,  568,

      568,  568,  257,  337, 1444, 1423,  568,  257,  568,  337,
      568, 1446,  568, 1424, 1426,  254, 1425,  254,  254,  257,
      257,  254, 1445,  254,  254,  257, 1451, 1449,  489, 1427,
     1453,  337,  489, 1428, 1450,  337,  489, 1429,  489, 1452,
      489, 1466,  489,  489,  489, 1467,  489,  292,  489,  489,
      292,  337, 1454,  489,  489,  489,  337,  337, 1431,  489,
     1447,  489, 1455,  489,  489, 1457,  489,  292, 1456,  489,
      292, 1500,  489,  489, 1463,  489,  489,  489,  337,  489,
      489,  489,  489,  489,  489,  337,  489,  489,  489,  489,
      489,  337,  489,  489,  337,  489,  337,  489,  337, 1464,

      489,  489,  373, 1459, 1462,  373, 1458,  489, 1460,  489,
      489,  489,  489,  489, 1490,  568, 1471, 1461,  373, 1492,
     1501,  373,  568, 1473, 1470,  568, 1472,  568,  568,  568,
     1468,  257,  568, 1469,  568,  568,  257, 1474,  568,  568,
      568,  568,  568,  568,  337,  568, 1484,  568, 1475,  568,
      568, 1477,  568,  568,  568,  568, 1476, 1478,  568,  568,
      568,  568,  568,  568,  568,  257,  257,  568,  568, 1489,
      568,  257,  568,  568,  568,  568,  568,  568,  568,  568,
     1514, 1479,  568,  568,  568,  337,  292, 1486,  568,  292,
      568,  257, 1481,  568, 1480,  568,  254,  257,  254,  254,

      254,  489,  254,  254,  254,  292,  254,  254,  292,  489,
     1496,  489,  292, 1494,  257,  292,  489,  489, 1498,  489,
      489,  489,  337, 1495,  489,  489,  489,  489,  489,  489,
      489, 1497,  489,  489,  489,  489,  489,  489,  568,  373,
      257, 1502,  373,  489,  373,  489,  568,  373,  568, 1506,
     1504, 1493,  568, 1526,  373,  568,  568,  373,  568, 1499,
     1505,  568,  568, 1507,  568,  568, 1508,  568,  568,  568,
      257,  568,  568,  568,  254,  257,  254,  254,  568,  568,
      568,  568,  568,  254,  568,  254,  254,  254,  489,  254,
      254,  292,  489, 1517,  292,  337, 1441, 1439,  489,  489,

      489, 1509,  489, 1516,  489,  292,  568,  292,  292,  489,
      292,  489,  568,  337, 1519, 1511,  568,  373,  568,  337,
      373, 1524,  568, 1521,  568, 1522,  373,  373, 1438,  373,
      373,  568,  254, 1528,  254,  254, 1437, 1515, 1436,  489,
     1531,  568,  254,  568,  254,  254,  568,  292, 1435,  489,
      292,  489,  292, 1434, 1433,  292,  568, 1518,  568,  373,
      373, 1432,  373,  373,  254, 1431,  254,  254,  254,  292,
      254,  254,  292,  292, 1430,  373,  292, 1523,  373, 1534,
     1429, 1401,  337, 1527, 1535,  373,  257,  254,  373,  254,
      254,  292,  373, 1529,  292,  373, 1536, 1357, 1356, 1355,

     1354, 1532,   51,   51,   51,   51,   51,   51,   51,   56,
       56,   56,   56,   56,   56,   56,  238,  238, 1353,  238,
      238,  238,  238,  243,  243,  243,  243,  243,  243,  243,
      246, 1352, 1351, 1350,  246,  246,  246,  253,  253, 1349,
      253,  253,  253,  253,  257,  257, 1348,  257,  257,  257,
      257,  287,  287, 1347,  287,  287,  287,  287,  292,  292,
     1346, 1345, 1344,  292,  292,  298,  298, 1343, 1342, 1341,
      298,  298,  329,  329, 1340,  329,  329,  329,  329,  337,
      337,  339,  339,  373,  373, 1310,  337,  257,  373,  373,
      379,  379, 1260, 1259, 1258,  379,  379,  410,  410, 1257,

      410,  410,  410,  410,  487,  487, 1256, 1255, 1254,  487,
      487,  489,  489, 1253, 1252, 1251,  489,  489,  525,  525,
     1250,  525,  525,  525,  525,  566,  566, 1249, 1248, 1247,
      566,  566,  568,  568, 1246, 1245, 1244,  568,  568,  604,
      604, 1243,  604,  604,  604,  604, 1242, 1241, 1153, 1144,
     1143, 1142, 1141, 1140, 1139, 1138, 1137, 1136, 1135, 1134,
     1133, 1132, 1131, 1130, 1129, 1128, 1127, 1126, 1125, 1124,
     1123, 1122,  337,  337,  257,  257, 1002,  999,  996,  995,
      994,  993,  992,  991,  990,  989,  988,  987,  986,  985,
      984,  983,  982,  981,  980,  979,  978,  977,  976,  975,

      974,  973,  972,  971,  337,  337,  257,  257,  841,  831,
      830,  829,  828,  827,  826,  825,  824,  823,  822,  821,
      820,  819,  818,  817,  816,  815,  814,  813,  812,  809,
      808,  807,  806,  805,  804,  803,  802,  801,  800,  799,
      798,  797,  796,  795,  337,  257,  653,  646,  645,  644,
      643,  642,  638,  637,  636,  635,  634,  633,  632,  631,
      630,  629,  628,  627,  626,  625,  624,  623,  622,  621,
      620,  619,  618,  617,  616,  615,  614,  613,  612,  611,
      610,  609,  375,  337,  338,  334,  257,  250,  450,  247,
      242,  239,  449,  448,  447,  446,  443,  442,  441,  440,

      439,  438,  437,  434,  433,  432,  431,  430,  429,  428,
      427,  426,  425,  424,  421,  415,  414,  205,  378,  377,
      337,  338,  336,  297,  271,  255,  250,  247,  242,  235,
      234,  233,  232,  231,  228,  227,  224,  220,  219,  218,
      217,  213,  212,  209,  208,  207,  205,  204, 1537,   13,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,

     1537, 1537, 1537, 1537, 1537
    } ;

static yyconst flex_int16_t yy_chk[4306] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,   15,  749,    2,   15,
        2,    3,    3,    3,   28,    3,    4,    4,    4,    4,
       31,    4,   28,   31,   36,   36,   38,   31,   41,    2,
       49,   47,    4,   36,   47,   50,   47,   41,   38,   54,
       54,   54,  749,   74,   49,   59,   59,   59,   63,   90,

       63,   63,   74,   66,    2,   66,   66,   50,   77,   67,
       50,   67,   67,   77,   90,    4,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    6,   62,   88,    6,   68,    6,   68,   68,   69,
       75,   69,   69,   70,   88,   70,   70,   71,   76,   71,
       71,   76,   75,   91,  285,    6,   76,   71,   78,   79,

       78,   80,   79,   82,   94,   62,   79,   81,   92,   81,
       79,   91,   85,   80,   85,   94,   92,  285, 1540,   82,
        6,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    8,   84,   84,    8,
       86,    8,   84,   87, 1530,   89,   84,   93,   95,   86,
       95,   95,   86,   89,   96,  124,  113,   97,  113,   87,

        8,   97,   89,  124,  141,   93,  113,  145,   96,  124,
       96,   99,   99,   99,   99,  101,  101,  101,  101,   97,
      268,  145,   97,  141,  268,    8,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,   10,  114,  118,   10,  115,   10,  114,  115,  116,
      114,  132,  115,  115,  117,  117,  118,  132,  116,  126,

      119,  115,  117,  119,  118,   10,  116,  126,  119,  120,
      120,  120,  121,  121,  128,  122,  142,  126,  120,  120,
      121,  122,  128, 1525,  270,  128,  142,  122,  270,  122,
       10,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   12,  123,  127,   12,
      129,   12,  143,  125,  146,  148,  127,  159,  129,  143,

      123,  125,  148,  280,  125,  149,  130,  144,  123,  127,
       12,  129,  133,  125,  130,  146,  131,  131,  131,  131,
      130,  131,  149,  144,  280,  133,  133,  135,  135,  135,
      135,  144,  151,  133,  159,   12,   72,   72,  158,   72,
       72,   72,   72,   72,   72,   72,   72,  153,   72,   73,
       73,  151,   73,   73,   73,   73,   73,   73,   73,   73,
      147,   73,  150,  200,  153,  150,  154,  155,  147,  200,
      155,  147,  158,  557,  157,  147,  154,  156,   73,  108,
      108,  134,  134,  108,  108,  108,  108,  108,  154,  108,
      134,  108,  109,  109,  152,  162,  109,  109,  109,  109,

      109,  157,  109,  134,  109,  232,  134,  156,  152,  152,
      157,  160,  185,  185,  557,  161,  164,  152,  232,  164,
      185,  109,  110,  110,  252,  162,  110,  110,  110,  110,
      110,  182,  110,  164,  110,  181,  182,  181,  160,  182,
      536,  165,  110,  111,  111,  181,  194,  111,  111,  111,
      111,  111,  161,  111,  194,  111,  165,  252,  224,  536,
      111,  112,  112,  184,  194,  112,  112,  112,  112,  112,
      224,  112,  184,  112,  163,  163,  163,  163,  165,  163,
      184,  165,  167,  167,  167,  167,  203,  112, 1520,  203,
      253,  183,  253,  253,  183,  112,  176,  176,  183,  183,

      176,  176,  176,  176,  176,  186,  176,  183,  176,  177,
      177,  212,  209,  177,  177,  177,  177,  177,  186,  177,
      187,  177,  209,  187,  209,  212,  186,  241,  187,  189,
      189,  534,  188,  188,  188,  191,  534,  189,  177,  178,
      178,  188,  188,  178,  178,  178,  178,  178,  191,  178,
      236,  178,  241,  236,  195,  236,  191,  190,  258,  178,
      179,  179,  195,  190,  179,  179,  179,  179,  179,  190,
      179,  190,  179,  192,  258,  195,  259,  179,  180,  180,
      210,  192,  180,  180,  180,  180,  180,  192,  180,  193,
      180,  196,  259,  197,  266,  210,  266,  193, 1512,  196,

      193,  197,  196,  198,  180,  199,  199,  199,  199,  193,
      199,  198,  180,  201,  197,  202,  202,  198,  245,  245,
      245,  249,  249,  249,  202,  346,  201,  201,  254,  261,
      254,  254,  346,  256,  201,  256,  256,  202,  260,  262,
      202,  263,  261,  256,  261,  272,  264,  262,  260,  260,
      260,  265,  267,  269,  267,  263,  269,  263,  264,  271,
      273,  272,  274,  265,  278,  275,  276,  271,  273,  276,
      277,  279,  281,  282,  278,  283,  284,  275,  274,  275,
      286,  281,  283,  279,  287,  277,  287,  287,  289,  289,
      290,  282,  347,  284,  288,  283,  288,  288,  291,  347,

      292,  286,  291,  292, 1510,  344,  290,  293,  293,  293,
      293,  295,  295,  295,  295,  297,  344,  353,  297,  328,
      328,  328,  328,  291,  328,  297,  298,  298,  353,  343,
      298,  298,  298,  298,  298,  343,  298,  355,  298,  299,
      299,  348,  455,  299,  299,  299,  299,  299,  355,  299,
      343,  299,  299,  300,  300, 1503,  455,  300,  300,  300,
      300,  300,  348,  300,  349,  300,  300,  301,  301,  305,
      305,  301,  301,  301,  301,  301,  302,  301,  302,  301,
      305,  349,  305,  340,  303,  301,  340,  303,  302,  350,
      302,  302,  307,  304,  303,  301,  303,  301,  304,  352,

      306,  306,  307,  539,  307,  307,  308,  304,  304,  309,
      304,  306,  350,  306,  352,  308,  308,  310,  308,  309,
      539,  309,  367,  311,  309,  310,  351,  310,  312,  310,
      311,  312,  313,  311,  360,  311,  314,  313,  312,  314,
      312,  316,  351,  360,  316,  315,  314,  313,  314,  313,
      315,  317,  358,  316,  316,  318,  316,  361,  320,  318,
      315,  317,  315,  317,  367,  317,  319,  319,  320,  318,
      320,  318,  321,  322,  358,  359,  319,  323,  319,  359,
      324,  320,  321,  322,  321,  322,  551,  323,  361,  323,
      324,  325,  324,  322,  329,  326,  329,  329,  324,  551,

      327,  325,  329,  325,  321,  326,  323,  326,  330,  331,
      327,  324,  327,  341,  331,  332,  341,  362,  330,  325,
      330,  364,  332,  342,  331,  332,  331,  332,  363,  326,
      366,  342,  327,  333,  333,  333,  333,  345,  365,  354,
      345,  342,  354,  342,  357,  356,  368,  332,  356,  357,
      369,  369,  369,  369,  345,  369,  363,  362,  364,  371,
      370,  357,  371,  472,  365,  372,  366,  373,  453,  472,
      373,  374,  374,  374,  374,  459,  556,  365,  370,  378,
      372,  383,  378,  383,  453,  459,  368,  384,  388,  378,
      384,  386,  386,  383,  469,  383,  383,  384,  388,  384,

      388,  388,  386,  556,  386,  372,  379,  379,  469,  463,
      379,  379,  379,  379,  379,  454,  379,  454,  379,  380,
      380,  463, 1500,  380,  380,  380,  380,  380,  458,  380,
      458,  380,  380,  381,  381,  466,  466,  381,  381,  381,
      381,  381,  460,  381,  460,  381,  381,  382,  382,  387,
      387,  382,  382,  382,  382,  382,  385,  382,  483,  382,
      387,  385,  387,  451,  393,  382,  451,  393,  483,  389,
      385,  385,  390,  385,  393,  382,  393,  382,  389,  389,
      391,  389,  390, 1489,  390,  462,  392,  390,  391,  394,
      391,  456,  391,  392,  394,  456,  392,  395,  392,  397,

      395,  462,  397,  396,  394,  398,  394,  395,  396,  395,
      452,  397,  397,  452,  397,  398,  401,  398,  396,  398,
      396,  399,  400,  400,  464,  399,  401,  464,  401,  461,
      402,  403,  400,  461,  400,  399,  404,  399,  465,  401,
      402,  403,  402,  403,  406,  405,  404,  548,  404,  407,
      465,  403,  548,  444,  406,  405,  406,  405,  408,  407,
      444,  407,  402,  405,  444,  404,  470,  477,  408,  470,
      408,  471,  406,  467,  471,  477,  405,  409,  409,  409,
      409,  411,  409,  407,  410,  467,  410,  410,  413,  412,
      408,  411,  410,  411,  412,  413,  468,  473,  413,  473,

      413,  474,  475,  475,  412,  478,  412,  479,  468,  476,
      476,  480,  474,  481,  482,  487,  484,  485,  487,  480,
      413,  488,  489,  542,  488,  479,  481,  478,  530,  680,
      542,  488,  489,  481,  489,  490,  482,  481,  484,  485,
      491,  492,  680,  490,  530,  490,  492,  490,  491,  493,
      491,  494,  491,  495,  494,  531,  492,  496,  492,  493,
      495,  493,  493,  495,  494,  495,  494,  496,  496,  496,
      497,  531,  544,  543,  498,  498,  501, 1488,  499,  544,
      497,  501,  497,  497,  498,  500,  498,  499,  499,  543,
      499,  501,  500,  501,  503,  500,  538,  500,  502,  502,

      505,  545,  503,  550,  503,  538,  503,  504,  504,  502,
      505,  502,  505,  506,  506,  535,  507,  507,  504,  508,
      504,  545,  508,  509,  506,  550,  506,  507,  510,  507,
      535,  509,  508,  509,  508,  509,  511,  512,  510,  533,
      510,  511,  510,  513,  514,  559,  511,  512,  511,  512,
      512,  515,  516,  513,  514,  513,  514,  517,  518,  537,
      533,  515,  516,  515,  516,  519,  521,  517,  518,  517,
      518,  516,  559,  520,  546,  519,  521,  519,  521,  522,
      537,  546,  523,  520,  519,  520,  524,  518,  547,  522,
      517,  522,  523,  549,  523,  547,  524,  520,  524,  521,

      522,  540,  526,  525,  520,  525,  525,  558,  520,  549,
      527,  525,  526,  528,  526,  523,  540,  529,  528,  524,
      527,  552,  527,  532,  529,  553,  532,  529,  528,  529,
      528,  541,  554,  553,  541,  555,  560,  561,  562,  563,
      564,  568,  552,  566,  558,  647,  566,  567,  569,  529,
      567,  568,  554,  568,  570,  555,  569,  567,  569,  647,
      569,  733,  570,  650,  570,  653,  570,  562,  560,  571,
      573,  653,  650,  573,  571,  560,  733,  572,  561,  560,
      563,  564,  575,  573,  571,  573,  571,  572,  574,  572,
      572,  576,  575,  575,  575,  574,  577,  577,  574,  648,

      574,  576,  578,  576,  576,  580,  577,  624,  577,  579,
      580,  578,  578,  648,  578,  582,  579,  581,  581,  579,
      580,  579,  580,  582,  584,  582,  624,  582,  581,  724,
      581,  583,  583,  652,  584,  652,  584,  585,  585,  724,
      586,  586,  583,  587,  583,  659,  587,  588,  585,  659,
      585,  586,  589,  586,  832,  588,  587,  588,  587,  588,
      590,  591,  589,  832,  589,  590,  589,  592,  593, 1487,
      590,  591,  590,  591,  591,  594,  595,  592,  593,  592,
      593,  596,  597,  655,  655,  594,  595,  594,  595,  598,
      600,  596,  597,  596,  597,  595,  666,  599,  654,  598,

      600,  598,  600,  601,  666,  654,  602,  599,  598,  599,
      603,  597,  682,  601,  596,  601,  602,  658,  602,  658,
      603,  599,  603,  600,  601,  682,  605,  604,  599,  604,
      604,  671,  599,  671,  606,  604,  605,  607,  605,  602,
      651,  608,  607,  603,  606,  657,  606,  649,  608,  662,
      649,  608,  607,  608,  607,  660,  660,  651,  661,  663,
      665,  664,  657,  661,  664,  667,  662,  668,  662,  670,
      667,  669,  665,  608,  668,  672,  663,  673,  669,  675,
      670,  676,  677,  678,  684,  681,  679,  684,  721,  723,
     1485,  685,  672,  721,  685,  675,  681,  684,  677,  684,

      673,  678,  679,  676,  685,  686,  685,  688,  687,  722,
      687,  723,  689,  688,  722,  686,  690,  686,  687,  686,
      687,  689,  689,  688,  689,  688,  690,  691,  690,  725,
      692,  725,  726,  690, 1483,  694,  693,  691,  729,  691,
      692,  694,  692,  752,  695,  691,  693,  693,  693,  726,
      728,  694,  696,  694,  695,  697,  695,  695,  729,  696,
      698,  707,  696,  699,  696,  697,  698,  697,  700,  699,
      698,  707,  698,  707,  700,  701,  728,  702,  702,  699,
      752,  699,  699,  701,  700,  701,  700,  701,  702,  703,
      702,  739,  703,  705,  704, 1470,  709,  706,  739,  703,

      704,  703,  709,  705,  704,  705,  704,  706,  708,  706,
      727,  705,  709,  710,  709,  706,  711,  712,  708,  730,
      708,  708,  713,  710,  732,  710,  711,  712,  711,  712,
      714,  715,  713,  734,  713,  727,  716,  731,  730,  731,
      714,  715,  714,  715,  712,  732,  716,  710,  716,  717,
      750, 1469,  718,  734,  738,  713,  719,  714,  735,  717,
      715,  717,  718,  716,  718,  720,  719,  736,  719,  736,
      738,  740,  735,  717,  718,  720,  737,  720,  737,  741,
      719,  742,  740,  743,  744,  745,  747,  746,  736,  746,
      751,  750,  744,  741,  753,  754,  755,  758,  756,  833,

      758,  759,  762,  760,  759,  828,  745,  742,  762,  743,
      758,  833,  758,  760,  759,  760,  759,  760,  762,  828,
      762,  761,  848,  761,  830,  751,  755,  754,  747,  753,
      756,  761,  763,  761,  848,  764,  765,  768,  830,  766,
      835,  763,  763,  768,  763,  764,  765,  764,  765,  766,
      767,  766,  764,  768,  765,  768,  769,  835,  838,  926,
      767,  767,  767,  770,  771,  838,  769,  855,  769,  769,
      770,  772,  773,  770,  771,  770,  771,  772,  773,  774,
      855,  772,  834,  772,  775,  774,  837,  834,  773,  837,
      773,  773,  775,  926,  775,  774,  775,  774,  776,  776,

      777,  839,  852,  777,  779,  839,  852,  778,  780,  776,
      777,  776,  777,  778,  779,  781,  779,  778,  780,  778,
      780,  782,  779,  783, 1468,  781,  780,  781,  784,  783,
      841,  782,  785,  782,  782,  787,  786,  841,  784,  783,
      784,  783,  785,  788,  785,  787,  786,  787,  786,  789,
      850, 1026,  850,  788,  790,  788,  853,  792,  853,  789,
      854,  789,  784,  786,  790,  791,  790,  792,  787,  792,
      788, 1026,  793,  794,  854,  791,  840,  791,  789,  792,
      843,  790,  793,  794,  793,  794,  844,  845,  836,  791,
      836,  836,  842,  840,  842,  842,  793,  843,  847,  851,

      847,  847,  857,  844,  845,  849,  856,  849,  849,  859,
      858,  856,  858,  858,  860,  862,  851,  863,  864,  857,
      865,  866,  872,  867,  859,  872,  868,  878,  868,  862,
      878,  865,  864,  860,  867,  905,  868,  866,  868,  863,
      869,  869,  905,  871,  870,  865, 1467,  904,  867,  871,
      870,  869,  873,  869,  870,  874,  870,  904,  908,  871,
      873,  871,  873,  876,  873,  874,  909,  874,  875,  876,
      879,  880,  877,  874,  908,  875,  879,  880,  875,  876,
      875,  876,  877,  882,  877,  881,  879,  880,  879,  880,
      877,  881,  909,  882,  883,  882, 1025,  883,  884,  884,

      886,  881,  885,  881, 1025,  885,  888,  889,  887,  884,
      886,  884,  886,  886,  887, 1027,  888,  889,  888,  889,
      889,  888,  890, 1027,  887,  890,  887,  891,  892,  891,
      893,  907,  929,  907,  892,  890,  893,  890,  892,  891,
      892,  891,  894,  895,  896,  894,  893,  897,  893,  910,
      898,  899,  918,  895,  896,  895,  896,  897,  900,  897,
      898,  899,  898,  899,  910,  929,  901,  902,  900,  895,
      900,  906,  912,  918,  896,  898,  901,  902,  901,  902,
      911,  903,  911,  900,  899,  906,  920,  913,  901,  913,
      914,  903,  914,  903,  902,  915,  922,  915,  912,  917,

      921,  922,  901,  903,  923,  919,  917,  919,  924,  920,
      923,  925,  927,  925,  930,  931,  932,  903,  933,  934,
     1450,  921,  924,  935,  937,  935,  936,  936,  939,  945,
      937,  939,  945,  935,  937,  935,  937,  936,  938,  936,
      950, 1004,  952,  950,  938,  952,  932,  971,  931,  934,
      927,  971,  941,  933,  938,  930,  938,  940, 1004, 1024,
      932,  942,  941,  934,  941,  940,  943,  940,  942,  940,
      941,  942,  943,  942,  946,  944,  961, 1007, 1007,  961,
      946, 1024,  943,  947,  943,  944,  949,  944,  948,  947,
      946, 1199,  946,  944,  948,  953,  949, 1011,  949,  947,

     1199,  947,  951,  951,  948,  953,  948,  953,  953,  955,
      954, 1011, 1005,  951, 1005,  951,  954,  956, 1008,  955,
      957,  955, 1008,  957,  955, 1069,  954,  956,  954,  956,
      956,  959,  958,  957,  958,  957,  960,  959,  962,  963,
     1069,  959,  960,  959,  958,  964,  958, 1449,  962,  963,
      962,  963,  960,  965,  960,  964,  966,  964, 1003, 1016,
      967,  968, 1003,  965,  962,  965,  966,  969,  966,  963,
      967,  968,  967,  968,  970, 1003, 1016,  969,  965,  969,
     1009, 1009, 1019,  968,  970,  967,  970, 1018, 1006,  966,
     1006, 1006, 1081, 1020,  969, 1020,  970,  968, 1010, 1019,

     1010, 1010, 1012, 1018, 1012, 1012, 1013, 1021, 1013, 1013,
      970, 1014, 1022, 1014, 1014, 1017, 1028, 1017, 1017, 1021,
     1023, 1029, 1023, 1023, 1022, 1031, 1030, 1032, 1033, 1029,
     1037, 1081, 1036, 1037, 1034, 1032, 1028, 1030, 1034, 1033,
     1034, 1035, 1036, 1031, 1036, 1036, 1038, 1035, 1041, 1146,
     1034, 1041, 1034, 1039, 1040, 1077, 1038, 1035, 1038, 1035,
     1039, 1146, 1077, 1039, 1040, 1039, 1040, 1042, 1043, 1044,
     1042, 1043, 1044, 1045, 1046, 1047, 1045, 1066, 1067, 1066,
     1042, 1047, 1042, 1049, 1046, 1046, 1046, 1048, 1049, 1050,
     1048, 1047, 1051, 1047, 1054, 1050, 1079, 1054, 1049, 1067,

     1049, 1051, 1051, 1055, 1051, 1050, 1056, 1050, 1052, 1052,
     1448, 1053, 1053, 1055, 1262, 1055, 1056, 1057, 1056, 1052,
     1058, 1052, 1053, 1059, 1053, 1056, 1262, 1057, 1060, 1057,
     1058, 1061, 1058, 1059, 1062, 1059, 1055, 1079, 1060, 1058,
     1060, 1061, 1068, 1061, 1062, 1063, 1062, 1060, 1057, 1064,
     1065, 1072, 1065, 1061, 1059, 1063, 1065, 1063, 1070, 1064,
     1071, 1064, 1068, 1062, 1063, 1071, 1073, 1076, 1073, 1074,
     1072, 1064, 1074, 1075, 1078, 1075, 1080, 1082, 1070, 1083,
     1084, 1078, 1085, 1086, 1076, 1088, 1087, 1445, 1091, 1092,
     1089, 1160, 1092, 1090, 1089, 1149, 1089, 1149, 1091, 1090,

     1091, 1091, 1096, 1080, 1082, 1096, 1089, 1084, 1089, 1090,
     1160, 1090, 1085, 1087, 1093, 1088, 1436, 1095, 1083, 1097,
     1086, 1094, 1097, 1152, 1093, 1152, 1093, 1095, 1094, 1095,
     1159, 1094, 1097, 1094, 1097, 1098, 1099, 1100, 1098, 1099,
     1100, 1101, 1102, 1103, 1104, 1106, 1103, 1159, 1102, 1104,
     1105, 1101, 1101, 1101, 1106, 1106, 1105, 1106, 1102, 1104,
     1102, 1104, 1107, 1107, 1109, 1162, 1105, 1109, 1105, 1108,
     1108, 1110, 1209, 1107, 1111, 1107, 1155, 1112, 1113, 1155,
     1108, 1110, 1108, 1110, 1111, 1162, 1111, 1112, 1113, 1112,
     1113, 1114, 1151, 1111, 1161, 1115, 1165, 1113, 1166, 1116,

     1117, 1114, 1151, 1114, 1110, 1115, 1118, 1115, 1112, 1116,
     1117, 1116, 1117, 1209, 1115, 1161, 1118, 1165, 1118, 1166,
     1119, 1116, 1114, 1157, 1145, 1118, 1145, 1145, 1157, 1117,
     1119, 1147, 1119, 1147, 1147, 1150, 1150, 1153, 1153, 1158,
     1158, 1154, 1119, 1154, 1154, 1156, 1163, 1156, 1156, 1164,
     1167, 1168, 1169, 1170, 1172, 1179, 1170, 1172, 1179, 1181,
     1261, 1435, 1181, 1171, 1171, 1173, 1197, 1167, 1163, 1164,
     1174, 1261, 1168, 1169, 1171, 1173, 1171, 1173, 1175, 1195,
     1174, 1178, 1174, 1174, 1176, 1176, 1195, 1197, 1175, 1177,
     1175, 1178, 1180, 1178, 1176, 1204, 1176, 1182, 1177, 1177,

     1183, 1177, 1180, 1182, 1180, 1184, 1180, 1182, 1185, 1182,
     1183, 1184, 1183, 1204, 1434, 1186, 1185, 1198, 1200, 1187,
     1188, 1184, 1202, 1184, 1189, 1186, 1185, 1186, 1185, 1187,
     1188, 1187, 1188, 1190, 1189, 1200, 1189, 1198, 1208, 1191,
     1201, 1207, 1192, 1190, 1202, 1190, 1193, 1186, 1203, 1191,
     1187, 1191, 1192, 1188, 1192, 1189, 1193, 1194, 1193, 1205,
     1201, 1205, 1203, 1210, 1211, 1190, 1212, 1194, 1302, 1194,
     1192, 1191, 1213, 1214, 1215, 1302, 1216, 1208, 1193, 1216,
     1219, 1207, 1217, 1217, 1218, 1225, 1220, 1218, 1225, 1194,
     1219, 1221, 1219, 1217, 1227, 1217, 1220, 1227, 1220, 1220,

     1273, 1221, 1210, 1221, 1211, 1264, 1212, 1263, 1213, 1222,
     1222, 1441, 1441, 1214, 1215, 1223, 1224, 1263, 1273, 1222,
     1226, 1222, 1264, 1228, 1223, 1223, 1224, 1223, 1224, 1228,
     1226, 1229, 1226, 1228, 1226, 1228, 1230, 1231, 1232, 1234,
     1368, 1229, 1230, 1229, 1290, 1231, 1233, 1290, 1232, 1234,
     1232, 1234, 1230, 1235, 1230, 1231, 1233, 1231, 1233, 1236,
     1368, 1265, 1267, 1235, 1237, 1235, 1265, 1267, 1239, 1236,
     1232, 1236, 1234, 1238, 1237, 1433, 1237, 1233, 1239, 1268,
     1239, 1268, 1240, 1238, 1235, 1238, 1269, 1270, 1269, 1270,
     1270, 1236, 1240, 1274, 1240, 1271, 1237, 1271, 1271, 1272,

     1239, 1238, 1276, 1275, 1274, 1277, 1279, 1280, 1278, 1301,
     1303, 1432, 1305, 1281, 1240, 1309, 1304, 1301, 1304, 1303,
     1272, 1275, 1278, 1281, 1276, 1281, 1305, 1277, 1279, 1280,
     1282, 1282, 1284, 1271, 1283, 1283, 1309, 1291, 1284, 1285,
     1291, 1282, 1286, 1282, 1283, 1285, 1283, 1287, 1284, 1285,
     1284, 1285, 1286, 1287, 1286, 1288, 1289, 1287, 1430, 1287,
     1292, 1293, 1307, 1308, 1288, 1288, 1289, 1288, 1289, 1289,
     1292, 1293, 1292, 1293, 1294, 1291, 1307, 1295, 1313, 1311,
     1308, 1296, 1315, 1312, 1294, 1297, 1294, 1295, 1298, 1295,
     1293, 1296, 1292, 1296, 1314, 1297, 1294, 1297, 1298, 1299,

     1298, 1316, 1317, 1318, 1319, 1300, 1295, 1329, 1313, 1299,
     1329, 1299, 1320, 1298, 1296, 1300, 1358, 1300, 1297, 1311,
     1312, 1410, 1320, 1315, 1320, 1330, 1321, 1321, 1330, 1409,
     1323, 1314, 1299, 1358, 1360, 1317, 1323, 1321, 1300, 1321,
     1322, 1322, 1316, 1324, 1318, 1319, 1323, 1325, 1323, 1324,
     1322, 1360, 1322, 1324, 1326, 1324, 1399, 1325, 1327, 1325,
     1326, 1328, 1407, 1330, 1326, 1331, 1326, 1327, 1327, 1332,
     1327, 1328, 1333, 1328, 1328, 1331, 1334, 1331, 1399, 1332,
     1335, 1332, 1333, 1336, 1333, 1362, 1334, 1362, 1334, 1337,
     1335, 1406, 1335, 1336, 1333, 1336, 1338, 1331, 1332, 1337,

     1339, 1337, 1363, 1404, 1363, 1334, 1338, 1370, 1338, 1402,
     1339, 1365, 1339, 1335, 1337, 1361, 1336, 1361, 1361, 1364,
     1365, 1366, 1364, 1366, 1366, 1373, 1376, 1370, 1377, 1338,
     1378, 1400, 1376, 1339, 1373, 1394, 1378, 1394, 1377, 1377,
     1377, 1400, 1376, 1380, 1376, 1401, 1378, 1379, 1378, 1381,
     1379, 1462, 1380, 1380, 1382, 1380, 1396, 1397, 1396, 1381,
     1366, 1381, 1381, 1383, 1382, 1383, 1382, 1384, 1382, 1385,
     1384, 1462, 1386, 1383, 1397, 1383, 1387, 1388, 1398, 1385,
     1389, 1385, 1386, 1390, 1386, 1395, 1387, 1388, 1387, 1388,
     1389, 1403, 1389, 1390, 1405, 1390, 1408, 1391, 1463, 1398,

     1392, 1393, 1414, 1386, 1395, 1414, 1384, 1391, 1388, 1391,
     1392, 1393, 1392, 1393, 1444, 1412, 1411, 1391, 1419, 1446,
     1463, 1419, 1411, 1413, 1408, 1412, 1412, 1412, 1415, 1413,
     1403, 1444, 1411, 1405, 1411, 1416, 1446, 1415, 1415, 1413,
     1415, 1413, 1417, 1420, 1464, 1416, 1464, 1416, 1416, 1418,
     1421, 1418, 1417, 1420, 1417, 1420, 1417, 1419, 1422, 1418,
     1421, 1418, 1421, 1423, 1424, 1375, 1443, 1425, 1422, 1443,
     1422, 1374, 1426, 1423, 1424, 1423, 1424, 1425, 1427, 1425,
     1491, 1421, 1426, 1428, 1426, 1466, 1451, 1466, 1427, 1451,
     1427, 1372, 1426, 1428, 1423, 1428, 1440, 1491, 1440, 1440,

     1442, 1452, 1442, 1442, 1447, 1453, 1447, 1447, 1453, 1454,
     1455, 1452, 1458, 1452, 1371, 1458, 1455, 1459, 1457, 1454,
     1456, 1454, 1465, 1454, 1457, 1460, 1455, 1459, 1455, 1459,
     1456, 1456, 1456, 1461, 1457, 1460, 1457, 1460, 1472, 1471,
     1369, 1465, 1471, 1461, 1473, 1461, 1474, 1473, 1472, 1475,
     1472, 1447, 1476, 1513, 1478, 1475, 1474, 1478, 1474, 1458,
     1474, 1479, 1476, 1476, 1476, 1475, 1477, 1475, 1480, 1481,
     1513, 1479, 1477, 1479, 1490, 1367, 1490, 1490, 1480, 1481,
     1480, 1481, 1477, 1492, 1477, 1492, 1492, 1493, 1494, 1493,
     1493, 1496, 1495, 1497, 1496, 1501, 1359, 1355, 1494, 1497,

     1494, 1478, 1495, 1495, 1495, 1498, 1504, 1499, 1498, 1497,
     1499, 1497, 1505, 1502, 1501, 1502, 1504, 1506, 1504, 1519,
     1506, 1519, 1505, 1505, 1505, 1507, 1508, 1509, 1352, 1508,
     1509, 1507, 1514, 1516, 1514, 1514, 1350, 1493, 1348, 1516,
     1521, 1507, 1515, 1507, 1515, 1515, 1521, 1517, 1347, 1516,
     1517, 1516, 1518, 1346, 1345, 1518, 1521, 1499, 1521, 1522,
     1523, 1344, 1522, 1523, 1526, 1342, 1526, 1526, 1527, 1528,
     1527, 1527, 1528, 1529, 1341, 1531, 1529, 1509, 1531, 1527,
     1340, 1310, 1306, 1515, 1529, 1532, 1266, 1534, 1532, 1534,
     1534, 1535, 1536, 1518, 1535, 1536, 1532, 1260, 1259, 1258,

     1257, 1523, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1541, 1541, 1256, 1541,
     1541, 1541, 1541, 1542, 1542, 1542, 1542, 1542, 1542, 1542,
     1543, 1255, 1254, 1253, 1543, 1543, 1543, 1544, 1544, 1252,
     1544, 1544, 1544, 1544, 1545, 1545, 1251, 1545, 1545, 1545,
     1545, 1546, 1546, 1249, 1546, 1546, 1546, 1546, 1547, 1547,
     1248, 1247, 1245, 1547, 1547, 1548, 1548, 1244, 1243, 1242,
     1548, 1548, 1549, 1549, 1241, 1549, 1549, 1549, 1549, 1550,
     1550, 1551, 1551, 1552, 1552, 1206, 1196, 1148, 1552, 1552,
     1553, 1553, 1144, 1143, 1142, 1553, 1553, 1554, 1554, 1141,

     1554, 1554, 1554, 1554, 1555, 1555, 1140, 1139, 1138, 1555,
     1555, 1556, 1556, 1137, 1136, 1135, 1556, 1556, 1557, 1557,
     1134, 1557, 1557, 1557, 1557, 1558, 1558, 1133, 1132, 1130,
     1558, 1558, 1559, 1559, 1128, 1127, 1126, 1559, 1559, 1560,
     1560, 1125, 1560, 1560, 1560, 1560, 1124, 1121, 1015, 1001,
     1000,  999,  998,  997,  996,  995,  994,  993,  992,  990,
      989,  988,  987,  986,  984,  983,  979,  977,  976,  975,
      973,  972,  928,  916,  861,  846,  831,  829,  827,  826,
      825,  823,  822,  820,  819,  818,  817,  816,  815,  814,
      813,  811,  808,  807,  806,  804,  803,  802,  801,  800,

      798,  797,  796,  795,  757,  748,  683,  674,  656,  646,
      644,  643,  642,  641,  640,  639,  638,  637,  635,  634,
      633,  632,  631,  630,  629,  628,  627,  626,  625,  623,
      622,  621,  620,  619,  618,  617,  616,  615,  614,  613,
      612,  611,  610,  609,  565,  486,  457,  450,  448,  447,
      446,  445,  443,  442,  441,  440,  439,  438,  437,  436,
      435,  434,  433,  432,  431,  430,  429,  428,  427,  426,
      425,  424,  423,  422,  421,  420,  419,  418,  417,  416,
      415,  414,  376,  339,  338,  335,  257,  251,  250,  248,
      244,  240,  239,  235,  234,  233,  231,  230,  229,  228,

      227,  226,  225,  223,  222,  221,  220,  219,  218,  217,
      216,  215,  214,  213,  211,  208,  207,  205,  175,  169,
      140,  139,  137,  107,   83,   65,   61,   58,   53,   46,
       45,   44,   43,   42,   40,   39,   37,   35,   34,   33,
       32,   30,   29,   27,   26,   25,   23,   17,   13, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,

     1537, 1537, 1537, 1537, 1537
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[77] =
    {   0,
0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#line 2 "levcomp.lpp"

// levcomp.l:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
// 
// Based loosely on NetHack's lev_comp.l

#include "AppHdr.h"
#include "levcomp.tab.h"
#include <cstring>
#include <queue>

static bool alloced = false;

std::queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(20);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

static void settext()
{
    clean();
    if ((yylval.text = strdup(yytext)))
        alloced = true;
}






#line 1986 "levcomp.lex.cc"

#define INITIAL 0
#define MAPDEF 1
#define ARGUMENT 2
#define MNAME 3
#define KEYWORDS 4
#define ITEM_LIST 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 61 "levcomp.lpp"


#line 2150 "levcomp.lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1538 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1537 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 63 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 65 "levcomp.lpp"
{
                        settext();
                        return MAP_LINE;
                    }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 70 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 71 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 72 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 74 "levcomp.lpp"
;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 76 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 81 "levcomp.lpp"
;
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 82 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 84 "levcomp.lpp"
{ 
                        settext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 89 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 90 "levcomp.lpp"
;
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 91 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 93 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 95 "levcomp.lpp"
{ 
                        settext();
                        return MONSTER_NAME; 
                    }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 100 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 101 "levcomp.lpp"
;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 103 "levcomp.lpp"
{ 
                        BEGIN(INITIAL);
                        settext();
                        return STRING; 
                    }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 109 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 111 "levcomp.lpp"
;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 113 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 116 "levcomp.lpp"
{ BEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 117 "levcomp.lpp"
return DEFAULT_DEPTH;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 118 "levcomp.lpp"
return DEPTH;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 119 "levcomp.lpp"
return ORIENT;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 120 "levcomp.lpp"
{ BEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 121 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 122 "levcomp.lpp"
return FLAGS;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 123 "levcomp.lpp"
{ BEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 124 "levcomp.lpp"
{ BEGIN(ARGUMENT); return SUBST; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 125 "levcomp.lpp"
{ BEGIN(MNAME); return MONS; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 126 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 127 "levcomp.lpp"
{ BEGIN(ARGUMENT); return SHUFFLE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 129 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KFEAT; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 130 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KITEM; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 131 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KMONS; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 133 "levcomp.lpp"
return BRANCH;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 134 "levcomp.lpp"
return DEFAULT;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 135 "levcomp.lpp"
return DESC;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 136 "levcomp.lpp"
return BRANCH;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 137 "levcomp.lpp"
return ROOT_DEPTH;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 138 "levcomp.lpp"
return FLOOR_COLOUR;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 139 "levcomp.lpp"
return ROCK_COLOUR;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 141 "levcomp.lpp"
return LEVEL;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 142 "levcomp.lpp"
return END;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 143 "levcomp.lpp"
return PVAULT;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 144 "levcomp.lpp"
return PMINIVAULT;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 146 "levcomp.lpp"
{ BEGIN(ARGUMENT); return ENTRY_MSG; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 147 "levcomp.lpp"
{ BEGIN(ARGUMENT); return EXIT_MSG; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 149 "levcomp.lpp"
return MONSTERS;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 150 "levcomp.lpp"
return ENDMONSTERS;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 153 "levcomp.lpp"
return PANDEMONIC;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 154 "levcomp.lpp"
return NO_HMIRROR;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 155 "levcomp.lpp"
return NO_VMIRROR;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 156 "levcomp.lpp"
return NO_ROTATE;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 158 "levcomp.lpp"
return ENCOMPASS;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 159 "levcomp.lpp"
return NORTH;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 160 "levcomp.lpp"
return SOUTH;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 161 "levcomp.lpp"
return EAST;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 162 "levcomp.lpp"
return WEST;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 163 "levcomp.lpp"
return NORTHEAST;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 164 "levcomp.lpp"
return NORTHWEST;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 165 "levcomp.lpp"
return SOUTHEAST;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 166 "levcomp.lpp"
return SOUTHWEST;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 167 "levcomp.lpp"
return FLOAT;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 169 "levcomp.lpp"
return DASH;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 170 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 172 "levcomp.lpp"
{
                        clean();
                        yylval.i = atoi(yytext);
                        return INTEGER;
                    }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 178 "levcomp.lpp"
;
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 179 "levcomp.lpp"
;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 181 "levcomp.lpp"
return OPAREN;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 182 "levcomp.lpp"
return CPAREN;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 184 "levcomp.lpp"
return QUOTE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 186 "levcomp.lpp"
{
                        settext();
                        return IDENTIFIER;
                    }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 191 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 193 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 2650 "levcomp.lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MAPDEF):
case YY_STATE_EOF(ARGUMENT):
case YY_STATE_EOF(MNAME):
case YY_STATE_EOF(KEYWORDS):
case YY_STATE_EOF(ITEM_LIST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1538 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1538 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1537);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 193 "levcomp.lpp"



int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}

