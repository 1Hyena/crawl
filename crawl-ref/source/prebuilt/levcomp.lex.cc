#line 2 "levcomp.lex.cc"

#line 4 "levcomp.lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 77
#define YY_END_OF_BUFFER 78
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1012] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   78,   76,   73,   74,
       75,   71,   76,   69,   72,   70,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   73,   34,   36,   76,   76,   76,   76,   76,
       76,   77,    6,   77,   77,    4,    2,    3,   77,    2,
        2,    2,    2,    9,   10,   77,    9,    9,   77,   12,
       77,   32,   73,   33,   75,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   73,   32,   32,

       32,   32,   32,   32,   32,   32,   76,   28,   23,   28,
       71,   76,   27,   72,   70,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   28,   34,   36,   76,   76,   76,   76,   76,
       76,   15,   16,   75,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   76,   13,   15,   13,   13,   13,   13,   13,
       77,   21,   22,   77,   20,   77,   73,   74,   72,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   73,   34,   36,    0,    0,    0,    0,   34,    0,
        0,    0,    0,    0,    0,    0,   39,    6,    5,    0,
        0,    2,    3,    2,    0,    2,    2,    2,    2,    9,
        9,   10,    9,    9,    9,    0,   11,    0,   12,   31,
        0,   31,   73,   33,    0,    0,   33,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,    0,
       30,   31,   73,   31,   34,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   26,    0,   26,   28,   23,   28,
        0,   23,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,    0,   25,    0,   26,   28,   26,
       34,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       15,   16,    0,    0,    0,   16,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,    0,
       14,   13,   15,   13,   13,   13,   13,   13,   13,   13,
       19,    0,   19,   21,   22,    0,    0,    0,    0,   18,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    2,    9,    9,    9,    7,    0,    0,   29,
        0,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   34,   31,   31,   31,
       31,   31,   31,    0,   24,    0,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   34,   34,   26,   26,   26,   26,   26,   26,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
        0,   17,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   35,
        0,    0,    0,    0,    0,    2,    9,    8,    0,    9,
        7,    0,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,    0,    0,   31,
       31,   31,   31,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,    0,    0,
       26,   26,   26,   26,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,    0,    0,    0,    0,    0,    0,   62,    0,
        0,    0,    0,    0,    0,   61,   42,    0,    0,    0,
        0,    0,    0,    0,   51,    0,    0,    0,   38,    0,
        0,    0,    0,    2,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,    0,   31,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,    0,   26,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
        0,    0,    0,   44,   50,    0,    0,   65,   66,   68,
       67,    0,    0,    0,    0,   46,    0,    0,    0,   54,
        0,    0,    0,    0,    0,   41,    1,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   53,   48,   56,    0,
        0,   52,   63,   55,   45,    0,    0,    0,   49,    0,
        0,    0,    0,    1,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    0,    0,   58,
        0,   64,   47,    0,    0,    0,    0,   31,   31,   31,
       31,   31,   31,   31,    0,   31,   31,   26,   26,   26,
       26,   26,   26,   26,    0,   26,   26,   13,   13,   13,
       13,   13,   57,    0,   60,    0,   37,    0,    0,   31,
       31,   31,   31,   31,    0,   31,   26,   26,   26,   26,
       26,    0,   26,   13,   13,   59,    0,   40,   31,   31,
       31,   26,   26,   26,   13,    0,   31,   26,   13,    0,

       31,   26,   13,    0,   31,   26,   13,   43,   31,   26,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    6,    1,    7,    1,    1,    1,
        1,    1,    8,    9,   10,    1,    1,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   12,    1,    1,
        1,    1,    1,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       22,   29,   30,   31,   32,   22,   33,   22,   22,   22,
        1,   34,    1,    1,   22,    1,   35,   22,   22,   36,

       37,   38,   22,   39,   40,   22,   22,   41,   22,   22,
       42,   43,   22,   44,   45,   46,   47,   48,   22,   22,
       22,   22,   49,    1,   50,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[51] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    1,    5,    6,
        6,    1,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    1,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1029] =
    {   0,
        0,   49,   53,   60,   64,   66,   49,   68,  116,  165,
      214,  263,  312,  361,   76,  170, 2173, 3341,   71, 3341,
     2151, 3341, 2131, 3341, 2126, 3341, 2112,   55, 2107, 2096,
     2088,   66, 2096,   73,   76, 2084, 2073, 2066,   63, 2076,
     2065, 2041,  409,    0, 3341,   75, 2029, 2025,   68,   64,
     2010, 3341, 3341, 2051,  177, 3341,    0, 3341, 2039,  181,
        0, 2015,  151, 1985, 3341, 2031,   58, 1968,  184, 3341,
     2014,  268,  275, 3341,  366,  373,  378,  383,  388,  392,
      414,  426,  432,  437,  460,  465,  470,  474,  480,  493,
      501,  507,  511,  515,  519,  535,  528,  552,  542,  546,

      562,  556,  566,  577,  583,  589,  269,  602, 3341,  610,
      374,  422, 3341,  590,  379,  614,  623,  624,  625,  629,
      649,  635,  659,  660,  637,  673,  650,  680,  674,  686,
      713,  687,  723,  697,  708,  717,  727,  731,  733,  735,
      743,  750, 3341,  777, 2005, 2002,    0, 1991,  149, 1981,
     1969, 1957,  173, 1960,  165,  182, 1939, 1930, 1925,  169,
     1934, 1927,  279, 1906,  783,  180, 1891, 1893,  241,  162,
      757,  791, 3341,  795, 3341,  799,  102, 3341, 1921, 1904,
     1914, 1895, 1889,  263, 1892, 1890, 1873,  272, 1877, 1862,
     1864, 1864, 1851, 1860, 1864, 1861, 1843, 1857, 1848,   91,

     1823,    0,    0, 3341, 1810, 1804,  165, 1797,    0,  263,
     1778, 1775, 1798,  242, 1766, 1760, 3341, 3341, 3341, 1802,
      290,    0, 3341,    0, 1799,  293, 1785, 1774,  378, 1748,
     1747, 3341,  255, 1741,  803,  361, 3341, 1763, 3341,  808,
      814,  818,  832, 3341,  836,  841, 3341,  845,  853,  858,
      870,  863,  876,  881,  891,  897,  907,  912,  919,  925,
      933,  938,  945,  950,  960,  969,  976,  981,  987,  993,
     3341, 1000,    0, 1012, 1018, 1026, 1035, 1031, 1039, 1043,
     1049, 1057, 1053, 1066,  825,  871, 1076, 1099, 3341, 1103,
     1109, 3341, 1084, 1091, 1114, 1115, 1119, 1127, 1121, 1126,

     1139, 1154, 1140, 1160, 1161, 1166, 1167, 1175, 1173, 1177,
     1188, 1200, 1208, 1214, 1221, 3341, 1226, 1213,    0, 1235,
     1241, 1254, 1262, 1231, 1247, 1266, 1268, 1275, 1280, 1281,
     1301, 3341, 1315, 1319, 1293, 3341,    0, 1754, 1740, 1744,
     1732, 1723,  378, 1730, 1728, 1711,  416, 1716, 1708, 1709,
     1706, 1696, 1706, 1698, 1692, 1665, 1682, 1673,  286, 1326,
     3341, 1652,    0,  416, 1638, 1623, 1640,  395, 1597, 1584,
     1305, 1306, 1339, 1343, 3341, 1348, 1352, 1332, 1356, 3341,
     1360, 1610, 1596, 1579, 1571, 1577, 1554, 1547, 1558, 1553,
     1535, 1538, 1550, 1537, 1515, 1523, 1517, 1507, 1508, 1491,

     1491, 1478, 1472, 1481, 1483, 1461, 1365,  524, 1453, 1464,
     1443, 1438, 1450, 1376, 1381, 1389, 3341, 1393, 1398, 3341,
     1402, 1406, 1410, 1416, 1420, 1433, 1443, 1451, 1455, 1461,
     1467, 1477, 1486, 1482, 1502, 1508, 1513, 1517, 1524, 1533,
     1539, 1544, 1550, 1557, 1564, 1581, 1585, 1590, 1595, 1599,
     1603, 1607, 1616, 1623, 3341, 1425, 1630, 1608, 1548, 1634,
     1643, 1644, 1649, 1650, 1664, 1665, 1654, 1674, 1670, 1680,
     1684, 1459, 1689, 1698, 1707, 1715, 1714, 1720, 1719, 1700,
     1724, 1758, 1766, 1770, 1750, 1774, 1775, 1776, 1780, 1461,
     1436, 1431, 1418, 1427, 1415, 1416, 1421, 1416, 1393, 1391,

     1403, 1390, 1379, 1382, 1375, 1371, 1372, 1353, 1357, 1344,
     1342, 1352, 1323, 1298, 1784,  572, 1291, 1297, 1272, 1259,
     1791, 3341, 1815, 1280, 1279, 1260, 1269, 1257, 1249, 1264,
     1243, 1247, 1239, 1231, 1241, 1237, 1241, 1229, 1202, 1195,
     1200,  420, 1194, 1177, 1194, 1184, 1176, 1151, 1824, 3341,
      741, 1148, 1138, 1148,  766, 1170, 1828, 3341, 1832, 1836,
     3341, 1840, 1845, 1850, 1819, 1854, 1864, 1858, 1868, 1891,
     1895, 1901, 1906, 1911, 1929, 1937, 1946, 1951, 1957, 1962,
     1971, 1985, 1990, 1995, 2006, 2010, 2018, 2028, 2023, 2034,
     2041, 2045, 2051, 2058, 1967, 1880, 2046, 2056, 2062, 1972,

     2068, 2069, 2082, 2093, 2099, 2104, 2105, 2110, 2106, 2123,
     2124, 2130, 2129, 2141, 2148, 2146, 2150, 2154, 2165, 2160,
     2169, 2174, 2176, 2181, 1157, 1143, 1125, 1132, 1121, 1121,
     1134, 1105, 1110, 1111, 1100, 1103, 1092, 1085, 1080, 1060,
     1062, 1068,  423, 1066, 1051, 1063, 1052, 1040, 1003, 1002,
     1006, 1528, 1002, 1009,  996, 1012, 1007,  432, 3341, 1006,
     1001, 1000,  997,  977,  977, 3341, 3341,  968,  962,  976,
      960,  961,  953,  964, 3341,  938,  943,  920, 3341,  924,
      922, 1612,  907,  917, 2193, 2185, 2202, 2212, 2230, 2224,
     2236, 2245, 2249, 2261, 2270, 2276, 2282, 2286, 2292, 2296,

     2303, 2310, 2319, 2327, 2331, 2337, 2352, 2358, 2362, 2368,
     2372, 2376, 2380, 2386, 2393, 2345, 2243, 2191, 2399, 2411,
     2403, 2398, 2417, 2419, 2434, 2436, 2442, 2423, 2453, 2454,
     2458, 2459, 2469, 2464, 2473, 2475, 2499, 2480, 2481, 2495,
     2500, 2508, 2514, 2519, 2521, 2523,  914,  922,  904,  920,
      914,  458,  910,  907,  906,  901,  877,  877,  869,  859,
      876,  857,  861,  845,  852,  830,  829,  810,  796,  796,
      816,  814,  812, 3341, 3341,  787,  788, 3341, 3341, 3341,
     3341,  777,  771,  764,  761, 3341,  742,  740,  746, 3341,
      748,  739,  704,  712,  695, 3341,  734, 2533, 2547, 2556,

     2542, 2560, 2569, 2578, 2573, 2582, 2587, 2593, 2606, 2618,
     2624, 2629, 2633, 2640, 2644, 2649, 2655, 2667, 2671, 2680,
     2688, 2693, 2698, 2675, 2694, 2706, 2583, 2660, 2702, 2710,
     2708, 2714, 2715, 2719, 2733, 2745, 2749, 2750, 2732, 2741,
     2754, 2768, 2758, 2769, 2784, 2775, 2785, 2789, 2791,  722,
      711,  699,  682,  684,  692,  686,  684,  683,  657,  656,
      651,  644,  630,  600,  608,  589, 3341, 3341, 3341,  609,
      585, 3341, 3341, 3341, 3341,  596,  582,  586, 3341,  585,
      574, 1734,  546,  573, 2793, 2802, 2806, 2810, 2824, 2828,
     2837, 2841, 2845, 2849, 2855, 2861, 2865, 2872, 2876, 2883,

     2888, 2889, 2895, 2896, 2900, 2902, 2906, 2907, 2911, 2913,
     2926, 2937, 2941, 2946, 2947, 2953, 2959, 2960,  548,  539,
      547,  535,  530,  506,  497, 1741,  465,  488,  479, 3341,
      480, 3341, 3341,  445, 1916,  431, 1921, 2964, 2968, 2984,
     2999, 3005, 3010, 3015, 3019, 3023, 3027, 2972, 3033, 3011,
     3035, 3041, 3050, 3054, 3058, 3060, 3068,  465,  451,  447,
      419, 1955, 3341,  413, 3341,  366, 3341, 2254,  352, 3076,
     3081, 3093, 3099, 3109, 3114, 3118, 3072, 3119, 3094, 3103,
     3124, 3130, 3136,  386,  337, 3341,  329, 3341, 3140, 3152,
     3157, 3144, 3163, 3164,  258,  243, 3171, 3175,  165,  170,

     3179, 3185,  166,  191, 3198, 3199,   84, 3341, 3210, 3191,
     3341, 3244, 3250, 3256, 3262, 3268, 3274, 3280, 3286, 3292,
     3298, 3304, 3310, 3316, 3322, 3328,   54, 3334
    } ;

static yyconst flex_int16_t yy_def[1029] =
    {   0,
     1011,    1, 1012, 1013, 1014, 1014, 1015, 1015, 1011,    9,
     1011,   11, 1011,   13, 1016, 1016, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1017, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1018, 1011, 1019, 1011, 1011, 1020,
     1019, 1019, 1019, 1021, 1011, 1011, 1021, 1021, 1022, 1011,
     1011, 1023, 1011, 1011, 1011, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023,   43, 1024, 1023,

     1023, 1023, 1023, 1023, 1023, 1023, 1025, 1011, 1011, 1011,
     1025, 1025, 1011, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025,   43, 1026, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1011, 1011, 1011, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1011, 1027,   43, 1027, 1027, 1027, 1027, 1027,
     1028, 1011, 1011, 1011, 1011, 1028, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,

     1011,   43, 1017, 1011, 1011, 1011, 1011, 1011, 1017, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1019, 1011, 1019, 1011, 1019, 1019, 1019, 1019, 1021,
     1021, 1011, 1021, 1021, 1021, 1022, 1011, 1011, 1011, 1023,
     1023, 1023, 1011, 1011, 1011, 1011, 1011, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1011, 1023,   98, 1024, 1024, 1024, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1025, 1025, 1025, 1011, 1011, 1011,
     1011, 1011, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,

     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1011, 1011, 1025,  133, 1026,
     1026, 1026, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1011, 1011, 1011, 1011, 1011, 1011, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1011,
     1011, 1027,  165, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1028, 1028, 1028, 1011, 1011, 1011, 1011, 1011, 1028, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,

     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1019, 1021, 1021, 1021, 1011, 1011, 1023, 1011,
     1011, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1024, 1023, 1023, 1023,
     1023, 1023, 1023, 1025, 1011, 1011, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1026, 1017, 1025, 1025, 1025, 1025, 1025, 1025, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,

     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1028, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1019, 1021, 1011, 1011, 1021,
     1011, 1011, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1025, 1025, 1025, 1025, 1025, 1025, 1025,

     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1019, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,

     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1019, 1023, 1023, 1023,

     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1019, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,

     1023, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1027, 1027, 1027,
     1027, 1027, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1027, 1027, 1011, 1011, 1011, 1023, 1023,
     1023, 1025, 1025, 1025, 1027, 1011, 1023, 1025, 1027, 1011,

     1023, 1025, 1027, 1011, 1023, 1025, 1027, 1011, 1023, 1025,
        0, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011
    } ;

static yyconst flex_int16_t yy_nxt[3392] =
    {   0,
       18,   19,   20,   21,   19,   18,   22,   23,   24,   23,
       25,   26,   18,   27,   28,   29,   18,   30,   18,   18,
       31,   18,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   18,   41,   18,   18,   42,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       43,   70,   71,   43,   44,   53,   54,   55,   56,  337,
       45,   52,   58,   59,   60,   61,   65,   66,   65,   66,
       70,   71,  177,   46,  181,  177,   62,  172,  173,  174,
      172,  182,  197,  186,  175,  190,  187,  210,  192,   47,
      188,   48,  213,   49,  198, 1008,   50,   51,  215,  191,

      216,  191,  233,  177,   63,  193,  177,  234,   67,  176,
       67,  404,  214,   68,  405,   68,   72,   73,   74,   75,
       73,   72,   76,   77,   78,   77,   79,   80,   72,   81,
       82,   83,   72,   84,   72,   72,   85,   72,   86,   87,
       88,   89,   90,   91,   92,   93,   94,   72,   95,   96,
       72,   97,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   98,  228,  340,   98,
       99,  172,  173,  174,  172,  341,  100,  349,  175,  218,
      220,  221,  219,  223,  225,  226,  237,  238,  356,  101,
      345,  350,  364,  346,  351,  229,  369,  347,  370,  215,

      357,  216, 1008,  176, 1007,  102,  350,  103, 1004,  104,
     1003,  352,  105,  106,  107,  108,  109,  110,  108,  107,
      111,  112,  113,  112,  114,  115,  107,  116,  117,  118,
      107,  119,  107,  107,  120,  107,  121,  122,  123,  124,
      125,  126,  127,  128,  129,  107,  130,  131,  107,  132,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  133,  367,  213,  133,  134,  241,
      286,  241,  241,  286,  135,  386,  243,  244,  245,  243,
      360,  361,  360,  360,  391,  368,  214,  136, 1000,  387,
      407,  394,  218,  220,  221,  223,  225,  226,  392,  233,

      999,  242,  287,  137,  234,  138,  512,  139,  246,  513,
      140,  141,   18,  142,  143,  144,  142,   18,   22,   23,
       24,  145,  146,   26,  147,  148,  149,  150,  147,  151,
      147,  147,  152,  147,  153,  154,  155,  156,  157,  158,
      159,  160,  161,  147,  162,  163,  147,  164,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
       18,   18,  165,  237,  238,  165,   44,  245,  247,  245,
      245,  996,   45,  995,  241,  286,  241,  241,  286,  241,
      286,  241,  241,  286,  241,  166,  241,  241,  248,  241,
      494,  241,  241,  241,  228,  241,  241,  986,  248,  246,

      988,  167,  987,  168,  495,  169,  242,  287,  170,   51,
      202,  242,  287,  202,  203,  241,  242,  241,  241,  367,
      204,  242,  229,  286,  986,  242,  286,  241,  499,  241,
      241,  249,  293,  241,  671,  241,  241,  762,  241,  368,
      241,  241,  500,  515,  502,  250,  776,  242,  252,  205,
      672,  206,  251,  763,  985,  287,  207,  208,  965,  242,
      253,  241,  777,  241,  241,  242,  241,  984,  241,  241,
      242,  241,  853,  241,  241,  241,  963,  241,  241,  967,
      966,  241,  255,  241,  241,  256,  259,  258,  854,  257,
      254,  965,  261,  242,  241,  964,  241,  241,  242,  963,

      260,  962,  241,  242,  241,  241,  961,  242,  241,  262,
      241,  241,  241,  242,  241,  241,  241,  933,  241,  241,
      241,  263,  241,  241,  264,  551,  242,  268,  551,  241,
      266,  241,  241,  265,  242,  269,  270,  271,  270,  270,
      242,  932,  267,  275,  242,  275,  275,  241,  242,  241,
      241,  960,  242,  273,  244,  245,  273,  241,  930,  241,
      241,  242,  959,  241,  272,  241,  241,  241,  242,  241,
      241,  958,  552,  551,  277,  276,  551,  884,  241,  242,
      241,  241,  937,  934,  241,  246,  241,  241,  260,  242,
      241,  286,  241,  241,  286,  242,  933,  932,  931,  242,

      293,  280,  278,  288,  289,  290,  288,  930,  929,  279,
      242,  290,  292,  290,  290,  286,  242,  282,  286,  283,
      552,  281,  242,  287,  286,  286,  286,  286,  286,  286,
      286,  294,  928,  286,  927,  291,  286,  284,  286,  286,
      297,  286,  295,  291,  926,  925,  924,  287,  298,  296,
      286,  286,  303,  286,  286,  879,  287,  287,  287,  299,
      286,  286,  287,  286,  286,  308,  300,  923,  287,  301,
      287,  304,  306,  302,  286,  286,  310,  286,  286,  922,
      921,  286,  287,  287,  286,  305,  313,  286,  286,  307,
      286,  286,  287,  287,  875,  874,  309,  873,  321,  311,

      209,  321,  314,  872,  920,  209,  287,  287,  919,  286,
      869,  312,  286,  287,  315,  316,  317,  315,  286,  287,
      287,  286,  868,  318,  319,  289,  290,  319,  286,  323,
      322,  286,  286,  867,  286,  286,  286,  286,  884,  286,
      883,  287,  551,  305,  286,  551,  287,  286,  882,  881,
      287,  331,  332,  333,  331,  880,  291,  326,  372,  879,
      287,  372,  878,  877,  287,  876,  287,  682,  287,  328,
      682,  329,  875,  324,  325,  874,  287,  327,  335,  336,
      335,  335,  873,  334,  363,  332,  333,  363,  872,  552,
      373,  330,  374,  375,  376,  374,  378,  375,  378,  378,

      379,  380,  381,  379,  416,  417,  418,  416,  871,  241,
      334,  241,  241,  870,  683,  241,  334,  241,  241,  419,
      420,  419,  419,  869,  377,  868,  286,  867,  377,  286,
      866,  865,  373,  243,  244,  245,  243,  245,  244,  245,
      245,  242,  421,  271,  421,  421,  241,  242,  241,  241,
      864,  242,  414,  863,  241,  248,  241,  241,  287,  241,
      862,  241,  241,  790,  241,  246,  241,  241,  861,  246,
      423,  241,  286,  241,  241,  286,  422,  241,  242,  241,
      241,  860,  241,  859,  241,  241,  242,  786,  426,  858,
      425,  242,  241,  424,  241,  241,  242,  428,  241,  857,

      241,  241,  427,  242,  287,  856,  855,  429,  241,  242,
      241,  241,  781,  241,  242,  241,  241,  780,  779,  431,
      241,  778,  241,  241,  242,  775,  241,  430,  241,  241,
      242,  774,  852,  432,  241,  433,  241,  241,  851,  241,
      242,  241,  241,  850,  797,  242,  241,  434,  241,  241,
      435,  241,  242,  241,  241,  796,  795,  436,  242,  794,
      793,  241,  439,  241,  241,  438,  242,  792,  791,  437,
      241,  242,  241,  241,  440,  790,  789,  241,  242,  241,
      241,  788,  241,  242,  241,  241,  787,  786,  241,  442,
      241,  241,  785,  242,  270,  271,  270,  270,  784,  443,

      441,  241,  242,  241,  241,  783,  782,  444,  781,  242,
      445,  780,  779,  275,  242,  275,  275,  778,  775,  275,
      242,  275,  275,  774,  773,  772,  242,  447,  420,  447,
      447,  771,  241,  242,  241,  241,  241,  446,  241,  241,
      241,  770,  241,  241,  241,  276,  241,  241,  769,  768,
      241,  276,  241,  241,  241,  451,  241,  241,  241,  276,
      241,  241,  448,  434,  242,  449,  767,  241,  242,  241,
      241,  766,  242,  280,  675,  450,  242,  454,  455,  456,
      454,  765,  242,  764,  761,  286,  242,  760,  286,  759,
      242,  667,  286,  281,  293,  286,  666,  452,  453,  242,

      288,  289,  290,  288,  290,  289,  290,  290,  758,  287,
      317,  316,  317,  317,  457,  286,  286,  287,  286,  286,
      286,  757,  286,  286,  287,  286,  458,  286,  286,  756,
      286,  286,  291,  755,  754,  753,  291,  463,  459,  461,
      286,  286,  464,  286,  286,  659,  460,  287,  287,  752,
      751,  750,  287,  462,  287,  286,  749,  748,  286,  287,
      287,  286,  286,  468,  286,  286,  466,  286,  286,  465,
      286,  286,  287,  287,  286,  747,  286,  286,  286,  286,
      467,  286,  684,  681,  680,  474,  470,  287,  469,  286,
      471,  475,  286,  287,  287,  473,  679,  678,  472,  287,

      287,  286,  677,  676,  286,  675,  287,  674,  287,  286,
      287,  673,  286,  477,  286,  286,  670,  286,  286,  476,
      669,  287,  315,  316,  317,  315,  478,  317,  316,  317,
      317,  668,  286,  287,  479,  286,  321,  480,  209,  321,
      667,  287,  321,  209,  209,  321,  287,  287,  286,  209,
      481,  286,  666,  665,  287,  482,  455,  483,  482,  664,
      663,  662,  209,  286,  287,  485,  286,  286,  322,  286,
      286,  661,  286,  660,  322,  659,  286,  658,  487,  286,
      287,  286,  286,  486,  286,  286,  657,  322,  656,  484,
      469,  655,  326,  654,  335,  287,  335,  335,  653,  287,

      652,  287,  331,  332,  333,  331,  372,  372,  287,  372,
      372,  651,  327,  287,  287,  488,  335,  332,  335,  335,
      360,  361,  360,  360,  515,  489,  334,  360,  361,  360,
      360,  650,  649,  378,  334,  378,  378,  648,  373,  373,
      521,  522,  523,  521,  374,  375,  376,  374,  334,  378,
      375,  378,  378,  381,  380,  381,  381,  379,  380,  381,
      379,  381,  380,  381,  381,  377,  549,  550,  549,  549,
      647,  646,  373,  645,  644,  643,  377,  557,  558,  559,
      557,  377,  560,  561,  562,  560,  642,  641,  640,  373,
      416,  417,  418,  416,  418,  417,  418,  418,  639,  419,

      420,  419,  419,  421,  271,  421,  421,  241,  638,  241,
      241,  241,  637,  241,  241,  636,  635,  241,  563,  241,
      241,  241,  634,  241,  241,  414,  456,  455,  456,  456,
      414,  242,  633,  632,  241,  564,  241,  241,  231,  242,
      631,  630,  565,  242,  241,  629,  241,  241,  628,  242,
      566,  567,  241,  242,  241,  241,  241,  627,  241,  241,
      286,  626,  241,  286,  241,  241,  242,  570,  241,  568,
      241,  241,  609,  625,  556,  569,  242,  571,  241,  555,
      241,  241,  554,  241,  242,  241,  241,  241,  242,  241,
      241,  407,  287,  553,  242,  548,  572,  547,  574,  546,

      242,  545,  573,  241,  575,  241,  241,  544,  543,  241,
      242,  241,  241,  542,  241,  242,  241,  241,  241,  242,
      241,  241,  541,  540,  577,  241,  578,  241,  241,  682,
      539,  576,  682,  579,  241,  242,  241,  241,  580,  538,
      241,  242,  241,  241,  537,  241,  242,  241,  241,  286,
      242,  241,  286,  241,  241,  581,  582,  242,  241,  536,
      241,  241,  535,  534,  533,  241,  242,  241,  241,  532,
      531,  530,  242,  583,  596,  585,  683,  242,  586,  584,
      529,  287,  241,  242,  241,  241,  447,  420,  447,  447,
      242,  588,  550,  588,  588,  528,  589,  242,  241,  589,

      241,  527,  241,  241,  241,  526,  241,  241,  241,  286,
      241,  241,  286,  682,  242,  587,  682,  241,  276,  241,
      241,  525,  524,  242,  454,  455,  456,  454,  242,  520,
      448,  286,  242,  595,  286,  286,  242,  519,  286,  591,
      242,  287,  594,  590,  286,  286,  592,  286,  286,  242,
      286,  286,  518,  286,  286,  286,  287,  593,  286,  517,
      683,  598,  601,  287,  597,  286,  286,  287,  286,  286,
      599,  286,  516,  600,  286,  286,  287,  287,  286,  604,
      602,  286,  287,  287,  286,  286,  605,  287,  286,  514,
      286,  511,  606,  286,  603,  510,  509,  287,  287,  286,

      608,  286,  286,  287,  286,  610,  508,  287,  286,  607,
      507,  286,  611,  287,  617,  286,  286,  287,  286,  286,
      286,  286,  287,  286,  286,  286,  506,  505,  286,  612,
      504,  287,  613,  287,  503,  935,  502,  616,  935,  501,
      287,  498,  935,  614,  497,  935,  496,  287,  287,  615,
      493,  620,  287,  287,  620,  492,  491,  287,  618,  482,
      455,  483,  482,  490,  338,  237,  209,  483,  455,  483,
      483,  619,  550,  549,  619,  286,  286,  286,  286,  286,
      286,  286,  936,  287,  286,  549,  550,  549,  549,  936,
      415,  322,  521,  522,  523,  521,  414,  231,  621,  227,

      413,  223,  484,  287,  218,  412,  411,  287,  287,  287,
      410,  409,  408,  287,  622,  623,  523,  522,  523,  523,
      241,  624,  241,  241,  373,  549,  550,  549,  549,  557,
      558,  559,  557,  559,  558,  559,  559,  560,  561,  562,
      560,  562,  561,  562,  562,  217,  241,  212,  241,  241,
      687,  241,  242,  241,  241,  241,  211,  241,  241,  241,
      406,  241,  241,  685,  686,  241,  403,  241,  241,  241,
      402,  241,  241,  688,  401,  400,  399,  231,  242,  691,
      398,  286,  397,  242,  286,  231,  690,  242,  396,  395,
      394,  242,  241,  689,  241,  241,  241,  242,  241,  241,

      393,  242,  241,  390,  241,  241,  389,  241,  388,  241,
      241,  718,  241,  287,  241,  241,  385,  935,  384,  693,
      935,  692,  968,  694,  242,  968,  383,  382,  242,  696,
      241,  179,  241,  241,  242,  695,  366,  365,  241,  242,
      241,  241,  362,  359,  242,  697,  358,  241,  698,  241,
      241,  355,  241,  354,  241,  241,  968,  699,  241,  968,
      241,  241,  242,  241,  936,  241,  241,  353,  286,  969,
      242,  286,  241,  286,  241,  241,  286,  348,  702,  242,
      700,  717,  701,  722,  242,  703,  241,  344,  241,  241,
      242,  241,  343,  241,  241,  242,  241,  342,  241,  241,

      287,  704,  705,  969,  242,  287,  707,  241,  339,  241,
      241,  241,  338,  241,  241,  338,  239,  235,  242,  241,
      706,  241,  241,  242,  589,  708,  241,  589,  242,  588,
      550,  588,  588,  232,  231,  241,  709,  241,  241,  242,
      227,  223,  241,  242,  241,  241,  241,  286,  241,  241,
      286,  242,  714,  218,  241,  714,  242,  286,  217,  286,
      286,  242,  286,  286,  710,  719,  286,  242,  212,  286,
      286,  590,  286,  286,  242,  211,  716,  201,  242,  287,
      713,  200,  711,  286,  242,  720,  286,  712,  199,  287,
      721,  287,  196,  724,  286,  287,  195,  286,  723,  715,

      286,  287,  287,  286,  725,  286,  286,  286,  286,  286,
      286,  286,  194,  189,  286,  287,  729,  727,  185,  184,
      728,  730,  726,  183,  286,  286,  287,  286,  286,  180,
      286,  286,  287,  286,  286,  731,  179,  287,  287,  287,
      733,  179,  286,  287,  734,  286,  736,  286,  732,  286,
      286,  286,  286,  178,  286,  286,  287,  287,  286,  738,
      735,  620,  287,  287,  620,  739,  619,  550,  549,  619,
      286,  737, 1011,  286,  287,  286,  740,  286,  286,  287,
      286,  287,  745,  287, 1011,  745,  241,  287,  241,  241,
     1011, 1011,  286,  287,  241,  286,  241,  241,  287, 1011,

      741,  799,  287,  241, 1011,  241,  241,  287,  621,  287,
     1011,  744, 1011,  241,  287,  241,  241,  742,  242,  826,
      743, 1011,  798,  801,  287,  241,  242,  241,  241,  746,
      800,  241, 1011,  241,  241,  242, 1011,  241,  803,  241,
      241,  802, 1011, 1011,  286,  242,  241,  286,  241,  241,
      241, 1011,  241,  241,  804,  968,  805,  242,  968,  825,
      806, 1011,  241,  242,  241,  241, 1011, 1011, 1011,  242,
     1011,  241,  807,  241,  241, 1011,  287,  241,  242,  241,
      241,  808,  242,  241, 1011,  241,  241,  241, 1011,  241,
      241, 1011, 1011,  241,  242,  241,  241,  241, 1011,  241,

      241, 1011,  969,  242,  241,  809,  241,  241, 1011,  242,
      810,  241, 1011,  241,  241,  242, 1011, 1011, 1011,  242,
      241,  813,  241,  241, 1011,  242,  811, 1011,  241,  242,
      241,  241,  241,  812,  241,  241,  242, 1011,  241, 1011,
      241,  241, 1011,  242, 1011,  814,  286,  815,  817,  286,
     1011, 1011,  242,  241,  816,  241,  241, 1011, 1011,  241,
      242,  241,  241,  241,  242,  241,  241, 1011, 1011,  241,
      242,  241,  241,  241,  824,  241,  241,  241,  287,  241,
      241,  241, 1011,  241,  241,  242,  819,  714,  818,  241,
      714,  242, 1011, 1011,  241,  242,  241,  241, 1011,  286,

      286,  242,  286,  286,  286,  242, 1011,  286,  820,  242,
      827,  821,  286,  242,  822,  286, 1011,  829,  286,  242,
      286,  286,  828,  286,  286, 1011,  242,  286,  831, 1011,
      832,  287,  287,  830,  715,  286,  287,  286,  286, 1011,
      286,  823, 1011,  286,  287,  833,  286,  834, 1011, 1011,
      287,  836,  287, 1011,  286,  286,  287,  286,  286,  286,
      286, 1011,  286,  286, 1011,  286, 1011,  287,  286,  287,
      286,  835, 1011,  286,  286,  287,  286,  286, 1011,  286,
      839,  286,  286, 1011,  286,  286,  287,  287,  837,  838,
      840,  287,  287,  841, 1011, 1011,  286,  287,  842,  286,

      286,  286,  287,  286,  286, 1011,  287, 1011,  287,  286,
      843,  844,  286,  287,  287,  286, 1011, 1011,  286,  845,
      286, 1011,  745,  286,  286,  745, 1011,  286,  287, 1011,
     1011, 1011,  287,  287,  241, 1011,  241,  241, 1011, 1011,
      846,  287, 1011,  241,  885,  241,  241,  287,  241,  847,
      241,  241,  287,  848,  287, 1011,  287,  241,  886,  241,
      241,  241, 1011,  241,  241, 1011,  242,  887, 1011,  746,
      241,  849,  241,  241,  241,  242,  241,  241, 1011,  241,
      242,  241,  241,  241,  286,  241,  241,  286,  241,  242,
      241,  241, 1011,  242,  241,  888,  241,  241,  889, 1011,

     1011, 1011,  242, 1011, 1011, 1011,  242,  241, 1011,  241,
      241,  242, 1011, 1011, 1011,  242,  287,  890, 1011,  241,
      242,  241,  241, 1011, 1011,  241,  242,  241,  241,  891,
      241, 1011,  241,  241,  241,  892,  241,  241, 1011,  242,
      893,  241, 1011,  241,  241,  241, 1011,  241,  241, 1011,
      241,  242,  241,  241, 1011, 1011,  241,  242,  241,  241,
     1011,  286,  242,  894,  286,  896,  242,  895,  241, 1011,
      241,  241,  241,  242,  241,  241,  286,  242,  897,  286,
     1011,  241,  242,  241,  241, 1011,  902,  898,  242,  241,
     1011,  241,  241,  287,  241,  286,  241,  241,  286,  241,

      242,  241,  241,  286,  242,  903,  286,  286,  287,  286,
      286,  286,  286,  242,  286,  286,  286,  904,  286,  286,
      286,  242, 1011,  286,  900,  899,  242,  287,  905, 1011,
      906,  242, 1011,  286,  286,  287,  286,  286,  901,  287,
     1011,  287,  286,  287,  907,  286,  286,  287,  287,  286,
      286,  286,  287,  286,  286,  286,  908, 1011,  286,  286,
      909,  910,  286, 1011,  911,  287,  287, 1011, 1011,  286,
      286, 1011,  286,  286,  287, 1011,  286,  912,  287,  286,
      914, 1011,  287,  287,  913,  286,  286,  287,  286,  286,
      286,  287,  286,  286,  241,  286,  241,  241, 1011, 1011,

      915,  287,  287,  241, 1011,  241,  241,  241,  287,  241,
      241,  241, 1011,  241,  241, 1011, 1011,  287,  287, 1011,
      916,  917,  287, 1011,  287,  241,  242,  241,  241,  241,
     1011,  241,  241,  938,  918,  242, 1011, 1011,  241,  242,
      241,  241,  241,  242,  241,  241,  241,  939,  241,  241,
      241, 1011,  241,  241, 1011, 1011,  241,  242,  241,  241,
      940,  242,  241, 1011,  241,  241,  241, 1011,  241,  241,
      242,  941,  942,  241,  242,  241,  241,  241,  242,  241,
      241, 1011,  242,  943,  945,  944,  241,  945,  242,  241,
      286,  241,  241,  286,  242, 1011,  286,  286,  242,  286,

      286,  286, 1011,  286,  286,  242,  286,  286,  286,  242,
      286,  286,  286, 1011,  286,  286,  242,  286, 1011, 1011,
     1011,  242,  287,  948,  947,  949, 1011,  286,  287,  287,
      286,  946, 1011,  287, 1011,  287, 1011,  950,  286,  287,
      287,  286,  286, 1011,  287,  286,  287,  286,  286, 1011,
      286,  286,  952,  951,  286, 1011, 1011,  286,  953,  287,
      955,  286,  954,  955,  286,  241, 1011,  241,  241,  241,
      287,  241,  241,  286,  287,  970,  286, 1011, 1011,  287,
      287, 1011, 1011,  977,  971,  241,  287,  241,  241, 1011,
     1011, 1011,  287,  287, 1011, 1011,  957,  242, 1011, 1011,

      241,  242,  241,  241, 1011,  287,  241,  956,  241,  241,
      972,  241,  286,  241,  241,  286,  241,  242,  241,  241,
      945, 1011,  241,  945,  241, 1011,  241,  241,  975, 1011,
      241,  975,  242, 1011,  286, 1011,  286,  286,  242,  286,
     1011, 1011,  286,  242,  287,  286,  979, 1011,  242,  978,
      973,  286,  242, 1011,  286,  286,  242, 1011,  286,  955,
      242,  286,  955, 1011,  286, 1011,  287,  946,  287,  982,
     1011,  974,  982,  286,  287,  976,  286,  241, 1011,  241,
      241, 1011,  241,  287,  241,  241, 1011,  287, 1011,  980,
     1011,  287,  989,  287,  241,  286,  241,  241,  286, 1011,

      241,  287,  241,  241,  286,  287,  956,  286,  981,  242,
      241, 1011,  241,  241,  242,  975,  983,  241,  975,  241,
      286,  241,  241,  286, 1011,  286,  242,  287,  286, 1011,
      992,  982,  242, 1011,  982,  990,  287,  286, 1011,  993,
      286,  241,  242,  241,  241,  286, 1011,  242,  286, 1011,
     1011,  242,  287,  241, 1011,  241,  241,  287,  241, 1011,
      241,  241,  976,  287,  286,  286,  991,  286,  286,  287,
     1011, 1011,  241,  242,  241,  241,  286,  287,  983,  286,
      241, 1011,  241,  241,  994,  242,  286, 1011, 1011,  286,
      242, 1011,  286, 1011,  997,  286,  287,  287, 1011,  241,

      286,  241,  241,  286,  242,  998, 1011, 1011,  287, 1009,
     1010,  241,  242,  241,  241, 1011, 1001, 1005,  287, 1011,
     1002, 1011, 1011, 1006,  287, 1011, 1011, 1011, 1011, 1011,
     1011,  242,  287, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011,  242,   52,   52,   52,   52,   52,   52,
       57,   57,   57,   57,   57,   57,   64,   64,   64,   64,
       64,   64,   69,   69,   69,   69,   69,   69,  171,  171,
      171,  171,  171,  171,  209,  209, 1011,  209,  209,  209,
      219,  219,  219,  219,  219,  219,  222, 1011, 1011, 1011,
      222,  222,  224,  224,  224,  224,  224,  224,  230,  230,

     1011, 1011,  230,  230,  236,  236,  236,  236,  236,  236,
      240,  240, 1011,  240,  240,  240,  274,  274, 1011,  274,
      274,  274,  285,  285, 1011, 1011, 1011,  285,  320,  320,
     1011,  320,  320,  320,  371,  371, 1011, 1011, 1011,  371,
       17, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011

    } ;

static yyconst flex_int16_t yy_chk[3392] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    7,    7,    2,    2,    3,    3,    3,    3, 1027,
        2,    4,    4,    4,    4,    4,    5,    5,    6,    6,
        8,    8,   19,    2,   28,   19,    4,   15,   15,   15,
       15,   28,   39,   32,   15,   34,   32,   46,   35,    2,
       32,    2,   49,    2,   39, 1007,    2,    2,   50,   34,

       50,   46,   67,  177,    4,   35,  177,   67,    5,   15,
        6,  200,   49,    5,  200,    6,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,   10,   63,  149,   10,
       10,   16,   16,   16,   16,  149,   10,  155,   16,   55,
       55,   55,   60,   60,   60,   60,   69,   69,  160,   10,
      153,  155,  166,  153,  156,   63,  170,  153,  170,  207,

      160,  207, 1004,   16, 1003,   10,  166,   10, 1000,   10,
      999,  156,   10,   10,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   12,  169,  214,   12,   12,   72,
      107,   72,   72,  107,   12,  184,   73,   73,   73,   73,
      163,  163,  163,  163,  188,  169,  214,   12,  996,  184,
      210,  210,  221,  221,  221,  226,  226,  226,  188,  233,

      995,   72,  107,   12,  233,   12,  359,   12,   73,  359,
       12,   12,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   14,  236,  236,   14,   14,   75,   75,   75,
       75,  987,   14,  985,   76,  111,   76,   76,  111,   77,
      115,   77,   77,  115,   78,   14,   78,   78,   77,   79,
      343,   79,   79,   80,  229,   80,   80,  984,   79,   75,

      969,   14,  966,   14,  343,   14,   76,  111,   14,   14,
       43,   77,  115,   43,   43,   81,   78,   81,   81,  368,
       43,   79,  229,  112,  964,   80,  112,   82,  347,   82,
       82,   81,  112,   83,  542,   83,   83,  643,   84,  368,
       84,   84,  347,  364,  364,   82,  658,   81,   83,   43,
      542,   43,   82,  643,  961,  112,   43,   43,  960,   82,
       84,   85,  658,   85,   85,   83,   86,  959,   86,   86,
       84,   87,  752,   87,   87,   88,  958,   88,   88,  936,
      934,   89,   86,   89,   89,   86,   88,   87,  752,   86,
       85,  931,   89,   85,   90,  929,   90,   90,   86,  928,

       88,  927,   91,   87,   91,   91,  925,   88,   92,   89,
       92,   92,   93,   89,   93,   93,   94,  924,   94,   94,
       95,   90,   95,   95,   91,  408,   90,   94,  408,   97,
       93,   97,   97,   92,   91,   95,   96,   96,   96,   96,
       92,  923,   93,   99,   93,   99,   99,  100,   94,  100,
      100,  922,   95,   98,   98,   98,   98,  102,  921,  102,
      102,   97,  920,  101,   97,  101,  101,  103,   96,  103,
      103,  919,  408,  516,  101,   99,  516,  884,  104,  100,
      104,  104,  883,  881,  105,   98,  105,  105,  101,  102,
      106,  114,  106,  106,  114,  101,  880,  878,  877,  103,

      114,  104,  102,  108,  108,  108,  108,  876,  871,  103,
      104,  110,  110,  110,  110,  116,  105,  105,  116,  105,
      516,  104,  106,  114,  117,  118,  119,  117,  118,  119,
      120,  116,  870,  120,  866,  108,  122,  106,  125,  122,
      118,  125,  117,  110,  865,  864,  863,  116,  119,  117,
      121,  127,  122,  121,  127,  862,  117,  118,  119,  120,
      123,  124,  120,  123,  124,  125,  121,  861,  122,  121,
      125,  123,  124,  121,  126,  129,  127,  126,  129,  860,
      859,  128,  121,  127,  128,  123,  129,  130,  132,  124,
      130,  132,  123,  124,  858,  857,  126,  856,  134,  128,

      134,  134,  130,  855,  854,  134,  126,  129,  853,  135,
      852,  128,  135,  128,  131,  131,  131,  131,  136,  130,
      132,  136,  851,  132,  133,  133,  133,  133,  137,  136,
      134,  137,  138,  850,  139,  138,  140,  139,  797,  140,
      795,  135,  551,  136,  141,  551,  131,  141,  794,  793,
      136,  142,  142,  142,  142,  792,  133,  139,  171,  791,
      137,  171,  789,  788,  138,  787,  139,  555,  140,  140,
      555,  140,  785,  137,  138,  784,  141,  139,  144,  144,
      144,  144,  783,  142,  165,  165,  165,  165,  782,  551,
      171,  141,  172,  172,  172,  172,  174,  174,  174,  174,

      176,  176,  176,  176,  235,  235,  235,  235,  777,  240,
      144,  240,  240,  776,  555,  241,  165,  241,  241,  242,
      242,  242,  242,  773,  172,  772,  285,  771,  174,  285,
      770,  769,  176,  243,  243,  243,  243,  245,  245,  245,
      245,  240,  246,  246,  246,  246,  248,  241,  248,  248,
      768,  242,  235,  767,  249,  248,  249,  249,  285,  250,
      766,  250,  250,  765,  252,  243,  252,  252,  764,  245,
      250,  251,  286,  251,  251,  286,  249,  253,  248,  253,
      253,  763,  254,  762,  254,  254,  249,  761,  253,  760,
      252,  250,  255,  251,  255,  255,  252,  254,  256,  759,

      256,  256,  253,  251,  286,  758,  757,  255,  257,  253,
      257,  257,  756,  258,  254,  258,  258,  755,  754,  257,
      259,  753,  259,  259,  255,  751,  260,  256,  260,  260,
      256,  750,  749,  257,  261,  258,  261,  261,  748,  262,
      257,  262,  262,  747,  684,  258,  263,  259,  263,  263,
      260,  264,  259,  264,  264,  683,  681,  261,  260,  680,
      678,  265,  264,  265,  265,  263,  261,  677,  676,  262,
      266,  262,  266,  266,  265,  674,  673,  267,  263,  267,
      267,  672,  268,  264,  268,  268,  671,  670,  269,  267,
      269,  269,  669,  265,  270,  270,  270,  270,  668,  268,

      266,  272,  266,  272,  272,  665,  664,  269,  663,  267,
      269,  662,  661,  274,  268,  274,  274,  660,  657,  275,
      269,  275,  275,  656,  655,  654,  270,  276,  276,  276,
      276,  653,  278,  272,  278,  278,  277,  272,  277,  277,
      279,  651,  279,  279,  280,  274,  280,  280,  650,  649,
      281,  275,  281,  281,  283,  280,  283,  283,  282,  276,
      282,  282,  277,  277,  278,  278,  648,  284,  277,  284,
      284,  647,  279,  281,  646,  279,  280,  287,  287,  287,
      287,  645,  281,  644,  642,  293,  283,  641,  293,  640,
      282,  639,  294,  281,  293,  294,  638,  282,  283,  284,

      288,  288,  288,  288,  290,  290,  290,  290,  637,  287,
      291,  291,  291,  291,  294,  295,  296,  293,  295,  296,
      297,  636,  299,  297,  294,  299,  295,  300,  298,  635,
      300,  298,  288,  634,  633,  632,  290,  299,  296,  298,
      301,  303,  300,  301,  303,  631,  297,  295,  296,  630,
      629,  628,  297,  298,  299,  302,  627,  626,  302,  300,
      298,  304,  305,  303,  304,  305,  302,  306,  307,  301,
      306,  307,  301,  303,  309,  625,  308,  309,  310,  308,
      302,  310,  556,  554,  553,  309,  305,  302,  304,  311,
      306,  310,  311,  304,  305,  308,  552,  548,  307,  306,

      307,  312,  547,  546,  312,  545,  309,  544,  308,  313,
      310,  543,  313,  312,  318,  314,  541,  318,  314,  311,
      540,  311,  315,  315,  315,  315,  313,  317,  317,  317,
      317,  539,  324,  312,  314,  324,  320,  314,  320,  320,
      538,  313,  321,  320,  321,  321,  318,  314,  325,  321,
      318,  325,  537,  536,  315,  322,  322,  322,  322,  535,
      534,  533,  322,  323,  324,  324,  323,  326,  320,  327,
      326,  532,  327,  531,  321,  530,  328,  529,  326,  328,
      325,  329,  330,  325,  329,  330,  528,  322,  527,  323,
      323,  526,  327,  525,  335,  323,  335,  335,  524,  326,

      520,  327,  331,  331,  331,  331,  371,  372,  328,  371,
      372,  519,  327,  329,  330,  328,  333,  333,  333,  333,
      334,  334,  334,  334,  518,  329,  335,  360,  360,  360,
      360,  517,  514,  378,  331,  378,  378,  513,  371,  372,
      373,  373,  373,  373,  374,  374,  374,  374,  333,  376,
      376,  376,  376,  377,  377,  377,  377,  379,  379,  379,
      379,  381,  381,  381,  381,  378,  407,  407,  407,  407,
      512,  511,  373,  510,  509,  508,  374,  414,  414,  414,
      414,  376,  415,  415,  415,  415,  507,  506,  505,  379,
      416,  416,  416,  416,  418,  418,  418,  418,  504,  419,

      419,  419,  419,  421,  421,  421,  421,  422,  503,  422,
      422,  423,  502,  423,  423,  501,  500,  424,  422,  424,
      424,  425,  499,  425,  425,  414,  456,  456,  456,  456,
      415,  419,  498,  497,  426,  423,  426,  426,  416,  422,
      496,  495,  424,  423,  427,  494,  427,  427,  493,  424,
      425,  426,  428,  425,  428,  428,  429,  492,  429,  429,
      472,  491,  430,  472,  430,  430,  426,  429,  431,  427,
      431,  431,  472,  490,  413,  428,  427,  430,  432,  412,
      432,  432,  411,  434,  428,  434,  434,  433,  429,  433,
      433,  410,  472,  409,  430,  406,  431,  405,  433,  404,

      431,  403,  432,  435,  434,  435,  435,  402,  401,  436,
      432,  436,  436,  400,  437,  434,  437,  437,  438,  433,
      438,  438,  399,  398,  436,  439,  437,  439,  439,  652,
      397,  435,  652,  438,  440,  435,  440,  440,  439,  396,
      441,  436,  441,  441,  395,  442,  437,  442,  442,  459,
      438,  443,  459,  443,  443,  440,  441,  439,  444,  394,
      444,  444,  393,  392,  391,  445,  440,  445,  445,  390,
      389,  388,  441,  442,  459,  444,  652,  442,  445,  443,
      387,  459,  446,  443,  446,  446,  447,  447,  447,  447,
      444,  448,  448,  448,  448,  386,  449,  445,  449,  449,

      450,  385,  450,  450,  451,  384,  451,  451,  452,  458,
      452,  452,  458,  682,  446,  446,  682,  453,  447,  453,
      453,  383,  382,  448,  454,  454,  454,  454,  449,  370,
      451,  457,  450,  458,  457,  460,  451,  369,  460,  450,
      452,  458,  457,  449,  461,  462,  452,  461,  462,  453,
      463,  464,  367,  463,  464,  467,  454,  453,  467,  366,
      682,  461,  464,  457,  460,  465,  466,  460,  465,  466,
      462,  469,  365,  463,  469,  468,  461,  462,  468,  467,
      465,  470,  463,  464,  470,  471,  468,  467,  471,  362,
      473,  358,  469,  473,  466,  357,  356,  465,  466,  474,

      471,  480,  474,  469,  480,  473,  355,  468,  475,  470,
      354,  475,  474,  470,  480,  477,  476,  471,  477,  476,
      479,  478,  473,  479,  478,  481,  353,  352,  481,  475,
      351,  474,  476,  480,  350,  882,  349,  479,  882,  348,
      475,  346,  926,  477,  345,  926,  344,  477,  476,  478,
      342,  485,  479,  478,  485,  341,  340,  481,  481,  482,
      482,  482,  482,  339,  338,  238,  482,  483,  483,  483,
      483,  484,  484,  484,  484,  486,  487,  488,  486,  487,
      488,  489,  882,  485,  489,  515,  515,  515,  515,  926,
      234,  482,  521,  521,  521,  521,  231,  230,  485,  228,

      227,  225,  487,  484,  220,  216,  215,  486,  487,  488,
      213,  212,  211,  489,  486,  488,  523,  523,  523,  523,
      565,  489,  565,  565,  521,  549,  549,  549,  549,  557,
      557,  557,  557,  559,  559,  559,  559,  560,  560,  560,
      560,  562,  562,  562,  562,  208,  563,  206,  563,  563,
      565,  564,  565,  564,  564,  566,  205,  566,  566,  568,
      201,  568,  568,  563,  564,  567,  199,  567,  567,  569,
      198,  569,  569,  566,  197,  196,  195,  557,  563,  569,
      194,  596,  193,  564,  596,  560,  568,  566,  192,  191,
      190,  568,  570,  567,  570,  570,  571,  567,  571,  571,

      189,  569,  572,  187,  572,  572,  186,  573,  185,  573,
      573,  596,  574,  596,  574,  574,  183,  935,  182,  571,
      935,  570,  937,  572,  570,  937,  181,  180,  571,  574,
      575,  179,  575,  575,  572,  573,  168,  167,  576,  573,
      576,  576,  164,  162,  574,  575,  161,  577,  576,  577,
      577,  159,  578,  158,  578,  578,  962,  577,  579,  962,
      579,  579,  575,  580,  935,  580,  580,  157,  595,  937,
      576,  595,  581,  600,  581,  581,  600,  154,  580,  577,
      578,  595,  579,  600,  578,  581,  582,  152,  582,  582,
      579,  583,  151,  583,  583,  580,  584,  150,  584,  584,

      595,  581,  582,  962,  581,  600,  584,  585,  148,  585,
      585,  586,  146,  586,  586,  145,   71,   68,  582,  587,
      583,  587,  587,  583,  589,  585,  589,  589,  584,  588,
      588,  588,  588,   66,   64,  590,  586,  590,  590,  585,
       62,   59,  591,  586,  591,  591,  592,  597,  592,  592,
      597,  587,  593,   54,  593,  593,  589,  598,   51,  594,
      598,  588,  594,  599,  587,  597,  599,  590,   48,  601,
      602,  589,  601,  602,  591,   47,  594,   42,  592,  597,
      592,   41,  590,  603,  593,  598,  603,  591,   40,  598,
      599,  594,   38,  602,  604,  599,   37,  604,  601,  593,

      605,  601,  602,  605,  603,  606,  607,  609,  606,  607,
      609,  608,   36,   33,  608,  603,  607,  605,   31,   30,
      606,  608,  604,   29,  610,  611,  604,  610,  611,   27,
      613,  612,  605,  613,  612,  609,   25,  606,  607,  609,
      611,   23,  614,  608,  612,  614,  613,  616,  610,  615,
      616,  617,  615,   21,  617,  618,  610,  611,  618,  615,
      612,  620,  613,  612,  620,  616,  619,  619,  619,  619,
      621,  614,   17,  621,  614,  622,  617,  623,  622,  616,
      623,  615,  624,  617,    0,  624,  686,  618,  686,  686,
        0,    0,  718,  620,  685,  718,  685,  685,  619,    0,

      618,  686,  621,  687,    0,  687,  687,  622,  620,  623,
        0,  623,    0,  688,  624,  688,  688,  621,  686,  718,
      622,    0,  685,  688,  718,  690,  685,  690,  690,  624,
      687,  689,    0,  689,  689,  687,    0,  691,  690,  691,
      691,  689,    0,    0,  717,  688,  692,  717,  692,  692,
      693,    0,  693,  693,  690,  968,  692,  690,  968,  717,
      693,    0,  694,  689,  694,  694,    0,    0,    0,  691,
        0,  695,  694,  695,  695,    0,  717,  696,  692,  696,
      696,  695,  693,  697,    0,  697,  697,  698,    0,  698,
      698,    0,    0,  699,  694,  699,  699,  700,    0,  700,

      700,    0,  968,  695,  701,  696,  701,  701,    0,  696,
      697,  702,    0,  702,  702,  697,    0,    0,    0,  698,
      703,  702,  703,  703,    0,  699,  700,    0,  704,  700,
      704,  704,  705,  701,  705,  705,  701,    0,  706,    0,
      706,  706,    0,  702,    0,  703,  716,  704,  706,  716,
        0,    0,  703,  707,  705,  707,  707,    0,    0,  708,
      704,  708,  708,  709,  705,  709,  709,    0,    0,  710,
      706,  710,  710,  711,  716,  711,  711,  712,  716,  712,
      712,  713,    0,  713,  713,  707,  709,  714,  708,  714,
      714,  708,    0,    0,  715,  709,  715,  715,    0,  722,

      719,  710,  722,  719,  721,  711,    0,  721,  710,  712,
      719,  712,  720,  713,  713,  720,    0,  721,  723,  714,
      724,  723,  720,  724,  728,    0,  715,  728,  723,    0,
      724,  722,  719,  721,  714,  725,  721,  726,  725,    0,
      726,  715,    0,  727,  720,  725,  727,  726,    0,    0,
      723,  728,  724,    0,  729,  730,  728,  729,  730,  731,
      732,    0,  731,  732,    0,  734,    0,  725,  734,  726,
      733,  727,    0,  733,  735,  727,  736,  735,    0,  736,
      733,  738,  739,    0,  738,  739,  729,  730,  731,  732,
      734,  731,  732,  735,    0,    0,  740,  734,  736,  740,

      737,  741,  733,  737,  741,    0,  735,    0,  736,  742,
      737,  739,  742,  738,  739,  743,    0,    0,  743,  740,
      744,    0,  745,  744,  746,  745,    0,  746,  740,    0,
        0,    0,  737,  741,  798,    0,  798,  798,    0,    0,
      741,  742,    0,  801,  798,  801,  801,  743,  799,  743,
      799,  799,  744,  744,  745,    0,  746,  800,  799,  800,
      800,  802,    0,  802,  802,    0,  798,  800,    0,  745,
      803,  746,  803,  803,  805,  801,  805,  805,    0,  804,
      799,  804,  804,  806,  827,  806,  806,  827,  807,  800,
      807,  807,    0,  802,  808,  803,  808,  808,  804,    0,

        0,    0,  803,    0,    0,    0,  805,  809,    0,  809,
      809,  804,    0,    0,    0,  806,  827,  809,    0,  810,
      807,  810,  810,    0,    0,  811,  808,  811,  811,  810,
      812,    0,  812,  812,  813,  811,  813,  813,    0,  809,
      812,  814,    0,  814,  814,  815,    0,  815,  815,    0,
      816,  810,  816,  816,    0,    0,  817,  811,  817,  817,
        0,  828,  812,  814,  828,  816,  813,  815,  818,    0,
      818,  818,  819,  814,  819,  819,  824,  815,  818,  824,
        0,  820,  816,  820,  820,    0,  824,  819,  817,  821,
        0,  821,  821,  828,  822,  825,  822,  822,  825,  823,

      818,  823,  823,  829,  819,  825,  829,  826,  824,  831,
      826,  830,  831,  820,  830,  832,  833,  826,  832,  833,
      834,  821,    0,  834,  821,  820,  822,  825,  829,    0,
      830,  823,    0,  839,  835,  829,  839,  835,  822,  826,
        0,  831,  840,  830,  835,  840,  836,  832,  833,  836,
      837,  838,  834,  837,  838,  841,  836,    0,  841,  843,
      837,  838,  843,    0,  840,  839,  835,    0,    0,  842,
      844,    0,  842,  844,  840,    0,  846,  841,  836,  846,
      844,    0,  837,  838,  842,  845,  847,  841,  845,  847,
      848,  843,  849,  848,  885,  849,  885,  885,    0,    0,

      845,  842,  844,  886,    0,  886,  886,  887,  846,  887,
      887,  888,    0,  888,  888,    0,    0,  845,  847,    0,
      846,  847,  848,    0,  849,  889,  885,  889,  889,  890,
        0,  890,  890,  888,  848,  886,    0,    0,  891,  887,
      891,  891,  892,  888,  892,  892,  893,  889,  893,  893,
      894,    0,  894,  894,    0,    0,  895,  889,  895,  895,
      894,  890,  896,    0,  896,  896,  897,    0,  897,  897,
      891,  895,  896,  898,  892,  898,  898,  899,  893,  899,
      899,    0,  894,  898,  900,  899,  900,  900,  895,  901,
      902,  901,  901,  902,  896,    0,  903,  904,  897,  903,

      904,  905,    0,  906,  905,  898,  906,  907,  908,  899,
      907,  908,  909,    0,  910,  909,  900,  910,    0,    0,
        0,  901,  902,  905,  901,  906,    0,  911,  903,  904,
      911,  900,    0,  905,    0,  906,    0,  911,  912,  907,
      908,  912,  913,    0,  909,  913,  910,  914,  915,    0,
      914,  915,  913,  912,  916,    0,    0,  916,  915,  911,
      917,  918,  916,  917,  918,  938,    0,  938,  938,  939,
      912,  939,  939,  948,  913,  938,  948,    0,    0,  914,
      915,    0,    0,  948,  939,  940,  916,  940,  940,    0,
        0,    0,  917,  918,    0,    0,  918,  938,    0,    0,

      941,  939,  941,  941,    0,  948,  942,  917,  942,  942,
      941,  943,  950,  943,  943,  950,  944,  940,  944,  944,
      945,    0,  945,  945,  946,    0,  946,  946,  947,    0,
      947,  947,  941,    0,  949,    0,  951,  949,  942,  951,
        0,    0,  952,  943,  950,  952,  951,    0,  944,  949,
      944,  953,  945,    0,  953,  954,  946,    0,  954,  955,
      947,  956,  955,    0,  956,    0,  949,  945,  951,  957,
        0,  946,  957,  977,  952,  947,  977,  970,    0,  970,
      970,    0,  971,  953,  971,  971,    0,  954,    0,  954,
        0,  955,  971,  956,  972,  979,  972,  972,  979,    0,

      973,  957,  973,  973,  980,  977,  955,  980,  956,  970,
      974,    0,  974,  974,  971,  975,  957,  975,  975,  976,
      978,  976,  976,  978,    0,  981,  972,  979,  981,    0,
      978,  982,  973,    0,  982,  973,  980,  983,    0,  980,
      983,  989,  974,  989,  989,  992,    0,  975,  992,    0,
        0,  976,  978,  990,    0,  990,  990,  981,  991,    0,
      991,  991,  975,  982,  993,  994,  976,  993,  994,  983,
        0,    0,  997,  989,  997,  997,  998,  992,  982,  998,
     1001,    0, 1001, 1001,  983,  990, 1002,    0,    0, 1002,
      991,    0, 1010,    0,  990, 1010,  993,  994,    0, 1005,

     1006, 1005, 1005, 1006,  997,  993,    0,    0,  998, 1005,
     1006, 1009, 1001, 1009, 1009,    0,  997, 1001, 1002,    0,
      998,    0,    0, 1002, 1010,    0,    0,    0,    0,    0,
        0, 1005, 1006,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1009, 1012, 1012, 1012, 1012, 1012, 1012,
     1013, 1013, 1013, 1013, 1013, 1013, 1014, 1014, 1014, 1014,
     1014, 1014, 1015, 1015, 1015, 1015, 1015, 1015, 1016, 1016,
     1016, 1016, 1016, 1016, 1017, 1017,    0, 1017, 1017, 1017,
     1018, 1018, 1018, 1018, 1018, 1018, 1019,    0,    0,    0,
     1019, 1019, 1020, 1020, 1020, 1020, 1020, 1020, 1021, 1021,

        0,    0, 1021, 1021, 1022, 1022, 1022, 1022, 1022, 1022,
     1023, 1023,    0, 1023, 1023, 1023, 1024, 1024,    0, 1024,
     1024, 1024, 1025, 1025,    0,    0,    0, 1025, 1026, 1026,
        0, 1026, 1026, 1026, 1028, 1028,    0,    0,    0, 1028,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[78] =
    {   0,
0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 
    0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#line 2 "levcomp.lpp"

// levcomp.lpp:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
//
// Based loosely on NetHack's lev_comp.l

#include <algorithm>
#include <cstring>
#include <queue>
#include "AppHdr.h"
#include "mapdef.h"
#include "levcomp.tab.h"
#include "stuff.h"

static bool alloced = false;

std::queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(100);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

// Enter a new state, first clearing yylval of junk.
#define CBEGIN(x) do { BEGIN(x); clean(); } while (0)

static void post_proc_text(char *text, bool trim_right, int strip_trailing)
{
    char *s = NULL;
    if (trim_right)
    {
        s = text + strlen(text) - 1;
        while (s >= text && isspace(*s))
            *s-- = 0;
    }
    if (strip_trailing)
    {
        if (!s)
            s = text + strlen(text) - 1;
        while (s >= text && --strip_trailing >= 0)
            *s-- = 0;
    }
}

static char *copy_text(bool trim_right, int strip_trailing)
{
    char *newstring = NULL;
    if ((yylval.text = newstring = strdup(yytext)))
    {
        alloced = true;
        post_proc_text(newstring, trim_right, strip_trailing);
    }
    return (newstring);
}

static void settext(bool trim_right = false, int strip_trailing = 0)
{
    clean();
    char *newstring = copy_text(trim_right, strip_trailing);
    yylval.text = newstring;
}

static void str_check()
{
    if (!yylval.text)
    {
        char *buf = (char *) malloc(1);
        if (buf)
        {
            yylval.text = buf;
            *buf = 0;
            alloced = true;
        }
    }
}

static void cattext(bool trim_right = false, int strip_trailing = 0)
{
    if (!yylval.text)
        settext(trim_right, strip_trailing);
    else
    {
        bool was_alloced = alloced;
        char *newbuf = (char*) malloc(strlen(yylval.text) + strlen(yytext) + 1);
        if (!newbuf)
            end(1, "Out of memory");
        alloced = true;
        strcpy(newbuf, yylval.text);
        strcat(newbuf, yytext);
        post_proc_text(newbuf, trim_right, strip_trailing);
        if (was_alloced)
            free((void*) yylval.text);
        yylval.text = newbuf;
    }
}








#line 1683 "levcomp.lex.cc"

#define INITIAL 0
#define MAPDEF 1
#define LUA 2
#define LUA_ONELINER 3
#define ARGUMENT 4
#define MNAME 5
#define KEYWORDS 6
#define ITEM_LIST 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 133 "levcomp.lpp"


#line 1849 "levcomp.lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1012 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1011 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 135 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 137 "levcomp.lpp"
{
                        settext(true);
                        return MAP_LINE;
                    }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 142 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 143 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 144 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 146 "levcomp.lpp"
;
	YY_BREAK
case 7:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 148 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 8:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 149 "levcomp.lpp"
{
                            settext(true, 2);
                            BEGIN(INITIAL);
                            return LUA_LINE;
                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 154 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 158 "levcomp.lpp"
;
	YY_BREAK
case 11:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 160 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 164 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 166 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 171 "levcomp.lpp"
;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 172 "levcomp.lpp"
;
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 173 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 175 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 179 "levcomp.lpp"
;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 181 "levcomp.lpp"
{
                        cattext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 186 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 187 "levcomp.lpp"
;
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 188 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 190 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 192 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 196 "levcomp.lpp"
;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 198 "levcomp.lpp"
{
                        cattext();
                        return MONSTER_NAME;
                    }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 203 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 204 "levcomp.lpp"
;
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 206 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 210 "levcomp.lpp"
;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 212 "levcomp.lpp"
{
                        cattext();
                    }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 216 "levcomp.lpp"
cattext();
	YY_BREAK
case 33:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 218 "levcomp.lpp"
{ BEGIN(INITIAL); str_check(); return STRING; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 220 "levcomp.lpp"
;
	YY_BREAK
case 35:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 222 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 224 "levcomp.lpp"
{ BEGIN(LUA_ONELINER); return MAIN; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 226 "levcomp.lpp"
{ BEGIN(LUA); return PRELUDE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 227 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 228 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 229 "levcomp.lpp"
{ BEGIN(LUA); return VALIDATE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 230 "levcomp.lpp"
{ BEGIN(LUA); return VETO; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 233 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 234 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEFAULT_DEPTH; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 235 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEPTH; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 236 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return ORIENT; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 237 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 238 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return WELCOME; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 239 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 240 "levcomp.lpp"
return WEIGHT;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 241 "levcomp.lpp"
{ CBEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 242 "levcomp.lpp"
{ CBEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 243 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLAGS; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 244 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return BFLAGS; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 245 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SUBST; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 246 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return NSUBST; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 247 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return COLOUR; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 248 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return FLOORCOL; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 249 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return ROCKCOL; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 250 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return FLOORTILE; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 251 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return ROCKTILE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 252 "levcomp.lpp"
{ CBEGIN(MNAME); return MONS; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 253 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 254 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return MARKER; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 255 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SHUFFLE; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 257 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KFEAT; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 258 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KITEM; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 259 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMONS; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 260 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMASK; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 262 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 264 "levcomp.lpp"
return COLON;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 266 "levcomp.lpp"
return PERC;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 268 "levcomp.lpp"
{
                        clean();
                        yylval.i = atoi(yytext);
                        return INTEGER;
                    }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 274 "levcomp.lpp"
;
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 275 "levcomp.lpp"
;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 276 "levcomp.lpp"
;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 277 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 279 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 2388 "levcomp.lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MAPDEF):
case YY_STATE_EOF(LUA):
case YY_STATE_EOF(LUA_ONELINER):
case YY_STATE_EOF(ARGUMENT):
case YY_STATE_EOF(MNAME):
case YY_STATE_EOF(KEYWORDS):
case YY_STATE_EOF(ITEM_LIST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1012 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1012 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1011);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 279 "levcomp.lpp"



int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}

