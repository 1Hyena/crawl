#line 2 "levcomp.lex.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvs/root/flex/flex/skel.c,v 1.2 2004/05/07 00:28:17 jkh Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 70
#define YY_END_OF_BUFFER 71
static yyconst short int yy_acclist[3193] =
    {   0,
        3,    3,   71,   69,   70,   63,   69,   70,   64,   70,
       69,   70,   67,   69,   70,   65,   69,   70,   66,   69,
       70,   61,   69,   70,   60,   69,   70,   62,   69,   70,
       69,   70,   69,   70,   69,   70,   69,   70,   69,   70,
       69,   70,   69,   70,   69,   70,   69,   70,   69,   70,
       69,   70,   69,   70,   69,   70,   69,   70,   69,   70,
       69,   70,   69,   70,   69,   70,   69,   70,   69,   70,
       69,   70,   69,   70,   63,   69,   70,   18,   69,   70,
       69,   70,   69,   70,   63,   69,   70,    3,   69,   70,
        3,   65,   69,   70,    3,   66,   69,   70,    3,   60,

       69,   70,    3,   62,   69,   70,    3,   69,   70,    3,
       69,   70,    3,   69,   70,    3,   69,   70,    3,   69,
       70,    3,   69,   70,    3,   69,   70,    3,   69,   70,
        3,   69,   70,    3,   69,   70,    3,   69,   70,    3,
       69,   70,    3,   69,   70,    3,   69,   70,    3,   69,
       70,    3,   69,   70,    3,   69,   70,    3,   69,   70,
        3,   69,   70,    3,   69,   70,    3,   69,   70,    3,
       69,   70,   63,   69,   70,    3,   18,   69,   70,    3,
       69,   70,    3,   69,   70,    3,   69,   70,   69,   70,
       17,   64,   70,   69,   70,   67,   69,   70,   65,   69,

       70,   66,   69,   70,   61,   69,   70,   60,   69,   70,
       62,   69,   70,   69,   70,   69,   70,   69,   70,   69,
       70,   69,   70,   69,   70,   69,   70,   69,   70,   69,
       70,   69,   70,   69,   70,   69,   70,   69,   70,   69,
       70,   69,   70,   69,   70,   69,   70,   69,   70,   69,
       70,   69,   70,   69,   70,   69,   70,   18,   69,   70,
       69,   70,   69,   70,   69,   70,   15,   63,   69,   70,
       12,   64,   70,   15,   69,   70,   67,   69,   70,   65,
       69,   70,   66,   69,   70,   14,   61,   69,   70,   60,
       69,   70,   62,   69,   70,   69,   70,   69,   70,   69,

       70,   69,   70,   69,   70,   69,   70,   69,   70,   69,
       70,   69,   70,   69,   70,   69,   70,   69,   70,   69,
       70,   69,   70,   69,   70,   69,   70,   69,   70,   69,
       70,   69,   70,   69,   70,   69,   70,   69,   70,   15,
       63,   69,   70,   18,   69,   70,   69,   70,   69,   70,
        6,   63,   69,   70,    7,   64,   70,   69,   70,    5,
       60,   69,   70,    5,   62,   69,   70,    5,   69,   70,
        5,   69,   70,    5,   69,   70,    5,   69,   70,    5,
       69,   70,    5,   69,   70,    5,   69,   70,    5,   69,
       70,    5,   69,   70,    5,   69,   70,    5,   69,   70,

        5,   69,   70,    5,   69,   70,    5,   69,   70,    5,
       69,   70,    5,   69,   70,    5,   69,   70,    5,   69,
       70,    5,   69,   70,    5,   69,   70,    5,   69,   70,
        5,   69,   70,    6,   63,   69,   70,    5,   69,   70,
        5,   69,   70,   69,   70,   10,   63,   69,   70,   11,
       64,   70,   69,   70,   67,   69,   70,   65,   69,   70,
       66,   69,   70,    9,   61,   69,   70,   60,   69,   70,
       62,   69,   70,   69,   70,   69,   70,   69,   70,   69,
       70,   69,   70,   69,   70,   69,   70,   69,   70,   69,
       70,   69,   70,   69,   70,   69,   70,   69,   70,   69,

       70,   69,   70,   69,   70,   69,   70,   69,   70,   69,
       70,   69,   70,   69,   70,   69,   70,   10,   63,   69,
       70,   18,   69,   70,   69,   70,   69,   70,   63,   64,
       62,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   63,   18,   18,
       68,   68,   68,    4,    4,   63,    3,    3,   62,    3,
       68,    3,   68,    3,   68,    3,   68,    3,   68,    3,
       68,    3,   68,    3,   68,    3,   68,    3,   68,    3,
       68,    3,   68,    3,   68,    3,   68,    3,   68,    3,

       68,    3,   68,    3,   68,    3,   68,    3,   68,    3,
       68,    3,   68,    3,   68,    3,   68,    3,   68,    3,
       68,    4,   63,    4,   18,   18,    2,   18,    3,   18,
        3,   68,    3,   68,    3,   68,    3,   68,    3,   68,
       16,   17,   64,   16,   62,   16,   68,   16,   68,   16,
       68,   16,   68,   16,   68,   16,   68,   16,   68,   16,
       68,   16,   68,   16,   68,   16,   68,   16,   68,   16,
       68,   16,   68,   16,   68,   16,   68,   16,   68,   16,
       68,   16,   68,   16,   68,   16,   68,   16,   68,   16,
       68,   16,   68,   16,   68,   16,   68,   16,   18,   18,

       16,   68,   16,   68,   16,   68,   15,   63,   12,   15,
       12,   64,   62,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   15,
       63,   18,   68,   68,   68,    6,   63,    7,    7,   64,
        5,    5,   62,    5,   68,    5,   68,    5,   68,    5,
       68,    5,   68,    5,   68,    5,   68,    5,   68,    5,
       68,    5,   68,    5,   68,    5,   68,    5,   68,    5,
       68,    5,   68,    5,   68,    5,   68,    5,   68,    5,
       68,    5,   68,    5,   68,    5,   68,    5,   68,    5,

       68,    5,   68,    5,   68,    6,   63,    5,   68,    5,
       68,    5,   68,   10,   63,   11,   11,   64,   62,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   10,   63,   18,   68,   68,
       68,   68,   68,   68,   68,   68,   39,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   19,   68,    3,   68,    3,   68,    3,
       68,    3,   68,    3,   68,    3,   39,   68,    3,   68,

        3,   68,    3,   68,    3,   68,    3,   68,    3,   68,
        3,   68,    3,   68,    3,   68,    3,   68,    3,   68,
        3,   68,    3,   68,    3,   68,    3,   68,    3,   68,
        3,   68,    3,   68,    3,   68,    3,   68,    3,   68,
        3,   68,    3,   68,    3,   68,    3,   68,    3,   39,
       68,    3,   19,   68,    3,   68,   16,   68,   16,   68,
       16,   68,   16,   68,   16,   68,   16,   39,   68,   16,
       68,   16,   68,   16,   68,   16,   68,   16,   68,   16,
       68,   16,   68,   16,   68,   16,   68,   16,   68,   16,
       68,   16,   68,   16,   68,   16,   68,   16,   68,   16,

       68,   16,   68,   16,   68,   16,   68,   16,   68,   16,
       68,   16,   68,   16,   68,   16,   68,   16,   68,   16,
       19,   68,   13,   13,   62,   13,   68,   13,   68,   13,
       68,   13,   68,   13,   68,   13,   68,   13,   39,   68,
       13,   68,   13,   68,   13,   68,   13,   68,   13,   68,
       13,   68,   13,   68,   13,   68,   13,   68,   13,   68,
       13,   68,   13,   68,   13,   68,   13,   68,   13,   68,
       13,   68,   13,   68,   13,   68,   13,   68,   13,   68,
       13,   68,   13,   68,   13,   68,   13,   68,   13,   68,
       13,   18,   13,   19,   68,   13,   68,   13,   68,   13,

       68,    5,   68,    5,   68,    5,   68,    5,   68,    5,
       68,    5,   39,   68,    5,   68,    5,   68,    5,   68,
        5,   68,    5,   68,    5,   68,    5,   68,    5,   68,
        5,   68,    5,   68,    5,   68,    5,   68,    5,   68,
        5,   68,    5,   68,    5,   68,    5,   68,    5,   68,
        5,   68,    5,   68,    5,   68,    5,   68,    5,   68,
        5,   68,    5,   68,    5,   19,   68,    8,    8,   62,
        8,   68,    8,   68,    8,   68,    8,   68,    8,   68,
        8,   68,    8,   39,   68,    8,   68,    8,   68,    8,
       68,    8,   68,    8,   68,    8,   68,    8,   68,    8,

       68,    8,   68,    8,   68,    8,   68,    8,   68,    8,
       68,    8,   68,    8,   68,    8,   68,    8,   68,    8,
       68,    8,   68,    8,   68,    8,   68,    8,   68,    8,
       68,    8,   68,    8,   68,    8,   18,    8,   19,   68,
        8,   68,    8,   68,    8,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   53,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   54,
       68,    3,   68,    3,   68,    3,   68,    3,   68,    3,
       68,    3,   68,    3,   68,    3,   68,    3,   68,    3,

       68,    3,   68,    3,   68,    3,   68,    3,   68,    3,
       68,    3,   68,    3,   68,    3,   68,    3,   68,    3,
       68,    3,   68,    3,   68,    3,   68,    3,   53,   68,
        3,   68,    3,   68,    3,   68,    3,   68,    3,   68,
        3,   68,    3,   68,    3,   68,    3,   54,   68,    3,
       68,    3,   68,   16,   68,   16,   68,   16,   68,   16,
       68,   16,   68,   16,   68,   16,   68,   16,   68,   16,
       68,   16,   68,   16,   68,   16,   68,   16,   68,   16,
       68,   16,   68,   16,   68,   16,   68,   16,   68,   16,
       68,   16,   68,   16,   68,   16,   68,   16,   68,   16,

       53,   68,   16,   68,   16,   68,   16,   68,   16,   68,
       16,   68,   16,   68,   16,   68,   16,   68,   16,   54,
       68,   13,   68,   13,   68,   13,   68,   13,   68,   13,
       68,   13,   68,   13,   68,   13,   68,   13,   68,   13,
       68,   13,   68,   13,   68,   13,   68,   13,   68,   13,
       68,   13,   68,   13,   68,   13,   68,   13,   68,   13,
       68,   13,   68,   13,   68,   13,   68,   13,   53,   68,
       13,   68,   13,   68,   13,   68,   13,   68,   13,   68,
       13,   68,   13,   68,   13,   68,   13,   54,   68,    5,
       68,    5,   68,    5,   68,    5,   68,    5,   68,    5,

       68,    5,   68,    5,   68,    5,   68,    5,   68,    5,
       68,    5,   68,    5,   68,    5,   68,    5,   68,    5,
       68,    5,   68,    5,   68,    5,   68,    5,   68,    5,
       68,    5,   68,    5,   68,    5,   53,   68,    5,   68,
        5,   68,    5,   68,    5,   68,    5,   68,    5,   68,
        5,   68,    5,   68,    5,   54,   68,    8,   68,    8,
       68,    8,   68,    8,   68,    8,   68,    8,   68,    8,
       68,    8,   68,    8,   68,    8,   68,    8,   68,    8,
       68,    8,   68,    8,   68,    8,   68,    8,   68,    8,
       68,    8,   68,    8,   68,    8,   68,    8,   68,    8,

       68,    8,   68,    8,   53,   68,    8,   68,    8,   68,
        8,   68,    8,   68,    8,   68,    8,   68,    8,   68,
        8,   68,    8,   54,   68,   68,   68,   68,   68,   33,
       68,   68,   68,   68,   68,   30,   38,   68,   29,   68,
       20,   68,   68,   68,   68,   68,   68,   68,   27,   68,
       68,   59,   68,   68,   68,   68,   51,   68,   68,   52,
       68,    3,   68,    3,   68,    3,   68,    3,   68,    3,
       68,    3,   68,    3,   68,    3,   68,    3,   68,    3,
       38,   68,    3,   68,    3,   68,    3,   68,    3,   68,
        3,   68,    3,   68,    3,   68,    3,   68,    3,   68,

        3,   68,    3,   59,   68,    3,   68,    3,   68,    3,
       68,    3,   51,   68,    3,   68,    3,   52,   68,    3,
       68,    3,   68,   16,   68,   16,   68,   16,   68,   16,
       68,   16,   33,   16,   68,   16,   68,   16,   68,   16,
       68,   16,   68,   16,   30,   16,   38,   68,   16,   29,
       16,   68,   16,   20,   16,   68,   16,   68,   16,   68,
       16,   68,   16,   68,   16,   68,   16,   68,   16,   27,
       16,   68,   16,   68,   16,   59,   68,   16,   68,   16,
       68,   16,   68,   16,   51,   68,   16,   68,   16,   52,
       68,   13,   68,   13,   68,   13,   68,   13,   68,   13,

       33,   13,   68,   13,   68,   13,   68,   13,   68,   13,
       68,   13,   30,   13,   38,   68,   13,   29,   13,   68,
       13,   20,   13,   68,   13,   68,   13,   68,   13,   68,
       13,   68,   13,   68,   13,   68,   13,   27,   13,   68,
       13,   68,   13,   59,   68,   13,   68,   13,   68,   13,
       68,   13,   51,   68,   13,   68,   13,   52,   68,    5,
       68,    5,   68,    5,   68,    5,   68,    5,   68,    5,
       68,    5,   68,    5,   68,    5,   68,    5,   38,   68,
        5,   68,    5,   68,    5,   68,    5,   68,    5,   68,
        5,   68,    5,   68,    5,   68,    5,   68,    5,   68,

        5,   59,   68,    5,   68,    5,   68,    5,   68,    5,
       51,   68,    5,   68,    5,   52,   68,    8,   68,    8,
       68,    8,   68,    8,   68,    8,   33,    8,   68,    8,
       68,    8,   68,    8,   68,    8,   68,    8,   30,    8,
       38,   68,    8,   29,    8,   68,    8,   20,    8,   68,
        8,   68,    8,   68,    8,   68,    8,   68,    8,   68,
        8,   68,    8,   27,    8,   68,    8,   68,    8,   59,
       68,    8,   68,    8,   68,    8,   68,    8,   51,   68,
        8,   68,    8,   52,   68,   68,   68,   68,   22,   68,
       68,   68,   26,   68,   68,   68,   24,   68,   68,   68,

       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,    3,   68,    3,   68,    3,   68,    3,   68,
        3,   68,    3,   68,    3,   68,    3,   68,    3,   68,
        3,   68,    3,   68,    3,   68,    3,   68,    3,   68,
        3,   68,    3,   68,    3,   68,    3,   68,    3,   68,
        3,   68,    3,   68,    3,   68,    3,   68,    3,   68,
        1,    3,   68,   16,   68,   16,   68,   16,   68,   16,
       22,   16,   68,   16,   68,   16,   68,   16,   26,   16,
       68,   16,   68,   16,   68,   16,   24,   16,   68,   16,
       68,   16,   68,   16,   68,   16,   68,   16,   68,   16,

       68,   16,   68,   16,   68,   16,   68,   16,   68,   16,
       68,   16,   68,   16,   68,   16,   68,   13,   68,   13,
       68,   13,   68,   13,   22,   13,   68,   13,   68,   13,
       68,   13,   26,   13,   68,   13,   68,   13,   68,   13,
       24,   13,   68,   13,   68,   13,   68,   13,   68,   13,
       68,   13,   68,   13,   68,   13,   68,   13,   68,   13,
       68,   13,   68,   13,   68,   13,   68,   13,   68,   13,
       68,    5,   68,    5,   68,    5,   68,    5,   68,    5,
       68,    5,   68,    5,   68,    5,   68,    5,   68,    5,
       68,    5,   68,    5,   68,    5,   68,    5,   68,    5,

       68,    5,   68,    5,   68,    5,   68,    5,   68,    5,
       68,    5,   68,    5,   68,    5,   68,    5,   68,    8,
       68,    8,   68,    8,   68,    8,   22,    8,   68,    8,
       68,    8,   68,    8,   26,    8,   68,    8,   68,    8,
       68,    8,   24,    8,   68,    8,   68,    8,   68,    8,
       68,    8,   68,    8,   68,    8,   68,    8,   68,    8,
       68,    8,   68,    8,   68,    8,   68,    8,   68,    8,
       68,    8,   68,   34,   68,   25,   32,   68,   68,   68,
       68,   68,   68,   23,   68,   40,   68,   68,   28,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,    3,

       68,    3,   32,   68,    3,   68,    3,   68,    3,   68,
        3,   68,    3,   68,    3,   68,    3,   68,    3,   68,
        3,   68,    3,   68,    3,   68,    3,   68,    3,   68,
        3,   68,    3,   68,    3,   68,    3,   68,    3,   68,
       16,   34,   16,   68,   16,   25,   16,   32,   68,   16,
       68,   16,   68,   16,   68,   16,   68,   16,   68,   16,
       23,   16,   68,   16,   40,   16,   68,   16,   68,   16,
       28,   16,   68,   16,   68,   16,   68,   16,   68,   16,
       68,   16,   68,   16,   68,   16,   68,   16,   68,   16,
       68,   13,   34,   13,   68,   13,   25,   13,   32,   68,

       13,   68,   13,   68,   13,   68,   13,   68,   13,   68,
       13,   23,   13,   68,   13,   40,   13,   68,   13,   68,
       13,   28,   13,   68,   13,   68,   13,   68,   13,   68,
       13,   68,   13,   68,   13,   68,   13,   68,   13,   68,
       13,   68,    5,   68,    5,   32,   68,    5,   68,    5,
       68,    5,   68,    5,   68,    5,   68,    5,   68,    5,
       68,    5,   68,    5,   68,    5,   68,    5,   68,    5,
       68,    5,   68,    5,   68,    5,   68,    5,   68,    5,
       68,    5,   68,    8,   34,    8,   68,    8,   25,    8,
       32,   68,    8,   68,    8,   68,    8,   68,    8,   68,

        8,   68,    8,   23,    8,   68,    8,   40,    8,   68,
        8,   68,    8,   28,    8,   68,    8,   68,    8,   68,
        8,   68,    8,   68,    8,   68,    8,   68,    8,   68,
        8,   68,    8,   68,   68,   68,   68,   68,   68,   44,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,    3,   68,    3,   68,    3,   68,    3,
       68,    3,   68,    3,   44,   68,    3,   68,    3,   68,
        3,   68,    3,    3,   68,    3,   68,    3,   68,    3,
       68,    3,   68,    3,   68,    3,   68,    3,   68,    3,
       68,   16,   68,   16,   68,   16,   68,   16,   68,   16,

       68,   16,   44,   68,   16,   68,   16,   68,   16,   68,
       16,   16,   68,   16,   68,   16,   68,   16,   68,   16,
       68,   16,   68,   16,   68,   16,   68,   16,   68,   13,
       68,   13,   68,   13,   68,   13,   68,   13,   68,   13,
       44,   68,   13,   68,   13,   68,   13,   68,   13,   13,
       68,   13,   68,   13,   68,   13,   68,   13,   68,   13,
       68,   13,   68,   13,   68,   13,   68,    5,   68,    5,
       68,    5,   68,    5,   68,    5,   68,    5,   44,   68,
        5,   68,    5,   68,    5,   68,    5,    5,   68,    5,
       68,    5,   68,    5,   68,    5,   68,    5,   68,    5,

       68,    5,   68,    5,   68,    8,   68,    8,   68,    8,
       68,    8,   68,    8,   68,    8,   44,   68,    8,   68,
        8,   68,    8,   68,    8,    8,   68,    8,   68,    8,
       68,    8,   68,    8,   68,    8,   68,    8,   68,    8,
       68,    8,   68,   68,   68,   68,   43,   68,   68,   68,
       68,   50,   68,   68,   49,   68,   68,   55,   68,   56,
       68,   68,   57,   68,   58,   68,    3,   68,    3,   68,
        3,   68,    3,   68,    3,   68,    3,   68,    3,   68,
        3,    3,   50,   68,    3,   68,    3,   49,   68,    3,
       68,    3,   55,   68,    3,   56,   68,    3,   68,    3,

       57,   68,    3,   58,   68,   16,   68,   16,   68,   16,
       68,   16,   43,   16,   68,   16,   68,   16,   68,   16,
       68,   16,   16,   50,   68,   16,   68,   16,   49,   68,
       16,   68,   16,   55,   68,   16,   56,   68,   16,   68,
       16,   57,   68,   16,   58,   68,   13,   68,   13,   68,
       13,   68,   13,   43,   13,   68,   13,   68,   13,   68,
       13,   68,   13,   13,   50,   68,   13,   68,   13,   49,
       68,   13,   68,   13,   55,   68,   13,   56,   68,   13,
       68,   13,   57,   68,   13,   58,   68,    5,   68,    5,
       68,    5,   68,    5,   68,    5,   68,    5,   68,    5,

       68,    5,    5,   50,   68,    5,   68,    5,   49,   68,
        5,   68,    5,   55,   68,    5,   56,   68,    5,   68,
        5,   57,   68,    5,   58,   68,    8,   68,    8,   68,
        8,   68,    8,   43,    8,   68,    8,   68,    8,   68,
        8,   68,    8,    8,   50,   68,    8,   68,    8,   49,
       68,    8,   68,    8,   55,   68,    8,   56,   68,    8,
       68,    8,   57,   68,    8,   58,   68,   31,   68,   42,
       68,   68,   68,   68,   47,   68,   48,   68,   46,   68,
        3,   68,    3,   68,    3,   68,    3,   68,    3,   68,
        3,    3,   47,   68,    3,   48,   68,    3,   46,   68,

       16,   31,   16,   68,   16,   42,   16,   68,   16,   68,
       16,   68,   16,   68,   16,   16,   47,   68,   16,   48,
       68,   16,   46,   68,   13,   31,   13,   68,   13,   42,
       13,   68,   13,   68,   13,   68,   13,   68,   13,   13,
       47,   68,   13,   48,   68,   13,   46,   68,    5,   68,
        5,   68,    5,   68,    5,   68,    5,   68,    5,    5,
       47,   68,    5,   48,   68,    5,   46,   68,    8,   31,
        8,   68,    8,   42,    8,   68,    8,   68,    8,   68,
        8,   68,    8,    8,   47,   68,    8,   48,   68,    8,
       46,   68,   45,   68,   68,   41,   68,   35,    3,   45,

       68,    3,   68,    3,   68,    3,   16,   45,   68,   16,
       68,   16,   41,   16,   68,   16,   35,   16,   13,   45,
       68,   13,   68,   13,   41,   13,   68,   13,   35,   13,
        5,   45,   68,    5,   68,    5,   68,    5,    8,   45,
       68,    8,   68,    8,   41,    8,   68,    8,   35,    8,
       68,   37,    3,   68,    3,   16,   68,   16,   37,   16,
       13,   68,   13,   37,   13,    5,   68,    5,    8,   68,
        8,   37,    8,   36,    3,   16,   36,   16,   13,   36,
       13,    5,    8,   36,    8,   21,   16,   21,   13,   21,
        8,   21

    } ;

static yyconst short int yy_accept[1675] =
    {   0,
        1,    1,    1,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    4,    6,    9,   11,   13,   16,   19,
       22,   25,   28,   31,   33,   35,   37,   39,   41,   43,
       45,   47,   49,   51,   53,   55,   57,   59,   61,   63,
       65,   67,   69,   71,   73,   75,   78,   81,   83,   85,
       88,   91,   95,   99,  103,  107,  110,  113,  116,  119,
      122,  125,  128,  131,  134,  137,  140,  143,  146,  149,
      152,  155,  158,  161,  164,  167,  170,  173,  176,  180,
      183,  186,  189,  191,  194,  196,  199,  202,  205,  208,
      211,  214,  216,  218,  220,  222,  224,  226,  228,  230,

      232,  234,  236,  238,  240,  242,  244,  246,  248,  250,
      252,  254,  256,  258,  261,  263,  265,  267,  271,  274,
      277,  280,  283,  286,  290,  293,  296,  298,  300,  302,
      304,  306,  308,  310,  312,  314,  316,  318,  320,  322,
      324,  326,  328,  330,  332,  334,  336,  338,  340,  344,
      347,  349,  351,  355,  358,  360,  364,  368,  371,  374,
      377,  380,  383,  386,  389,  392,  395,  398,  401,  404,
      407,  410,  413,  416,  419,  422,  425,  428,  431,  434,
      438,  441,  444,  446,  450,  453,  455,  458,  461,  464,
      468,  471,  474,  476,  478,  480,  482,  484,  486,  488,

      490,  492,  494,  496,  498,  500,  502,  504,  506,  508,
      510,  512,  514,  516,  518,  522,  525,  527,  529,  530,
      531,  532,  533,  534,  535,  536,  537,  538,  539,  540,
      541,  542,  543,  544,  545,  546,  547,  548,  549,  550,
      551,  552,  553,  554,  555,  556,  557,  558,  559,  560,
      561,  562,  563,  564,  565,  567,  568,  570,  572,  574,
      576,  578,  580,  582,  584,  586,  588,  590,  592,  594,
      596,  598,  600,  602,  604,  606,  608,  610,  612,  614,
      616,  618,  620,  622,  624,  626,  627,  628,  629,  631,
      633,  635,  637,  639,  641,  642,  642,  644,  646,  648,

      650,  652,  654,  656,  658,  660,  662,  664,  666,  668,
      670,  672,  674,  676,  678,  680,  682,  684,  686,  688,
      690,  692,  694,  696,  698,  700,  701,  703,  705,  707,
      707,  709,  710,  711,  713,  714,  715,  716,  717,  718,
      719,  720,  721,  722,  723,  724,  725,  726,  727,  728,
      729,  730,  731,  732,  733,  734,  735,  736,  737,  738,
      739,  740,  742,  743,  744,  745,  746,  748,  749,  749,
      751,  752,  754,  756,  758,  760,  762,  764,  766,  768,
      770,  772,  774,  776,  778,  780,  782,  784,  786,  788,
      790,  792,  794,  796,  798,  800,  802,  804,  806,  808,

      810,  812,  814,  814,  816,  817,  817,  819,  820,  821,
      822,  823,  824,  825,  826,  827,  828,  829,  830,  831,
      832,  833,  834,  835,  836,  837,  838,  839,  840,  841,
      842,  843,  844,  845,  846,  848,  849,  850,  851,  852,
      853,  854,  855,  856,  857,  859,  860,  861,  862,  863,
      864,  865,  866,  867,  868,  869,  870,  871,  872,  873,
      874,  875,  876,  877,  878,  879,  880,  881,  882,  883,
      884,  886,  888,  890,  892,  894,  896,  899,  901,  903,
      905,  907,  909,  911,  913,  915,  917,  919,  921,  923,
      925,  927,  929,  931,  933,  935,  937,  939,  941,  943,

      945,  947,  949,  952,  955,  957,  959,  961,  963,  965,
      967,  970,  972,  974,  976,  978,  980,  982,  984,  986,
      988,  990,  992,  994,  996,  998, 1000, 1002, 1004, 1006,
     1008, 1010, 1012, 1014, 1016, 1018, 1020, 1023, 1024, 1026,
     1028, 1030, 1032, 1034, 1036, 1038, 1041, 1043, 1045, 1047,
     1049, 1051, 1053, 1055, 1057, 1059, 1061, 1063, 1065, 1067,
     1069, 1071, 1073, 1075, 1077, 1079, 1081, 1083, 1085, 1087,
     1089, 1091, 1093, 1096, 1098, 1100, 1102, 1104, 1106, 1108,
     1110, 1112, 1115, 1117, 1119, 1121, 1123, 1125, 1127, 1129,
     1131, 1133, 1135, 1137, 1139, 1141, 1143, 1145, 1147, 1149,

     1151, 1153, 1155, 1157, 1159, 1161, 1163, 1165, 1168, 1169,
     1171, 1173, 1175, 1177, 1179, 1181, 1183, 1186, 1188, 1190,
     1192, 1194, 1196, 1198, 1200, 1202, 1204, 1206, 1208, 1210,
     1212, 1214, 1216, 1218, 1220, 1222, 1224, 1226, 1228, 1230,
     1232, 1234, 1236, 1238, 1241, 1243, 1245, 1247, 1248, 1249,
     1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259,
     1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269,
     1270, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280,
     1282, 1284, 1286, 1288, 1290, 1292, 1294, 1296, 1298, 1300,
     1302, 1304, 1306, 1308, 1310, 1312, 1314, 1316, 1318, 1320,

     1322, 1324, 1326, 1328, 1331, 1333, 1335, 1337, 1339, 1341,
     1343, 1345, 1347, 1350, 1352, 1354, 1356, 1358, 1360, 1362,
     1364, 1366, 1368, 1370, 1372, 1374, 1376, 1378, 1380, 1382,
     1384, 1386, 1388, 1390, 1392, 1394, 1396, 1398, 1400, 1403,
     1405, 1407, 1409, 1411, 1413, 1415, 1417, 1419, 1422, 1424,
     1426, 1428, 1430, 1432, 1434, 1436, 1438, 1440, 1442, 1444,
     1446, 1448, 1450, 1452, 1454, 1456, 1458, 1460, 1462, 1464,
     1466, 1468, 1471, 1473, 1475, 1477, 1479, 1481, 1483, 1485,
     1487, 1490, 1492, 1494, 1496, 1498, 1500, 1502, 1504, 1506,
     1508, 1510, 1512, 1514, 1516, 1518, 1520, 1522, 1524, 1526,

     1528, 1530, 1532, 1534, 1536, 1539, 1541, 1543, 1545, 1547,
     1549, 1551, 1553, 1555, 1558, 1560, 1562, 1564, 1566, 1568,
     1570, 1572, 1574, 1576, 1578, 1580, 1582, 1584, 1586, 1588,
     1590, 1592, 1594, 1596, 1598, 1600, 1602, 1604, 1607, 1609,
     1611, 1613, 1615, 1617, 1619, 1621, 1623, 1626, 1627, 1628,
     1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1639,
     1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649,
     1650, 1651, 1652, 1654, 1655, 1656, 1657, 1659, 1660, 1662,
     1664, 1666, 1668, 1670, 1672, 1674, 1676, 1678, 1680, 1683,
     1685, 1687, 1689, 1691, 1693, 1695, 1697, 1699, 1701, 1703,

     1706, 1708, 1710, 1712, 1715, 1717, 1720, 1722, 1724, 1726,
     1728, 1730, 1732, 1734, 1736, 1738, 1740, 1742, 1744, 1746,
     1749, 1751, 1753, 1755, 1757, 1759, 1761, 1763, 1765, 1767,
     1769, 1771, 1773, 1775, 1778, 1780, 1782, 1784, 1787, 1789,
     1792, 1794, 1796, 1798, 1800, 1802, 1804, 1806, 1808, 1810,
     1812, 1814, 1817, 1819, 1821, 1823, 1825, 1827, 1829, 1831,
     1833, 1835, 1837, 1839, 1841, 1843, 1846, 1848, 1850, 1852,
     1855, 1857, 1860, 1862, 1864, 1866, 1868, 1870, 1872, 1874,
     1876, 1878, 1881, 1883, 1885, 1887, 1889, 1891, 1893, 1895,
     1897, 1899, 1901, 1904, 1906, 1908, 1910, 1913, 1915, 1918,

     1920, 1922, 1924, 1926, 1928, 1930, 1932, 1934, 1936, 1938,
     1940, 1943, 1945, 1947, 1949, 1951, 1953, 1955, 1957, 1959,
     1961, 1963, 1965, 1967, 1969, 1972, 1974, 1976, 1978, 1981,
     1983, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994,
     1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
     2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2015,
     2017, 2019, 2021, 2023, 2025, 2027, 2029, 2031, 2033, 2035,
     2037, 2039, 2041, 2043, 2045, 2047, 2049, 2051, 2053, 2055,
     2057, 2059, 2061, 2064, 2066, 2068, 2070, 2072, 2074, 2076,
     2078, 2080, 2082, 2084, 2086, 2088, 2090, 2092, 2094, 2096,

     2098, 2100, 2102, 2104, 2106, 2108, 2110, 2112, 2114, 2116,
     2118, 2120, 2122, 2124, 2126, 2128, 2130, 2132, 2134, 2136,
     2138, 2140, 2142, 2144, 2146, 2148, 2150, 2152, 2154, 2156,
     2158, 2160, 2162, 2164, 2166, 2168, 2170, 2172, 2174, 2176,
     2178, 2180, 2182, 2184, 2186, 2188, 2190, 2192, 2194, 2196,
     2198, 2200, 2202, 2204, 2206, 2208, 2210, 2212, 2214, 2216,
     2218, 2220, 2222, 2224, 2226, 2228, 2230, 2232, 2234, 2236,
     2238, 2240, 2242, 2244, 2246, 2248, 2250, 2252, 2254, 2256,
     2258, 2260, 2262, 2264, 2266, 2268, 2270, 2272, 2274, 2275,
     2276, 2277, 2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286,

     2287, 2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296,
     2297, 2298, 2299, 2300, 2302, 2305, 2307, 2309, 2311, 2313,
     2315, 2317, 2319, 2321, 2323, 2325, 2327, 2329, 2331, 2333,
     2335, 2337, 2339, 2341, 2343, 2345, 2347, 2350, 2352, 2354,
     2356, 2358, 2360, 2362, 2364, 2366, 2368, 2370, 2372, 2374,
     2376, 2378, 2380, 2382, 2384, 2386, 2388, 2390, 2392, 2394,
     2396, 2398, 2401, 2403, 2405, 2407, 2409, 2411, 2413, 2415,
     2417, 2419, 2421, 2423, 2425, 2427, 2429, 2431, 2433, 2435,
     2437, 2439, 2441, 2443, 2445, 2448, 2450, 2452, 2454, 2456,
     2458, 2460, 2462, 2464, 2466, 2468, 2470, 2472, 2474, 2476,

     2478, 2480, 2482, 2484, 2486, 2488, 2490, 2493, 2495, 2497,
     2499, 2501, 2503, 2505, 2507, 2509, 2511, 2513, 2515, 2517,
     2519, 2521, 2523, 2525, 2527, 2529, 2531, 2533, 2535, 2536,
     2537, 2538, 2539, 2540, 2542, 2543, 2544, 2545, 2545, 2546,
     2547, 2548, 2549, 2550, 2551, 2552, 2553, 2554, 2556, 2558,
     2560, 2562, 2564, 2567, 2569, 2571, 2573, 2574, 2576, 2578,
     2580, 2582, 2584, 2586, 2588, 2590, 2592, 2594, 2596, 2598,
     2600, 2602, 2605, 2607, 2609, 2611, 2612, 2614, 2616, 2618,
     2620, 2622, 2624, 2626, 2628, 2630, 2632, 2634, 2636, 2638,
     2640, 2643, 2645, 2647, 2649, 2650, 2652, 2654, 2656, 2658,

     2660, 2662, 2664, 2666, 2668, 2670, 2672, 2674, 2676, 2678,
     2681, 2683, 2685, 2687, 2688, 2690, 2692, 2694, 2696, 2698,
     2700, 2702, 2704, 2706, 2708, 2710, 2712, 2714, 2716, 2719,
     2721, 2723, 2725, 2726, 2728, 2730, 2732, 2734, 2736, 2738,
     2740, 2742, 2744, 2745, 2746, 2747, 2748, 2749, 2750, 2751,
     2752, 2752, 2754, 2755, 2757, 2758, 2760, 2762, 2763, 2765,
     2767, 2769, 2771, 2773, 2775, 2777, 2779, 2781, 2782, 2785,
     2787, 2790, 2792, 2795, 2798, 2800, 2803, 2806, 2808, 2810,
     2812, 2814, 2816, 2818, 2820, 2822, 2823, 2826, 2828, 2831,
     2833, 2836, 2839, 2841, 2844, 2847, 2849, 2851, 2853, 2855,

     2857, 2859, 2861, 2863, 2864, 2867, 2869, 2872, 2874, 2877,
     2880, 2882, 2885, 2888, 2890, 2892, 2894, 2896, 2898, 2900,
     2902, 2903, 2906, 2908, 2911, 2913, 2916, 2919, 2921, 2924,
     2927, 2929, 2931, 2933, 2935, 2937, 2939, 2941, 2943, 2944,
     2947, 2949, 2952, 2954, 2957, 2960, 2962, 2965, 2968, 2969,
     2970, 2971, 2972, 2973, 2974, 2975, 2975, 2977, 2979, 2981,
     2983, 2985, 2987, 2989, 2991, 2992, 2995, 2998, 3001, 3003,
     3005, 3007, 3009, 3011, 3013, 3015, 3016, 3019, 3022, 3025,
     3027, 3029, 3031, 3033, 3035, 3037, 3039, 3040, 3043, 3046,
     3049, 3051, 3053, 3055, 3057, 3059, 3060, 3063, 3066, 3069,

     3071, 3073, 3075, 3077, 3079, 3081, 3083, 3084, 3087, 3090,
     3093, 3095, 3096, 3097, 3098, 3099, 3099, 3102, 3104, 3106,
     3107, 3110, 3112, 3114, 3116, 3118, 3119, 3122, 3124, 3126,
     3128, 3130, 3131, 3134, 3136, 3138, 3139, 3142, 3144, 3146,
     3148, 3150, 3151, 3152, 3153, 3153, 3155, 3156, 3158, 3160,
     3161, 3163, 3165, 3166, 3168, 3169, 3171, 3173, 3174, 3175,
     3175, 3176, 3178, 3179, 3181, 3182, 3183, 3185, 3186, 3187,
     3189, 3191, 3193, 3193
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    8,    8,    8,    1,    9,
       10,    8,    8,   11,   12,    8,    1,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,    1,    8,
        8,    8,    8,    8,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       24,   31,   32,   33,   34,   35,   24,   36,   37,   24,
        8,    1,    8,    8,   38,    1,   39,   24,   40,   41,

       42,   43,   24,   44,   45,   24,   24,   46,   47,   48,
       49,   50,   24,   51,   52,   53,   54,   55,   56,   24,
       24,   24,    8,    8,    8,    8,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[57] =
    {   0,
        1,    1,    2,    3,    1,    1,    4,    4,    4,    4,
        5,    6,    7,    1,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7
    } ;

static yyconst short int yy_base[1698] =
    {   0,
        0,   55,  107,  162,  214,  269,  321,  376,  428,  483,
      535,  590, 4578, 4579,   56, 4579, 4574, 4579, 4579, 4579,
     4579, 4579, 4563,    0, 4544, 4552, 4554,   31, 4546, 4538,
     4551, 4540, 4553, 4536,   37, 4537, 4528, 4549, 4521,   26,
     4516, 4512, 4521, 4510, 4516,   64,    0,   55,   41,   71,
        0,    0,    0,    0, 4544,   71,  163,   79,   87,  170,
      176,  270,  276,  183,  282,  377,  383,  390,  484,  292,
      490,  591,  597,  603,  611,  617,  625,   98,  410,  497,
      505,  661,  195, 4579, 4553,  199,  203,  304,  308,  312,
      514,  713,  727,  143,   73,  389,  267,   44,  256,  137,

      365, 4524,  614,  180,  274,  373,  145,  583,  348,  374,
      242,  477,  480,  526,  472,  626,    0,  656, 4579,  660,
        0,    0,    0, 4579,    0, 4541,  758,  772,  464,  577,
      620,  289,  605,  597,  615,  391, 4522,  650,  643,  370,
      664,  651,  652,  653,  655,  563,  656,  659,  704,  643,
      711,  744,  741, 4579, 4549,    0, 4538, 4538,  685,  680,
      677,  764,  184,  718,  735,   73,  737,  738,  771,  773,
      750,  741,  749,  776,  477,  745,  777,  778,  783,  805,
      789,  787,    0,  817, 4579, 4546,    0,    0,    0, 4579,
        0, 4535,  839,  853,  672,  786,  795,  498,  780,  811,

      803,  835, 4516,  802,  839,  838,  841,  840,  804,  833,
      842,  846,  843,  845,  891,  744,  868,  859,  876, 4579,
     4533,    0, 4530, 4529,  880,  870, 4520,  683, 4523, 4506,
     4512, 4512, 4515, 4522, 4513, 4520,  872, 4507, 4512, 4489,
     4479, 4490, 4480,  864, 4480, 4473, 4474,  902,    0,    0,
     4495, 4509,  853, 4579,  911,    0, 4510,  910,  916,  925,
      934,  940,  953,  960,  971,  984,  990,  996, 1002, 1019,
     1028, 1034, 1045, 1051, 1058, 1073, 1079, 1085, 1091, 1097,
     1103, 1110, 1120,  980,    0,  315, 4579,  423, 1141, 1149,
     1161, 1167, 1177, 1189,  925,  934, 4579, 1011, 4491,  940,

      986, 1106,  989,  883, 1134,  926,  953,  925, 1042,  928,
     1017, 1016, 1041, 1149, 1044, 1093,  943, 1071,  990,  946,
     1103, 1002, 1108, 1129, 1198, 1202, 1046, 1178, 1163, 1148,
     1208, 4579, 1215, 4579, 1219, 1241, 1255, 4506, 1207, 1211,
     1208, 1199, 1215, 1049, 1093, 1218, 1243, 4505, 1253, 4504,
     1223, 1244, 1075, 1239, 1173, 1257, 1258, 1260, 1262, 1220,
     1263, 1281, 1285, 1264, 4503, 1265, 1297, 4579, 4514, 4579,
        0, 4503, 4503, 1291, 1293, 1292, 1301, 1297, 1306, 1304,
     1279, 1313, 1315, 1314, 1316, 1317, 1318, 1326, 1320, 1324,
     1193, 1327, 1332, 1334, 1336, 1337, 1338, 1339, 1354, 1340,

     1348, 1341, 1360, 1373, 4579, 4511, 4579, 1384, 1397, 1411,
     4498, 1407, 1349, 1358, 1266, 1365, 1373, 1386, 1339, 1409,
     4497, 1413, 4496, 1414, 1415, 1375, 1395, 1400, 1354, 1385,
     1418, 1420, 1425, 1426, 1442, 1446, 1440, 4495, 1438, 4481,
     4480, 4492, 4473, 4488, 4477, 4472, 4469, 4480, 4471, 4472,
     4479, 4465, 4477, 4476, 4477, 4465, 4458, 4466, 4457, 4473,
     4456, 4448, 4433, 4436, 4445, 1416, 4430, 4441, 4428, 4427,
        0, 1454, 1465, 1476, 1487, 1493, 1499, 1505, 1515, 1521,
     1531, 1537, 1543, 1549, 1558, 1564, 1577, 1583, 1589, 1595,
     1605, 1617, 1627, 1633, 1639, 1645, 1654, 1661, 1667, 1673,

     1679, 1688, 1694, 1701, 1715, 1461, 1488, 1503, 1504, 1591,
     1427, 4448, 1547, 1548, 1587, 1449, 1544, 1578, 1569, 1600,
     1613, 1687, 1695, 1456, 1625, 1590, 1699, 1668, 1501, 1601,
     1697, 1703, 1686, 1704, 1706, 1707, 4447, 1738, 1744, 4462,
     1650, 1727, 4461, 1729, 1733, 1736, 1737, 1738, 1483, 1741,
     1746, 1750, 1652, 1757, 1759, 1749, 1752,  823, 1760, 1762,
     1766, 1764, 1356, 1768, 1769, 1771, 1772, 1773, 1774, 1775,
     1776, 1795, 4460, 1777, 4459, 1778, 1786, 1789, 1796, 1791,
     1792, 1807, 1782, 1800, 1810, 1808, 1813, 1820, 1823, 1824,
     1826, 1829, 1830, 1832, 1835, 1836, 1837, 1838, 1839, 1840,

     1842, 1844, 1845, 1849, 1678, 1850, 1851, 4461, 1862, 1863,
     4457, 1844, 1856, 4456, 1859, 1858, 1867, 1864, 1865, 1866,
     1870, 1882, 1871, 1873, 1891, 1892, 1897, 1893, 1886, 1898,
     1900, 1901, 1903, 1904, 1907, 1909, 1910, 1911, 1912, 1913,
     1914, 1915, 1934, 4455, 1916, 4454, 1917, 4451, 4450, 4432,
     4443, 4450, 4434, 4425, 4423, 4428, 4428, 4444, 4431, 1920,
     4442, 4427, 4435, 4430, 4426, 4413, 4412, 4420, 4434, 4393,
        0, 4399, 4392, 4397, 4394, 4395, 4397, 4398, 4395,    0,
     1963, 1969, 1975, 1981, 1987, 1998, 2004, 2010, 2021, 2027,
     2035, 2047, 2053, 2062, 2070, 2080, 2093, 2099, 2105, 2111,

     2119, 2125, 2143, 2149, 2155, 2161, 2168, 2174, 2180, 2186,
     2196, 2209, 2224, 2232, 2242, 1920, 1925, 1916, 1926, 1984,
     1930, 1995, 2037, 1909, 4407, 1990, 2020, 2050, 2009, 2063,
     1933, 1969, 2110, 2066, 2107, 2021, 2079, 1971, 4406, 2093,
     2091, 2099, 2035, 2154, 2116, 1932, 2135, 4405, 2157, 2192,
     2176, 2198, 2081, 2009, 2185, 2197, 2196, 2214, 2210, 2211,
     2241, 2243, 2231, 2245, 2247, 2250, 2228, 2233, 2248, 2253,
     2257, 4420, 1613, 2260, 2258, 2263, 2267, 2264, 2265, 2266,
     4419, 2271, 2272, 2275, 2273, 2278, 2274, 2279, 2281, 2285,
     2284, 2286, 2292, 2287, 2309, 2294, 2312, 2313, 2314, 2290,

     2315, 2317, 2318, 2321, 4421, 2322, 2282, 2325, 2327, 2326,
     2330, 2329, 2333, 4420, 2332, 2333, 2328, 2329, 2340, 2337,
     2341, 2342, 2349, 2348, 2344, 2367, 2353, 2346, 2355, 2369,
     2372, 2370, 2374, 2375, 2376, 2383, 2350, 4416, 2377, 2379,
     2384, 2385, 2386, 2391, 2387, 2392, 4415, 4407, 4409, 4401,
     4412, 4579, 4397, 4386, 4396, 4408, 4383, 4579,    0, 4579,
     4401, 4579, 4386, 4404, 4382, 4383, 4398, 4396, 4387, 4579,
     4366, 4361,    0, 4365, 4356, 4363, 2361, 4360, 2366, 2418,
     2434, 2411, 2440, 2448, 2454, 2460, 2470, 2481, 2487, 2493,
     2499, 2506, 2514, 2521, 2527, 2533, 2548, 2554, 2560, 2568,

     2574, 2580, 2586, 2594, 2604, 2613, 2630, 2620, 2443, 2123,
     2383, 2467, 2481, 2519, 2407, 2384, 2496, 2515, 2603, 4375,
     2613, 2420, 2639, 2440, 2534, 2614, 2540, 2521, 2486, 2621,
     2652, 2578, 2603, 4374, 2554, 2595, 2627, 2628, 2428, 2631,
     2646, 2648, 2649, 2651, 2669, 2661, 2662, 2564, 2664, 2665,
     2680, 4389, 2681, 2673, 2688, 2666, 2680, 2676, 2681, 2687,
     2683, 2682, 2704, 2690, 2692, 4388, 2695, 2544, 2698, 2697,
     2700, 2702, 2704, 2706, 2707, 2708, 2709, 2711, 2718, 2715,
     2712, 4390, 2716, 2719, 2720, 2726, 2729, 2734, 2398, 2742,
     2736, 2743, 4389, 2744, 2745, 2747, 2748, 2752, 2753, 2748,

     2752, 2751, 2758, 2773, 2759, 2764, 2754, 2769, 2765, 2783,
     4385, 2789, 2781, 2803, 2782, 2792, 2786, 2795, 2796, 2799,
     2797, 2814, 2803, 2805, 4384, 2807, 2771, 2811, 2812, 2810,
     2816, 2815, 4384, 4364, 4579, 4364, 4368, 4362, 4579, 4376,
     4361, 4377, 4579, 4375, 4375, 4359, 4368, 4372, 4332, 4345,
     4332, 4343, 4330, 4341, 4337, 4329, 4338, 4334, 2827, 2852,
     2866, 2872, 2878, 2884, 2900, 2911, 2917, 2925, 2936, 2944,
     2950, 2956, 2967, 2973, 2979, 2985, 2991, 2997, 3006, 3019,
     3025, 3031, 3037, 2832, 2816, 2807, 2865, 2811, 2817, 2866,
     2898, 2834, 4344, 2875, 2909, 2907, 2916, 2910, 2852, 2941,

     2918, 2897, 2864, 2971, 3019, 2980, 2936, 2959, 2986, 3020,
     3038, 3007, 3039, 3053, 3042, 2969, 3044, 3058, 3050, 3046,
     3064, 3064, 4359, 3066, 3056, 3067, 3069, 3060, 2838, 3072,
     3073, 3074, 3075, 3076, 3077, 3078, 3079, 3083, 3084, 3087,
     3090, 3088, 3092, 3091, 3097, 3093, 3104, 3115, 3118, 3119,
     3120, 3098, 3094, 3099, 3123, 3124, 3125, 3127, 3128, 3129,
     3130, 3130, 3138, 3128, 3144, 3139, 3140, 3141, 3155, 3148,
     3143, 3164, 3178, 4358, 3167, 3155, 3170, 3172, 3144, 3151,
     3161, 3176, 3173, 3177, 3178, 3179, 3180, 3181, 4579, 4353,
     4579,    0, 4338, 4338, 4348, 4339, 4335, 4579, 4332, 4579,

     4339, 4334, 4579, 4351, 4310, 4310, 4307, 4308, 4306, 4305,
     4308, 4303, 4302, 3191, 3197, 3222, 3228, 3235, 3241, 3254,
     3264, 3270, 3280, 3292, 3299, 3305, 3311, 3317, 3323, 3329,
     3335, 3345, 3351, 3209, 3202, 3263, 4322, 3194, 3186, 3238,
     3210, 3226, 3279, 3260, 3344, 3336, 3335, 3367, 3285, 3223,
     3171, 3297, 3195, 3339, 3342, 3274, 3343, 3346, 3374, 3363,
     3382, 4337, 3270, 3370, 3319, 3371, 3373, 3387, 3365, 3388,
     3381, 3386, 3404, 3396, 3389, 3395, 3397, 3398, 3399, 3400,
     3405, 3402, 3403, 3407, 4339, 3409, 3411, 3410, 3415, 3413,
     3422, 3412, 3417, 4338, 3416, 3418, 3240, 3420, 3421, 3423,

     3424, 3425, 3427, 3455, 3443, 3459, 4334, 3433, 3444, 3459,
     3452, 3450, 3481, 3455, 3482, 3470, 3448, 3486, 3478, 3477,
     3479, 3480, 3483, 3484, 3485, 3487, 3486, 3488, 4328, 4328,
     4325, 4331, 4318,    0, 4317, 4313, 4303, 4291, 4278, 4280,
     4283, 4274, 4269, 4262, 4266, 4256, 4255, 3497, 3503, 3511,
     3534, 3542, 3548, 3554, 3562, 3569, 4263, 3575, 3585, 3591,
     3597, 3603, 3609, 3616, 3628, 3635, 3477, 3495, 3544, 3514,
     3622, 4271, 3623, 3496, 3555, 3627, 3589, 3559, 3608, 3565,
     3500, 3536, 3528, 3599, 3620, 3640, 3644, 3643, 3651, 3652,
     4286, 3654, 3642, 3657, 3672, 3655, 3660, 3661, 3667, 3664,

     3668, 3669, 3670, 3671, 3504, 3675, 3677, 3679, 3680, 4275,
     3684, 3683, 3685, 4242, 3687, 3688, 3689, 3692, 3690, 3693,
     3699, 3696, 3703, 3705, 3707, 3712, 3714, 3704, 4266, 3719,
     3721, 3720, 3746, 3717, 3723, 3725, 3727, 3732, 3737, 3739,
     3740, 3742, 4266, 4245, 4260, 4579, 4244, 4229, 4224, 4234,
     4213,    0, 4200,    0, 4198,    0,    0, 4208,    0,    0,
     3751, 3770, 3790, 3798, 3804, 3810, 3816, 4199, 3822, 3833,
     3839, 3845, 3851, 3857, 3863, 3869, 3878, 3750, 4203, 3752,
     3766, 3744, 3755, 3758, 3772, 3878, 4196, 3784, 4185, 3805,
     4181, 4175, 3858, 4174, 4167, 3877, 3878, 3880, 3895, 3884,

     3776, 3887, 3886, 3902, 4180, 3859, 4179, 3890, 4178, 4177,
     3781, 4176, 4175, 3900, 3894, 3903, 3821, 3899, 3904, 3906,
     4147, 4176, 3907, 4170, 3910, 4162, 4158, 3911, 4136, 4132,
     3912, 3909, 3915, 3929, 3918, 3920, 3921, 3924, 3940, 4122,
     3922, 4108, 3928, 4102, 4096, 3934, 4090, 4065, 4579, 4021,
     4579, 3947, 3934, 3837, 3848, 3789,    0,    0,    0, 3955,
     3968, 3976, 3984, 3991, 3724, 3999, 4009, 4015, 3952, 3928,
     3964, 3979, 3958, 3731, 3981, 4024, 3591, 3516, 3508, 4028,
     3982, 4029, 3937, 4021, 3989, 4023, 4037, 3425, 3280, 3193,
     3938, 4020, 4029, 4028, 4032, 2973, 2949, 2889, 2820, 4043,

     4032, 4047, 4035, 4041, 4036, 4043, 4058, 2761, 2631, 2510,
        0, 2168, 4579, 2071, 4579, 1824, 4063, 4069, 4076, 1749,
     1551, 1490, 4087, 4051, 4091, 4097, 1444, 4079, 4101, 4047,
     4102, 4107, 1281, 4085, 4054, 1130, 1118, 4083, 4113, 4105,
     4119, 4120, 1031, 4579,  877, 4119,  611, 4099, 4130, 4134,
     4126, 4140, 4141, 4135,  549, 4137, 4151, 4152, 4579,  368,
      258, 4157, 4161, 4153, 4162,  199, 4166, 4167, 4579, 4175,
     4181, 4182, 4579,   91, 4196, 4203, 4207, 4211, 4218, 4225,
     4232, 4239, 4246, 4253, 4260, 4262, 4264, 4271, 4278, 4285,
     4292, 4299, 4306, 4313, 4320, 4327, 4334

    } ;

static yyconst short int yy_def[1698] =
    {   0,
     1673,    1, 1673,    3, 1673,    5, 1673,    7, 1673,    9,
     1673,   11, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
     1674, 1674, 1674, 1674, 1674, 1673, 1675, 1674, 1674, 1676,
     1677, 1677, 1677, 1677, 1677, 1678, 1678, 1678, 1678, 1678,
     1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678,
     1678, 1678, 1678, 1678, 1678, 1678, 1678, 1676, 1679, 1678,
     1678, 1678, 1680, 1673, 1673, 1680, 1680, 1680, 1680, 1680,
     1680, 1681, 1681,   93,   93,   93,   93,   93,   93,   93,

       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93, 1682,   93,   93, 1683, 1673, 1673, 1673,
     1683, 1683, 1683, 1673, 1683, 1683, 1684, 1684,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128, 1673, 1685,
      128,  128, 1673, 1673, 1673, 1686, 1686, 1687, 1687, 1687,
     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1673,
     1687, 1687, 1688, 1673, 1673, 1673, 1688, 1688, 1688, 1673,
     1688, 1688, 1689, 1689,  194,  194,  194,  194,  194,  194,

      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194, 1673, 1690,  194,  194, 1673, 1673,
     1673, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1673, 1675, 1675,
     1674, 1674, 1674, 1673, 1673, 1677, 1677, 1678, 1678, 1678,
     1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678,
     1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678,
     1678, 1678, 1678, 1673, 1675, 1691, 1673, 1691, 1679, 1678,
     1678, 1678, 1678, 1678, 1680, 1680, 1673, 1680,   93,   93,

       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93, 1682, 1682,   93,   93,   93, 1692,
     1673, 1673, 1673, 1673, 1692, 1693, 1693,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337, 1673, 1694,  337,  337,  337, 1673, 1673, 1673, 1673,
     1686, 1686, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1673, 1687,

     1687, 1687, 1695, 1673, 1673, 1673, 1673, 1695, 1696, 1696,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410, 1673, 1697,  410,  410,  410, 1674,
     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
     1674, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678,
     1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678,
     1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678,

     1678, 1678, 1678, 1678, 1678,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93, 1692, 1692,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337, 1694,  337,  337,  337,  337, 1687, 1687, 1687, 1687,
     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,

     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1695, 1695,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410, 1697,  410,  410,  410,  410, 1674, 1674, 1674,
     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
     1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678,
     1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678,

     1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678,
     1678, 1678, 1678, 1678, 1678,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,

     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
     1687, 1687, 1687, 1687,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410, 1674, 1674, 1674,
     1674, 1673, 1674, 1674, 1674, 1674, 1674, 1673, 1674, 1673,
     1674, 1673, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1673,
     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1678,
     1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678,
     1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678,

     1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678,   93,   93,
       93,   93, 1680,   93,   93,   93,   93,   93, 1680,   93,
     1680,   93, 1680,   93,   93,   93,   93,   93,   93,   93,
     1680,   93,   93,   93,   93,   93,   93,   93,   93,   93,
      337,  337,  337,  337, 1692,  337,  337,  337,  337,  337,
     1692,  337, 1692,  337, 1692,  337,  337,  337,  337,  337,
      337,  337, 1692,  337,  337,  337,  337,  337,  337,  337,
      337,  337, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,  410,

      410,  410,  410, 1695,  410,  410,  410,  410,  410, 1695,
      410, 1695,  410, 1695,  410,  410,  410,  410,  410,  410,
      410, 1695,  410,  410,  410,  410,  410,  410,  410,  410,
      410, 1674, 1674, 1674, 1673, 1674, 1674, 1674, 1673, 1674,
     1674, 1674, 1673, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1678, 1678,
     1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678,
     1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678,
     1678, 1678, 1678,   93,   93,   93, 1680,   93,   93,   93,
     1680,   93,   93,   93, 1680,   93,   93,   93,   93,   93,

       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
      337,  337,  337, 1692,  337,  337,  337, 1692,  337,  337,
      337, 1692,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337, 1687, 1687, 1687,
     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
     1687,  410,  410,  410, 1695,  410,  410,  410, 1695,  410,
      410,  410, 1695,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410, 1673, 1674,
     1673, 1674, 1674, 1674, 1674, 1674, 1674, 1673, 1674, 1673,

     1674, 1674, 1673, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
     1674, 1674, 1674, 1678, 1678, 1678, 1678, 1678, 1678, 1678,
     1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678,
     1678, 1678, 1678, 1680,   93, 1680,   93,   93,   93,   93,
       93,   93, 1680,   93, 1680,   93,   93, 1680,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93, 1692,  337,
     1692,  337,  337,  337,  337,  337,  337, 1692,  337, 1692,
      337,  337, 1692,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,

     1687, 1687, 1687, 1695,  410, 1695,  410,  410,  410,  410,
      410,  410, 1695,  410, 1695,  410,  410, 1695,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410, 1674, 1674,
     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1673, 1674, 1674,
     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1678, 1678, 1678,
     1678, 1678, 1678, 1678, 1678, 1678, 1677, 1678, 1678, 1678,
     1678, 1678, 1678, 1678, 1678, 1678,   93,   93,   93,   93,
       93,   93,   93,   93,   93, 1680,   93,   93,   93,   93,
       93,   93,   93,   93,   93,  337,  337,  337,  337,  337,
      337,  337,  337,  337, 1692,  337,  337,  337,  337,  337,

      337,  337,  337,  337, 1687, 1687, 1687, 1687, 1687, 1687,
     1687, 1687, 1687, 1686, 1687, 1687, 1687, 1687, 1687, 1687,
     1687, 1687, 1687,  410,  410,  410,  410,  410,  410,  410,
      410,  410, 1695,  410,  410,  410,  410,  410,  410,  410,
      410,  410, 1674, 1674, 1674, 1673, 1674, 1674, 1674, 1674,
     1673, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
     1678, 1678, 1678, 1678, 1678, 1678, 1678, 1677, 1678, 1678,
     1678, 1678, 1678, 1678, 1678, 1678, 1678,   93,   93,   93,
     1680,   93,   93,   93,   93, 1680,   93,   93,   93,   93,
       93,   93,   93,   93,   93,  337,  337,  337, 1692,  337,

      337,  337,  337, 1692,  337,  337,  337,  337,  337,  337,
      337,  337,  337, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
     1686, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
      410,  410,  410, 1695,  410,  410,  410,  410, 1695,  410,
      410,  410,  410,  410,  410,  410,  410,  410, 1673, 1674,
     1673, 1674, 1674, 1674, 1674, 1673, 1674, 1674, 1674, 1678,
     1678, 1678, 1678, 1678, 1677, 1678, 1678, 1678, 1680,   93,
     1680,   93,   93,   93,   93, 1680,   93,   93,   93, 1692,
      337, 1692,  337,  337,  337,  337, 1692,  337,  337,  337,
     1687, 1687, 1687, 1687, 1687, 1686, 1687, 1687, 1687, 1695,

      410, 1695,  410,  410,  410,  410, 1695,  410,  410,  410,
     1674, 1674, 1673, 1674, 1673, 1673, 1678, 1678, 1678, 1677,
       93,   93, 1680,   93, 1680, 1680,  337,  337, 1692,  337,
     1692, 1692, 1687, 1687, 1687, 1686,  410,  410, 1695,  410,
     1695, 1695, 1674, 1673, 1673, 1678, 1677,   93, 1680, 1680,
      337, 1692, 1692, 1687, 1686,  410, 1695, 1695, 1673, 1673,
     1677, 1680, 1680, 1692, 1692, 1686, 1695, 1695, 1673, 1680,
     1692, 1695,    0, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673

    } ;

static yyconst short int yy_nxt[4636] =
    {   0,
       14,   15,   16,   17,   15,   18,   14,   14,   19,   20,
       21,   22,   23,   14,   24,   25,   26,   27,   28,   29,
       24,   24,   30,   24,   24,   31,   32,   33,   34,   35,
       36,   37,   38,   24,   24,   24,   24,   24,   24,   24,
       39,   40,   41,   24,   24,   24,   24,   42,   24,   43,
       24,   44,   24,   24,   24,   45,   46,  219,  226,   46,
      219,   47,  234,  235,  241,  248,  227,  252,  248,  251,
      249,  236,  255,  242,  299,  219,  306,  256,  256,  256,
      256,   48,  256,  231,  371,  256,  256,  256,  256,  246,
      256,  302,  253,  256,  256,  256,  256,  222,  256,  284,

      260,  382,  248,  299,  285,  261,   49,   14,   15,   16,
       17,   50,   18,   51,   51,   52,   53,   21,   54,   55,
       14,   56,   57,   58,   59,   60,   61,   56,   56,   62,
       56,   56,   63,   64,   65,   66,   67,   68,   69,   70,
       56,   56,   56,   56,   56,   56,   56,   71,   72,   73,
       56,   56,   56,   56,   74,   56,   75,   56,   76,   56,
       56,   56,   77,   46,  301,  308,   78,  299,   79,  256,
      256,  256,  256,  299,  256,  299,  256,  256,  256,  256,
       80,  256,  256,  256,  256,  256,  317,  256,   81,  256,
      256,  256,  256,  259,  256,  371,  296,  262,  296,  296,

      296,  264,  296,  296,  296,  263,  296,  296,  314,  379,
      299,  267, 1669,   82,   83,   15,   84,   85,   15,   86,
       83,   83,   87,   88,   89,   90,   91,   83,   92,   93,
       94,   95,   96,   97,   92,   92,   98,   92,   92,   99,
      100,  101,  102,  103,  104,  105,  106,   92,   92,   92,
       92,   92,   92,   92,  107,  108,  109,   92,   92,   92,
       92,  110,   92,  111,   92,  112,   92,   92,   92,  113,
       46, 1669,  299,   46,  307,  114,  256,  256,  256,  256,
      322,  256,  256,  256,  256,  256,  299,  256,  256,  256,
      256,  256,  305,  256,  266,  115,  268,  299,  256,  256,

      256,  256,  265,  256,  299,  296,  275,  296,  296,  296,
      315,  296,  296,  296,  342,  296,  296,  287,  288,  336,
      116,  117,  118,  119,  120,  118,  121,  117,  117,  122,
      123,  124,  125,  126,  117,  127,  128,  129,  130,  131,
      132,  127,  127,  133,  127,  127,  134,  135,  136,  137,
      138,  139,  140,  141,  127,  127,  127,  127,  127,  127,
      127,  142,  143,  144,  127,  127,  127,  127,  145,  127,
      146,  127,  147,  127,  127,  127,  148,  149,  299,  309,
      149, 1669,  150,  256,  256,  256,  256,  316,  256,  256,
      256,  256,  256,  320,  256,  299,  256,  256,  256,  256,

      336,  256,  151,  299,  299,  346,  352,  269,  270,  271,
      286,  286,  287,  288,  286,  286,  303,  272,  273,  299,
      286,  336,  321,  286,  304,  287,  288,  152,   14,  153,
      154,  155,  153,   18,   14,   14,   19,   20,   21,  156,
      157,   14,  158,  159,  160,  161,  162,  163,  158,  158,
      164,  158,  158,  165,  166,  167,  168,  169,  170,  171,
      172,  158,  158,  158,  158,  158,  158,  158,  173,  174,
      175,  158,  158,  158,  158,  176,  158,  177,  158,  178,
      158,  158,  158,  179,  180,  338,  327,  180,  371,   47,
      256,  256,  256,  256,  336,  256,  256,  256,  256,  256,

      308,  256,  299,  256,  256,  256,  256,  299,  256,  181,
      299,  256,  256,  256,  256,  296,  256,  296,  296,  291,
      274,  324,  394,  415,  290,  323,  298,  326,  409,  326,
      326,  276,  263,  267,  182,  183,  184,  185,  186,  184,
      187,  183,  183,  188,  189,  190,  191,  192,  183,  193,
      194,  195,  196,  197,  198,  193,  193,  199,  193,  193,
      200,  201,  202,  203,  204,  205,  206,  207,  193,  193,
      193,  193,  193,  193,  193,  208,  209,  210,  193,  193,
      193,  193,  211,  193,  212,  193,  213,  193,  193,  193,
      214,  215, 1666,  336,  215,  339,  216,  256,  256,  256,

      256,  359,  256,  256,  256,  256,  256,  336,  256,  256,
      256,  256,  256,  299,  256,  344,  217,  256,  256,  256,
      256,  318,  256,  256,  256,  256,  256,  336,  256,  277,
      319,  256,  256,  256,  256,  336,  256,  343,  278,  311,
      312,  218,  279,  345,  299,  336,  250,  340,  313,  281,
      336,  280,  328,  250, 1661,  341,  299,  331,  332,  333,
      331,  333,  334,  333,  333,  282,  283,  256,  256,  256,
      256,  351,  256,  336,  323,  348,  349,  329,  353,  292,
      336,  336,  336,  336,  350,  336,  336,  293,  371,  336,
      355,  371,  354,  411,  336,  376,  371,  448,  357,  356,

      361,  375,  409,  358,  360,  362,  332,  333,  362,  282,
      249,  449,  294,  295,  296,  374,  296,  296,  295,  295,
      295,  295,  295,  295,  295,  364,  295,  295,  296,  371,
      296,  296,  295,  295,  295,  295,  295,  295,  295,  345,
      295,  336,  367,  368,  369,  367,  371,  250,  371,  371,
      380,  383,  371,  381,  250,  390,  371,  300,  330,  330,
      371,  371,  330,  330,  330,  330,  330,  330,  384,  330,
      365,  330,  330,  330,  336,  371,  330,  330,  330,  330,
      330,  330,  371,  330,  371,  330,  389,  371,  371,  371,
      391,  377,  360,  395,  371,  366,  385,  386,  371,  378,

      371,  388,  337,  400,  412,  387,  399,  368,  369,  399,
      409,  249,  416,  401,  392,  396,  409,  382,  404,  405,
      406,  404,  413,  393,  398,  409,  397,  421,  422,  417,
      414,  418,  409,  409,  409,  397,  423,  540,  402,  403,
      403,  409,  428,  403,  403,  403,  403,  403,  403,  419,
      403,  429,  403,  403,  403,  426,  766,  403,  403,  403,
      403,  403,  403,  409,  403,  409,  403,  424,  409,  409,
      409,  409,  409,  409,  425,  409,  409,  219,  430,  252,
      219,  427,  437,  410,  432,  438,  434,  445,  458,  409,
      431,  433,  435,  405,  406,  435,  418,  249,  409,  442,

      459,  466,  446,  248,  253,  513,  248,  433,  249,  443,
      439,  444,  219,  299,  467,  219,  256,  256,  256,  256,
     1660,  256,  256,  256,  256,  256,  296,  256,  296,  296,
      472,  256,  256,  256,  256,  296,  256,  296,  296,  473,
      256,  256,  256,  256,  516,  256,  256,  256,  256,  256,
      520,  256,  518,  474,  506,  299,  299,  477,  299,  256,
      256,  256,  256,  475,  256,  476,  256,  256,  256,  256,
      299,  256,  478,  299,  480,  479,  299,  256,  256,  256,
      256,  248,  256,  299,  248,  528,  249,  517,  481,  482,
      256,  256,  256,  256,  531,  256,  256,  256,  256,  256,

      507,  256,  256,  256,  256,  256,  511,  256,  256,  256,
      256,  256,  296,  256,  296,  296,  299,  484,  483,  299,
      299,  512,  485,  298,  486,  256,  256,  256,  256,  530,
      256,  521,  299,  487,  256,  256,  256,  256,  522,  256,
      256,  256,  256,  256, 1659,  256,  299,  299,  489,  534,
      488,  256,  256,  256,  256,  523,  256,  256,  256,  256,
      256,  490,  256,  540,  256,  256,  256,  256,  519,  256,
      526,  299,  299,  491,  299,  537,  299,  492,  493,  256,
      256,  256,  256,  552,  256,  256,  256,  256,  256,  540,
      256,  256,  256,  256,  256,  562,  256,  256,  256,  256,

      256,  299,  256,  256,  256,  256,  256,  540,  256,  256,
      256,  256,  256,  527,  256,  494,  256,  256,  256,  256,
      553,  256,  529,  299,  496,  508,  256,  256,  256,  256,
      495,  256,  611,  299,  498,  509,  299,  510,  299,  497,
      532,  286,  286,  287,  288,  286,  286,  499,  514,  330,
      500,  286,  330,  533,  286,  256,  256,  256,  256,  299,
      256,  535,  515,  501,  299,  524,  503,  256,  256,  256,
      256,  502,  256,  256,  256,  256,  256,  525,  256,  299,
      536,  478, 1655,  256,  256,  256,  256,  540,  256,  328,
      504,  291,  327,  299,  505,  256,  256,  256,  256,  326,

      256,  326,  326,  326,  371,  326,  326,  292,  299,  331,
      332,  333,  331,  549,  329,  293,  333,  332,  333,  333,
      330,  540,  540,  330,  564,  540,  543,  550,  546,  540,
      548,  539,  540,  551,  540,  599,  544,  540,  545,  559,
      294,  538,  330,  547,  554,  330,  538,  538,  538,  538,
      538,  560,  538,  540,  538,  538,  330,  540,  540,  330,
      538,  538,  538,  538,  538,  555,  538,  540,  538,  541,
      561,  540,  540,  570,  540,  557,  540,  540,  540,  540,
      620,  563,  362,  332,  333,  362,  363,  249,  250,  363,
      371,  575,  371,  573,  621,  250,  565,  567,  367,  368,

      369,  367,  371,  371,  371,  577,  566,  578,  371,  569,
      568,  579,  371,  588,  571,  371,  576,  371,  582,  584,
      585,  580,  587,  581,  371,  371,  371,  371,  371,  371,
      592,  371,  594,  583,  586,  371,  591,  371,  371,  593,
      589,  590,  595,  371,  598,  371,  597,  371,  371,  371,
      371,  371,  371,  611,  596,  399,  368,  369,  399,  371,
      249,  403,  400,  611,  403,  625,  617,  401,  611,  608,
      540,  601,  611,  603,  404,  405,  406,  404,  600,  611,
      619,  618,  602,  622,  605,  403,  604,  611,  403,  611,
      607,  606,  402,  636,  771,  633,  610,  609,  403,  611,

      611,  403,  609,  609,  609,  609,  609,  623,  609,  611,
      609,  609,  403,  624,  611,  403,  609,  609,  609,  609,
      609,  611,  609,  611,  609,  612,  614,  611,  611,  611,
      630,  626,  611,  637,  611,  628,  615,  634,  616,  611,
      611,  632,  631,  435,  405,  406,  435,  436,  249,  250,
      436,  635,  611,  721,  611,  638,  250,  299,  540,  674,
      256,  256,  256,  256,  646,  256,  675,  640,  639,  644,
      676,  256,  256,  256,  256,  726,  256,  642,  641,  299,
      734,  681,  256,  256,  256,  256,  299,  256,  716,  647,
      683,  299,  682,  256,  256,  256,  256,  540,  256,  256,

      256,  256,  256,  757,  256,  256,  256,  256,  256,  685,
      256,  256,  256,  256,  256,  717,  256,  718,  299,  684,
     1648,  256,  256,  256,  256,  686,  256,  256,  256,  256,
      256,  299,  256,  299,  299,  687,  719,  256,  256,  256,
      256,  689,  256,  256,  256,  256,  256,  688,  256,  256,
      256,  256,  256,  739,  256,  256,  256,  256,  256,  690,
      256,  692,  727,  691,  256,  256,  256,  256,  724,  256,
      256,  256,  256,  256,  299,  256,  694,  299,  299,  723,
      693,  299,  695,  256,  256,  256,  256,  729,  256,  256,
      256,  256,  256,  696,  256,  256,  256,  256,  256,  299,

      256,  256,  256,  256,  256,  736,  256,  720,  299,  728,
      697,  256,  256,  256,  256,  725,  256,  299,  730,  699,
      299,  299,  698,  256,  256,  256,  256,  540,  256,  731,
      299,  299,  701,  256,  256,  256,  256,  700,  256,  256,
      256,  256,  256,  299,  256,  256,  256,  256,  256,  740,
      256,  256,  256,  256,  256,  299,  256,  735,  702,  965,
      256,  256,  256,  256,  540,  256,  540,  256,  256,  256,
      256,  703,  256,  256,  256,  256,  256,  749,  256,  256,
      256,  256,  256,  761,  256,  256,  256,  256,  256,  371,
      256,  704,  706,  705,  256,  256,  256,  256,  299,  256,

      256,  256,  256,  256,  707,  256,  738,  256,  256,  256,
      256,  708,  256,  711,  732,  709,  299,  299,  812,  710,
      714,  256,  256,  256,  256,  299,  256,  299,  733,  299,
      737,  712,  715,  299,  299,  741,  299,  299,  745,  330,
      713,  540,  330,  540,  746,  330,  742,  540,  330,  753,
      540,  540,  540,  743,  750,  540,  539,  744,  747,  748,
      540,  752,  754,  540,  540,  764,  540,  755,  760,  758,
      756,  540,  759,  540,  540,  762,  540,  763,  540,  765,
      540,  769,  540,  540,  767,  540,  540,  540,  540,  540,
      540,  540,  540,  371,  768,  770,  363,  371,  250,  363,

      371, 1647,  371,  371,  575,  250,  573,  371,  786,  774,
      784,  371,  788,  782,  779,  775,  783,  773,  371,  371,
      772,  371,  776,  785,  371,  778,  777,  780,  781,  576,
      790,  371,  789,  787,  371,  371,  791,  371,  793,  792,
      371,  371,  795,  371,  796,  797,  371,  371,  371,  371,
      371,  371,  802,  371,  794,  371,  371,  798,  611,  800,
      371,  371,  371,  403,  403,  799,  403,  403,  801,  803,
      611,  815,  611,  611,  819,  610, 1645,  804,  611,  611,
      611,  611,  807,  816,  611,  611,  823,  611,  808,  826,
      806,  818,  805,  820,  821,  809,  611,  822,  824,  810,

      611,  811,  813,  814,  827,  611,  611,  611,  825,  828,
      829,  611,  611,  830,  611,  611,  835,  611,  611,  832,
      831,  611,  833,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  834,  860,  836,  436,  909,  250,  436,  299,
      917,  910,  837,  646,  250,  644,  299,  912,  840,  911,
      299,  925,  861,  845,  841,  299,  299,  839,  914,  838,
      299,  842,  299,  299,  844,  843,  846,  847,  647,  256,
      256,  256,  256,  939,  256,  256,  256,  256,  256,  880,
      256,  256,  256,  256,  256,  881,  256,  256,  256,  256,
      256,  926,  256,  256,  256,  256,  256,  913,  256,  299,

      852,  299,  883,  919,  256,  256,  256,  256,  882,  256,
      256,  256,  256,  256,  299,  256,  256,  256,  256,  256,
      299,  256,  923,  540,  932,  299,  884,  256,  256,  256,
      256,  915,  256,  256,  256,  256,  256,  946,  256,  299,
      885,  256,  256,  256,  256,  920,  256,  886,  858,  930,
      299,  299,  887,  256,  256,  256,  256,  888,  256,  256,
      256,  256,  256,  921,  256,  299,  860,  299,  256,  256,
      256,  256,  889,  256,  916,  862,  256,  256,  256,  256,
      299,  256,  922,  936, 1644,  890,  256,  256,  256,  256,
      924,  256,  931,  299,  945,  540,  299,  891,  892,  256,

      256,  256,  256,  928,  256,  256,  256,  256,  256,  299,
      256,  256,  256,  256,  256,  893,  256,  256,  256,  256,
      256,  299,  256,  299,  894,  256,  256,  256,  256,  299,
      256,  256,  256,  256,  256,  927,  256,  299,  870,  933,
      299, 1085,  895,  934,  929,  935,  299,  897,  896,  256,
      256,  256,  256,  299,  256,  256,  256,  256,  256,  938,
      256,  256,  256,  256,  256,  299,  256,  256,  256,  256,
      256,  540,  256,  941,  256,  256,  256,  256,  940,  256,
      256,  256,  256,  256,  299,  256,  256,  256,  256,  256,
      540,  256,  256,  256,  256,  256,  898,  256, 1643,  540,

      937,  899,  256,  256,  256,  256,  540,  256,  942,  943,
      540,  540,  540,  900,  901,  256,  256,  256,  256,  944,
      256,  947,  902,  951,  540,  540,  903,  949,  540,  904,
      256,  256,  256,  256,  948,  256,  952,  905,  256,  256,
      256,  256,  540,  256,  950,  540,  907,  540,  256,  256,
      256,  256,  906,  256,  953,  540,  955,  540,  956,  540,
      884,  540,  540,  957,  540,  960,  963,  540,  908,  958,
      961,  540,  540,  954,  540,  959,  962,  540,  540,  540,
      540,  540,  371,  371,  371,  371,  371,  973,  974,  371,
      371,  852,  371,  371,  976,  371,  371,  371,  371,  858,

      860,  371,  977,  371,  967,  371,  971,  970,  975,  972,
      964,  968,  966,  969,  981,  978,  980,  982,  979,  983,
      371,  984,  862,  371,  371,  371,  371,  988,  371,  371,
      985,  870,  371,  371,  993,  986,  371,  371,  371,  987,
      371,  371,  611,  611,  371,  990,  611,  611, 1000, 1001,
     1003,  611,  989, 1004,  611,  611,  611, 1010,  611, 1014,
      611, 1002,  611,  611,  611, 1005, 1012,  611,  992,  611,
      998,  994,  996,  997,  991,  995,  999, 1006, 1009, 1007,
     1008,  611, 1015,  611,  611, 1013,  611, 1016,  611,  611,
      611,  611, 1011,  611, 1017, 1018, 1022,  611,  611,  611,

      611,  611, 1054, 1023, 1021,  611,  611, 1057, 1086,  371,
     1090, 1019, 1020,  299,  299, 1150, 1055,  256,  256,  256,
      256, 1058,  256, 1024,  256,  256,  256,  256, 1030,  256,
     1026, 1025, 1028, 1027, 1029, 1031, 1061,  299, 1093, 1059,
      256,  256,  256,  256, 1089,  256,  256,  256,  256,  256,
      299,  256, 1060, 1035,  256,  256,  256,  256,  299,  256,
      256,  256,  256,  256, 1084,  256,  256,  256,  256,  256,
      299,  256, 1094,  299, 1108, 1062,  256,  256,  256,  256,
     1087,  256,  296, 1039,  296,  296, 1064,  256,  256,  256,
      256, 1063,  256,  256,  256,  256,  256,  299,  256,  256,

      256,  256,  256, 1099,  256,  256,  256,  256,  256, 1091,
      256, 1066,  256,  256,  256,  256,  299,  256, 1065, 1043,
      256,  256,  256,  256,  611,  256,  299,  256,  256,  256,
      256, 1067,  256,  256,  256,  256,  256, 1098,  256,  256,
      256,  256,  256, 1070,  256,  299, 1088, 1095, 1068,  299,
     1071,  299, 1092, 1069,  256,  256,  256,  256,  540,  256,
      256,  256,  256,  256,  299,  256,  256,  256,  256,  256,
      299,  256, 1097, 1072,  256,  256,  256,  256,  540,  256,
      256,  256,  256,  256,  299,  256,  256,  256,  256,  256,
     1117,  256,  256,  256,  256,  256, 1131,  256, 1103, 1073,

      256,  256,  256,  256,  296,  256,  296,  296,  299, 1074,
      256,  256,  256,  256,  296,  256,  296,  296, 1075,  256,
      256,  256,  256, 1101,  256,  299,  256,  256,  256,  256,
     1077,  256, 1076,  299,  907, 1078,  256,  256,  256,  256,
      296,  256,  296,  296,  299,  611, 1100, 1104, 1096, 1079,
     1080,  299, 1102,  296, 1081,  296,  296,  299,  299, 1083,
      540,  299,  540,  540, 1114,  540, 1112, 1111, 1082, 1106,
      330, 1105, 1109,  330, 1113,  540,  540, 1118,  540,  540,
      540,  330,  330, 1107,  330,  330, 1110,  540, 1115,  330,
      540, 1120,  330, 1122,  540,  540,  540,  540, 1121, 1116,

     1126,  540, 1119, 1125,  540,  330,  540, 1127,  330,  540,
     1123,  540,  540, 1124,  540,  371,  540,  371,  371,  371,
      371, 1035,  371,  371, 1139, 1138,  371,  371, 1039,  371,
      371,  371, 1140, 1043, 1145, 1128, 1141,  371, 1133, 1130,
      371, 1129, 1132, 1136, 1143,  371, 1135,  371, 1142, 1144,
     1149, 1146, 1134,  371,  371,  371,  371, 1137,  371,  371,
     1147, 1148,  611,  371,  371,  611,  611, 1151,  611, 1162,
     1163, 1165,  611,  611,  403,  611, 1164,  403,  611,  611,
     1168, 1152, 1169,  611,  403,  611, 1166,  403, 1154, 1157,
      403, 1156, 1153,  403, 1160,  611,  611, 1155, 1159, 1171,

      611, 1167, 1170, 1158,  403, 1173,  611,  403, 1161,  611,
      611,  611, 1176,  611, 1172,  403, 1177,  611,  403,  611,
     1174,  611, 1178, 1182,  611,  611,  611, 1175, 1189, 1236,
      611,  371, 1190,  256,  256,  256,  256,  299,  256, 1237,
     1189,  299, 1238, 1239, 1214, 1234,  299,  299, 1179, 1235,
     1241, 1181,  540, 1184, 1180, 1183, 1186, 1187,  256,  256,
      256,  256,  299,  256,  299, 1191,  296, 1185,  296,  296,
     1247, 1188,  256,  256,  256,  256, 1275,  256,  256,  256,
      256,  256,  299,  256,  256,  256,  256,  256, 1243,  256,
      256,  256,  256,  256,  299,  256,  299, 1240, 1215,  296,

      371,  296,  296, 1216, 1217,  299,  256,  256,  256,  256,
      296,  256,  296,  296, 1251, 1218, 1219,  256,  256,  256,
      256, 1244,  256,  256,  256,  256,  256,  299,  256, 1245,
     1198,  256,  256,  256,  256, 1250,  256,  299, 1246, 1221,
      299, 1220,  256,  256,  256,  256,  299,  256,  299, 1200,
      256,  256,  256,  256, 1248,  256,  256,  256,  256,  256,
      371,  256,  256,  256,  256,  256,  299,  256, 1223, 1203,
     1249,  299, 1222,  256,  256,  256,  256, 1255,  256,  256,
      256,  256,  256,  540,  256,  256,  256,  256,  256,  299,
      256,  256,  256,  256,  256, 1264,  256,  256,  256,  256,

      256,  299,  256,  256,  256,  256,  256, 1256,  256, 1252,
      299, 1225,  256,  256,  256,  256,  299,  256, 1254, 1224,
     1261,  540, 1636, 1227, 1257,  256,  256,  256,  256, 1226,
      256,  256,  256,  256,  256, 1229,  256,  256,  256,  256,
      256, 1228,  256,  256,  256,  256,  256, 1230,  256,  299,
      299, 1259,  540,  540,  330, 1260,  540,  330,  540,  330,
      540, 1258,  330, 1232,  540,  330, 1266, 1231,  330, 1253,
      540, 1262, 1233, 1263,  540, 1265, 1267, 1268,  540, 1270,
      540,  540, 1273,  540, 1271, 1272,  540,  540,  540,  540,
      540,  540,  540,  540,  371,  371, 1189, 1191,  371,  371,

     1284,  371,  371,  371,  371,  371, 1198, 1289,  371,  371,
      371, 1277, 1274, 1279, 1287,  371, 1282, 1280, 1291, 1285,
     1283, 1286, 1276, 1288, 1278, 1281,  371, 1290, 1200,  371,
      371,  371, 1295, 1203,  371,  371,  371, 1293,  371,  371,
      371,  371,  611, 1304,  611,  403, 1292, 1305,  403, 1296,
     1294, 1306,  611,  611,  611,  611,  403,  611,  611,  403,
     1307, 1297,  611, 1299, 1311,  611, 1309, 1302, 1300,  611,
     1308, 1303, 1310, 1312, 1298,  611, 1301, 1313,  611,  403,
     1315,  611,  403, 1316,  611, 1318,  611,  611, 1317, 1320,
      611,  611,  611,  611,  611,  611, 1319,  256,  256,  256,

      256,  299,  256,  256,  256,  256,  256,  540,  256, 1348,
      296, 1321,  296,  296, 1322, 1324,  299, 1369, 1327, 1325,
     1367, 1378, 1328, 1323,  299,  299, 1368, 1326,  256,  256,
      256,  256,  299,  256,  256,  256,  256,  256, 1371,  256,
      299,  256,  256,  256,  256, 1380,  256,  256,  256,  256,
      256,  371,  256,  299, 1349, 1351,  299, 1372, 1370, 1350,
      256,  256,  256,  256,  296,  256,  296,  296,  299, 1352,
      256,  256,  256,  256, 1377,  256,  256,  256,  256,  256,
      296,  256,  296,  296,  540, 1353,  256,  256,  256,  256,
      299,  256, 1417, 1373,  540, 1355, 1376, 1354,  256,  256,

      256,  256, 1387, 1357,  299,  256,  256,  256,  256, 1356,
      256,  256,  256,  256,  256,  299,  256,  256,  256,  256,
      256, 1383,  256,  256,  256,  256,  256,  299,  256,  256,
      256,  256,  256,  540,  256,  256,  256,  256,  256, 1389,
      256,  256,  256,  256,  256,  296,  256,  296,  296, 1379,
     1358,  256,  256,  256,  256, 1359,  256,  256,  256,  256,
      256, 1374,  256, 1360, 1375,  299,  299, 1361,  296,  299,
      296,  296,  299,  299, 1362,  330,  299,  540,  330,  540,
     1363, 1386, 1364,  330,  540,  540,  330,  540,  330,  330,
     1381,  330,  330, 1382, 1384,  540, 1365, 1385, 1392, 1390,

      540, 1388, 1366,  540, 1391,  330, 1393, 1395,  330,  540,
      540,  540,  540,  540,  540, 1394,  540,  540,  371,  540,
      371,  371,  371,  371,  371, 1405,  371,  371,  371,  371,
     1408,  371,  371,  371,  371,  371,  371, 1412,  371,  540,
     1396, 1406, 1407, 1409, 1410, 1397, 1413,  611, 1399, 1398,
     1400, 1401, 1402, 1403, 1404, 1411,  403,  611,  611,  403,
      403, 1424,  611,  403,  611, 1425,  611, 1415, 1416,  611,
     1418, 1421, 1419,  611, 1420, 1426, 1422, 1432, 1423, 1427,
     1428, 1429,  403,  403,  611,  403,  403,  403, 1430, 1433,
      403,  611,  611,  611,  611, 1431, 1478,  611,  611,  611,

      611,  611,  611,  256,  256,  256,  256,  299,  256,  256,
      256,  256,  256, 1479,  256,  371, 1461,  256,  256,  256,
      256, 1462,  256, 1514, 1484,  299,  299, 1481, 1434, 1435,
      299, 1463, 1436, 1437, 1440, 1438, 1439, 1441,  299, 1442,
      256,  256,  256,  256,  299,  256,  299, 1446,  256,  256,
      256,  256, 1491,  256,  256,  256,  256,  256,  299,  256,
      256,  256,  256,  256, 1480,  256,  299, 1464,  256,  256,
      256,  256, 1493,  256,  299,  256,  256,  256,  256, 1465,
      256,  256,  256,  256,  256,  299,  256, 1485, 1492,  299,
     1466,  256,  256,  256,  256,  299,  256,  256,  256,  256,

      256, 1467,  256,  256,  256,  256,  256, 1488,  256,  256,
      256,  256,  256, 1490,  256,  256,  256,  256,  256,  299,
      256,  299,  256,  256,  256,  256, 1469,  256,  296,  299,
      296,  296, 1471, 1470,  256,  256,  256,  256,  299,  256,
     1487,  256,  256,  256,  256, 1472,  256, 1482, 1483, 1489,
      299, 1494,  299,  299,  540, 1473,  540,  540,  540, 1496,
     1475, 1474, 1497, 1498, 1499,  540,  540, 1486,  540,  540,
     1502,  540, 1495,  330,  540,  540,  330, 1500,  540, 1501,
     1476,  540,  540,  540,  540,  540,  371, 1477,  371, 1503,
      371,  371, 1446, 1515,  371,  371,  371, 1516,  371,  371,

      371,  371, 1507,  371,  371, 1517, 1505,  371, 1506, 1518,
      371, 1519, 1504, 1511,  371, 1508, 1509, 1520,  611,  611,
     1510,  611, 1512, 1513, 1531, 1532,  611, 1534,  611, 1535,
     1524,  611, 1533,  611,  611,  611, 1523,  611, 1522,  611,
     1525,  611, 1526, 1528, 1536, 1527,  611,  403, 1529, 1537,
      403,  611, 1538,  611,  611, 1530,  611,  256,  256,  256,
      256, 1624,  256, 1569, 1549, 1571, 1542,  296, 1540,  296,
      296, 1541, 1572, 1620,  299, 1543,  256,  256,  256,  256,
      299,  256,  299, 1546, 1544,  299, 1539, 1573,  299, 1545,
      540, 1574, 1547, 1575, 1548,  540,  256,  256,  256,  256,

     1560,  256,  299, 1551,  256,  256,  256,  256, 1584,  256,
      256,  256,  256,  256,  299,  256,  256,  256,  256,  256,
     1590,  256,  256,  256,  256,  256, 1561,  256,  256,  256,
      256,  256,  371,  256, 1577,  299, 1562, 1564, 1616,  256,
      256,  256,  256, 1563,  256,  256,  256,  256,  256, 1592,
      256,  256,  256,  256,  256, 1578,  256,  256,  256,  256,
      256, 1615,  256,  256,  256,  256,  256, 1614,  256,  256,
      256,  256,  256,  540,  256,  256,  256,  256,  256,  296,
      256,  296,  296, 1566,  256,  256,  256,  256,  299,  256,
     1580,  540,  540, 1582,  540, 1567,  330, 1579,  540,  330,

      540,  540, 1568,  330,  540,  371,  330, 1586, 1581, 1588,
      371,  371, 1583, 1549,  371,  371, 1551,  371,  371, 1576,
     1585,  371,  371,  611, 1591, 1600,  611, 1595, 1602,  611,
      403, 1593,  611,  403,  611,  611,  611, 1594,  611, 1601,
     1589,  403,  611, 1587,  403, 1606, 1603, 1613,  611,  371,
     1599,  540, 1604,  296, 1605,  296,  296, 1597,  299, 1621,
     1598,  256,  256,  256,  256,  296,  256,  296,  296, 1633,
     1628, 1623, 1608, 1610,  256,  256,  256,  256, 1609,  256,
     1612, 1607,  256,  256,  256,  256, 1617,  256,  299, 1613,
      256,  256,  256,  256, 1625,  256,  540,  256,  256,  256,

      256, 1618,  256,  540, 1615,  256,  256,  256,  256,  299,
      256,  299, 1622, 1627, 1619,  256,  256,  256,  256, 1630,
      256,  256,  256,  256,  256,  296,  256,  296,  296,  330,
      330,  371,  330,  330, 1629,  540, 1631,  540,  330,  371,
      371,  330, 1613,  371,  403, 1615,  611,  403,  403,  611,
      611,  403, 1611, 1634, 1639,  611, 1641,  611, 1635,  403,
     1652,  540,  403, 1637, 1649,  371, 1640, 1644, 1638,  256,
      256,  256,  256, 1626,  256,  256,  256,  256,  256,  611,
      256,  299,  256,  256,  256,  256, 1632,  256,  296, 1644,
      296,  296,  296,  540,  296,  296,  371,  611,  296, 1646,

      296,  296,  330,  330,  611,  330,  330, 1642,  330, 1651,
      611,  330, 1662, 1656,  403, 1654,  611,  403, 1657,  611,
      403,  403,  611,  403,  403,  256,  256,  256,  256,  299,
      256,  296, 1659,  296,  296,  296,  611,  296,  296, 1664,
      540,  330,  330,  371,  330,  330,  371,  371, 1659, 1650,
     1667,  611,  403,  403,  330,  403,  403,  330,  296, 1653,
      296,  296,  296,  330,  296,  296,  330,  403,  403,  371,
      403,  403, 1658,  371, 1670, 1671,  296, 1663,  296,  296,
     1672,  371,  330,  403, 1665,  330,  403,  371, 1596,  540,
      540,  540,  540,  540,  540, 1668,  250,  299,  250,  250,

      250,  250,  250,  254,  299,  299,  254,  254,  254,  254,
      256,  299,  256,  256,  258,  299,  258,  258,  289,  289,
      289,  289,  289,  289,  289,  295,  299,  295,  295,  295,
      295,  295,  299, 1570,  299,  299,  299,  299,  299,  325,
     1565,  325,  325,  325,  325,  325,  330, 1559, 1558,  330,
     1557,  330,  330,  336, 1556, 1555,  336, 1554,  336,  336,
      363, 1553,  363,  363,  363,  363,  363,  371,  371,  373,
      373,  403, 1552, 1551,  403, 1550,  403,  403,  409, 1549,
      611,  409, 1521,  409,  409,  436,  371,  436,  436,  436,
      436,  436,  286,  286,  286,  286,  286,  286,  286,  538,

      540,  299,  538, 1468,  538,  538,  540, 1460, 1459,  540,
     1458,  540,  540,  572, 1457,  572,  572,  572,  572,  572,
      609, 1456, 1455,  609, 1454,  609,  609,  611, 1453, 1452,
      611, 1451,  611,  611,  643, 1450,  643,  643,  643,  643,
      643, 1449, 1448, 1447, 1446, 1445, 1444, 1443,  611, 1414,
      371,  540,  299, 1347, 1346, 1345, 1344, 1343, 1342, 1341,
     1340, 1339, 1338, 1337, 1336, 1335, 1334, 1333, 1332, 1331,
     1330, 1329, 1314, 1269, 1242, 1213, 1212, 1211, 1210, 1209,
     1208, 1207, 1206, 1205, 1204, 1203, 1202, 1201, 1200, 1199,
     1198, 1197, 1196, 1195, 1194, 1193, 1192, 1191,  611,  611,

      371,  371,  540,  540,  299,  299, 1056, 1053, 1052, 1051,
     1050, 1049, 1048, 1047, 1046, 1045, 1044, 1043, 1042, 1041,
     1040, 1039, 1038, 1037, 1036, 1035, 1034, 1033, 1032,  611,
      611,  371,  371,  540,  540,  299,  299,  918,  879,  878,
      877,  876,  875,  874,  873,  872,  871,  870,  869,  868,
      867,  866,  865,  864,  863,  862,  859,  858,  857,  856,
      855,  854,  853,  852,  851,  850,  849,  848,  645,  611,
      817,  611,  371,  574,  540,  751,  540,  299,  722,  680,
      679,  678,  677,  673,  672,  671,  670,  669,  668,  667,
      666,  665,  664,  663,  662,  661,  660,  659,  658,  657,

      656,  655,  654,  653,  652,  651,  650,  649,  648,  645,
      629,  627,  613,  405,  371,  372,  368,  574,  558,  556,
      542,  299,  257,  251,  471,  470,  469,  468,  465,  464,
      463,  462,  461,  460,  457,  456,  455,  454,  453,  452,
      451,  450,  447,  441,  440,  221,  420,  408,  407,  371,
      372,  370,  347,  335,  310,  297,  257,  247,  246,  245,
      244,  243,  240,  239,  238,  237,  233,  232,  231,  230,
      229,  228,  225,  224,  223,  221,  220, 1673,   13, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,

     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673
    } ;

static yyconst short int yy_chk[4636] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    2,   15,   28,    2,
       15,    2,   35,   35,   40,   46,   28,   49,   46,   48,
       46,   35,   50,   40,   98,   50,   98,   56,   56,   56,
       56,    2,   56,   48,  166,   58,   58,   58,   58,   49,
       58,   95,   49,   59,   59,   59,   59, 1674,   59,   78,

       58,  166,   78,   95,   78,   59,    2,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    4,   94,  100,    4,  100,    4,   57,
       57,   57,   57,   94,   57,  107,   60,   60,   60,   60,
        4,   60,   61,   61,   61,   61,  107,   61,    4,   64,
       64,   64,   64,   57,   64,  163,   83,   60,   83,   83,

       86,   61,   86,   86,   87,   60,   87,   87,  104,  163,
      104,   64, 1666,    4,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        6, 1661,  111,    6,   99,    6,   62,   62,   62,   62,
      111,   62,   63,   63,   63,   63,   99,   63,   65,   65,
       65,   65,   97,   65,   63,    6,   65,   97,   70,   70,

       70,   70,   62,   70,  105,   88,   70,   88,   88,   89,
      105,   89,   89,   90,  132,   90,   90,  286,  286,  132,
        6,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    8,  109,  101,
        8, 1660,    8,   66,   66,   66,   66,  106,   66,   67,
       67,   67,   67,  109,   67,  101,   68,   68,   68,   68,

      140,   68,    8,  106,  110,  136,  140,   66,   67,   67,
       79,   79,   79,   79,   79,   79,   96,   67,   68,   96,
       79,  136,  110,   79,   96,  288,  288,    8,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,   10,  129,  115,   10,  175,   10,
       69,   69,   69,   69,  129,   69,   71,   71,   71,   71,

      115,   71,  115,   80,   80,   80,   80,  112,   80,   10,
      113,   81,   81,   81,   81,   91,   81,   91,   91,   81,
       69,  113,  175,  198,   80,  112,   91,  114,  198,  114,
      114,   71,   80,   81,   10,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   12, 1655,  146,   12,  130,   12,   72,   72,   72,

       72,  146,   72,   73,   73,   73,   73,  130,   73,   74,
       74,   74,   74,  108,   74,  134,   12,   75,   75,   75,
       75,  108,   75,   76,   76,   76,   76,  134,   76,   72,
      108,   77,   77,   77,   77,  133,   77,  133,   72,  103,
      103,   12,   73,  135,  103,  135,  150,  131,  103,   75,
      131,   74,  116,  150, 1647,  131,  116,  118,  118,  118,
      118,  120,  120,  120,  120,   76,   77,   82,   82,   82,
       82,  139,   82,  139,  116,  138,  138,  116,  141,   82,
      138,  142,  143,  144,  138,  145,  147,   82,  161,  148,
      143,  160,  142,  195,  141,  161,  159,  228,  144,  143,

      148,  160,  195,  145,  147,  149,  149,  149,  149,   82,
      149,  228,   82,   92,   92,  159,   92,   92,   92,   92,
       92,   92,   92,   92,   92,  151,   92,   93,   93,  164,
       93,   93,   93,   93,   93,   93,   93,   93,   93,  151,
       93,  151,  153,  153,  153,  153,  165,  216,  167,  168,
      164,  167,  172,  165,  216,  172,  176,   93,  127,  127,
      173,  171,  127,  127,  127,  127,  127,  127,  168,  127,
      152,  127,  128,  128,  152,  162,  128,  128,  128,  128,
      128,  128,  169,  128,  170,  128,  171,  174,  177,  178,
      173,  162,  152,  176,  179,  152,  169,  169,  182,  162,

      181,  170,  128,  181,  196,  169,  180,  180,  180,  180,
      199,  180,  199,  182,  174,  177,  196,  181,  184,  184,
      184,  184,  197,  174,  179,  197,  178,  204,  204,  200,
      197,  201,  204,  201,  209,  182,  204,  558,  182,  193,
      193,  200,  209,  193,  193,  193,  193,  193,  193,  202,
      193,  209,  193,  194,  194,  207,  558,  194,  194,  194,
      194,  194,  194,  210,  194,  202,  194,  205,  206,  205,
      208,  207,  211,  213,  206,  214,  212,  219,  210,  253,
      219,  208,  217,  194,  212,  218,  214,  226,  237,  218,
      211,  213,  215,  215,  215,  215,  217,  215,  217,  225,

      237,  244,  226,  248,  253,  304,  248,  218,  248,  225,
      218,  225,  255,  304,  244,  255,  258,  258,  258,  258,
     1645,  258,  259,  259,  259,  259,  295,  259,  295,  295,
      259,  260,  260,  260,  260,  296,  260,  296,  296,  260,
      261,  261,  261,  261,  306,  261,  262,  262,  262,  262,
      310,  262,  308,  261,  300,  308,  306,  262,  310,  263,
      263,  263,  263,  261,  263,  261,  264,  264,  264,  264,
      300,  264,  262,  317,  264,  263,  320,  265,  265,  265,
      265,  284,  265,  307,  284,  317,  284,  307,  264,  265,
      266,  266,  266,  266,  320,  266,  267,  267,  267,  267,

      301,  267,  268,  268,  268,  268,  303,  268,  269,  269,
      269,  269,  298,  269,  298,  298,  301,  267,  266,  303,
      319,  303,  268,  298,  269,  270,  270,  270,  270,  319,
      270,  311,  322,  270,  271,  271,  271,  271,  312,  271,
      272,  272,  272,  272, 1643,  272,  312,  311,  272,  322,
      271,  273,  273,  273,  273,  313,  273,  274,  274,  274,
      274,  273,  274,  344,  275,  275,  275,  275,  309,  275,
      315,  313,  309,  273,  315,  327,  327,  274,  275,  276,
      276,  276,  276,  344,  276,  277,  277,  277,  277,  353,
      277,  278,  278,  278,  278,  353,  278,  279,  279,  279,

      279,  318,  279,  280,  280,  280,  280,  345,  280,  281,
      281,  281,  281,  316,  281,  276,  282,  282,  282,  282,
      345,  282,  318,  316,  278,  302,  283,  283,  283,  283,
      277,  283, 1637,  321,  280,  302,  302,  302,  323,  279,
      321,  289,  289,  289,  289,  289,  289,  280,  305,  330,
      281,  289,  330,  321,  289,  290,  290,  290,  290,  324,
      290,  323,  305,  282,  305,  314,  290,  291,  291,  291,
      291,  283,  291,  292,  292,  292,  292,  314,  292,  314,
      324,  290, 1636,  293,  293,  293,  293,  355,  293,  329,
      291,  293,  328,  329,  292,  294,  294,  294,  294,  325,

      294,  325,  325,  326,  391,  326,  326,  294,  328,  331,
      331,  331,  331,  342,  329,  294,  333,  333,  333,  333,
      335,  339,  341,  335,  355,  340,  339,  342,  340,  343,
      341,  335,  346,  343,  360,  391,  339,  351,  339,  351,
      294,  336,  336,  340,  346,  336,  336,  336,  336,  336,
      336,  351,  336,  354,  336,  337,  337,  347,  352,  337,
      337,  337,  337,  337,  337,  347,  337,  349,  337,  337,
      352,  356,  357,  360,  358,  349,  359,  361,  364,  366,
      415,  354,  362,  362,  362,  362,  363,  362,  363,  363,
      381,  366, 1633,  364,  415,  363,  356,  358,  367,  367,

      367,  367,  374,  376,  375,  374,  357,  375,  378,  359,
      358,  376,  377,  381,  361,  380,  366,  379,  377,  378,
      379,  376,  380,  376,  382,  384,  383,  385,  386,  387,
      385,  389,  387,  377,  379,  390,  384,  388,  392,  386,
      382,  383,  388,  393,  390,  394,  389,  395,  396,  397,
      398,  400,  402,  419,  388,  399,  399,  399,  399,  401,
      399,  403,  401,  413,  403,  419,  413,  402,  429,  400,
      563,  393,  414,  395,  404,  404,  404,  404,  392,  416,
      414,  413,  394,  416,  396,  408,  395,  417,  408,  426,
      398,  397,  402,  429,  563,  426,  408,  409,  409,  430,

      418,  409,  409,  409,  409,  409,  409,  417,  409,  427,
      409,  410,  410,  418,  428,  410,  410,  410,  410,  410,
      410,  412,  410,  420,  410,  410,  412,  422,  424,  425,
      424,  420,  431,  430,  432,  422,  412,  427,  412,  433,
      434,  425,  424,  435,  435,  435,  435,  436,  435,  436,
      436,  428,  439,  511,  437,  431,  436,  511, 1627,  466,
      472,  472,  472,  472,  439,  472,  466,  432,  431,  437,
      466,  473,  473,  473,  473,  516,  473,  434,  433,  516,
      524,  472,  474,  474,  474,  474,  524,  474,  506,  439,
      474,  506,  473,  475,  475,  475,  475,  549,  475,  476,

      476,  476,  476,  549,  476,  477,  477,  477,  477,  476,
      477,  478,  478,  478,  478,  507,  478,  508,  507,  475,
     1622,  479,  479,  479,  479,  477,  479,  480,  480,  480,
      480,  529,  480,  508,  509,  478,  509,  481,  481,  481,
      481,  480,  481,  482,  482,  482,  482,  479,  482,  483,
      483,  483,  483,  529,  483,  484,  484,  484,  484,  481,
      484,  483,  517,  482,  485,  485,  485,  485,  514,  485,
      486,  486,  486,  486,  517,  486,  485,  513,  514,  513,
      484, 1621,  486,  487,  487,  487,  487,  519,  487,  488,
      488,  488,  488,  487,  488,  489,  489,  489,  489,  519,

      489,  490,  490,  490,  490,  526,  490,  510,  518,  518,
      488,  491,  491,  491,  491,  515,  491,  515,  520,  490,
      526,  510,  489,  492,  492,  492,  492,  773,  492,  521,
      520,  530,  492,  493,  493,  493,  493,  491,  493,  494,
      494,  494,  494,  521,  494,  495,  495,  495,  495,  530,
      495,  496,  496,  496,  496,  525,  496,  525,  493,  773,
      497,  497,  497,  497,  541,  497,  553,  498,  498,  498,
      498,  494,  498,  499,  499,  499,  499,  541,  499,  500,
      500,  500,  500,  553,  500,  501,  501,  501,  501,  605,
      501,  495,  497,  496,  502,  502,  502,  502,  528,  502,

      503,  503,  503,  503,  498,  503,  528,  504,  504,  504,
      504,  498,  504,  500,  522,  498,  533,  522,  605,  499,
      503,  505,  505,  505,  505,  523,  505,  531,  523,  527,
      527,  501,  505,  532,  534,  531,  535,  536,  533,  538,
      502,  542,  538,  544,  534,  539,  532,  545,  539,  545,
      546,  547,  548,  532,  542,  550,  539,  532,  535,  536,
      551,  544,  546,  556,  552,  556,  557,  547,  552,  550,
      548,  554,  551,  555,  559,  554,  560,  555,  562,  557,
      561,  561,  564,  565,  559,  566,  567,  568,  569,  570,
      571,  574,  576,  583,  560,  562,  572,  577,  572,  572,

      578, 1620,  580,  581,  576,  572,  574,  579,  581,  566,
      579,  584,  583,  577,  569,  567,  578,  565,  582,  586,
      564,  585,  567,  580,  587,  568,  567,  570,  571,  576,
      585,  588,  584,  582,  589,  590,  586,  591,  588,  587,
      592,  593,  590,  594,  591,  592,  595,  596,  597,  598,
      599,  600,  597,  601,  589,  602,  603,  593,  612,  595,
      604,  606,  607,  609,  610,  594,  609,  610,  596,  598,
      613,  612,  616,  615,  616,  610, 1616,  599,  618,  619,
      620,  617,  602,  613,  621,  623,  620,  624,  603,  623,
      601,  615,  600,  617,  618,  603,  622,  619,  621,  603,

      629,  604,  606,  607,  624,  625,  626,  628,  622,  625,
      626,  627,  630,  627,  631,  632,  632,  633,  634,  629,
      628,  635,  630,  636,  637,  638,  639,  640,  641,  642,
      645,  647,  631,  660,  633,  643,  716,  643,  643,  724,
      724,  717,  634,  647,  643,  645,  718,  719,  637,  718,
      716,  731,  660,  640,  638,  717,  719,  636,  721,  635,
      721,  638,  746,  731,  639,  638,  641,  642,  647,  681,
      681,  681,  681,  746,  681,  682,  682,  682,  682,  681,
      682,  683,  683,  683,  683,  682,  683,  684,  684,  684,
      684,  732,  684,  685,  685,  685,  685,  720,  685,  732,

      685,  738,  684,  726,  686,  686,  686,  686,  683,  686,
      687,  687,  687,  687,  720,  687,  688,  688,  688,  688,
      726,  688,  729,  754,  738,  722,  686,  689,  689,  689,
      689,  722,  689,  690,  690,  690,  690,  754,  690,  729,
      687,  691,  691,  691,  691,  727,  691,  688,  691,  736,
      727,  736,  689,  692,  692,  692,  692,  690,  692,  693,
      693,  693,  693,  728,  693,  743,  693,  723,  694,  694,
      694,  694,  692,  694,  723,  694,  695,  695,  695,  695,
      728,  695,  728,  743, 1614,  693,  696,  696,  696,  696,
      730,  696,  737,  730,  753,  753,  734,  695,  696,  697,

      697,  697,  697,  734,  697,  698,  698,  698,  698,  737,
      698,  699,  699,  699,  699,  697,  699,  700,  700,  700,
      700,  741,  700,  740,  698,  701,  701,  701,  701,  742,
      701,  702,  702,  702,  702,  733,  702,  735,  702,  740,
      733,  910,  699,  741,  735,  742,  745,  701,  700,  703,
      703,  703,  703,  910,  703,  704,  704,  704,  704,  745,
      704,  705,  705,  705,  705,  747,  705,  706,  706,  706,
      706,  749,  706,  749,  707,  707,  707,  707,  747,  707,
      708,  708,  708,  708,  744,  708,  709,  709,  709,  709,
      751,  709,  710,  710,  710,  710,  703,  710, 1612,  755,

      744,  705,  711,  711,  711,  711,  750,  711,  750,  751,
      757,  756,  752,  706,  707,  712,  712,  712,  712,  752,
      712,  755,  708,  759,  759,  760,  709,  757,  758,  710,
      713,  713,  713,  713,  756,  713,  760,  711,  714,  714,
      714,  714,  767,  714,  758,  763,  714,  768,  715,  715,
      715,  715,  712,  715,  761,  761,  762,  762,  763,  764,
      714,  765,  769,  764,  766,  767,  770,  770,  715,  765,
      768,  771,  775,  761,  774,  766,  769,  776,  778,  779,
      780,  777,  782,  783,  785,  787,  784,  782,  783,  786,
      788,  786,  789,  807,  785,  791,  790,  792,  794,  792,

      794,  800,  787,  793,  775,  796,  779,  778,  784,  780,
      771,  776,  774,  777,  791,  788,  790,  793,  789,  794,
      795,  796,  795,  797,  798,  799,  801,  800,  802,  803,
      797,  803,  804,  806,  807,  798,  808,  810,  809,  799,
      812,  811,  817,  818,  813,  802,  815,  816,  815,  816,
      818,  820,  801,  819,  819,  821,  822,  825,  825,  828,
      828,  817,  824,  823,  837,  820,  827,  827,  806,  829,
      812,  808,  810,  811,  804,  809,  813,  821,  824,  822,
      823,  826,  829,  830,  832,  827,  831,  830,  833,  834,
      835,  839,  826,  840,  831,  832,  836,  836,  841,  842,

      843,  845,  877,  837,  835,  844,  846,  879,  911,  989,
      916,  833,  834,  911,  916,  989,  877,  882,  882,  882,
      882,  879,  882,  839,  880,  880,  880,  880,  845,  880,
      841,  840,  843,  842,  844,  846,  882,  915,  922,  880,
      881,  881,  881,  881,  915,  881,  883,  883,  883,  883,
      922,  883,  881,  883,  884,  884,  884,  884,  939,  884,
      885,  885,  885,  885,  909,  885,  886,  886,  886,  886,
      924,  886,  924,  909,  939,  884,  887,  887,  887,  887,
      912,  887,  913,  887,  913,  913,  886,  888,  888,  888,
      888,  885,  888,  889,  889,  889,  889,  912,  889,  890,

      890,  890,  890,  929,  890,  891,  891,  891,  891,  917,
      891,  890,  892,  892,  892,  892,  929,  892,  888,  892,
      893,  893,  893,  893, 1610,  893,  917,  894,  894,  894,
      894,  891,  894,  895,  895,  895,  895,  928,  895,  896,
      896,  896,  896,  895,  896,  918,  914,  925,  893,  914,
      896,  928,  918,  894,  897,  897,  897,  897,  968,  897,
      898,  898,  898,  898,  925,  898,  899,  899,  899,  899,
      927,  899,  927,  897,  900,  900,  900,  900,  948,  900,
      901,  901,  901,  901,  935,  901,  902,  902,  902,  902,
      948,  902,  903,  903,  903,  903,  968,  903,  935,  898,

      904,  904,  904,  904,  919,  904,  919,  919,  932,  899,
      905,  905,  905,  905,  921,  905,  921,  921,  901,  906,
      906,  906,  906,  932,  906,  936,  908,  908,  908,  908,
      903,  908,  902,  933,  908,  904,  907,  907,  907,  907,
      923,  907,  923,  923,  926, 1609,  930,  936,  926,  904,
      905,  930,  933,  931,  906,  931,  931,  937,  938,  907,
      941,  940,  942,  943,  944,  944,  942,  941,  906,  938,
      945,  937,  940,  945,  943,  946,  947,  949,  949,  950,
      956,  951,  953,  938,  951,  953,  940,  954,  946,  955,
      958,  954,  955,  957,  957,  959,  962,  961,  956,  947,

      961,  960,  950,  960,  964,  963,  965,  962,  963,  967,
      958,  970,  969,  959,  971,  973,  972,  974,  975,  976,
      977,  976,  978,  981,  974,  973,  980,  983,  980,  979,
      984,  985,  975,  985,  983,  964,  977,  986,  970,  967,
      987,  965,  969,  972,  979,  988,  971,  991,  978,  981,
      988,  984,  970,  990,  992,  994,  995,  972,  996,  997,
      986,  987, 1000,  998,  999, 1002, 1001,  990, 1007, 1000,
     1001, 1003, 1003, 1005, 1004, 1608, 1002, 1004, 1006, 1009,
     1007,  991, 1008, 1008, 1010, 1027, 1005, 1010,  994,  997,
     1012,  996,  992, 1012,  999, 1013, 1015,  995,  998, 1013,

     1017, 1006, 1009,  997, 1014, 1016, 1016, 1014,  999, 1018,
     1019, 1021, 1019, 1020, 1015, 1022, 1020, 1023, 1022, 1024,
     1017, 1026, 1021, 1027, 1030, 1028, 1029, 1018, 1032, 1085,
     1031, 1599, 1032, 1059, 1059, 1059, 1059, 1086, 1059, 1086,
     1059, 1088, 1088, 1089, 1059, 1084, 1085, 1089, 1023, 1084,
     1092, 1026, 1129, 1029, 1024, 1028, 1030, 1031, 1060, 1060,
     1060, 1060, 1084, 1060, 1092, 1060, 1087, 1029, 1087, 1087,
     1099, 1031, 1061, 1061, 1061, 1061, 1129, 1061, 1062, 1062,
     1062, 1062, 1099, 1062, 1063, 1063, 1063, 1063, 1094, 1063,
     1064, 1064, 1064, 1064, 1103, 1064, 1090, 1090, 1061, 1091,

     1598, 1091, 1091, 1062, 1063, 1094, 1065, 1065, 1065, 1065,
     1095, 1065, 1095, 1095, 1103, 1064, 1065, 1066, 1066, 1066,
     1066, 1096, 1066, 1067, 1067, 1067, 1067, 1102, 1067, 1097,
     1067, 1068, 1068, 1068, 1068, 1102, 1068, 1096, 1098, 1068,
     1098, 1066, 1069, 1069, 1069, 1069, 1097, 1069, 1101, 1069,
     1070, 1070, 1070, 1070, 1100, 1070, 1071, 1071, 1071, 1071,
     1597, 1071, 1072, 1072, 1072, 1072, 1107, 1072, 1071, 1072,
     1101, 1100, 1070, 1073, 1073, 1073, 1073, 1107, 1073, 1074,
     1074, 1074, 1074, 1116, 1074, 1075, 1075, 1075, 1075, 1108,
     1075, 1076, 1076, 1076, 1076, 1116, 1076, 1077, 1077, 1077,

     1077, 1104, 1077, 1078, 1078, 1078, 1078, 1108, 1078, 1104,
     1106, 1074, 1079, 1079, 1079, 1079, 1109, 1079, 1106, 1073,
     1112, 1112, 1596, 1076, 1109, 1080, 1080, 1080, 1080, 1075,
     1080, 1081, 1081, 1081, 1081, 1078, 1081, 1082, 1082, 1082,
     1082, 1077, 1082, 1083, 1083, 1083, 1083, 1079, 1083, 1105,
     1110, 1111, 1111, 1113, 1114, 1111, 1115, 1114, 1117, 1118,
     1120, 1110, 1118, 1081, 1119, 1122, 1119, 1080, 1122, 1105,
     1125, 1113, 1082, 1115, 1128, 1117, 1120, 1121, 1121, 1124,
     1124, 1126, 1127, 1127, 1125, 1126, 1130, 1131, 1132, 1133,
     1134, 1135, 1136, 1137, 1138, 1139, 1138, 1139, 1140, 1142,

     1138, 1141, 1144, 1143, 1146, 1153, 1146, 1144, 1145, 1152,
     1154, 1131, 1128, 1133, 1142, 1147, 1136, 1134, 1147, 1140,
     1137, 1141, 1130, 1143, 1132, 1135, 1148, 1145, 1148, 1149,
     1150, 1151, 1153, 1151, 1155, 1156, 1157, 1150, 1158, 1159,
     1160, 1161, 1164, 1162, 1162, 1165, 1149, 1162, 1165, 1154,
     1152, 1163, 1163, 1166, 1167, 1168, 1169, 1171, 1179, 1169,
     1164, 1155, 1170, 1157, 1170, 1180, 1167, 1160, 1158, 1176,
     1166, 1161, 1168, 1171, 1156, 1181, 1159, 1172, 1172, 1173,
     1175, 1175, 1173, 1176, 1177, 1178, 1178, 1183, 1177, 1180,
     1182, 1184, 1185, 1186, 1187, 1188, 1179, 1214, 1214, 1214,

     1214, 1251, 1214, 1215, 1215, 1215, 1215, 1590, 1215, 1214,
     1234, 1181, 1234, 1234, 1182, 1184, 1239, 1239, 1187, 1185,
     1235, 1251, 1188, 1183, 1238, 1253, 1238, 1186, 1216, 1216,
     1216, 1216, 1235, 1216, 1217, 1217, 1217, 1217, 1241, 1217,
     1241, 1218, 1218, 1218, 1218, 1253, 1218, 1219, 1219, 1219,
     1219, 1297, 1219, 1250, 1216, 1218, 1242, 1242, 1240, 1217,
     1220, 1220, 1220, 1220, 1236, 1220, 1236, 1236, 1240, 1219,
     1221, 1221, 1221, 1221, 1250, 1221, 1222, 1222, 1222, 1222,
     1243, 1222, 1243, 1243, 1263, 1220, 1223, 1223, 1223, 1223,
     1244, 1223, 1297, 1244, 1589, 1222, 1249, 1221, 1224, 1224,

     1224, 1224, 1263, 1224, 1256, 1225, 1225, 1225, 1225, 1223,
     1225, 1226, 1226, 1226, 1226, 1249, 1226, 1227, 1227, 1227,
     1227, 1256, 1227, 1228, 1228, 1228, 1228, 1252, 1228, 1229,
     1229, 1229, 1229, 1265, 1229, 1230, 1230, 1230, 1230, 1265,
     1230, 1231, 1231, 1231, 1231, 1245, 1231, 1245, 1245, 1252,
     1225, 1232, 1232, 1232, 1232, 1226, 1232, 1233, 1233, 1233,
     1233, 1246, 1233, 1227, 1247, 1247, 1246, 1228, 1248, 1254,
     1248, 1248, 1255, 1257, 1229, 1259, 1258, 1260, 1259, 1269,
     1230, 1260, 1231, 1261, 1264, 1266, 1261, 1267, 1268, 1270,
     1254, 1268, 1270, 1255, 1257, 1271, 1232, 1258, 1269, 1266,

     1272, 1264, 1233, 1275, 1267, 1273, 1271, 1274, 1273, 1276,
     1274, 1277, 1278, 1279, 1280, 1272, 1282, 1283, 1284, 1281,
     1286, 1288, 1287, 1292, 1290, 1284, 1289, 1295, 1293, 1296,
     1288, 1298, 1299, 1291, 1300, 1301, 1302, 1292, 1303, 1588,
     1275, 1286, 1287, 1289, 1290, 1276, 1293, 1308, 1278, 1277,
     1279, 1280, 1281, 1282, 1283, 1291, 1304, 1305, 1309, 1304,
     1306, 1305, 1317, 1306, 1312, 1308, 1311, 1295, 1296, 1314,
     1298, 1301, 1299, 1310, 1300, 1309, 1302, 1317, 1303, 1310,
     1311, 1312, 1313, 1315, 1316, 1313, 1315, 1318, 1314, 1319,
     1318, 1320, 1319, 1321, 1322, 1316, 1367, 1323, 1324, 1325,

     1327, 1326, 1328, 1348, 1348, 1348, 1348, 1367, 1348, 1349,
     1349, 1349, 1349, 1368, 1349, 1405, 1348, 1350, 1350, 1350,
     1350, 1349, 1350, 1405, 1374, 1368, 1374, 1370, 1320, 1321,
     1381, 1350, 1322, 1323, 1326, 1324, 1325, 1327, 1579, 1328,
     1351, 1351, 1351, 1351, 1370, 1351, 1578, 1351, 1352, 1352,
     1352, 1352, 1381, 1352, 1353, 1353, 1353, 1353, 1383, 1353,
     1354, 1354, 1354, 1354, 1369, 1354, 1382, 1352, 1355, 1355,
     1355, 1355, 1383, 1355, 1369, 1356, 1356, 1356, 1356, 1354,
     1356, 1358, 1358, 1358, 1358, 1375, 1358, 1375, 1382, 1378,
     1355, 1359, 1359, 1359, 1359, 1380, 1359, 1360, 1360, 1360,

     1360, 1356, 1360, 1361, 1361, 1361, 1361, 1378, 1361, 1362,
     1362, 1362, 1362, 1380, 1362, 1363, 1363, 1363, 1363, 1377,
     1363, 1577, 1364, 1364, 1364, 1364, 1358, 1364, 1376, 1384,
     1376, 1376, 1360, 1359, 1365, 1365, 1365, 1365, 1379, 1365,
     1377, 1366, 1366, 1366, 1366, 1361, 1366, 1371, 1373, 1379,
     1385, 1384, 1371, 1373, 1386, 1362, 1393, 1388, 1387, 1386,
     1364, 1363, 1387, 1388, 1389, 1389, 1390, 1376, 1392, 1396,
     1393, 1394, 1385, 1395, 1397, 1398, 1395, 1390, 1400, 1392,
     1365, 1399, 1401, 1402, 1403, 1404, 1406, 1366, 1407, 1394,
     1408, 1409, 1408, 1406, 1412, 1411, 1413, 1407, 1415, 1416,

     1417, 1419, 1398, 1418, 1420, 1409, 1396, 1422, 1397, 1411,
     1421, 1412, 1395, 1402, 1423, 1399, 1400, 1413, 1428, 1424,
     1401, 1425, 1403, 1404, 1424, 1425, 1426, 1427, 1427, 1428,
     1417, 1434, 1426, 1430, 1432, 1431, 1416, 1435, 1415, 1436,
     1418, 1437, 1419, 1421, 1430, 1420, 1438, 1433, 1422, 1431,
     1433, 1439, 1432, 1440, 1441, 1423, 1442, 1461, 1461, 1461,
     1461, 1574, 1461, 1478, 1461, 1480, 1436, 1481, 1434, 1481,
     1481, 1435, 1482, 1565, 1482, 1437, 1462, 1462, 1462, 1462,
     1478, 1462, 1480, 1440, 1438, 1483, 1433, 1483, 1484, 1439,
     1501, 1484, 1441, 1485, 1442, 1511, 1463, 1463, 1463, 1463,

     1462, 1463, 1485, 1463, 1464, 1464, 1464, 1464, 1501, 1464,
     1465, 1465, 1465, 1465, 1488, 1465, 1466, 1466, 1466, 1466,
     1511, 1466, 1467, 1467, 1467, 1467, 1464, 1467, 1469, 1469,
     1469, 1469, 1517, 1469, 1488, 1490, 1465, 1467, 1556, 1470,
     1470, 1470, 1470, 1466, 1470, 1471, 1471, 1471, 1471, 1517,
     1471, 1472, 1472, 1472, 1472, 1490, 1472, 1473, 1473, 1473,
     1473, 1555, 1473, 1474, 1474, 1474, 1474, 1554, 1474, 1475,
     1475, 1475, 1475, 1506, 1475, 1476, 1476, 1476, 1476, 1486,
     1476, 1486, 1486, 1470, 1477, 1477, 1477, 1477, 1493, 1477,
     1496, 1496, 1497, 1498, 1498, 1472, 1499, 1493, 1500, 1499,

     1503, 1502, 1475, 1504, 1508, 1515, 1504, 1503, 1497, 1506,
     1518, 1514, 1500, 1514, 1516, 1519, 1516, 1520, 1523, 1486,
     1502, 1525, 1528, 1532, 1515, 1531, 1531, 1520, 1533, 1533,
     1534, 1518, 1535, 1534, 1536, 1537, 1541, 1519, 1538, 1532,
     1508, 1539, 1543, 1504, 1539, 1538, 1535, 1553, 1546, 1591,
     1528, 1583, 1536, 1569, 1537, 1569, 1569, 1523, 1570, 1570,
     1525, 1560, 1560, 1560, 1560, 1571, 1560, 1571, 1571, 1591,
     1583, 1573, 1541, 1546, 1561, 1561, 1561, 1561, 1543, 1561,
     1552, 1539, 1562, 1562, 1562, 1562, 1560, 1562, 1573, 1562,
     1563, 1563, 1563, 1563, 1575, 1563, 1581, 1564, 1564, 1564,

     1564, 1561, 1564, 1585, 1564, 1566, 1566, 1566, 1566, 1572,
     1566, 1575, 1572, 1581, 1563, 1567, 1567, 1567, 1567, 1585,
     1567, 1568, 1568, 1568, 1568, 1576, 1568, 1576, 1576, 1580,
     1582, 1592, 1580, 1582, 1584, 1584, 1586, 1586, 1587, 1594,
     1593, 1587, 1593, 1595, 1600, 1595, 1601, 1600, 1602, 1603,
     1605, 1602, 1550, 1592, 1604, 1604, 1606, 1606, 1594, 1607,
     1630, 1630, 1607, 1601, 1624, 1635, 1605, 1635, 1603, 1617,
     1617, 1617, 1617, 1576, 1617, 1618, 1618, 1618, 1618, 1548,
     1618, 1624, 1619, 1619, 1619, 1619, 1587, 1619, 1623, 1619,
     1623, 1623, 1625, 1628, 1625, 1625, 1634, 1638, 1626, 1618,

     1626, 1626, 1629, 1631, 1547, 1629, 1631, 1607, 1632, 1628,
     1545, 1632, 1648, 1638, 1639, 1634, 1544, 1639, 1640, 1640,
     1641, 1642, 1542, 1641, 1642, 1646, 1646, 1646, 1646, 1648,
     1646, 1649, 1646, 1649, 1649, 1650, 1540, 1650, 1650, 1651,
     1651, 1652, 1653, 1530, 1652, 1653, 1654, 1529, 1654, 1626,
     1656, 1656, 1657, 1658, 1664, 1657, 1658, 1664, 1662, 1632,
     1662, 1662, 1663, 1665, 1663, 1663, 1665, 1667, 1668, 1527,
     1667, 1668, 1642, 1526, 1663, 1665, 1670, 1650, 1670, 1670,
     1668, 1524, 1671, 1672, 1653, 1671, 1672, 1522, 1521, 1513,
     1512, 1510, 1509, 1507, 1505, 1658, 1675, 1495, 1675, 1675,

     1675, 1675, 1675, 1676, 1494, 1492, 1676, 1676, 1676, 1676,
     1677, 1491, 1677, 1677, 1678, 1489, 1678, 1678, 1679, 1679,
     1679, 1679, 1679, 1679, 1679, 1680, 1487, 1680, 1680, 1680,
     1680, 1680, 1681, 1479, 1681, 1681, 1681, 1681, 1681, 1682,
     1468, 1682, 1682, 1682, 1682, 1682, 1683, 1458, 1455, 1683,
     1453, 1683, 1683, 1684, 1451, 1450, 1684, 1449, 1684, 1684,
     1685, 1448, 1685, 1685, 1685, 1685, 1685, 1686, 1686, 1687,
     1687, 1688, 1447, 1445, 1688, 1444, 1688, 1688, 1689, 1443,
     1429, 1689, 1414, 1689, 1689, 1690, 1410, 1690, 1690, 1690,
     1690, 1690, 1691, 1691, 1691, 1691, 1691, 1691, 1691, 1692,

     1391, 1372, 1692, 1357, 1692, 1692, 1693, 1347, 1346, 1693,
     1345, 1693, 1693, 1694, 1344, 1694, 1694, 1694, 1694, 1694,
     1695, 1343, 1342, 1695, 1341, 1695, 1695, 1696, 1340, 1339,
     1696, 1338, 1696, 1696, 1697, 1337, 1697, 1697, 1697, 1697,
     1697, 1336, 1335, 1333, 1332, 1331, 1330, 1329, 1307, 1294,
     1285, 1262, 1237, 1213, 1212, 1211, 1210, 1209, 1208, 1207,
     1206, 1205, 1204, 1202, 1201, 1199, 1197, 1196, 1195, 1194,
     1193, 1190, 1174, 1123, 1093, 1058, 1057, 1056, 1055, 1054,
     1053, 1052, 1051, 1050, 1049, 1048, 1047, 1046, 1045, 1044,
     1042, 1041, 1040, 1038, 1037, 1036, 1034, 1033, 1025, 1011,

      993,  982,  966,  952,  934,  920,  878,  876,  875,  874,
      872,  871,  869,  868,  867,  866,  865,  864,  863,  861,
      857,  856,  855,  854,  853,  851,  850,  849,  848,  847,
      838,  814,  805,  781,  772,  748,  739,  725,  679,  678,
      677,  676,  675,  674,  673,  672,  670,  669,  668,  667,
      666,  665,  664,  663,  662,  661,  659,  658,  657,  656,
      655,  654,  653,  652,  651,  650,  649,  648,  646,  644,
      614,  611,  608,  575,  573,  543,  540,  537,  512,  470,
      469,  468,  467,  465,  464,  463,  462,  461,  460,  459,
      458,  457,  456,  455,  454,  453,  452,  451,  450,  449,

      448,  447,  446,  445,  444,  443,  442,  441,  440,  438,
      423,  421,  411,  406,  373,  372,  369,  365,  350,  348,
      338,  299,  257,  252,  251,  247,  246,  245,  243,  242,
      241,  240,  239,  238,  236,  235,  234,  233,  232,  231,
      230,  229,  227,  224,  223,  221,  203,  192,  186,  158,
      157,  155,  137,  126,  102,   85,   55,   45,   44,   43,
       42,   41,   39,   38,   37,   36,   34,   33,   32,   31,
       30,   29,   27,   26,   25,   23,   17,   13, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,

     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#define INITIAL 0
#line 2 "levcomp.lpp"

// levcomp.l:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
// 
// Based loosely on NetHack's lev_comp.l

#include "AppHdr.h"
#include "levcomp.tab.h"
#include <cstring>
#include <queue>

static bool alloced = false;

std::queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(20);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

static void settext()
{
    clean();
    if ((yylval.text = strdup(yytext)))
        alloced = true;
}

#define MAPDEF 1

#define ARGUMENT 2

#define MNAME 3

#define KEYWORDS 4

#define ITEM_LIST 5

#define YY_NEVER_INTERACTIVE 1
#line 2363 "levcomp.lex.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 61 "levcomp.lpp"


#line 2520 "levcomp.lex.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1674 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4579 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 63 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 65 "levcomp.lpp"
;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 67 "levcomp.lpp"
{
                        settext();
                        return MAP_LINE;
                    }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 71 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 73 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 78 "levcomp.lpp"
;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 79 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 81 "levcomp.lpp"
{ 
                        settext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 86 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 87 "levcomp.lpp"
;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 88 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 90 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 92 "levcomp.lpp"
{ 
                        settext();
                        return MONSTER_NAME; 
                    }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 97 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 98 "levcomp.lpp"
;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 100 "levcomp.lpp"
{ 
                        BEGIN(INITIAL);
                        settext();
                        return STRING; 
                    }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 106 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 108 "levcomp.lpp"
;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 110 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 113 "levcomp.lpp"
{ BEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 114 "levcomp.lpp"
return DEFAULT_DEPTH;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 115 "levcomp.lpp"
return DEPTH;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 116 "levcomp.lpp"
return ORIENT;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 117 "levcomp.lpp"
{ BEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 118 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 119 "levcomp.lpp"
return FLAGS;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 120 "levcomp.lpp"
{ BEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 121 "levcomp.lpp"
{ BEGIN(ARGUMENT); return SYMBOL; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 122 "levcomp.lpp"
{ BEGIN(MNAME); return MONS; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 123 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 125 "levcomp.lpp"
return BRANCH;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 126 "levcomp.lpp"
return DEFAULT;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 127 "levcomp.lpp"
return DESC;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 128 "levcomp.lpp"
return BRANCH;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 129 "levcomp.lpp"
return ROOT_DEPTH;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 130 "levcomp.lpp"
return FLOOR_COLOUR;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 131 "levcomp.lpp"
return ROCK_COLOUR;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 133 "levcomp.lpp"
return LEVEL;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 134 "levcomp.lpp"
return END;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 135 "levcomp.lpp"
return PVAULT;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 136 "levcomp.lpp"
return PMINIVAULT;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 138 "levcomp.lpp"
{ BEGIN(ARGUMENT); return ENTRY_MSG; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 139 "levcomp.lpp"
{ BEGIN(ARGUMENT); return EXIT_MSG; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 141 "levcomp.lpp"
return MONSTERS;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 142 "levcomp.lpp"
return ENDMONSTERS;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 145 "levcomp.lpp"
return PANDEMONIC;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 146 "levcomp.lpp"
return NO_HMIRROR;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 147 "levcomp.lpp"
return NO_VMIRROR;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 148 "levcomp.lpp"
return NO_ROTATE;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 150 "levcomp.lpp"
return ENCOMPASS;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 151 "levcomp.lpp"
return NORTH;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 152 "levcomp.lpp"
return SOUTH;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 153 "levcomp.lpp"
return EAST;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 154 "levcomp.lpp"
return WEST;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 155 "levcomp.lpp"
return NORTHEAST;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 156 "levcomp.lpp"
return NORTHWEST;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 157 "levcomp.lpp"
return SOUTHEAST;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 158 "levcomp.lpp"
return SOUTHWEST;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 159 "levcomp.lpp"
return FLOAT;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 161 "levcomp.lpp"
return DASH;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 162 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 164 "levcomp.lpp"
{
                        clean();
                        yylval.i = atoi(yytext);
                        return INTEGER;
                    }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 170 "levcomp.lpp"
;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 171 "levcomp.lpp"
;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 173 "levcomp.lpp"
return OPAREN;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 174 "levcomp.lpp"
return CPAREN;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 176 "levcomp.lpp"
return QUOTE;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 178 "levcomp.lpp"
{
                        settext();
                        return IDENTIFIER;
                    }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 183 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 185 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 2985 "levcomp.lex.cc"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(MAPDEF):
			case YY_STATE_EOF(ARGUMENT):
			case YY_STATE_EOF(MNAME):
			case YY_STATE_EOF(KEYWORDS):
			case YY_STATE_EOF(ITEM_LIST):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1674 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1674 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1673);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');
	if ( yy_current_buffer->yy_at_bol )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 185 "levcomp.lpp"


int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}
