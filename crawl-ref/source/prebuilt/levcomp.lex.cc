#line 2 "levcomp.lex.cc"

#line 4 "levcomp.lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 66
#define YY_END_OF_BUFFER 67
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[874] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   67,   65,
       63,   64,   65,   61,   62,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       63,   30,   32,   65,   65,   65,   65,   65,   65,   66,
        6,   66,   66,    4,    2,    3,   66,    2,    2,    2,
        2,    9,   10,   66,    9,    9,   66,   12,   66,   65,
       26,   65,   61,   62,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   30,
       32,   65,   65,   65,   65,   65,   65,   65,   24,   21,

       24,   23,   62,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   24,   30,
       32,   65,   65,   65,   65,   65,   65,   14,   15,   65,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   13,   13,
       13,   13,   13,   17,   19,   20,   66,   18,   66,   29,
       66,   66,   63,   64,   62,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   63,   30,   32,    0,
        0,    0,    0,   30,    0,    0,    0,    0,    0,    0,

        0,   35,    6,    5,    0,    0,    2,    3,    2,    0,
        2,    2,    2,    2,    9,    9,   10,    9,    9,    9,
        0,   11,   12,   25,    0,   26,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   30,
       25,   25,   25,   25,   25,   25,   25,   25,    0,   24,
       21,   24,   21,   62,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   24,   30,    0,    0,    0,
        0,    0,    0,    0,   35,   14,   15,    0,   15,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   14,   13,   13,   13,   13,   13,   13,   13,
       16,    0,   19,   20,    0,    0,   28,    0,   28,    0,
       27,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        2,    9,    9,    9,    7,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   31,    0,    0,    0,    0,    0,    2,    9,    8,

        9,    7,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,    0,    0,   25,   25,   25,
       25,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,    0,    0,   22,   22,   22,   22,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,    0,    0,    0,    0,
        0,   54,    0,    0,    0,    0,    0,    0,   53,   38,

        0,    0,    0,    0,    0,   47,    0,    0,    0,   34,
        0,    0,    0,    0,    2,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,    0,   25,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,    0,
       22,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,    0,    0,    0,   40,   46,   57,   58,   60,

       59,    0,    0,    0,    0,   42,    0,   50,    0,    0,
        0,    0,    0,   37,    1,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   49,   44,   52,   48,   55,   51,   41,    0,
       45,    0,    0,    0,    0,    1,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   22,

       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   13,   13,   13,   13,   13,   56,   43,    0,
        0,    0,    0,   25,   25,   25,    0,   25,   25,   22,
       22,   22,    0,   22,   22,   13,   13,    0,   33,    0,
        0,   25,   25,    0,   25,   22,   22,    0,   22,   13,
        0,   36,   25,   25,   22,   22,   13,    0,   25,   22,
       13,    0,   25,   22,   13,    0,   25,   22,   13,   39,
       25,   22,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    7,    8,    1,    1,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,    1,    1,
        1,    1,    1,    1,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       20,   27,   28,   29,   30,   20,   31,   20,   20,   20,
        1,   32,    1,    1,   20,    1,   33,   20,   20,   34,

       35,   36,   20,   37,   38,   20,   20,   39,   20,   20,
       40,   41,   20,   42,   43,   44,   45,   46,   20,   20,
       20,   20,   47,    1,   48,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[49] =
    {   0,
        1,    2,    3,    4,    1,    1,    5,    6,    6,    1,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    1,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    1,    1
    } ;

static yyconst flex_int16_t yy_base[895] =
    {   0,
        0,   47,   55,   60,   52,   64,   47,   68,  112,  159,
      206,  253,  300,  347,   74,   80,   70,  159, 2191, 2192,
       87, 2192, 2187, 2192, 2180, 2172,   73, 2172, 2164, 2156,
       85, 2168,   85,   69, 2156, 2160,   81, 2170, 2165, 2144,
      393,    0, 2192,  155, 2133, 2135,  144,  135, 2129, 2192,
     2192, 2172,  168, 2192,    0, 2192, 2171,  172,    0, 2149,
      241, 2124, 2192, 2168,  135, 2122, 2166, 2192, 2165,  184,
     2192, 2164,  188,  192,  262,  268,  275,  354,  358,  362,
      367,  400,  405,  387,  375,  413,  417,  283,  422,  433,
      440,  444,  448,  454,  458,  462,  466,    0,  470, 2192,

      474, 2192, 2157, 2149,  243, 2149, 2141, 2133,  246, 2145,
      170,  246, 2133, 2137,  253, 2147, 2142, 2121,  480,  102,
        0,  174, 2110, 2112,  161,  256, 2106,  484, 2192, 2149,
        0, 2142, 2134,  257, 2134, 2126, 2118,  475, 2130,  270,
      340, 2118, 2122,  343, 2132, 2127, 2106,  500,  371, 2095,
     2097,  331,  373,  418,  504, 2192, 2135, 2192,  352, 2192,
      397,  509,  449, 2192, 2128, 2114, 2124, 2112, 2107, 2121,
     2116, 2115, 2100,  436, 2106, 2100, 2102, 2102, 2094, 2101,
     2105, 2085, 2102, 2087,  496, 2067,    0,    0, 2192, 2057,
     2054,  457, 2045,    0,  386, 2058, 2055, 2073,  457, 2039,

     2029, 2192, 2192, 2192, 2064,  516,    0, 2192,    0, 2063,
      519, 2041, 2030,  484, 2005, 1994, 2192,  393, 1953,  523,
     1997, 2192, 2192,  527,  531, 2192,  535,  541,  545,  550,
      555,  562,  572,  578,  584,  590,  594,  598,  602,  606,
      615,  619,  626,  630,  637,  642,  646,  650,  659,  665,
      669,  673,  677,  683,  687,  695,  699,  703,  546,  711,
     2192,  715, 2192,  556,  631,  573,  719,  720,  607,  678,
      721,  726,  727,  735,  737,  638,  742,  743,  748,  749,
      754,  756,  761,  767,  769,    0,  775,  783,  785,  789,
      790,  791,  797,  795,  801,  817, 2192, 1994, 2192,    0,

     1987, 1973, 1982, 1970, 1964, 1978, 1969, 1963, 1944,  505,
     1946, 1935, 1932, 1925, 1910, 1895, 1892, 1872, 1885, 1873,
      785, 1847,    0,  542, 1846, 1840, 1855,  519, 1822, 1809,
      806,  810,  823, 2192, 1844,  398, 2192,  827, 2192,  835,
     2192, 1830, 1791, 1781, 1771, 1782, 1771, 1778, 1766, 1749,
     1749, 1751, 1732, 1713, 1719, 1718, 1699, 1695, 1683, 1666,
     1662, 1664, 1664, 1640,  839,  811, 1628, 1640, 1624, 1616,
     1632,  843,  847,  851, 2192,  858,  866,  871,  875,  880,
      884,  898,  906,  910,  915,  920,  924,  928,  932,  938,
      944,  949,  953,  959,  963,  968,  973,  977,  990,  994,

      998, 1002, 1007, 1011,  859,  896,  876,  911, 1015, 1003,
     1016,  978, 1020,  969, 1021, 1022, 1033,  939, 1034, 1045,
     1051, 1050, 1056, 1052, 1062, 1068, 1069, 1070, 1074, 1080,
     1075, 1086, 1087, 1092, 1093, 1097, 1098, 1103, 1640, 1623,
     1618, 1610, 1617, 1606, 1614, 1606, 1587, 1590, 1602, 1587,
     1579, 1588, 1585, 1563, 1547, 1532, 1519, 1518, 1523, 1517,
     1491, 1107, 1109, 1462, 1471, 1455, 1438, 1451, 1454, 1424,
     1432, 1418, 1432, 1407, 1412, 1410, 1397, 1407, 1405, 1403,
     1401, 1373, 1373, 1381, 1371, 1354, 1369, 1359, 1347, 1321,
     1114, 2192, 1119, 1312, 1300, 1286, 1120, 1308, 1125, 2192,

     1129, 2192, 1133, 1140, 1144, 1150, 1155, 1159, 1174, 1182,
     1186, 1190, 1194, 1204, 1210, 1219, 1223, 1228, 1232, 1237,
     1241, 1252, 1256, 1261, 1267, 1273, 1277, 1283, 1287, 1291,
     1295, 1180, 1296, 1170, 1199, 1262, 1160, 1211, 1300, 1301,
     1305, 1233, 1306, 1324, 1326, 1311, 1313, 1312, 1278, 1333,
     1338, 1339, 1344, 1345, 1349, 1351, 1353, 1358, 1359, 1363,
     1287, 1271, 1243, 1250, 1231, 1245, 1220, 1225, 1223, 1203,
     1209, 1207, 1200, 1192, 1165, 1165, 1166, 1164, 1142, 1148,
     1133, 1122, 1096, 1094, 1095, 1365, 1095, 1100, 1086, 1096,
     1091, 2192, 1083, 1071, 1056, 1049, 1020, 1016, 2192, 2192,

     1013, 1005, 1020, 1007, 1009, 2192,  985,  974,  951, 2192,
      955,  955, 1369,  929,  940, 1371, 1376, 1380, 1384, 1404,
     1400, 1413, 1417, 1424, 1428, 1435, 1439, 1443, 1447, 1451,
     1455, 1460, 1467, 1471, 1481, 1486, 1490, 1494, 1498, 1502,
     1506, 1512, 1516, 1477, 1472, 1507, 1517, 1521, 1390, 1527,
     1533, 1539, 1540, 1523, 1550, 1456, 1551, 1552, 1556, 1560,
     1562, 1564, 1566, 1570, 1571, 1577, 1578, 1584, 1586, 1585,
     1590,  924,  912,  896,  908,  896,  884,  883,  882,  873,
      846,  845,  837,  836,  847,  833,  841,  818,  820,  796,
      799,  798,  813,  807,  788, 2192, 2192, 2192, 2192, 2192,

     2192,  773,  771,  766,  765, 2192,  755, 2192,  752,  734,
      691,  698,  683, 2192,  706, 1596, 1600, 1607, 1618, 1622,
     1626, 1631, 1636, 1640, 1644, 1648, 1655, 1659, 1666, 1670,
     1674, 1678, 1682, 1687, 1691, 1696, 1700, 1701, 1705, 1707,
     1591, 1711, 1716, 1717, 1718, 1722, 1723, 1727, 1733, 1734,
     1740, 1744, 1745, 1746, 1750, 1752, 1756, 1758, 1762,  699,
      692,  688,  680,  674,  666,  662,  651,  648,  642,  612,
      592,  578, 2192, 2192, 2192, 2192, 2192, 2192, 2192,  604,
     2192,  595,  589, 1764,  556,  585, 1766, 1770, 1774, 1778,
     1782, 1788, 1793, 1799, 1803, 1808, 1812, 1817, 1821, 1783,

     1822, 1826, 1827, 1828, 1832, 1833, 1834, 1838, 1840, 1844,
     1846, 1852,  575,  569,  562, 1853,  518, 2192, 2192,  504,
     1857,  487, 1858, 1863, 1867, 1872, 1876, 1880, 1884, 1868,
     1889, 1890, 1894, 1896, 1905,  483, 1906,  475, 2192, 1907,
      418, 1911, 1915, 1924, 1928, 1916, 1920, 1932, 1933,  340,
      324, 2192, 1940, 1945, 1953, 1934,  309,  253, 1955, 1959,
      216,  166, 1961, 1965,  142,   95, 1972, 1981,   59, 2192,
     1983, 1967, 2192, 2003, 2009, 2015, 2021, 2027, 2033, 2039,
     2045, 2051, 2057, 2063, 2069, 2075, 2081, 2087, 2093,   48,
     2099, 2105, 2111, 2117

    } ;

static yyconst flex_int16_t yy_def[895] =
    {   0,
      873,    1,  874,  875,  876,  876,  877,  877,  873,    9,
      873,   11,  873,   13,  878,  878,  879,  879,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  880,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  881,  873,  882,  873,  873,  883,  882,  882,
      882,  884,  873,  873,  884,  884,  885,  873,  873,  886,
      873,  873,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  887,
      886,  886,  886,  886,  886,  886,  886,  888,  873,  873,

      873,  873,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,   41,  889,
      888,  888,  888,  888,  888,  888,  888,  873,  873,  873,
      890,  890,  890,  890,  890,  890,  890,  890,  890,  890,
      890,  890,  890,  890,  890,  890,  890,   41,  890,  890,
      890,  890,  890,  891,  873,  873,  873,  873,  892,  873,
      892,  892,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,   41,  880,  873,  873,
      873,  873,  873,  880,  873,  873,  873,  873,  873,  873,

      873,  873,  873,  873,  873,  873,  882,  873,  882,  873,
      882,  882,  882,  882,  884,  884,  873,  884,  884,  884,
      885,  873,  873,  886,  886,  873,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  887,  887,
      886,  886,  886,  886,  886,  886,  886,  886,  893,  873,
      873,  873,  873,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  119,  894,  893,  893,  893,
      893,  893,  893,  893,  893,  873,  873,  873,  873,  890,

      890,  890,  890,  890,  890,  890,  890,  890,  890,  890,
      890,  890,  890,  890,  890,  890,  890,  890,  890,  890,
      890,  890,  148,  890,  890,  890,  890,  890,  890,  890,
      891,  891,  873,  873,  873,  892,  873,  892,  873,  892,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      882,  884,  884,  884,  873,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,

      886,  886,  886,  886,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  894,
      893,  893,  893,  893,  893,  893,  893,  893,  890,  890,
      890,  890,  890,  890,  890,  890,  890,  890,  890,  890,
      890,  890,  890,  890,  890,  890,  890,  890,  890,  890,
      890,  890,  890,  890,  890,  890,  890,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  882,  884,  873,

      884,  873,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      890,  890,  890,  890,  890,  890,  890,  890,  890,  890,
      890,  890,  890,  890,  890,  890,  890,  890,  890,  890,
      890,  890,  890,  890,  890,  890,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,

      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  882,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  890,  890,  890,  890,  890,  890,  890,  890,  890,
      890,  890,  890,  890,  890,  890,  890,  890,  890,  890,
      890,  890,  873,  873,  873,  873,  873,  873,  873,  873,

      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  882,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  890,
      890,  890,  890,  890,  890,  890,  890,  890,  890,  890,
      890,  890,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  882,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  893,

      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  890,  890,  890,  890,  890,  873,  873,  873,
      873,  873,  873,  886,  886,  886,  886,  886,  886,  893,
      893,  893,  893,  893,  893,  890,  890,  873,  873,  873,
      873,  886,  886,  886,  886,  893,  893,  893,  893,  890,
      873,  873,  886,  886,  893,  893,  890,  873,  886,  893,
      890,  873,  886,  893,  890,  873,  886,  893,  890,  873,
      886,  893,    0,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873

    } ;

static yyconst flex_int16_t yy_nxt[2241] =
    {   0,
       20,   21,   22,   23,   21,   20,   24,   20,   25,   20,
       20,   26,   27,   28,   20,   29,   20,   20,   30,   20,
       31,   32,   33,   34,   35,   36,   20,   37,   38,   20,
       39,   20,   20,   40,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   41,   68,
       69,   41,   42,  300,   63,   64,   43,   51,   52,   53,
       54,   50,   56,   57,   58,   59,   63,   64,  870,   44,
       68,   69,  160,  161,   60,  155,  156,  157,  155,  178,
      158,  155,  156,  157,  155,   45,  158,   46,  163,   47,
      167,  163,   48,   49,   65,  176,  179,  168,  182,   66,

      172,  162,   61,  173,  870,  194,   65,  174,  194,  177,
      183,   66,   70,   21,   71,   72,   21,   70,   73,   70,
       74,   70,   70,   75,   76,   77,   70,   78,   70,   70,
       79,   70,   80,   81,   82,   83,   84,   85,   70,   86,
       87,   70,   88,   70,   70,   89,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       41,  160,  161,   41,   90,  195,  198,  200,   91,  201,
      203,  205,  206,  204,  208,  210,  211,  218,  869,  177,
      275,   92,  219,  291,  288,  225,  199,  225,  225,  225,
      162,  225,  225,  225,  276,  225,  225,   93,  276,   94,

      227,   95,  866,  292,   96,   97,   98,   99,  100,  101,
       99,   98,  102,   98,  103,   98,   98,  104,  105,  106,
       98,  107,   98,   98,  108,   98,  109,  110,  111,  112,
      113,  114,   98,  115,  116,   98,  117,   98,   98,  118,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,  119,  213,  277,  119,  120,  865,
      266,  271,  121,  225,  272,  225,  225,  267,  273,  225,
      281,  225,  225,  278,  303,  122,  225,  228,  225,  225,
      312,  304,  282,  214,  225,  229,  225,  225,  293,  231,
      294,  123,  230,  124,  313,  125,  862,  247,  126,  127,

       20,  128,  129,  130,  128,   20,   24,  131,  132,   20,
      131,  133,  134,  135,  131,  136,  131,  131,  137,  131,
      138,  139,  140,  141,  142,  143,  131,  144,  145,  131,
      146,   20,  131,  147,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,   20,   20,  148,  861,
      314,  148,   42,  327,  337,  225,   43,  225,  225,  225,
      318,  225,  225,  225,  858,  225,  225,  315,  225,  149,
      225,  225,  319,  328,  857,  232,  225,  234,  225,  225,
      235,  324,  237,  338,  236,  150,  233,  151,  225,  152,
      225,  225,  153,   49,  187,  313,  243,  187,  188,  339,

      337,  225,  189,  225,  225,  329,  225,  330,  225,  225,
      238,  365,  353,  242,  225,  240,  225,  225,  225,  332,
      225,  225,  332,  225,  239,  225,  225,  246,  338,  338,
      244,  190,  241,  191,  250,  218,  250,  250,  192,  193,
      219,  225,  245,  225,  225,  225,  350,  225,  225,  225,
      163,  225,  225,  163,  251,  225,  248,  225,  225,  225,
      351,  225,  225,  225,  852,  225,  225,  225,  239,  225,
      225,  260,  261,  262,  260,  262,  263,  262,  262,  198,
      254,  286,  261,  262,  286,  296,  297,  298,  296,  200,
      308,  201,  252,  309,  256,  253,  257,  310,  213,  199,

      255,  323,  297,  298,  323,  333,  334,  335,  333,  851,
      340,  341,  258,  340,  362,  447,  850,  363,  203,  205,
      206,  208,  210,  211,  374,  375,  214,  374,  225,  448,
      225,  225,  225,  839,  225,  225,  225,  838,  225,  225,
      338,  327,  225,  227,  225,  225,  225,  259,  225,  225,
      259,  225,  837,  225,  225,  377,  225,  259,  225,  225,
      259,  328,  376,  225,  406,  225,  225,  462,  450,  836,
      372,  378,  380,  225,  259,  225,  225,  259,  819,  225,
      379,  225,  225,  408,  818,  225,  381,  225,  225,  786,
      823,  225,  382,  225,  225,  225,  820,  225,  225,  225,

      384,  225,  225,  225,  819,  225,  225,  225,  259,  225,
      225,  259,  383,  818,  385,  386,  225,  411,  225,  225,
      225,  817,  225,  225,  387,  388,  816,  225,  389,  225,
      225,  225,  259,  225,  225,  259,  392,  391,  225,  259,
      225,  225,  259,  225,  390,  225,  225,  225,  394,  225,
      225,  225,  407,  225,  225,  815,  814,  781,  395,  393,
      250,  419,  250,  250,  396,  813,  250,  397,  250,  250,
      225,  779,  225,  225,  225,  778,  225,  225,  225,  259,
      225,  225,  259,  777,  225,  398,  225,  225,  225,  776,
      225,  225,  412,  402,  399,  387,  225,  775,  225,  225,

      225,  774,  225,  225,  225,  400,  225,  225,  773,  254,
      786,  401,  260,  261,  262,  260,  262,  261,  262,  262,
      259,  259,  259,  259,  259,  259,  785,  259,  259,  255,
      259,  259,  784,  403,  783,  413,  259,  415,  259,  259,
      409,  259,  404,  259,  259,  410,  259,  259,  782,  259,
      259,  416,  259,  259,  414,  259,  417,  259,  259,  423,
      259,  781,  259,  418,  420,  259,  422,  425,  259,  780,
      259,  259,  421,  259,  779,  778,  287,  426,  194,  287,
      777,  194,  776,  424,  259,  427,  259,  259,  428,  259,
      259,  259,  259,  259,  259,  259,  259,  775,  259,  259,

      434,  259,  259,  459,  429,  259,  460,  332,  431,  418,
      332,  332,  493,  435,  332,  493,  774,  432,  296,  297,
      298,  296,  773,  433,  333,  334,  335,  333,  340,  341,
      772,  340,  771,  436,  770,  437,  340,  341,  438,  340,
      491,  492,  769,  491,  499,  500,  768,  499,  501,  502,
      708,  501,  374,  375,  767,  374,  706,  494,  338,  225,
      259,  225,  225,  259,  766,  765,  338,  225,  503,  225,
      225,  764,  225,  763,  225,  225,  225,  259,  225,  225,
      259,  225,  701,  225,  225,  225,  532,  225,  225,  504,
      372,  700,  699,  698,  372,  505,  507,  259,  216,  225,

      259,  225,  225,  506,  406,  697,  508,  225,  509,  225,
      225,  225,  259,  225,  225,  259,  225,  696,  225,  225,
      510,  225,  762,  225,  225,  225,  761,  225,  225,  225,
      513,  225,  225,  225,  533,  225,  225,  511,  512,  225,
      259,  225,  225,  259,  514,  225,  516,  225,  225,  517,
      225,  760,  225,  225,  225,  515,  225,  225,  518,  543,
      225,  519,  225,  225,  225,  715,  225,  225,  520,  225,
      259,  225,  225,  259,  225,  714,  225,  225,  225,  259,
      225,  225,  259,  539,  523,  524,  521,  713,  712,  711,
      522,  526,  492,  225,  526,  527,  710,  225,  527,  225,

      537,  225,  225,  225,  259,  225,  225,  259,  225,  525,
      225,  225,  225,  709,  225,  225,  259,  259,  708,  259,
      259,  259,  259,  259,  259,  259,  259,  399,  707,  706,
      538,  535,  536,  705,  259,  259,  529,  259,  259,  534,
      528,  704,  703,  542,  530,  541,  259,  702,  540,  259,
      531,  259,  259,  259,  259,  259,  259,  259,  701,  545,
      259,  544,  546,  259,  547,  700,  259,  549,  548,  259,
      259,  259,  259,  259,  259,  259,  555,  492,  259,  555,
      699,  287,  553,  194,  287,  552,  194,  556,  259,  550,
      556,  259,  698,  259,  259,  551,  259,  259,  259,  259,

      697,  259,  259,  434,  259,  696,  554,  259,  491,  492,
      493,  491,  695,  493,  694,  491,  492,  431,  491,  435,
      493,  613,  693,  493,  613,  558,  499,  500,  692,  499,
      501,  502,  557,  501,  225,  559,  225,  225,  691,  436,
      690,  225,  560,  225,  225,  225,  689,  225,  225,  616,
      688,  225,  617,  225,  225,  494,  225,  606,  225,  225,
      225,  259,  225,  225,  259,  494,  614,  619,  621,  649,
      687,  259,  216,  618,  259,  225,  216,  225,  225,  686,
      685,  259,  620,  225,  259,  225,  225,  225,  684,  225,
      225,  225,  683,  225,  225,  225,  644,  225,  225,  646,

      259,  600,  622,  259,  623,  225,  624,  225,  225,  599,
      626,  225,  259,  225,  225,  259,  647,  625,  627,  628,
      225,  682,  225,  225,  225,  681,  225,  225,  629,  225,
      680,  225,  225,  225,  259,  225,  225,  259,  225,  650,
      225,  225,  225,  679,  225,  225,  632,  678,  677,  654,
      630,  631,  633,  225,  592,  225,  225,  225,  676,  225,
      225,  635,  225,  259,  225,  225,  259,  675,  225,  634,
      225,  225,  674,  636,  526,  492,  225,  526,  527,  259,
      225,  527,  259,  673,  225,  637,  225,  225,  225,  648,
      225,  225,  225,  661,  225,  225,  642,  259,  225,  642,

      259,  259,  259,  672,  259,  259,  259,  259,  645,  259,
      259,  638,  259,  259,  259,  259,  259,  259,  615,  612,
      655,  652,  651,  528,  641,  259,  660,  259,  259,  639,
      259,  640,  653,  656,  259,  657,  659,  259,  658,  259,
      259,  643,  259,  259,  611,  259,  259,  663,  259,  259,
      555,  492,  556,  555,  259,  556,  664,  259,  610,  259,
      259,  662,  259,  259,  670,  609,  613,  670,  665,  613,
      613,  608,  225,  613,  225,  225,  607,  225,  606,  225,
      225,  225,  605,  225,  225,  225,  604,  225,  225,  666,
      717,  259,  669,  719,  259,  603,  602,  557,  716,  667,

      601,  225,  668,  225,  225,  225,  718,  225,  225,  671,
      600,  614,  599,  720,  225,  614,  225,  225,  225,  598,
      225,  225,  721,  597,  596,  225,  722,  225,  225,  225,
      595,  225,  225,  723,  594,  593,  225,  724,  225,  225,
      225,  592,  225,  225,  225,  591,  225,  225,  225,  590,
      225,  225,  225,  589,  225,  225,  225,  259,  225,  225,
      259,  225,  725,  225,  225,  726,  588,  587,  225,  729,
      225,  225,  225,  259,  225,  225,  259,  586,  259,  727,
      731,  259,  225,  728,  225,  225,  739,  225,  730,  225,
      225,  225,  585,  225,  225,  225,  462,  225,  225,  225,

      584,  225,  225,  225,  738,  225,  225,  225,  259,  225,
      225,  259,  733,  642,  732,  225,  642,  225,  259,  225,
      225,  259,  259,  583,  259,  259,  741,  259,  259,  582,
      742,  259,  734,  740,  259,  735,  743,  259,  736,  581,
      259,  259,  744,  259,  259,  580,  579,  578,  745,  746,
      747,  259,  259,  259,  259,  259,  259,  259,  643,  577,
      259,  259,  737,  259,  259,  259,  259,  259,  259,  751,
      259,  259,  259,  753,  259,  259,  748,  576,  259,  259,
      749,  259,  259,  752,  750,  259,  670,  259,  259,  670,
      259,  259,  259,  755,  259,  259,  575,  225,  754,  225,

      225,  225,  574,  225,  225,  787,  573,  572,  225,  788,
      225,  225,  571,  570,  569,  756,  789,  757,  758,  225,
      568,  225,  225,  225,  567,  225,  225,  225,  566,  225,
      225,  671,  225,  565,  225,  225,  759,  225,  564,  225,
      225,  225,  563,  225,  225,  225,  562,  225,  225,  225,
      561,  225,  225,  790,  498,  497,  225,  791,  225,  225,
      225,  496,  225,  225,  792,  365,  495,  225,  793,  225,
      225,  225,  490,  225,  225,  225,  489,  225,  225,  225,
      488,  225,  225,  225,  794,  225,  225,  795,  225,  487,
      225,  225,  225,  486,  225,  225,  796,  225,  485,  225,

      225,  225,  259,  225,  225,  259,  259,  484,  259,  259,
      800,  259,  259,  483,  801,  259,  802,  259,  259,  259,
      259,  259,  259,  259,  259,  798,  259,  259,  259,  482,
      797,  259,  803,  481,  259,  259,  804,  259,  259,  799,
      480,  259,  805,  806,  259,  259,  259,  259,  259,  259,
      259,  259,  479,  259,  259,  808,  259,  259,  807,  259,
      259,  478,  259,  259,  809,  821,  259,  225,  821,  225,
      225,  225,  477,  225,  225,  225,  476,  225,  225,  225,
      475,  225,  225,  225,  259,  225,  225,  259,  474,  225,
      811,  225,  225,  473,  225,  810,  225,  225,  472,  471,

      225,  812,  225,  225,  225,  470,  225,  225,  824,  225,
      822,  225,  225,  225,  469,  225,  225,  825,  827,  826,
      225,  827,  225,  259,  225,  225,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      468,  259,  259,  830,  259,  259,  334,  833,  259,  831,
      833,  832,  467,  259,  821,  829,  259,  821,  821,  840,
      466,  821,  840,  828,  225,  465,  225,  225,  225,  259,
      225,  225,  259,  225,  464,  225,  225,  827,  463,  225,
      827,  225,  461,  225,  225,  844,  835,  225,  844,  458,
      259,  259,  834,  259,  259,  833,  457,  259,  833,  822,

      259,  456,  455,  822,  841,  842,  848,  840,  840,  848,
      840,  840,  225,  454,  225,  225,  225,  259,  225,  225,
      259,  259,  828,  846,  259,  844,  843,  225,  844,  225,
      845,  225,  225,  848,  259,  259,  848,  259,  259,  453,
      834,  225,  847,  225,  225,  853,  225,  452,  225,  225,
      855,  849,  841,  841,  259,  451,  225,  259,  225,  225,
      259,  450,  225,  259,  225,  225,  259,  449,  259,  259,
      845,  259,  446,  225,  854,  225,  225,  445,  849,  856,
      859,  871,  259,  444,  225,  259,  225,  225,  443,  442,
      872,  441,  440,  860,  439,  301,  297,  867,  863,  222,

      373,  868,  864,   50,   50,   50,   50,   50,   50,   55,
       55,   55,   55,   55,   55,   62,   62,   62,   62,   62,
       62,   67,   67,   67,   67,   67,   67,  154,  154,  154,
      154,  154,  154,  159,  159,  159,  159,  159,  159,  194,
      194,  372,  194,  194,  194,  204,  204,  204,  204,  204,
      204,  207,  216,  212,  371,  207,  207,  209,  209,  209,
      209,  209,  209,  215,  215,  208,  203,  215,  215,  221,
      221,  221,  370,  221,  221,  224,  224,  369,  224,  224,
      224,  249,  249,  368,  249,  249,  249,  259,  259,  367,
      366,  202,  259,  287,  287,  197,  287,  287,  287,  331,

      331,  196,  364,  361,  331,  336,  336,  336,  336,  336,
      336,  405,  405,  360,  359,  358,  405,  430,  430,  357,
      430,  430,  430,  356,  355,  354,  353,  352,  349,  348,
      347,  346,  345,  344,  343,  342,  165,  334,  326,  325,
      322,  321,  320,  317,  316,  311,  307,  306,  305,  302,
      301,  299,  295,  290,  289,  285,  284,  283,  280,  279,
      274,  270,  269,  268,  265,  264,  226,  223,  222,  220,
      217,  216,  212,  208,  203,  202,  197,  196,  186,  185,
      184,  181,  180,  175,  171,  170,  169,  166,  165,  164,
      873,   19,  873,  873,  873,  873,  873,  873,  873,  873,

      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  873
    } ;

static yyconst flex_int16_t yy_chk[2241] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    7,
        7,    2,    2,  890,    5,    5,    2,    3,    3,    3,
        3,    4,    4,    4,    4,    4,    6,    6,  869,    2,
        8,    8,   17,   17,    4,   15,   15,   15,   15,   34,
       15,   16,   16,   16,   16,    2,   16,    2,   21,    2,
       27,   21,    2,    2,    5,   33,   34,   27,   37,    5,

       31,   17,    4,   31,  866,  120,    6,   31,  120,   33,
       37,    6,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
       10,   18,   18,   10,   10,   44,   47,   48,   10,   48,
       53,   53,   53,   58,   58,   58,   58,   65,  865,   44,
      111,   10,   65,  125,  122,   70,   47,   70,   70,   73,
       18,   73,   73,   74,  111,   74,   74,   10,  122,   10,

       74,   10,  862,  125,   10,   10,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   12,   61,  112,   12,   12,  861,
      105,  109,   12,   75,  109,   75,   75,  105,  109,   76,
      115,   76,   76,  112,  134,   12,   77,   75,   77,   77,
      140,  134,  115,   61,   88,   76,   88,   88,  126,   77,
      126,   12,   76,   12,  140,   12,  858,   88,   12,   12,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   14,  857,
      141,   14,   14,  152,  159,   78,   14,   78,   78,   79,
      144,   79,   79,   80,  851,   80,   80,  141,   81,   14,
       81,   81,  144,  152,  850,   78,   85,   80,   85,   85,
       80,  149,   81,  159,   80,   14,   79,   14,   84,   14,
       84,   84,   14,   14,   41,  149,   85,   41,   41,  161,

      336,   82,   41,   82,   82,  153,   83,  153,   83,   83,
       82,  195,  195,   84,   86,   83,   86,   86,   87,  154,
       87,   87,  154,   89,   82,   89,   89,   87,  161,  336,
       86,   41,   83,   41,   90,  218,   90,   90,   41,   41,
      218,   91,   86,   91,   91,   92,  174,   92,   92,   93,
      163,   93,   93,  163,   92,   94,   89,   94,   94,   95,
      174,   95,   95,   96,  841,   96,   96,   97,   92,   97,
       97,   99,   99,   99,   99,  101,  101,  101,  101,  199,
       95,  119,  119,  119,  119,  128,  128,  128,  128,  192,
      138,  192,   93,  138,   96,   94,   96,  138,  214,  199,

       95,  148,  148,  148,  148,  155,  155,  155,  155,  838,
      162,  162,   97,  162,  185,  310,  836,  185,  206,  206,
      206,  211,  211,  211,  220,  220,  214,  220,  224,  310,
      224,  224,  225,  822,  225,  225,  227,  820,  227,  227,
      162,  328,  228,  227,  228,  228,  229,  259,  229,  229,
      259,  230,  817,  230,  230,  229,  231,  264,  231,  231,
      264,  328,  228,  232,  264,  232,  232,  324,  324,  815,
      220,  230,  232,  233,  266,  233,  233,  266,  814,  234,
      231,  234,  234,  266,  813,  235,  233,  235,  235,  786,
      785,  236,  234,  236,  236,  237,  783,  237,  237,  238,

      236,  238,  238,  239,  782,  239,  239,  240,  269,  240,
      240,  269,  235,  780,  236,  237,  241,  269,  241,  241,
      242,  772,  242,  242,  238,  239,  771,  243,  240,  243,
      243,  244,  265,  244,  244,  265,  243,  242,  245,  276,
      245,  245,  276,  246,  241,  246,  246,  247,  245,  247,
      247,  248,  265,  248,  248,  770,  769,  768,  246,  244,
      249,  276,  249,  249,  247,  767,  250,  247,  250,  250,
      251,  766,  251,  251,  252,  765,  252,  252,  253,  270,
      253,  253,  270,  764,  254,  248,  254,  254,  255,  763,
      255,  255,  270,  254,  251,  251,  256,  762,  256,  256,

      257,  761,  257,  257,  258,  252,  258,  258,  760,  255,
      715,  253,  260,  260,  260,  260,  262,  262,  262,  262,
      267,  268,  271,  267,  268,  271,  713,  272,  273,  255,
      272,  273,  712,  256,  711,  271,  274,  273,  275,  274,
      267,  275,  257,  277,  278,  268,  277,  278,  710,  279,
      280,  273,  279,  280,  272,  281,  274,  282,  281,  280,
      282,  709,  283,  275,  277,  283,  279,  282,  284,  707,
      285,  284,  278,  285,  705,  704,  287,  283,  287,  287,
      703,  287,  702,  281,  288,  284,  289,  288,  284,  289,
      290,  291,  292,  290,  291,  292,  294,  695,  293,  294,

      291,  293,  295,  321,  285,  295,  321,  331,  288,  288,
      331,  332,  366,  292,  332,  366,  694,  289,  296,  296,
      296,  296,  693,  290,  333,  333,  333,  333,  338,  338,
      692,  338,  691,  292,  690,  293,  340,  340,  294,  340,
      365,  365,  689,  365,  372,  372,  688,  372,  373,  373,
      687,  373,  374,  374,  686,  374,  685,  366,  338,  376,
      405,  376,  376,  405,  684,  683,  340,  377,  376,  377,
      377,  682,  378,  681,  378,  378,  379,  407,  379,  379,
      407,  380,  680,  380,  380,  381,  407,  381,  381,  377,
      372,  679,  678,  677,  373,  378,  380,  406,  374,  382,

      406,  382,  382,  379,  406,  676,  381,  383,  382,  383,
      383,  384,  408,  384,  384,  408,  385,  675,  385,  385,
      383,  386,  674,  386,  386,  387,  673,  387,  387,  388,
      386,  388,  388,  389,  408,  389,  389,  384,  385,  390,
      418,  390,  390,  418,  387,  391,  389,  391,  391,  390,
      392,  672,  392,  392,  393,  388,  393,  393,  391,  418,
      394,  392,  394,  394,  395,  615,  395,  395,  393,  396,
      414,  396,  396,  414,  397,  614,  397,  397,  398,  412,
      398,  398,  412,  414,  396,  397,  394,  612,  611,  609,
      395,  399,  399,  399,  399,  400,  608,  400,  400,  401,

      412,  401,  401,  402,  410,  402,  402,  410,  403,  398,
      403,  403,  404,  607,  404,  404,  409,  411,  605,  409,
      411,  413,  415,  416,  413,  415,  416,  402,  604,  603,
      413,  410,  411,  602,  417,  419,  401,  417,  419,  409,
      400,  601,  598,  417,  403,  416,  420,  597,  415,  420,
      404,  422,  421,  424,  422,  421,  424,  423,  596,  420,
      423,  419,  421,  425,  422,  595,  425,  424,  423,  426,
      427,  428,  426,  427,  428,  429,  431,  431,  429,  431,
      594,  430,  428,  430,  430,  427,  430,  432,  433,  425,
      432,  433,  593,  434,  435,  426,  434,  435,  436,  437,

      591,  436,  437,  435,  438,  590,  429,  438,  462,  462,
      463,  462,  589,  463,  588,  491,  491,  434,  491,  436,
      493,  497,  587,  493,  497,  433,  499,  499,  585,  499,
      501,  501,  432,  501,  503,  437,  503,  503,  584,  436,
      583,  504,  438,  504,  504,  505,  582,  505,  505,  503,
      581,  506,  504,  506,  506,  463,  507,  580,  507,  507,
      508,  537,  508,  508,  537,  493,  497,  506,  508,  537,
      579,  534,  499,  505,  534,  509,  501,  509,  509,  578,
      577,  532,  507,  510,  532,  510,  510,  511,  576,  511,
      511,  512,  575,  512,  512,  513,  532,  513,  513,  534,

      535,  574,  509,  535,  510,  514,  511,  514,  514,  573,
      513,  515,  538,  515,  515,  538,  535,  512,  514,  515,
      516,  572,  516,  516,  517,  571,  517,  517,  516,  518,
      570,  518,  518,  519,  542,  519,  519,  542,  520,  538,
      520,  520,  521,  569,  521,  521,  519,  568,  567,  542,
      517,  518,  520,  522,  566,  522,  522,  523,  565,  523,
      523,  522,  524,  536,  524,  524,  536,  564,  525,  521,
      525,  525,  563,  523,  526,  526,  526,  526,  527,  549,
      527,  527,  549,  562,  528,  524,  528,  528,  529,  536,
      529,  529,  530,  549,  530,  530,  531,  533,  531,  531,

      533,  539,  540,  561,  539,  540,  541,  543,  533,  541,
      543,  525,  546,  548,  547,  546,  548,  547,  498,  496,
      543,  540,  539,  527,  530,  544,  548,  545,  544,  528,
      545,  529,  541,  544,  550,  545,  547,  550,  546,  551,
      552,  531,  551,  552,  495,  553,  554,  551,  553,  554,
      555,  555,  556,  555,  557,  556,  552,  557,  494,  558,
      559,  550,  558,  559,  560,  490,  586,  560,  553,  586,
      613,  489,  616,  613,  616,  616,  488,  617,  487,  617,
      617,  618,  486,  618,  618,  619,  485,  619,  619,  554,
      617,  649,  559,  619,  649,  484,  483,  556,  616,  557,

      482,  621,  558,  621,  621,  620,  618,  620,  620,  560,
      481,  586,  480,  620,  622,  613,  622,  622,  623,  479,
      623,  623,  622,  478,  477,  624,  623,  624,  624,  625,
      476,  625,  625,  624,  475,  474,  626,  625,  626,  626,
      627,  473,  627,  627,  628,  472,  628,  628,  629,  471,
      629,  629,  630,  470,  630,  630,  631,  656,  631,  631,
      656,  632,  626,  632,  632,  627,  469,  468,  633,  632,
      633,  633,  634,  645,  634,  634,  645,  467,  644,  630,
      634,  644,  635,  631,  635,  635,  645,  636,  633,  636,
      636,  637,  466,  637,  637,  638,  465,  638,  638,  639,

      464,  639,  639,  640,  644,  640,  640,  641,  646,  641,
      641,  646,  637,  642,  636,  642,  642,  643,  647,  643,
      643,  647,  648,  461,  654,  648,  647,  654,  650,  460,
      648,  650,  638,  646,  651,  640,  650,  651,  641,  459,
      652,  653,  651,  652,  653,  458,  457,  456,  652,  653,
      654,  655,  657,  658,  655,  657,  658,  659,  642,  455,
      659,  660,  643,  661,  660,  662,  661,  663,  662,  660,
      663,  664,  665,  662,  664,  665,  655,  454,  666,  667,
      658,  666,  667,  661,  659,  668,  670,  669,  668,  670,
      669,  671,  741,  665,  671,  741,  453,  716,  664,  716,

      716,  717,  452,  717,  717,  716,  451,  450,  718,  717,
      718,  718,  449,  448,  447,  666,  718,  668,  669,  719,
      446,  719,  719,  720,  445,  720,  720,  721,  444,  721,
      721,  670,  722,  443,  722,  722,  671,  723,  442,  723,
      723,  724,  441,  724,  724,  725,  440,  725,  725,  726,
      439,  726,  726,  725,  371,  370,  727,  726,  727,  727,
      728,  369,  728,  728,  727,  368,  367,  729,  728,  729,
      729,  730,  364,  730,  730,  731,  363,  731,  731,  732,
      362,  732,  732,  733,  730,  733,  733,  732,  734,  361,
      734,  734,  735,  360,  735,  735,  733,  736,  359,  736,

      736,  737,  738,  737,  737,  738,  739,  358,  740,  739,
      738,  740,  742,  357,  739,  742,  740,  743,  744,  745,
      743,  744,  745,  746,  747,  735,  746,  747,  748,  356,
      734,  748,  747,  355,  749,  750,  748,  749,  750,  736,
      354,  751,  749,  750,  751,  752,  753,  754,  752,  753,
      754,  755,  353,  756,  755,  754,  756,  757,  752,  758,
      757,  352,  758,  759,  755,  784,  759,  787,  784,  787,
      787,  788,  351,  788,  788,  789,  350,  789,  789,  790,
      349,  790,  790,  791,  800,  791,  791,  800,  348,  792,
      757,  792,  792,  347,  793,  756,  793,  793,  346,  345,

      794,  758,  794,  794,  795,  344,  795,  795,  794,  796,
      784,  796,  796,  797,  343,  797,  797,  796,  798,  797,
      798,  798,  799,  801,  799,  799,  801,  802,  803,  804,
      802,  803,  804,  805,  806,  807,  805,  806,  807,  808,
      342,  809,  808,  807,  809,  810,  335,  811,  810,  809,
      811,  810,  330,  812,  816,  799,  812,  816,  821,  823,
      329,  821,  823,  798,  824,  327,  824,  824,  825,  830,
      825,  825,  830,  826,  326,  826,  826,  827,  325,  827,
      827,  828,  322,  828,  828,  829,  812,  829,  829,  320,
      831,  832,  811,  831,  832,  833,  319,  834,  833,  816,

      834,  318,  317,  821,  823,  826,  835,  837,  840,  835,
      837,  840,  842,  316,  842,  842,  843,  846,  843,  843,
      846,  847,  827,  832,  847,  844,  828,  844,  844,  845,
      829,  845,  845,  848,  849,  856,  848,  849,  856,  315,
      833,  853,  834,  853,  853,  842,  854,  314,  854,  854,
      846,  835,  837,  840,  855,  313,  859,  855,  859,  859,
      860,  312,  863,  860,  863,  863,  864,  311,  872,  864,
      844,  872,  309,  867,  845,  867,  867,  308,  848,  849,
      853,  867,  868,  307,  871,  868,  871,  871,  306,  305,
      868,  304,  303,  855,  302,  301,  298,  863,  859,  221,

      219,  864,  860,  874,  874,  874,  874,  874,  874,  875,
      875,  875,  875,  875,  875,  876,  876,  876,  876,  876,
      876,  877,  877,  877,  877,  877,  877,  878,  878,  878,
      878,  878,  878,  879,  879,  879,  879,  879,  879,  880,
      880,  216,  880,  880,  880,  881,  881,  881,  881,  881,
      881,  882,  215,  213,  212,  882,  882,  883,  883,  883,
      883,  883,  883,  884,  884,  210,  205,  884,  884,  885,
      885,  885,  201,  885,  885,  886,  886,  200,  886,  886,
      886,  887,  887,  198,  887,  887,  887,  888,  888,  197,
      196,  193,  888,  889,  889,  191,  889,  889,  889,  891,

      891,  190,  186,  184,  891,  892,  892,  892,  892,  892,
      892,  893,  893,  183,  182,  181,  893,  894,  894,  180,
      894,  894,  894,  179,  178,  177,  176,  175,  173,  172,
      171,  170,  169,  168,  167,  166,  165,  157,  151,  150,
      147,  146,  145,  143,  142,  139,  137,  136,  135,  133,
      132,  130,  127,  124,  123,  118,  117,  116,  114,  113,
      110,  108,  107,  106,  104,  103,   72,   69,   67,   66,
       64,   62,   60,   57,   52,   49,   46,   45,   40,   39,
       38,   36,   35,   32,   30,   29,   28,   26,   25,   23,
       19,  873,  873,  873,  873,  873,  873,  873,  873,  873,

      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  873
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[67] =
    {   0,
0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 
    1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#line 2 "levcomp.lpp"

// levcomp.lpp:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
// 
// Based loosely on NetHack's lev_comp.l

#include "AppHdr.h"
#include "mapdef.h"
#include "levcomp.tab.h"
#include <cstring>
#include <queue>

static bool alloced = false;

std::queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(100);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

static char *copy_text(bool trim_right, int strip_trailing)
{
    char *newstring = NULL;
    if ((yylval.text = newstring = strdup(yytext)))
    {
        alloced = true;
        char *s = NULL;
        if (trim_right)
        {
            s = newstring + strlen(newstring) - 1;
            while (isspace(*s) && s >= newstring)
                *s-- = 0;
        }
        if (strip_trailing)
        {
            if (!s)
                s = newstring + strlen(newstring) - 1;
            while (s >= newstring && --strip_trailing >= 0)
                *s-- = 0;
        }
    }
    return (newstring);
}

static void settext(bool trim_right = false, int strip_trailing = 0)
{
    clean();
    char *newstring = copy_text(trim_right, strip_trailing);
    yylval.text = newstring;
}









#line 1340 "levcomp.lex.cc"

#define INITIAL 0
#define MAPDEF 1
#define LUA 2
#define LUA_ONELINER 3
#define ARGUMENT 4
#define MNAME 5
#define KEYWORDS 6
#define ITEM_LIST 7
#define TOEOL 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 89 "levcomp.lpp"


#line 1507 "levcomp.lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 874 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 873 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 91 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 93 "levcomp.lpp"
{
                        settext(true);
                        return MAP_LINE;
                    }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 98 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 99 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 100 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 102 "levcomp.lpp"
;
	YY_BREAK
case 7:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 104 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 8:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 105 "levcomp.lpp"
{
                            settext(true, 2);
                            BEGIN(INITIAL);
                            return LUA_LINE;
                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 110 "levcomp.lpp"
{
                            settext();
                            return LUA_LINE;
                        }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 114 "levcomp.lpp"
;
	YY_BREAK
case 11:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 116 "levcomp.lpp"
{
                            settext();
                            return LUA_LINE;
                        }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 120 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 122 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 127 "levcomp.lpp"
;
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 128 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 130 "levcomp.lpp"
{ 
                        settext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 135 "levcomp.lpp"
{
                        settext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 140 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 141 "levcomp.lpp"
;
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 142 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 144 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 146 "levcomp.lpp"
{ 
                        settext();
                        return MONSTER_NAME; 
                    }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 151 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 152 "levcomp.lpp"
;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 154 "levcomp.lpp"
{ 
                        BEGIN(INITIAL);
                        settext();
                        return STRING; 
                    }
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 160 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 27:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 162 "levcomp.lpp"
{
                        settext(true, 1);
                        return STRING;
                    }
	YY_BREAK
case 28:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 167 "levcomp.lpp"
{
                        BEGIN(INITIAL);
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 172 "levcomp.lpp"
;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 174 "levcomp.lpp"
;
	YY_BREAK
case 31:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 176 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 178 "levcomp.lpp"
{ BEGIN(LUA_ONELINER); return MAIN; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 180 "levcomp.lpp"
{ BEGIN(LUA); return PRELUDE; }      
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 181 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 182 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 183 "levcomp.lpp"
{ BEGIN(LUA); return VALIDATE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 184 "levcomp.lpp"
{ BEGIN(LUA); return VETO; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 187 "levcomp.lpp"
{ BEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 188 "levcomp.lpp"
{ BEGIN(ARGUMENT); return DEFAULT_DEPTH; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 189 "levcomp.lpp"
{ BEGIN(ARGUMENT); return DEPTH; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 190 "levcomp.lpp"
{ BEGIN(ARGUMENT); return ORIENT; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 191 "levcomp.lpp"
{ BEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 192 "levcomp.lpp"
{ BEGIN(ARGUMENT); return WELCOME; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 193 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 194 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 195 "levcomp.lpp"
{ BEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 196 "levcomp.lpp"
{ BEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 197 "levcomp.lpp"
{ BEGIN(ARGUMENT); return LFLAGS; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 198 "levcomp.lpp"
{ BEGIN(ARGUMENT); return BFLAGS; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 199 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return SUBST; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 200 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return NSUBST; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 201 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return COLOUR; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 202 "levcomp.lpp"
{ BEGIN(MNAME); return MONS; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 203 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 204 "levcomp.lpp"
{ BEGIN(TOEOL); return MARKER; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 205 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return SHUFFLE; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 207 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KFEAT; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 208 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KITEM; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 209 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KMONS; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 210 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KMASK; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 212 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 214 "levcomp.lpp"
{
                        clean();
                        yylval.i = atoi(yytext);
                        return INTEGER;
                    }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 220 "levcomp.lpp"
;
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 221 "levcomp.lpp"
;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 222 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 224 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 1995 "levcomp.lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MAPDEF):
case YY_STATE_EOF(LUA):
case YY_STATE_EOF(LUA_ONELINER):
case YY_STATE_EOF(ARGUMENT):
case YY_STATE_EOF(MNAME):
case YY_STATE_EOF(KEYWORDS):
case YY_STATE_EOF(ITEM_LIST):
case YY_STATE_EOF(TOEOL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 874 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 874 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 873);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 224 "levcomp.lpp"



int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}

