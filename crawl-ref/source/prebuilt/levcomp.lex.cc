#line 2 "levcomp.lex.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 65
#define YY_END_OF_BUFFER 66
static yyconst short int yy_acclist[902] =
    {   0,
       66,   64,   65,   62,   64,   65,   63,   65,   64,   65,
       60,   64,   65,   61,   64,   65,   64,   65,   64,   65,
       64,   65,   64,   65,   64,   65,   64,   65,   64,   65,
       64,   65,   64,   65,   64,   65,   64,   65,   64,   65,
       64,   65,   64,   65,   64,   65,   62,   64,   65,   30,
       64,   65,   32,   64,   65,   64,   65,   64,   65,   64,
       65,   64,   65,   64,   65,   64,   65,   65,    6,   65,
       65,   65,    4,   65,    2,   65,    3,    6,   65,   65,
        2,   65,    2,    4,   65,    2,   65,    2,   65,    9,
       65,   10,   65,   65,    9,   65,    9,   65,   65,   12,

       65,   65,   64,   65,   26,   63,   65,   64,   65,   60,
       64,   65,   61,   64,   65,   64,   65,   64,   65,   64,
       65,   64,   65,   64,   65,   64,   65,   64,   65,   64,
       65,   64,   65,   64,   65,   64,   65,   64,   65,   64,
       65,   64,   65,   64,   65,   30,   64,   65,   32,   64,
       65,   64,   65,   64,   65,   64,   65,   64,   65,   64,
       65,   64,   65,   64,   65,   24,   62,   64,   65,   21,
       63,   65,   24,   64,   65,   23,   60,   64,   65,   61,
       64,   65,   64,   65,   64,   65,   64,   65,   64,   65,
       64,   65,   64,   65,   64,   65,   64,   65,   64,   65,

       64,   65,   64,   65,   64,   65,   64,   65,   64,   65,
       64,   65,   24,   62,   64,   65,   30,   64,   65,   32,
       64,   65,   64,   65,   64,   65,   64,   65,   64,   65,
       64,   65,   64,   65,   14,   62,   64,   65,   15,   63,
       65,   64,   65,   13,   64,   65,   13,   61,   64,   65,
       13,   64,   65,   13,   64,   65,   13,   64,   65,   13,
       64,   65,   13,   64,   65,   13,   64,   65,   13,   64,
       65,   13,   64,   65,   13,   64,   65,   13,   64,   65,
       13,   64,   65,   13,   64,   65,   13,   64,   65,   13,
       64,   65,   13,   64,   65,   14,   62,   64,   65,   13,

       64,   65,   13,   64,   65,   13,   64,   65,   13,   64,
       65,   13,   64,   65,   17,   65,   19,   65,   20,   65,
       65,   18,   65,   65,   29,   65,   65,   65,   62,   63,
       61,   62,   30,   32,   30,   35,    6,    5,    2,    3,
        6,    2,    5,    2,    2,    2,    2,    9,    9,   10,
        9,    9,    9,   11,   12,   25,   26,   63,   25,   61,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   30,   30,   25,   25,   25,   25,   25,   25,   25,
       25,   35,   24,   62,   21,   24,   21,   63,   61,   24,

       62,   30,   35,   14,   62,   15,   15,   63,   13,   13,
       61,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   14,   62,   13,   13,   13,   13,   13,   13,   13,
       16,   19,   20,   28,   28,   29,   27,   28,    2,    9,
        9,    9,    7,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   22,   22,   61,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,

       22,   22,   22,   22,   22,   22,   22,   30,   22,   22,
       22,   22,   22,   22,   22,   22,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   31,    2,    9,    8,    9,    7,
        8,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,

       22,   22,   22,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   53,   52,
       38,   47,   34,    2,   25,   25,   25,   25,   25,   53,
       25,   25,   25,   25,   25,   25,   25,   52,   25,   38,
       25,   25,   25,   25,   25,   25,   47,   25,   25,   25,
       25,   34,   25,   25,   25,   22,   22,   22,   22,   22,
       53,   22,   22,   22,   22,   22,   22,   22,   52,   22,
       38,   22,   22,   22,   22,   22,   22,   47,   22,   22,
       22,   22,   34,   22,   22,   22,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   40,   46,   56,   57,
       59,   58,   42,   50,   37,    1,    2,   25,   25,   25,
       40,   25,   46,   25,   56,   25,   57,   25,   59,   25,
       58,   25,   25,   25,   25,   25,   42,   25,   25,   50,
       25,   25,   25,   25,   25,   25,   37,   22,   22,   22,
       40,   22,   46,   22,   56,   22,   57,   22,   59,   22,
       58,   22,   22,   22,   22,   22,   42,   22,   22,   50,
       22,   22,   22,   22,   22,   22,   37,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   49,

       44,   48,   54,   51,   41,   45,    1,    2,   25,   49,
       25,   44,   25,   48,   25,   54,   25,   51,   25,   41,
       25,   25,   45,   25,   25,   25,   25,   22,   49,   22,
       44,   22,   48,   22,   54,   22,   51,   22,   41,   22,
       22,   45,   22,   22,   22,   22,   13,   13,   13,   13,
       13,   55,   43,   25,   55,   25,   43,   25,   25,   25,
       22,   55,   22,   43,   22,   22,   22,   13,   13,   33,
       25,   25,   33,   25,   22,   22,   33,   22,   13,   36,
       25,   25,   36,   22,   22,   36,   13,   25,   22,   13,
       25,   22,   13,   25,   22,   13,   39,   25,   39,   22,

       39
    } ;

static yyconst short int yy_accept[852] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        4,    7,    9,   11,   14,   17,   19,   21,   23,   25,
       27,   29,   31,   33,   35,   37,   39,   41,   43,   45,
       47,   50,   53,   56,   58,   60,   62,   64,   66,   68,
       69,   71,   72,   73,   75,   77,   80,   81,   83,   86,
       88,   90,   92,   94,   95,   97,   99,  100,  102,  103,
      105,  108,  110,  113,  116,  118,  120,  122,  124,  126,
      128,  130,  132,  134,  136,  138,  140,  142,  144,  146,
      149,  152,  154,  156,  158,  160,  162,  164,  166,  170,

      173,  176,  180,  183,  185,  187,  189,  191,  193,  195,
      197,  199,  201,  203,  205,  207,  209,  211,  213,  217,
      220,  223,  225,  227,  229,  231,  233,  235,  239,  242,
      244,  247,  251,  254,  257,  260,  263,  266,  269,  272,
      275,  278,  281,  284,  287,  290,  293,  296,  300,  303,
      306,  309,  312,  315,  317,  319,  321,  322,  324,  325,
      327,  328,  329,  330,  331,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  333,  334,  335,  335,
      335,  335,  335,  336,  336,  336,  336,  336,  336,  336,

      336,  337,  338,  339,  339,  339,  340,  342,  344,  344,
      345,  346,  347,  348,  349,  350,  351,  352,  353,  354,
      354,  355,  356,  357,  357,  359,  361,  362,  363,  364,
      365,  366,  367,  368,  369,  370,  371,  372,  373,  374,
      375,  376,  377,  378,  379,  380,  381,  383,  384,  385,
      386,  387,  388,  389,  390,  391,  393,  393,  395,  396,
      397,  399,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  402,  403,  403,  403,  403,  403,  403,
      403,  403,  404,  406,  407,  407,  409,  410,  412,  413,

      414,  415,  416,  417,  418,  419,  420,  421,  422,  423,
      424,  425,  426,  427,  428,  429,  430,  431,  432,  434,
      435,  436,  437,  438,  439,  440,  441,  442,  442,  443,
      444,  444,  444,  445,  445,  447,  447,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  450,  451,  452,  453,
      454,  455,  456,  457,  458,  459,  460,  461,  462,  463,
      464,  465,  466,  467,  468,  469,  470,  471,  472,  473,
      474,  475,  476,  477,  478,  479,  480,  481,  482,  483,

      485,  486,  487,  488,  489,  490,  491,  492,  493,  494,
      495,  496,  497,  498,  499,  500,  501,  502,  503,  504,
      505,  506,  507,  509,  510,  511,  512,  513,  514,  515,
      516,  517,  518,  519,  520,  521,  522,  523,  524,  525,
      526,  527,  528,  529,  530,  531,  532,  533,  534,  535,
      536,  537,  538,  539,  540,  541,  542,  543,  544,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  546,  546,  546,  546,  546,  546,  547,
      548,  549,  550,  552,  553,  554,  555,  556,  557,  558,

      559,  560,  561,  562,  563,  564,  565,  566,  567,  568,
      569,  570,  571,  572,  573,  574,  574,  574,  575,  576,
      577,  578,  579,  580,  581,  582,  583,  584,  585,  586,
      587,  588,  589,  590,  591,  592,  593,  594,  595,  596,
      597,  598,  599,  600,  600,  600,  601,  602,  603,  604,
      605,  606,  607,  608,  609,  610,  611,  612,  613,  614,
      615,  616,  617,  618,  619,  620,  621,  622,  623,  624,
      625,  626,  627,  628,  629,  629,  629,  629,  629,  630,
      630,  630,  630,  630,  630,  630,  631,  632,  632,  632,
      632,  632,  632,  633,  633,  633,  633,  634,  634,  634,

      634,  634,  635,  636,  637,  638,  639,  641,  642,  643,
      644,  645,  646,  647,  649,  651,  652,  653,  654,  655,
      656,  658,  659,  660,  661,  663,  664,  665,  665,  666,
      667,  668,  669,  670,  672,  673,  674,  675,  676,  677,
      678,  680,  682,  683,  684,  685,  686,  687,  689,  690,
      691,  692,  694,  695,  696,  696,  697,  698,  699,  700,
      701,  702,  703,  704,  705,  706,  707,  708,  709,  710,
      711,  712,  713,  714,  715,  716,  717,  717,  717,  718,
      719,  720,  721,  722,  723,  723,  723,  723,  723,  724,
      724,  725,  725,  725,  725,  725,  725,  726,  728,  729,

      730,  732,  734,  736,  738,  740,  742,  743,  744,  745,
      746,  748,  749,  751,  752,  753,  754,  755,  756,  758,
      759,  760,  762,  764,  766,  768,  770,  772,  773,  774,
      775,  776,  778,  779,  781,  782,  783,  784,  785,  786,
      788,  789,  790,  791,  792,  793,  794,  795,  796,  797,
      798,  799,  800,  801,  802,  803,  804,  805,  806,  806,
      807,  807,  807,  807,  807,  809,  811,  813,  815,  817,
      819,  821,  822,  824,  825,  826,  827,  828,  830,  832,
      834,  836,  838,  840,  841,  843,  844,  845,  846,  847,
      848,  849,  850,  851,  852,  853,  854,  854,  854,  854,

      854,  856,  858,  859,  859,  860,  861,  863,  865,  866,
      866,  867,  868,  869,  870,  870,  871,  871,  871,  872,
      874,  874,  875,  876,  878,  878,  879,  880,  880,  881,
      882,  884,  885,  887,  888,  888,  889,  890,  891,  891,
      892,  893,  894,  894,  895,  896,  897,  898,  900,  902,
      902
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    7,    8,    1,    1,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,    1,    1,
        1,    1,    1,    1,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       20,   27,   28,   29,   30,   20,   31,   20,   20,   20,
        1,   32,    1,    1,   20,    1,   33,   20,   20,   34,

       35,   36,   20,   37,   38,   20,   20,   39,   20,   20,
       40,   41,   20,   42,   43,   44,   45,   46,   20,   20,
       20,   20,   47,    1,   48,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[49] =
    {   0,
        1,    2,    3,    4,    1,    1,    5,    6,    6,    1,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    1,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    1,    1
    } ;

static yyconst short int yy_base[872] =
    {   0,
        0,   47,   55,   60,   52,   64,   47,   68,  112,  159,
      206,  253,  300,  347,   74,   80,   70,  159, 2137, 2138,
       87, 2138, 2133, 2138, 2126, 2118, 2115, 2117, 2109, 2101,
       82, 2113,   85,   69, 2101, 2105,   81, 2115, 2110, 2089,
      393,    0, 2138,  155, 2078, 2080,  144,   71, 2074, 2138,
     2138, 2117,  167, 2138,    0, 2138, 2116,  171,    0, 2094,
      153, 2069, 2138, 2113,  135, 2067, 2111, 2138, 2110,  184,
     2138, 2109,  188,  260,  266,  270,  275,  354,  358,  362,
      279,  400,  369,  387,  404,  411,  416,  431,  426,  199,
      440,  445,  449,  453,  458,  463,  467,    0,  471, 2138,

      475, 2138, 2102, 2094, 2091, 2093, 2085, 2077,  270, 2089,
      170,   80, 2077, 2081,  167, 2091, 2086, 2065,  480,  253,
        0,  262, 2054, 2056,  156,  342, 2050,  484, 2138, 2093,
        0, 2086, 2078, 2075, 2077, 2069, 2061,  349, 2073,  344,
      166, 2061, 2062,  248, 2069, 2064, 2043,  488,  371, 2023,
     2025,  394,  377,  349,  500, 2138, 2063, 2138,  253, 2138,
      347,  504,  417, 2138, 2051, 2034, 2044, 2028, 2037, 2027,
     2022, 2002,  413, 2008, 1992, 1994, 1994, 1976, 1945, 1951,
     1931, 1948, 1942,  478, 1920,    0,    0, 2138, 1909, 1904,
      431, 1895,    0,  271, 1908, 1905, 1923,  400, 1881, 1868,

     2138, 2138, 2138, 1905,  507,    0, 2138,    0, 1884,  512,
     1868, 1854,  484, 1828, 1818, 2138,  465, 1814,  516, 1857,
     2138, 2138,  518,  524, 2138,  528,  536,  540,  544,  548,
      552,  558,  564,  570,  574,  578,  582,  586,  595,  599,
      606,  610,  617,  622,  626,  630,  639,  645,  649,  653,
      657,  663,  667,  675,  679,  683,  529,  691, 2138,  695,
     2138,  611,  699,  587,  700,  631,  658,  701,  706,  707,
      715,  717,  722,  726,  728,  734,  736,  738,  740,  746,
      752,  754,    0,  760,  767,  768,  773,  774,  775,  781,
      779,  786,  800, 2138, 1842, 2138,    0, 1832, 1815, 1820,

     1804, 1811, 1795, 1772, 1753,  514, 1759, 1750, 1746, 1729,
     1718, 1725, 1729, 1706, 1718, 1707,  770, 1672,    0,  357,
     1669, 1663, 1670,  512, 1633, 1623,  794,  795,  807, 2138,
     1660,  562, 2138,  811, 2138,  819, 2138, 1643, 1626, 1617,
     1623, 1616, 1624, 1614, 1600, 1600, 1609, 1594, 1582, 1591,
     1590, 1579, 1580, 1572, 1559, 1555, 1547, 1545, 1513,  823,
      825, 1505, 1507, 1494, 1486, 1493,  829,  833,  837, 2138,
      842,  850,  854,  858,  863,  885,  889,  874,  893,  901,
      905,  909,  914,  918,  923,  929,  939,  943,  947,  952,
      957,  961,  974,  978,  982,  986,  991,  995,  843,  864,

      859,  934,  987,  996,  930,  962, 1000, 1002, 1004, 1006,
      919, 1017, 1018, 1022, 1034, 1035, 1036, 1041, 1042, 1048,
     1049, 1053, 1059, 1054, 1066, 1070, 1071, 1072, 1076, 1077,
     1082, 1499, 1463, 1454, 1462, 1441, 1443, 1438, 1412, 1412,
     1421, 1407, 1394, 1406, 1405, 1396, 1397, 1390, 1372, 1371,
     1378, 1380, 1354, 1086, 1088, 1347, 1353, 1337, 1334, 1352,
     1352, 1345, 1330, 1335, 1312, 1304, 1305, 1286, 1291, 1289,
     1292, 1286, 1267, 1270, 1270, 1263, 1240, 1249, 1230, 1218,
     1189, 1093, 2138, 1098, 1183, 1179, 1189, 1099, 1208, 1103,
     2138, 1109, 2138, 1116, 1121, 1125, 1134, 1145, 1154, 1159,

     1163, 1167, 1171, 1175, 1187, 1194, 1198, 1203, 1207, 1212,
     1216, 1227, 1231, 1236, 1242, 1248, 1252, 1258, 1262, 1266,
     1270, 1135, 1271, 1126, 1237, 1176, 1253, 1275, 1276, 1281,
     1208, 1286, 1301, 1308, 1287, 1288, 1314, 1318, 1319, 1320,
     1326, 1330, 1331, 1335, 1337, 1341, 1345, 1347, 1349, 1198,
     1193, 1183, 1166, 1183, 1158, 1162, 1153, 1142, 1149, 1145,
     1144, 1143, 1120, 1118, 1126, 1116, 1095, 1107, 1098, 1077,
     1049, 1047, 1051, 1351, 1052, 1052, 1050, 1032, 2138, 1022,
     1021, 1016, 1008,  986,  983, 2138, 2138,  974,  956,  971,
      952,  962, 2138,  939,  937,  911, 2138,  912,  882, 1355,

      861,  875, 1357, 1362, 1368, 1387, 1378, 1399, 1403, 1410,
     1414, 1421, 1425, 1429, 1433, 1437, 1441, 1446, 1453, 1457,
     1467, 1472, 1476, 1480, 1484, 1488, 1492, 1498, 1502, 1366,
     1458, 1503, 1507, 1105, 1513, 1519, 1525, 1526, 1463, 1493,
     1442, 1509, 1532, 1536, 1537, 1538, 1546, 1548, 1550, 1552,
     1557, 1561, 1565, 1567, 1566, 1571,  872,  884,  882,  878,
      874,  872,  870,  861,  829,  823,  820,  812,  827,  811,
      819,  790,  794,  776,  773,  773,  785,  777, 2138, 2138,
     2138, 2138, 2138, 2138,  772,  756,  751,  750, 2138,  740,
     2138,  740,  719,  685,  690,  671, 2138,  708, 1576, 1580,

     1587, 1593, 1599, 1603, 1607, 1612, 1617, 1621, 1628, 1632,
     1639, 1643, 1647, 1651, 1655, 1660, 1664, 1669, 1673, 1674,
     1678, 1572, 1680, 1684, 1685, 1689, 1690, 1691, 1695, 1701,
     1705, 1707, 1712, 1714, 1716, 1718, 1720, 1726, 1727, 1732,
      697,  681,  679,  672,  668,  660,  649,  646,  637,  602,
      603,  593, 2138, 2138, 2138, 2138, 2138, 2138,  613, 2138,
      597,  594, 1733,  550,  572, 1737, 1741, 1745, 1749, 1753,
     1758, 1763, 1770, 1774, 1781, 1786, 1790, 1754, 1764, 1791,
     1795, 1796, 1797, 1801, 1802, 1803, 1807, 1812, 1814,  561,
      551,  539, 1816,  508, 2138, 2138,  490, 1818,  412, 1822,

     1824, 1830, 1834, 1838, 1842, 1846, 1850, 1851, 1852, 1856,
     1862, 1868,  418, 1869,  413, 2138, 1870,  360, 1875, 1879,
     1886, 1890, 1894, 1895, 1896, 1900,  366,  359, 2138, 1909,
     1902, 1916, 1917,  320,  247, 1921, 1922,  223,  224, 1926,
     1930,  147,   99, 1934, 1943,   59, 2138, 1947, 1953, 2138,
     1967, 1973, 1979, 1985, 1991, 1997, 2003, 2009, 2015, 2021,
     2027, 2033, 2039, 2045, 2051, 2057,   48, 2063, 2069, 2075,
     2081
    } ;

static yyconst short int yy_def[872] =
    {   0,
      850,    1,  851,  852,  853,  853,  854,  854,  850,    9,
      850,   11,  850,   13,  855,  855,  856,  856,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  857,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  858,  850,  859,  850,  850,  860,  859,  859,
      859,  861,  850,  850,  861,  861,  862,  850,  850,  863,
      850,  850,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  864,
      863,  863,  863,  863,  863,  863,  863,  865,  850,  850,

      850,  850,  865,  865,  865,  865,  865,  865,  865,  865,
      865,  865,  865,  865,  865,  865,  865,  865,   41,  866,
      865,  865,  865,  865,  865,  865,  865,  850,  850,  850,
      867,  867,  867,  867,  867,  867,  867,  867,  867,  867,
      867,  867,  867,  867,  867,  867,  867,   41,  867,  867,
      867,  867,  867,  868,  850,  850,  850,  850,  869,  850,
      869,  869,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,   41,  857,  850,  850,  850,
      850,  850,  857,  850,  850,  850,  850,  850,  850,  850,

      850,  850,  850,  850,  850,  859,  850,  859,  850,  859,
      859,  859,  859,  861,  861,  850,  861,  861,  861,  862,
      850,  850,  863,  863,  850,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  864,  864,  863,  863,
      863,  863,  863,  863,  863,  863,  870,  850,  850,  850,
      850,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  119,  871,  870,  870,  870,  870,  870,  870,
      870,  870,  850,  850,  850,  850,  867,  867,  867,  867,

      867,  867,  867,  867,  867,  867,  867,  867,  867,  867,
      867,  867,  867,  867,  867,  867,  867,  867,  148,  867,
      867,  867,  867,  867,  867,  867,  868,  868,  850,  850,
      850,  869,  850,  869,  850,  869,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  859,  861,  861,  861,  850,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  870,  870,

      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  871,  870,  870,  870,  870,  870,  870,  870,
      870,  867,  867,  867,  867,  867,  867,  867,  867,  867,
      867,  867,  867,  867,  867,  867,  867,  867,  867,  867,
      867,  867,  867,  867,  867,  867,  867,  867,  867,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  859,  861,
      850,  861,  850,  863,  863,  863,  863,  863,  863,  863,

      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  867,
      867,  867,  867,  867,  867,  867,  867,  867,  867,  867,
      867,  867,  867,  867,  867,  867,  867,  867,  867,  867,
      867,  867,  867,  867,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,

      850,  859,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  867,  867,  867,  867,
      867,  867,  867,  867,  867,  867,  867,  867,  867,  867,
      867,  867,  867,  867,  867,  867,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  859,  863,  863,

      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      867,  867,  867,  867,  867,  867,  867,  867,  867,  867,
      867,  867,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  859,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  867,
      867,  867,  867,  867,  850,  850,  850,  850,  850,  850,

      863,  863,  863,  863,  863,  863,  870,  870,  870,  870,
      870,  870,  867,  867,  850,  850,  850,  850,  863,  863,
      863,  863,  870,  870,  870,  870,  867,  850,  850,  863,
      863,  870,  870,  867,  850,  863,  870,  867,  850,  863,
      870,  867,  850,  863,  870,  867,  850,  863,  870,    0,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850
    } ;

static yyconst short int yy_nxt[2187] =
    {   0,
       20,   21,   22,   23,   21,   20,   24,   20,   25,   20,
       20,   26,   27,   28,   20,   29,   20,   20,   30,   20,
       31,   32,   33,   34,   35,   36,   20,   37,   38,   20,
       39,   20,   20,   40,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   41,   68,
       69,   41,   42,  297,   63,   64,   43,   51,   52,   53,
       54,   50,   56,   57,   58,   59,   63,   64,  847,   44,
       68,   69,  160,  161,   60,  155,  156,  157,  155,  177,
      158,  155,  156,  157,  155,   45,  158,   46,  163,   47,
      274,  163,   48,   49,   65,  175,  178,  171,  181,   66,

      172,  162,   61,  199,  173,  200,   65,  275,  847,  176,
      182,   66,   70,   21,   71,   72,   21,   70,   73,   70,
       74,   70,   70,   75,   76,   77,   70,   78,   70,   70,
       79,   70,   80,   81,   82,   83,   84,   85,   70,   86,
       87,   70,   88,   70,   70,   89,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       41,  160,  161,   41,   90,  194,  197,  212,   91,  202,
      204,  205,  203,  207,  209,  210,  310,  217,  288,  176,
      272,   92,  218,  846,  278,  224,  198,  224,  224,  224,
      162,  224,  224,  311,  273,  213,  279,   93,  289,   94,

      248,   95,  248,  248,   96,   97,   98,   99,  100,  101,
       99,   98,  102,   98,  103,   98,   98,  104,  105,  106,
       98,  107,   98,   98,  108,   98,  109,  110,  111,  112,
      113,  114,   98,  115,  116,   98,  117,   98,   98,  118,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,  119,  333,  193,  119,  120,  193,
      843,  224,  121,  224,  224,  314,  842,  224,  226,  224,
      224,  224,  285,  224,  224,  122,  224,  315,  224,  224,
      224,  227,  224,  224,  334,  268,  273,  228,  269,  229,
      839,  123,  270,  124,  235,  125,  360,  348,  126,  127,

       20,  128,  129,  130,  128,   20,   24,  131,  132,   20,
      131,  133,  134,  135,  131,  136,  131,  131,  137,  131,
      138,  139,  140,  141,  142,  143,  131,  144,  145,  131,
      146,   20,  131,  147,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,   20,   20,  148,  335,
      328,  148,   42,  328,  308,  224,   43,  224,  224,  224,
      838,  224,  224,  224,  304,  224,  224,  305,  309,  149,
      224,  306,  224,  224,  290,  230,  291,  232,  334,  238,
      233,  320,  454,  442,  234,  150,  231,  151,  224,  152,
      224,  224,  153,   49,  186,  309,  239,  186,  187,  835,

      834,  224,  188,  224,  224,  224,  829,  224,  224,  325,
      236,  326,  224,  240,  224,  224,  323,  224,  163,  224,
      224,  163,  197,  345,  237,  241,  244,  224,  242,  224,
      224,  189,  224,  190,  224,  224,  324,  346,  191,  192,
      243,  224,  198,  224,  224,  245,  224,  828,  224,  224,
      224,  827,  224,  224,  224,  249,  224,  224,  816,  224,
      246,  224,  224,  199,  224,  200,  224,  224,  224,  237,
      224,  224,  258,  259,  260,  258,  260,  261,  260,  260,
      252,  283,  259,  260,  283,  293,  294,  295,  293,  319,
      294,  295,  319,  250,  251,  254,  357,  255,  212,  358,

      253,  329,  330,  331,  329,  336,  337,  217,  336,  202,
      204,  205,  218,  256,  207,  209,  210,  369,  370,  224,
      369,  224,  224,  815,  439,  224,  213,  224,  224,  224,
      257,  224,  224,  257,  323,  334,  226,  224,  440,  224,
      224,  224,  814,  224,  224,  224,  813,  224,  224,  224,
      372,  224,  224,  224,  324,  224,  224,  371,  374,  224,
      796,  224,  224,  367,  333,  224,  375,  224,  224,  373,
      795,  224,  376,  224,  224,  224,  765,  224,  224,  224,
      378,  224,  224,  224,  800,  224,  224,  224,  257,  224,
      224,  257,  377,  334,  379,  380,  224,  402,  224,  224,

      224,  797,  224,  224,  381,  382,  796,  224,  383,  224,
      224,  224,  257,  224,  224,  257,  386,  385,  224,  400,
      224,  224,  795,  224,  384,  224,  224,  224,  388,  224,
      224,  224,  257,  224,  224,  257,  794,  793,  389,  387,
      248,  404,  248,  248,  390,  792,  248,  391,  248,  248,
      224,  791,  224,  224,  224,  760,  224,  224,  224,  257,
      224,  224,  257,  790,  224,  392,  224,  224,  224,  758,
      224,  224,  405,  396,  393,  381,  224,  757,  224,  224,
      224,  756,  224,  224,  224,  394,  224,  224,  755,  252,
      754,  395,  258,  259,  260,  258,  260,  259,  260,  260,

      257,  257,  257,  257,  257,  257,  753,  257,  257,  253,
      257,  257,  765,  397,  764,  406,  257,  408,  257,  257,
      401,  257,  398,  257,  763,  403,  257,  257,  762,  257,
      257,  409,  257,  761,  407,  257,  410,  257,  257,  257,
      257,  257,  257,  411,  257,  412,  416,  257,  413,  760,
      257,  418,  415,  257,  759,  257,  257,  414,  257,  758,
      757,  284,  419,  193,  284,  756,  193,  417,  257,  257,
      420,  257,  257,  421,  257,  257,  257,  257,  257,  257,
      257,  755,  257,  257,  427,  257,  754,  257,  451,  422,
      257,  452,  424,  411,  753,  328,  328,  428,  328,  328,

      425,  293,  294,  295,  293,  752,  751,  426,  329,  330,
      331,  329,  336,  337,  750,  336,  749,  429,  748,  430,
      336,  337,  431,  336,  482,  483,  484,  482,  691,  484,
      490,  491,  747,  490,  492,  493,  689,  492,  369,  370,
      746,  369,  334,  224,  257,  224,  224,  257,  745,  744,
      334,  224,  494,  224,  224,  224,  743,  224,  224,  224,
      257,  224,  224,  257,  224,  257,  224,  224,  257,  522,
      684,  485,  400,  495,  497,  224,  367,  224,  224,  683,
      367,  682,  496,  681,  215,  498,  224,  680,  224,  224,
      224,  679,  224,  224,  224,  499,  224,  224,  742,  741,

      698,  501,  224,  500,  224,  224,  224,  697,  224,  224,
      224,  503,  224,  224,  696,  224,  502,  224,  224,  224,
      257,  224,  224,  257,  224,  504,  224,  224,  506,  507,
      224,  257,  224,  224,  257,  257,  505,  508,  257,  532,
      224,  509,  224,  224,  224,  695,  224,  224,  224,  694,
      224,  224,  526,  224,  510,  224,  224,  523,  224,  693,
      224,  224,  224,  257,  224,  224,  257,  692,  513,  514,
      511,  691,  527,  690,  512,  516,  483,  224,  516,  517,
      689,  224,  517,  224,  688,  224,  224,  224,  257,  224,
      224,  257,  224,  515,  224,  224,  224,  257,  224,  224,

      257,  257,  687,  257,  257,  257,  257,  257,  257,  686,
      257,  393,  525,  685,  528,  524,  531,  684,  257,  257,
      519,  257,  257,  257,  518,  683,  257,  530,  520,  529,
      682,  681,  534,  535,  521,  257,  257,  257,  257,  257,
      257,  680,  257,  257,  533,  257,  257,  537,  536,  257,
      257,  538,  257,  257,  257,  544,  483,  257,  544,  679,
      284,  542,  193,  284,  541,  193,  678,  545,  539,  540,
      545,  257,  257,  257,  257,  257,  257,  257,  257,  677,
      257,  257,  427,  257,  676,  543,  257,  482,  483,  484,
      482,  675,  484,  674,  482,  483,  424,  482,  428,  484,

      600,  673,  484,  600,  490,  491,  257,  490,  547,  257,
      492,  493,  546,  492,  548,  672,  593,  224,  429,  224,
      224,  549,  224,  671,  224,  224,  224,  257,  224,  224,
      257,  670,  603,  604,  485,  224,  257,  224,  224,  257,
      669,  668,  605,  632,  485,  601,  224,  667,  224,  224,
      215,  630,  587,  586,  607,  224,  215,  224,  224,  666,
      224,  606,  224,  224,  224,  665,  224,  224,  224,  664,
      224,  224,  224,  663,  224,  224,  224,  257,  224,  224,
      257,  609,  608,  610,  662,  634,  661,  612,  224,  613,
      224,  224,  579,  660,  611,  224,  614,  224,  224,  224,

      659,  224,  224,  615,  224,  658,  224,  224,  224,  257,
      224,  224,  257,  224,  657,  224,  224,  224,  602,  224,
      224,  618,  599,  598,  639,  616,  617,  619,  224,  597,
      224,  224,  224,  596,  224,  224,  621,  224,  257,  224,
      224,  257,  595,  224,  620,  224,  224,  594,  622,  516,
      483,  224,  516,  517,  257,  224,  517,  257,  593,  224,
      623,  224,  224,  224,  633,  224,  224,  224,  592,  224,
      224,  628,  257,  224,  628,  257,  257,  257,  591,  257,
      257,  635,  257,  631,  590,  257,  624,  257,  257,  257,
      257,  257,  257,  589,  588,  587,  637,  636,  518,  627,

      640,  586,  257,  585,  625,  257,  626,  584,  638,  257,
      641,  644,  257,  583,  643,  257,  629,  642,  257,  257,
      257,  257,  257,  257,  257,  582,  581,  257,  645,  648,
      257,  257,  257,  646,  257,  257,  544,  483,  545,  544,
      580,  545,  257,  649,  579,  257,  257,  647,  257,  257,
      655,  257,  600,  655,  650,  600,  600,  578,  224,  600,
      224,  224,  577,  224,  576,  224,  224,  257,  575,  224,
      257,  224,  224,  574,  573,  651,  700,  701,  454,  224,
      654,  224,  224,  546,  699,  572,  571,  652,  224,  653,
      224,  224,  570,  720,  569,  656,  702,  601,  568,  567,

      224,  601,  224,  224,  224,  566,  224,  224,  703,  565,
      564,  224,  704,  224,  224,  224,  563,  224,  224,  705,
      562,  561,  224,  706,  224,  224,  224,  560,  224,  224,
      224,  559,  224,  224,  224,  558,  224,  224,  224,  557,
      224,  224,  224,  257,  224,  224,  257,  224,  707,  224,
      224,  708,  556,  555,  224,  711,  224,  224,  224,  257,
      224,  224,  257,  554,  257,  709,  713,  257,  224,  710,
      224,  224,  721,  224,  712,  224,  224,  224,  553,  224,
      224,  224,  552,  224,  224,  224,  551,  224,  224,  224,
      728,  224,  224,  224,  257,  224,  224,  257,  715,  628,

      714,  224,  628,  224,  257,  224,  224,  257,  257,  550,
      257,  257,  722,  257,  257,  489,  723,  257,  716,  729,
      257,  717,  724,  257,  718,  488,  257,  257,  725,  257,
      257,  487,  360,  257,  726,  727,  257,  257,  257,  257,
      257,  257,  257,  486,  629,  481,  732,  257,  719,  257,
      257,  257,  257,  257,  257,  734,  257,  480,  257,  733,
      730,  257,  257,  479,  731,  257,  257,  655,  257,  257,
      655,  257,  257,  257,  736,  257,  257,  224,  735,  224,
      224,  224,  478,  224,  224,  766,  477,  476,  224,  767,
      224,  224,  475,  474,  224,  737,  224,  224,  738,  739,

      224,  473,  224,  224,  224,  472,  224,  224,  224,  471,
      224,  224,  656,  224,  470,  224,  224,  740,  224,  469,
      224,  224,  224,  468,  224,  224,  768,  467,  466,  224,
      769,  224,  224,  224,  465,  224,  224,  770,  464,  463,
      224,  771,  224,  224,  224,  462,  224,  224,  224,  461,
      224,  224,  224,  460,  224,  224,  224,  772,  224,  224,
      773,  224,  330,  224,  224,  224,  459,  224,  224,  774,
      224,  458,  224,  224,  224,  257,  224,  224,  257,  257,
      457,  257,  257,  778,  257,  257,  257,  779,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  456,  776,  257,

      780,  455,  257,  775,  781,  257,  257,  453,  257,  257,
      782,  257,  777,  257,  783,  257,  257,  257,  257,  257,
      257,  257,  257,  450,  257,  785,  784,  257,  257,  449,
      257,  257,  786,  257,  798,  448,  257,  798,  224,  447,
      224,  224,  224,  446,  224,  224,  224,  445,  224,  224,
      224,  444,  224,  224,  224,  257,  224,  224,  257,  224,
      788,  224,  224,  787,  224,  257,  224,  224,  257,  443,
      789,  224,  801,  224,  224,  224,  442,  224,  224,  799,
      441,  438,  224,  802,  224,  224,  437,  804,  803,  224,
      804,  224,  257,  224,  224,  257,  257,  257,  257,  257,

      257,  257,  257,  257,  257,  257,  257,  257,  257,  436,
      807,  257,  808,  810,  809,  257,  810,  798,  257,  798,
      798,  435,  798,  817,  806,  224,  817,  224,  224,  434,
      433,  224,  805,  224,  224,  224,  432,  224,  224,  804,
      298,  224,  804,  224,  294,  224,  224,  821,  812,  224,
      821,  257,  257,  257,  257,  257,  257,  810,  811,  221,
      810,  368,  799,  257,  799,  367,  257,  819,  818,  825,
      817,  817,  825,  817,  817,  215,  224,  211,  224,  224,
      224,  366,  224,  224,  805,  823,  207,  821,  820,  224,
      821,  224,  822,  224,  224,  257,  257,  825,  257,  257,

      825,  257,  811,  224,  257,  224,  224,  202,  824,  830,
      224,  365,  224,  224,  826,  818,  818,  257,  257,  364,
      257,  257,  224,  257,  224,  224,  257,  224,  832,  224,
      224,  257,  822,  363,  257,  224,  831,  224,  224,  362,
      361,  201,  826,  848,  257,  196,  833,  257,  224,  836,
      224,  224,  849,  195,  257,  359,  837,  257,  356,  355,
      354,  353,  844,  352,  840,  841,  845,   50,   50,   50,
       50,   50,   50,   55,   55,   55,   55,   55,   55,   62,
       62,   62,   62,   62,   62,   67,   67,   67,   67,   67,
       67,  154,  154,  154,  154,  154,  154,  159,  159,  159,

      159,  159,  159,  193,  193,  351,  193,  193,  193,  203,
      203,  203,  203,  203,  203,  206,  350,  349,  348,  206,
      206,  208,  208,  208,  208,  208,  208,  214,  214,  347,
      344,  214,  214,  220,  220,  220,  343,  220,  220,  223,
      223,  342,  223,  223,  223,  247,  247,  341,  247,  247,
      247,  257,  257,  340,  339,  338,  257,  284,  284,  165,
      284,  284,  284,  327,  327,  330,  322,  321,  327,  332,
      332,  332,  332,  332,  332,  399,  399,  318,  317,  316,
      399,  423,  423,  313,  423,  423,  423,  312,  307,  303,
      302,  301,  300,  299,  298,  296,  292,  287,  286,  282,

      281,  280,  277,  276,  271,  267,  266,  265,  264,  263,
      262,  225,  222,  221,  219,  216,  215,  211,  207,  202,
      201,  196,  195,  185,  184,  183,  180,  179,  174,  170,
      169,  168,  167,  166,  165,  164,  850,   19,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850
    } ;

static yyconst short int yy_chk[2187] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    7,
        7,    2,    2,  867,    5,    5,    2,    3,    3,    3,
        3,    4,    4,    4,    4,    4,    6,    6,  846,    2,
        8,    8,   17,   17,    4,   15,   15,   15,   15,   34,
       15,   16,   16,   16,   16,    2,   16,    2,   21,    2,
      112,   21,    2,    2,    5,   33,   34,   31,   37,    5,

       31,   17,    4,   48,   31,   48,    6,  112,  843,   33,
       37,    6,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
       10,   18,   18,   10,   10,   44,   47,   61,   10,   53,
       53,   53,   58,   58,   58,   58,  141,   65,  125,   44,
      111,   10,   65,  842,  115,   70,   47,   70,   70,   73,
       18,   73,   73,  141,  111,   61,  115,   10,  125,   10,

       90,   10,   90,   90,   10,   10,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   12,  159,  120,   12,   12,  120,
      839,   74,   12,   74,   74,  144,  838,   75,   74,   75,
       75,   76,  122,   76,   76,   12,   77,  144,   77,   77,
       81,   75,   81,   81,  159,  109,  122,   76,  109,   77,
      835,   12,  109,   12,   81,   12,  194,  194,   12,   12,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   14,  161,
      154,   14,   14,  154,  140,   78,   14,   78,   78,   79,
      834,   79,   79,   80,  138,   80,   80,  138,  140,   14,
       83,  138,   83,   83,  126,   78,  126,   80,  161,   83,
       80,  149,  320,  320,   80,   14,   79,   14,   84,   14,
       84,   84,   14,   14,   41,  149,   83,   41,   41,  828,

      827,   82,   41,   82,   82,   85,  818,   85,   85,  153,
       82,  153,   86,   84,   86,   86,  152,   87,  163,   87,
       87,  163,  198,  173,   82,   85,   87,   89,   86,   89,
       89,   41,   88,   41,   88,   88,  152,  173,   41,   41,
       86,   91,  198,   91,   91,   88,   92,  815,   92,   92,
       93,  813,   93,   93,   94,   92,   94,   94,  799,   95,
       89,   95,   95,  191,   96,  191,   96,   96,   97,   92,
       97,   97,   99,   99,   99,   99,  101,  101,  101,  101,
       95,  119,  119,  119,  119,  128,  128,  128,  128,  148,
      148,  148,  148,   93,   94,   96,  184,   96,  213,  184,

       95,  155,  155,  155,  155,  162,  162,  217,  162,  205,
      205,  205,  217,   97,  210,  210,  210,  219,  219,  223,
      219,  223,  223,  797,  306,  224,  213,  224,  224,  226,
      257,  226,  226,  257,  324,  162,  226,  227,  306,  227,
      227,  228,  794,  228,  228,  229,  792,  229,  229,  230,
      228,  230,  230,  231,  324,  231,  231,  227,  230,  232,
      791,  232,  232,  219,  332,  233,  231,  233,  233,  229,
      790,  234,  232,  234,  234,  235,  765,  235,  235,  236,
      234,  236,  236,  237,  764,  237,  237,  238,  264,  238,
      238,  264,  233,  332,  234,  235,  239,  264,  239,  239,

      240,  762,  240,  240,  236,  237,  761,  241,  238,  241,
      241,  242,  262,  242,  242,  262,  241,  240,  243,  262,
      243,  243,  759,  244,  239,  244,  244,  245,  243,  245,
      245,  246,  266,  246,  246,  266,  752,  751,  244,  242,
      247,  266,  247,  247,  245,  750,  248,  245,  248,  248,
      249,  749,  249,  249,  250,  748,  250,  250,  251,  267,
      251,  251,  267,  747,  252,  246,  252,  252,  253,  746,
      253,  253,  267,  252,  249,  249,  254,  745,  254,  254,
      255,  744,  255,  255,  256,  250,  256,  256,  743,  253,
      742,  251,  258,  258,  258,  258,  260,  260,  260,  260,

      263,  265,  268,  263,  265,  268,  741,  269,  270,  253,
      269,  270,  698,  254,  696,  268,  271,  270,  272,  271,
      263,  272,  255,  273,  695,  265,  273,  274,  694,  275,
      274,  270,  275,  693,  269,  276,  271,  277,  276,  278,
      277,  279,  278,  272,  279,  273,  277,  280,  274,  692,
      280,  279,  276,  281,  690,  282,  281,  275,  282,  688,
      687,  284,  280,  284,  284,  686,  284,  278,  285,  286,
      281,  285,  286,  281,  287,  288,  289,  287,  288,  289,
      291,  685,  290,  291,  288,  290,  678,  292,  317,  282,
      292,  317,  285,  285,  677,  327,  328,  289,  327,  328,

      286,  293,  293,  293,  293,  676,  675,  287,  329,  329,
      329,  329,  334,  334,  674,  334,  673,  289,  672,  290,
      336,  336,  291,  336,  360,  360,  361,  360,  671,  361,
      367,  367,  670,  367,  368,  368,  669,  368,  369,  369,
      668,  369,  334,  371,  399,  371,  371,  399,  667,  666,
      336,  372,  371,  372,  372,  373,  665,  373,  373,  374,
      401,  374,  374,  401,  375,  400,  375,  375,  400,  401,
      664,  361,  400,  372,  374,  378,  367,  378,  378,  663,
      368,  662,  373,  661,  369,  375,  376,  660,  376,  376,
      377,  659,  377,  377,  379,  376,  379,  379,  658,  657,

      602,  378,  380,  377,  380,  380,  381,  601,  381,  381,
      382,  380,  382,  382,  599,  383,  379,  383,  383,  384,
      411,  384,  384,  411,  385,  381,  385,  385,  383,  384,
      386,  405,  386,  386,  405,  402,  382,  385,  402,  411,
      387,  386,  387,  387,  388,  598,  388,  388,  389,  596,
      389,  389,  405,  390,  387,  390,  390,  402,  391,  595,
      391,  391,  392,  406,  392,  392,  406,  594,  390,  391,
      388,  592,  406,  591,  389,  393,  393,  393,  393,  394,
      590,  394,  394,  395,  589,  395,  395,  396,  403,  396,
      396,  403,  397,  392,  397,  397,  398,  404,  398,  398,

      404,  407,  588,  408,  407,  409,  408,  410,  409,  585,
      410,  396,  404,  584,  407,  403,  410,  583,  412,  413,
      395,  412,  413,  414,  394,  582,  414,  409,  397,  408,
      581,  580,  413,  414,  398,  415,  416,  417,  415,  416,
      417,  578,  418,  419,  412,  418,  419,  416,  415,  420,
      421,  417,  420,  421,  422,  424,  424,  422,  424,  577,
      423,  421,  423,  423,  420,  423,  576,  425,  418,  419,
      425,  426,  427,  428,  426,  427,  428,  429,  430,  575,
      429,  430,  428,  431,  573,  422,  431,  454,  454,  455,
      454,  572,  455,  571,  482,  482,  427,  482,  429,  484,

      488,  570,  484,  488,  490,  490,  634,  490,  426,  634,
      492,  492,  425,  492,  430,  569,  568,  494,  429,  494,
      494,  431,  495,  567,  495,  495,  496,  524,  496,  496,
      524,  566,  494,  495,  455,  497,  522,  497,  497,  522,
      565,  564,  496,  524,  484,  488,  498,  563,  498,  498,
      490,  522,  562,  561,  498,  499,  492,  499,  499,  560,
      500,  497,  500,  500,  501,  559,  501,  501,  502,  558,
      502,  502,  503,  557,  503,  503,  504,  526,  504,  504,
      526,  500,  499,  501,  556,  526,  555,  503,  505,  504,
      505,  505,  554,  553,  502,  506,  505,  506,  506,  507,

      552,  507,  507,  506,  508,  551,  508,  508,  509,  531,
      509,  509,  531,  510,  550,  510,  510,  511,  489,  511,
      511,  509,  487,  486,  531,  507,  508,  510,  512,  485,
      512,  512,  513,  481,  513,  513,  512,  514,  525,  514,
      514,  525,  480,  515,  511,  515,  515,  479,  513,  516,
      516,  516,  516,  517,  527,  517,  517,  527,  478,  518,
      514,  518,  518,  519,  525,  519,  519,  520,  477,  520,
      520,  521,  523,  521,  521,  523,  528,  529,  476,  528,
      529,  527,  530,  523,  475,  530,  515,  532,  535,  536,
      532,  535,  536,  474,  473,  472,  529,  528,  517,  520,

      532,  471,  533,  470,  518,  533,  519,  469,  530,  534,
      533,  536,  534,  468,  535,  537,  521,  534,  537,  538,
      539,  540,  538,  539,  540,  467,  466,  541,  537,  540,
      541,  542,  543,  538,  542,  543,  544,  544,  545,  544,
      465,  545,  546,  541,  464,  546,  547,  539,  548,  547,
      549,  548,  574,  549,  542,  574,  600,  463,  603,  600,
      603,  603,  462,  604,  461,  604,  604,  630,  460,  605,
      630,  605,  605,  459,  458,  543,  604,  605,  457,  607,
      548,  607,  607,  545,  603,  456,  453,  546,  606,  547,
      606,  606,  452,  630,  451,  549,  606,  574,  450,  449,

      608,  600,  608,  608,  609,  448,  609,  609,  608,  447,
      446,  610,  609,  610,  610,  611,  445,  611,  611,  610,
      444,  443,  612,  611,  612,  612,  613,  442,  613,  613,
      614,  441,  614,  614,  615,  440,  615,  615,  616,  439,
      616,  616,  617,  641,  617,  617,  641,  618,  612,  618,
      618,  613,  438,  437,  619,  618,  619,  619,  620,  631,
      620,  620,  631,  436,  639,  616,  620,  639,  621,  617,
      621,  621,  631,  622,  619,  622,  622,  623,  435,  623,
      623,  624,  434,  624,  624,  625,  433,  625,  625,  626,
      639,  626,  626,  627,  640,  627,  627,  640,  623,  628,

      622,  628,  628,  629,  632,  629,  629,  632,  633,  432,
      642,  633,  632,  642,  635,  366,  633,  635,  624,  640,
      636,  626,  635,  636,  627,  365,  637,  638,  636,  637,
      638,  364,  363,  643,  637,  638,  643,  644,  645,  646,
      644,  645,  646,  362,  628,  359,  645,  647,  629,  648,
      647,  649,  648,  650,  649,  647,  650,  358,  651,  646,
      643,  651,  652,  357,  644,  652,  653,  655,  654,  653,
      655,  654,  656,  722,  650,  656,  722,  699,  649,  699,
      699,  700,  356,  700,  700,  699,  355,  354,  701,  700,
      701,  701,  353,  352,  702,  651,  702,  702,  653,  654,

      703,  351,  703,  703,  704,  350,  704,  704,  705,  349,
      705,  705,  655,  706,  348,  706,  706,  656,  707,  347,
      707,  707,  708,  346,  708,  708,  707,  345,  344,  709,
      708,  709,  709,  710,  343,  710,  710,  709,  342,  341,
      711,  710,  711,  711,  712,  340,  712,  712,  713,  339,
      713,  713,  714,  338,  714,  714,  715,  712,  715,  715,
      714,  716,  331,  716,  716,  717,  326,  717,  717,  715,
      718,  325,  718,  718,  719,  720,  719,  719,  720,  721,
      323,  723,  721,  720,  723,  724,  725,  721,  724,  725,
      726,  727,  728,  726,  727,  728,  729,  322,  717,  729,

      728,  321,  730,  716,  729,  730,  731,  318,  732,  731,
      730,  732,  718,  733,  731,  734,  733,  735,  734,  736,
      735,  737,  736,  316,  737,  735,  733,  738,  739,  315,
      738,  739,  736,  740,  763,  314,  740,  763,  766,  313,
      766,  766,  767,  312,  767,  767,  768,  311,  768,  768,
      769,  310,  769,  769,  770,  778,  770,  770,  778,  771,
      738,  771,  771,  737,  772,  779,  772,  772,  779,  309,
      739,  773,  772,  773,  773,  774,  308,  774,  774,  763,
      307,  305,  775,  774,  775,  775,  304,  776,  775,  776,
      776,  777,  780,  777,  777,  780,  781,  782,  783,  781,

      782,  783,  784,  785,  786,  784,  785,  786,  787,  303,
      784,  787,  786,  788,  787,  789,  788,  793,  789,  798,
      793,  302,  798,  800,  777,  801,  800,  801,  801,  301,
      300,  802,  776,  802,  802,  803,  299,  803,  803,  804,
      298,  804,  804,  805,  295,  805,  805,  806,  789,  806,
      806,  807,  808,  809,  807,  808,  809,  810,  788,  220,
      810,  218,  793,  811,  798,  215,  811,  803,  800,  812,
      814,  817,  812,  814,  817,  214,  819,  212,  819,  819,
      820,  211,  820,  820,  804,  809,  209,  821,  805,  821,
      821,  822,  806,  822,  822,  823,  824,  825,  823,  824,

      825,  826,  810,  831,  826,  831,  831,  204,  811,  819,
      830,  200,  830,  830,  812,  814,  817,  832,  833,  199,
      832,  833,  836,  837,  836,  836,  837,  840,  823,  840,
      840,  841,  821,  197,  841,  844,  822,  844,  844,  196,
      195,  192,  825,  844,  845,  190,  826,  845,  848,  830,
      848,  848,  845,  189,  849,  185,  832,  849,  183,  182,
      181,  180,  840,  179,  836,  837,  841,  851,  851,  851,
      851,  851,  851,  852,  852,  852,  852,  852,  852,  853,
      853,  853,  853,  853,  853,  854,  854,  854,  854,  854,
      854,  855,  855,  855,  855,  855,  855,  856,  856,  856,

      856,  856,  856,  857,  857,  178,  857,  857,  857,  858,
      858,  858,  858,  858,  858,  859,  177,  176,  175,  859,
      859,  860,  860,  860,  860,  860,  860,  861,  861,  174,
      172,  861,  861,  862,  862,  862,  171,  862,  862,  863,
      863,  170,  863,  863,  863,  864,  864,  169,  864,  864,
      864,  865,  865,  168,  167,  166,  865,  866,  866,  165,
      866,  866,  866,  868,  868,  157,  151,  150,  868,  869,
      869,  869,  869,  869,  869,  870,  870,  147,  146,  145,
      870,  871,  871,  143,  871,  871,  871,  142,  139,  137,
      136,  135,  134,  133,  132,  130,  127,  124,  123,  118,

      117,  116,  114,  113,  110,  108,  107,  106,  105,  104,
      103,   72,   69,   67,   66,   64,   62,   60,   57,   52,
       49,   46,   45,   40,   39,   38,   36,   35,   32,   30,
       29,   28,   27,   26,   25,   23,   19,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#define INITIAL 0
#line 2 "levcomp.lpp"

// levcomp.lpp:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
// 
// Based loosely on NetHack's lev_comp.l

#include "AppHdr.h"
#include "mapdef.h"
#include "levcomp.tab.h"
#include <cstring>
#include <queue>

static bool alloced = false;

std::queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(100);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

static char *copy_text(bool trim_right, int strip_trailing)
{
    char *newstring = NULL;
    if ((yylval.text = newstring = strdup(yytext)))
    {
        alloced = true;
        char *s = NULL;
        if (trim_right)
        {
            s = newstring + strlen(newstring) - 1;
            while (isspace(*s) && s >= newstring)
                *s-- = 0;
        }
        if (strip_trailing)
        {
            if (!s)
                s = newstring + strlen(newstring) - 1;
            while (s >= newstring && --strip_trailing >= 0)
                *s-- = 0;
        }
    }
    return (newstring);
}

static void settext(bool trim_right = false, int strip_trailing = 0)
{
    clean();
    char *newstring = copy_text(trim_right, strip_trailing);
    yylval.text = newstring;
}

#define MAPDEF 1

#define LUA 2

#define LUA_ONELINER 3

#define ARGUMENT 4

#define MNAME 5

#define KEYWORDS 6

#define ITEM_LIST 7

#define TOEOL 8

#define YY_NEVER_INTERACTIVE 1
#line 1329 "levcomp.lex.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 89 "levcomp.lpp"


#line 1486 "levcomp.lex.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 851 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2138 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 91 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 93 "levcomp.lpp"
{
                        settext(true);
                        return MAP_LINE;
                    }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 98 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 99 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 100 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 102 "levcomp.lpp"
;
	YY_BREAK
case 7:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 104 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 8:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 105 "levcomp.lpp"
{
                            settext(true, 2);
                            BEGIN(INITIAL);
                            return LUA_LINE;
                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 110 "levcomp.lpp"
{
                            settext();
                            return LUA_LINE;
                        }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 114 "levcomp.lpp"
;
	YY_BREAK
case 11:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 116 "levcomp.lpp"
{
                            settext();
                            return LUA_LINE;
                        }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 120 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 122 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 127 "levcomp.lpp"
;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 128 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 130 "levcomp.lpp"
{ 
                        settext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 135 "levcomp.lpp"
{
                        settext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 140 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 141 "levcomp.lpp"
;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 142 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 144 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 146 "levcomp.lpp"
{ 
                        settext();
                        return MONSTER_NAME; 
                    }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 151 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 152 "levcomp.lpp"
;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 154 "levcomp.lpp"
{ 
                        BEGIN(INITIAL);
                        settext();
                        return STRING; 
                    }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 160 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 27:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 162 "levcomp.lpp"
{
                        settext(true, 1);
                        return STRING;
                    }
	YY_BREAK
case 28:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 167 "levcomp.lpp"
{
                        BEGIN(INITIAL);
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 172 "levcomp.lpp"
;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 174 "levcomp.lpp"
;
	YY_BREAK
case 31:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 176 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 178 "levcomp.lpp"
{ BEGIN(LUA_ONELINER); return MAIN; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 180 "levcomp.lpp"
{ BEGIN(LUA); return PRELUDE; }      
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 181 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 182 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 183 "levcomp.lpp"
{ BEGIN(LUA); return VALIDATE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 184 "levcomp.lpp"
{ BEGIN(LUA); return VETO; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 187 "levcomp.lpp"
{ BEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 188 "levcomp.lpp"
{ BEGIN(ARGUMENT); return DEFAULT_DEPTH; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 189 "levcomp.lpp"
{ BEGIN(ARGUMENT); return DEPTH; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 190 "levcomp.lpp"
{ BEGIN(ARGUMENT); return ORIENT; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 191 "levcomp.lpp"
{ BEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 192 "levcomp.lpp"
{ BEGIN(ARGUMENT); return WELCOME; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 193 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 194 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 195 "levcomp.lpp"
{ BEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 196 "levcomp.lpp"
{ BEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 197 "levcomp.lpp"
{ BEGIN(ARGUMENT); return LFLAGS; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 198 "levcomp.lpp"
{ BEGIN(ARGUMENT); return BFLAGS; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 199 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return SUBST; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 200 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return NSUBST; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 201 "levcomp.lpp"
{ BEGIN(MNAME); return MONS; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 202 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 203 "levcomp.lpp"
{ BEGIN(TOEOL); return MARKER; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 204 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return SHUFFLE; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 206 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KFEAT; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 207 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KITEM; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 208 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KMONS; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 209 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KMASK; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 211 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 213 "levcomp.lpp"
{
                        clean();
                        yylval.i = atoi(yytext);
                        return INTEGER;
                    }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 219 "levcomp.lpp"
;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 220 "levcomp.lpp"
;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 221 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 223 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 1961 "levcomp.lex.cc"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(MAPDEF):
			case YY_STATE_EOF(LUA):
			case YY_STATE_EOF(LUA_ONELINER):
			case YY_STATE_EOF(ARGUMENT):
			case YY_STATE_EOF(MNAME):
			case YY_STATE_EOF(KEYWORDS):
			case YY_STATE_EOF(ITEM_LIST):
			case YY_STATE_EOF(TOEOL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 851 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 851 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 850);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');
	if ( yy_current_buffer->yy_at_bol )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 223 "levcomp.lpp"


int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}
