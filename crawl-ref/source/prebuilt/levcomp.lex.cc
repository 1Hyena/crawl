#line 2 "levcomp.lex.cc"

#line 4 "levcomp.lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 34
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 * Given that the standard has decreed that size_t exists since 1989,
 * I guess we can afford to depend on it. Manoj.
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 75
#define YY_END_OF_BUFFER 76
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[976] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   76,   74,
       71,   72,   73,   69,   70,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   71,   36,   38,   74,   74,   74,   74,   74,   74,
       75,    6,   75,   75,    4,    2,    3,   75,    2,    2,
        2,    2,    9,   10,   75,    9,    9,   75,   12,   75,
       74,   71,   32,   73,   69,   70,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   71,   36,   38,   74,   74,   74,   74,

       74,   74,   74,   28,   23,   28,   27,   70,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   28,   36,   38,   74,   74,
       74,   74,   74,   74,   15,   16,   73,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   74,   13,   15,   13,   13,   13,
       13,   13,   75,   21,   22,   75,   20,   75,   75,   35,
       75,   75,   71,   72,   70,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   71,   36,   38,

        0,    0,    0,    0,   36,    0,    0,    0,    0,    0,
        0,    0,   41,    6,    5,    0,    0,    2,    3,    2,
        0,    2,    2,    2,    2,    9,    9,   10,    9,    9,
        9,    0,   11,    0,   12,   31,    0,   31,   71,   32,
        0,    0,   32,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,    0,   30,   31,   71,   31,
       36,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       26,    0,   26,   28,   23,   28,    0,   23,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
        0,   25,    0,   26,   28,   26,   36,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   15,   16,    0,    0,
        0,   16,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,    0,   14,   13,   15,   13,
       13,   13,   13,   13,   13,   13,   19,    0,   19,   21,
       22,    0,    0,    0,    0,   18,    0,    0,   34,    0,
       34,    0,   33,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    2,    9,    9,    9,    7,    0,
        0,   29,    0,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   36,   31,
       31,   31,   31,   31,   31,    0,   24,    0,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   36,   36,   26,   26,   26,   26,   26,
       26,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,    0,   17,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   37,    0,    0,    0,    0,    0,    2,    9,    8,
        0,    9,    7,    0,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,    0,
        0,   31,   31,   31,   31,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
        0,    0,   26,   26,   26,   26,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,    0,    0,    0,    0,    0,    0,
       62,    0,    0,    0,    0,    0,    0,   61,   44,    0,
        0,    0,    0,    0,    0,   53,    0,    0,    0,   40,
        0,    0,    0,    0,    2,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,    0,   31,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,    0,   26,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,    0,    0,
        0,   46,   52,    0,   65,   66,   68,   67,    0,    0,
        0,    0,   48,    0,    0,   56,    0,    0,    0,    0,
        0,   43,    1,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   55,   50,   58,    0,
       54,   63,   57,   47,    0,    0,   51,    0,    0,    0,
        0,    1,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   13,   13,   13,   13,   13,   13,   13,    0,
       60,   64,   49,    0,    0,    0,    0,   31,   31,   31,
       31,   31,    0,   31,   31,   26,   26,   26,   26,   26,
        0,   26,   26,   13,   13,   13,   59,    0,   39,    0,
        0,   31,   31,   31,    0,   31,   26,   26,   26,    0,
       26,   13,    0,   42,   31,   31,   26,   26,   13,    0,
       31,   26,   13,    0,   31,   26,   13,    0,   31,   26,
       13,   45,   31,   26,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    7,    8,    1,    1,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,    1,    1,
        1,    1,    1,    1,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       20,   27,   28,   29,   30,   20,   31,   20,   20,   20,
        1,   32,    1,    1,   20,    1,   33,   20,   20,   34,

       35,   36,   20,   37,   38,   20,   20,   39,   20,   20,
       40,   41,   20,   42,   43,   44,   45,   46,   20,   20,
       20,   20,   47,    1,   48,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[49] =
    {   0,
        1,    2,    3,    4,    1,    1,    5,    6,    6,    1,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    1,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    1,    1
    } ;

static yyconst flex_int16_t yy_base[995] =
    {   0,
        0,   47,   55,   60,   52,   64,   47,   68,  112,  159,
      206,  253,  300,  347,   74,  169,   70,   79, 2027, 3245,
       82, 3245, 2018, 3245, 2010, 1994,   67, 1994, 1982, 1954,
       82, 1962,   85,   69, 1939, 1940, 1933,  145, 1944, 1935,
     1913,  393,    0, 3245,  155, 1900, 1899,   46,  135, 1887,
     3245, 3245, 1930,  174, 3245,    0, 3245, 1921,  181,    0,
     1893,  147, 1857, 3245, 1897,   56, 1851,  105, 3245, 1889,
      263,  357, 3245,  364,  369,  373,  404,  379,  410,  419,
      414,  433,  443,  453,  458,  466,  472,  477,  487,  495,
      506,  510,  518,  526,  530,  535,  541,  552,  559,  566,

      570,  574,  255,  578, 3245,  583, 3245,  590,  259,  448,
      602,  591,  606,  614,  623,  638,  639,  353,  640,  622,
      646,  654,  664,  678,  655,  689,  693,  656,  697,  672,
      701,  707,  709,  713,  732, 3245,  744,    0, 1879, 1871,
      163, 1857, 1848, 1836,  173, 1848,  245,  176, 1829, 1830,
     1824,  173, 1831, 1824,  269, 1802,  749,  255, 1773, 1773,
      239,  160,  726,  763, 3245,  767, 3245,  775,  266, 3245,
      347,  780,  192, 3245, 1805, 1786, 1787, 1775, 1770,  268,
     1773, 1772, 1752,  272, 1758, 1750, 1751, 1733, 1719, 1729,
     1736, 1730, 1711, 1727, 1721,  259, 1689,    0,    0, 3245,

     1667, 1664,  251, 1653,    0,  262, 1666, 1650, 1669,  333,
     1627, 1609, 3245, 3245, 3245, 1642,  360,    0, 3245,    0,
     1636,  423, 1623, 1609,  357, 1584, 1583, 3245,  242, 1581,
      784,  388, 3245, 1621, 3245,  788,  792,  798,  806, 3245,
      811,  823, 3245,  831,  817,  840,  848,  852,  856,  860,
      864,  869,  889,  881,  885,  900,  904,  914,  918,  924,
      929,  936,  943,  947,  955,  967, 3245,  976,    0,  981,
      986,  990,  998, 1002, 1012, 1027, 1035, 1041, 1047, 1051,
      996, 1018, 1058, 1066, 3245, 1072, 1082, 3245, 1087, 1092,
     1097, 1098, 1105, 1107, 1111, 1120, 1131, 1136, 1140, 1144,

     1146, 1151, 1152, 1162, 1164, 1175, 1184, 1153, 1185, 1190,
     1195, 3245, 1201, 1206,    0, 1216, 1224, 1230, 1234, 1208,
     1241, 1242, 1247, 1249, 1253, 1262, 1296, 3245, 1300, 1304,
     1278, 3245,    0, 1613, 1597, 1605, 1593, 1588,  406, 1592,
     1588, 1573,  419, 1579, 1571, 1567, 1562, 1550, 1560, 1564,
     1557, 1539, 1554, 1546,  332, 1309, 3245, 1525,    0,  457,
     1520, 1513, 1536,  364, 1504, 1497, 1263, 1284, 1315, 1319,
     3245, 1331, 1335, 1325, 1339, 3245, 1350,  464, 3245, 1356,
     3245, 1362, 3245, 1527, 1512, 1499, 1482, 1473, 1462, 1455,
     1466, 1449, 1432, 1431, 1437, 1418, 1404, 1416, 1416, 1412,

     1407, 1398, 1400, 1380, 1376, 1376, 1357, 1336, 1370,  714,
     1329, 1336, 1318, 1310, 1326, 1374, 1378, 1382, 3245, 1387,
     1393, 3245, 1397, 1401, 1405, 1409, 1413, 1419, 1442, 1448,
     1452, 1457, 1464, 1471, 1477, 1481, 1489, 1495, 1502, 1514,
     1518, 1528, 1535, 1540, 1550, 1554, 1560, 1572, 1585, 1591,
     1579, 1595, 1604, 1608, 1616, 1639, 3245, 1647, 1438, 1623,
     1433, 1496, 1652, 1633, 1503, 1657, 1658, 1659, 1670, 1665,
     1672, 1677, 1681, 1676, 1696, 1690, 1705, 1713, 1712, 1714,
     1718, 1719, 1725, 1757, 1750, 1763, 1731, 1767, 1768, 1769,
     1777, 1337, 1322, 1320, 1302, 1309, 1300, 1292, 1285, 1278,

     1264, 1267, 1276, 1263, 1250, 1262, 1263, 1257, 1258, 1248,
     1247, 1231, 1229, 1233, 1232, 1197, 1781,  757, 1186, 1198,
     1181, 1175, 1788, 3245, 1800, 1184, 1180, 1161, 1161, 1145,
     1132, 1140, 1115, 1117, 1113, 1100, 1110, 1108, 1111, 1107,
     1087, 1087, 1091, 1092, 1085, 1066, 1083, 1070, 1057, 1036,
     1808, 3245,  829, 1025, 1021, 1031, 1510, 1053, 1819, 3245,
     1823, 1827, 3245, 1831, 1836, 1841, 1846, 1853, 1858, 1875,
     1879, 1889, 1893, 1899, 1904, 1910, 1924, 1933, 1942, 1949,
     1955, 1965, 1959, 1980, 1971, 1984, 1988, 1997, 2003, 2021,
     2009, 2013, 2026, 2032, 2038, 1842, 1917, 2042, 1864, 2047,

     2049, 2057, 1966, 2063, 2075, 2082, 2086, 1908, 2088, 2092,
     2099, 2104, 2106, 2110, 2114, 2120, 2124, 2130, 2135, 2139,
     2161, 2145, 2149, 2153, 2167, 2168, 1040, 1041, 1018, 1024,
     1013, 1009, 1023,  998, 1003, 1000,  991,  998,  996, 1000,
      999,  977,  973,  981,  976,  968,  953,  966,  955,  942,
      920,  918,  928, 1729,  930,  939,  926,  933,  929,  917,
     3245,  915,  905,  901,  900,  879,  872, 3245, 3245,  868,
      866,  872,  852,  837,  845, 3245,  819,  824,  807, 3245,
      807,  804, 1814,  782,  797, 2174, 2203, 2184, 2215, 2219,
     2178, 2226, 2232, 2236, 2250, 2257, 2267, 2261, 2271, 2275,

     2279, 2292, 2296, 2300, 2308, 2312, 2329, 2333, 2337, 2341,
     2345, 2349, 2353, 2362, 2366, 2324, 2207, 2370, 2374, 2385,
     2386, 2387, 2391, 2398, 2402, 2419, 2409, 2420, 2426, 2430,
     2431, 2437, 2438, 2448, 2452, 2454, 2444, 2463, 2470, 2476,
     2477, 2485, 2489, 2494, 2495,  790,  802,  779,  795,  788,
      778,  765,  764,  763,  753,  729,  729,  726,  711,  728,
      707,  705,  716,  695,  700,  681,  679,  674,  695,  691,
      679, 3245, 3245,  660, 3245, 3245, 3245, 3245,  674,  665,
      663,  658, 3245,  631,  637, 3245,  626,  617,  587,  594,
      582, 3245,  615, 2501, 2508, 2526, 2530, 2541, 2545, 2549,

     2555, 2559, 2563, 2570, 2574, 2584, 2588, 2595, 2599, 2603,
     2607, 2620, 2632, 2624, 2638, 2644, 2649, 2653, 2655, 2657,
     2550, 2564, 2667, 2612, 2669, 2673, 2675, 2681, 2688, 2692,
     2698, 2677, 2709, 2710, 2714, 2716, 2730, 2731, 2732, 2738,
     2742,  608,  604,  602,  575,  584,  580,  567,  559,  543,
      545,  549,  540,  507,  514,  504, 3245, 3245, 3245,  525,
     3245, 3245, 3245, 3245,  534,  531, 3245,  526,  525, 2185,
      491,  520, 2747, 2751, 2755, 2764, 2776, 2786, 2790, 2795,
     2799, 2809, 2819, 2824, 2828, 2833, 2838, 2815, 2843, 2844,
     2850, 2852, 2856, 2857, 2861, 2869, 2876, 2862, 2885, 2894,

     2895, 2901,  502,  508,  506,  497,  495, 2243,  466,  485,
     3245, 3245, 3245,  454, 2902,  440, 2907, 2909, 2916, 2920,
     2926, 2930, 2935, 2941, 2951, 2955, 2942, 2961, 2967, 2973,
     2974, 2979, 2984,  462,  427, 2966, 3245,  419, 3245, 2975,
      386, 2992, 2998, 3010, 3015, 3023, 3027, 3032, 3033, 3034,
     3039,  394,  381, 3245, 3041, 3046, 3047, 3051,  372,  366,
     3070, 3052,  358,  240, 3085, 3075,  162,  157, 3089, 3093,
       81, 3245, 3104, 3095, 3245, 3136, 3142, 3148, 3154, 3160,
     3166, 3172, 3178, 3184, 3190, 3196, 3202, 3208, 3214, 3220,
     3226,   48, 3232, 3238

    } ;

static yyconst flex_int16_t yy_def[995] =
    {   0,
      975,    1,  976,  977,  978,  978,  979,  979,  975,    9,
      975,   11,  975,   13,  980,  980,  981,  981,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  982,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  983,  975,  984,  975,  975,  985,  984,
      984,  984,  986,  975,  975,  986,  986,  987,  975,  975,
      988,  975,  975,  975,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,   42,  989,  988,  988,  988,  988,  988,

      988,  988,  990,  975,  975,  975,  975,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,   42,  991,  990,  990,  990,
      990,  990,  990,  990,  975,  975,  975,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  975,  992,   42,  992,  992,  992,
      992,  992,  993,  975,  975,  975,  975,  993,  994,  975,
      994,  994,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,   42,  982,  975,

      975,  975,  975,  975,  982,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  984,  975,  984,
      975,  984,  984,  984,  984,  986,  986,  975,  986,  986,
      986,  987,  975,  975,  975,  988,  988,  988,  975,  975,
      975,  975,  975,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  975,  988,   94,  989,
      989,  989,  988,  988,  988,  988,  988,  988,  988,  988,
      990,  990,  990,  975,  975,  975,  975,  975,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,

      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  975,  975,  990,  126,  991,  991,  991,  990,  990,
      990,  990,  990,  990,  990,  990,  975,  975,  975,  975,
      975,  975,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  975,  975,  992,  157,  992,
      992,  992,  992,  992,  992,  992,  993,  993,  993,  975,
      975,  975,  975,  975,  993,  975,  975,  994,  975,  994,
      975,  994,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,

      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  984,  986,  986,  986,  975,  975,
      988,  975,  975,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  989,  988,
      988,  988,  988,  988,  988,  990,  975,  975,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  991,  982,  990,  990,  990,  990,  990,
      990,  992,  992,  992,  992,  992,  992,  992,  992,  992,

      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  993,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  984,  986,  975,
      975,  986,  975,  975,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  990,  990,  990,  990,  990,

      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  984,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,

      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  984,  988,  988,  988,  988,  988,  988,  988,

      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  984,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,

      990,  990,  992,  992,  992,  992,  992,  992,  992,  975,
      975,  975,  975,  975,  975,  975,  975,  988,  988,  988,
      988,  988,  988,  988,  988,  990,  990,  990,  990,  990,
      990,  990,  990,  992,  992,  992,  975,  975,  975,  975,
      975,  988,  988,  988,  988,  988,  990,  990,  990,  990,
      990,  992,  975,  975,  988,  988,  990,  990,  992,  975,
      988,  990,  992,  975,  988,  990,  992,  975,  988,  990,
      992,  975,  988,  990,    0,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975

    } ;

static yyconst flex_int16_t yy_nxt[3294] =
    {   0,
       20,   21,   22,   23,   21,   20,   24,   20,   25,   20,
       20,   26,   27,   28,   20,   29,   20,   20,   30,   20,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   20,
       40,   20,   20,   41,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   42,   69,
       70,   42,   43,  333,   64,   65,   44,   52,   53,   54,
       55,   51,   57,   58,   59,   60,   64,   65,  209,   45,
       69,   70,  170,  171,   61,  164,  165,  166,  164,  188,
      167,  170,  171,  173,  177,   46,  173,   47,  210,   48,
      972,  178,   49,   50,   66,  186,  189,  182,  229,   67,

      183,  172,   62,  230,  184,  168,   66,  233,  234,  187,
      172,   67,   71,   72,   73,   74,   72,   71,   75,   71,
       76,   71,   71,   77,   78,   79,   71,   80,   71,   71,
       81,   71,   82,   83,   84,   85,   86,   87,   88,   89,
       90,   71,   91,   92,   71,   93,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       94,  224,  193,   94,   95,  206,  972,  211,   96,  212,
      164,  165,  166,  164,  194,  167,  214,  216,  217,  187,
      336,   97,  215,  219,  221,  222,  347,  337,  341,  225,
      352,  342,  365,  173,  366,  343,  173,   98,  971,   99,

      168,  100,  353,  348,  101,  102,  103,  104,  105,  106,
      104,  103,  107,  103,  108,  103,  103,  109,  110,  111,
      103,  112,  103,  103,  113,  103,  114,  115,  116,  117,
      118,  119,  120,  121,  122,  103,  123,  124,  103,  125,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  126,  345,  282,  126,  127,  282,
      282,  363,  128,  282,  237,  360,  237,  237,  379,  346,
      356,  357,  356,  356,  290,  129,  968,  406,  388,  346,
      407,  364,  393,  211,  229,  212,  283,  409,  396,  230,
      283,  130,  389,  131,  238,  132,  394,  380,  133,  134,

       20,  135,  136,  137,  135,   20,   24,  138,  139,   20,
      138,  140,  141,  142,  138,  143,  138,  138,  144,  138,
      145,  146,  147,  148,  149,  150,  151,  152,  153,  138,
      154,  155,  138,  156,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,   20,   20,  157,  381,
      514,  157,   43,  515,  282,  209,   44,  282,  239,  240,
      241,  239,  214,  216,  217,  241,  243,  241,  241,  158,
      237,  224,  237,  237,  237,  210,  237,  237,  380,  304,
      237,  244,  237,  237,  283,  159,  363,  160,  242,  161,
      233,  234,  162,   50,  198,  242,  246,  198,  199,  225,

      238,  967,  200,  247,  238,  237,  364,  237,  237,  964,
      238,  237,  963,  237,  237,  237,  496,  237,  237,  245,
      237,  960,  237,  237,  248,  219,  221,  222,  959,  501,
      497,  201,  954,  202,  237,  238,  237,  237,  203,  204,
      249,  238,  250,  502,  237,  238,  237,  237,  251,  282,
      238,  252,  282,  953,  237,  253,  237,  237,  254,  237,
      952,  237,  237,  255,  238,  291,  379,  237,  257,  237,
      237,  937,  292,  237,  238,  237,  237,  256,  237,  283,
      237,  237,  517,  504,  238,  258,  939,  938,  237,  238,
      237,  237,  259,  260,  937,  380,  237,  238,  237,  237,

      936,  261,  935,  238,  262,  264,  913,  237,  238,  237,
      237,  266,  267,  266,  266,  912,  263,  911,  238,  237,
      265,  237,  237,  934,  872,  917,  238,  269,  240,  241,
      269,  271,  914,  271,  271,  913,  237,  238,  237,  237,
      912,  238,  237,  911,  237,  237,  910,  909,  908,  238,
      907,  273,  268,  237,  906,  237,  237,  242,  867,  905,
      237,  272,  237,  237,  904,  256,  238,  237,  864,  237,
      237,  237,  238,  237,  237,  237,  863,  237,  237,  284,
      285,  286,  284,  238,  286,  288,  286,  286,  276,  862,
      238,  282,  282,  861,  282,  282,  274,  238,  289,  903,

      275,  238,  278,  282,  279,  238,  282,  282,  277,  287,
      282,  859,  294,  858,  287,  282,  293,  857,  282,  872,
      280,  283,  283,  282,  282,  871,  282,  282,  870,  296,
      869,  868,  297,  283,  295,  867,  298,  283,  299,  282,
      282,  282,  282,  282,  282,  283,  306,  282,  300,  302,
      282,  866,  865,  283,  283,  282,  282,  282,  282,  282,
      282,  305,  301,  307,  309,  282,  303,  864,  282,  283,
      283,  283,  863,  282,  862,  308,  282,  283,  310,  311,
      312,  313,  311,  861,  860,  283,  283,  283,  859,  314,
      315,  285,  286,  315,  317,  283,  205,  317,  282,  205,

      858,  282,  282,  283,  857,  282,  856,  319,  282,  283,
      282,  282,  855,  282,  282,  553,  320,  282,  553,  854,
      287,  301,  853,  852,  318,  786,  851,  368,  283,  322,
      368,  850,  283,  327,  328,  329,  327,  783,  283,  849,
      283,  324,  321,  325,  283,  331,  332,  331,  331,  323,
      359,  328,  329,  359,  848,  847,  846,  369,  553,  326,
      554,  553,  778,  330,  370,  371,  372,  370,  374,  371,
      374,  374,  777,  776,  775,  330,  375,  376,  377,  375,
      330,  382,  383,  382,  382,  418,  419,  420,  418,  237,
      845,  237,  237,  237,  373,  237,  237,  773,  373,  421,

      422,  421,  421,  554,  772,  844,  369,  239,  240,  241,
      239,  380,  241,  240,  241,  241,  843,  842,  237,  238,
      237,  237,  793,  238,  423,  267,  423,  423,  792,  238,
      553,  416,  237,  553,  237,  237,  791,  242,  424,  244,
      790,  237,  242,  237,  237,  789,  788,  787,  238,  237,
      425,  237,  237,  237,  786,  237,  237,  237,  785,  237,
      237,  237,  238,  237,  237,  237,  428,  237,  237,  426,
      237,  238,  237,  237,  430,  554,  784,  427,  431,  238,
      429,  783,  237,  238,  237,  237,  237,  238,  237,  237,
      237,  238,  237,  237,  782,  238,  781,  432,  780,  433,

      238,  237,  435,  237,  237,  237,  779,  237,  237,  778,
      777,  436,  238,  434,  776,  237,  238,  237,  237,  237,
      238,  237,  237,  437,  775,  237,  438,  237,  237,  774,
      237,  238,  237,  237,  441,  238,  440,  237,  773,  237,
      237,  442,  772,  439,  237,  238,  237,  237,  237,  238,
      237,  237,  771,  770,  444,  238,  237,  769,  237,  237,
      238,  768,  767,  445,  766,  443,  765,  238,  266,  267,
      266,  266,  764,  446,  238,  676,  447,  237,  238,  237,
      237,  763,  271,  762,  271,  271,  238,  271,  761,  271,
      271,  449,  422,  449,  449,  760,  759,  282,  238,  237,

      282,  237,  237,  237,  758,  237,  237,  238,  669,  668,
      757,  448,  272,  237,  756,  237,  237,  272,  755,  282,
      754,  272,  282,  450,  436,  753,  752,  283,  237,  238,
      237,  237,  661,  238,  451,  751,  237,  453,  237,  237,
      750,  749,  237,  238,  237,  237,  452,  748,  237,  283,
      237,  237,  237,  747,  237,  237,  746,  276,  238,  456,
      457,  458,  456,  685,  682,  681,  238,  284,  285,  286,
      284,  680,  238,  286,  285,  286,  286,  277,  238,  454,
      679,  678,  238,  313,  312,  313,  313,  677,  282,  283,
      455,  282,  676,  282,  675,  289,  282,  287,  282,  282,

      674,  282,  282,  287,  673,  672,  282,  460,  282,  282,
      671,  282,  282,  459,  670,  282,  669,  463,  283,  461,
      668,  282,  667,  283,  282,  465,  666,  665,  283,  283,
      462,  464,  282,  664,  466,  282,  283,  282,  283,  663,
      282,  282,  283,  662,  282,  282,  468,  282,  282,  661,
      282,  283,  282,  282,  282,  282,  282,  282,  660,  467,
      469,  470,  283,  282,  479,  282,  282,  283,  282,  472,
      471,  283,  659,  473,  476,  283,  282,  283,  658,  282,
      475,  474,  283,  283,  283,  282,  282,  477,  282,  282,
      657,  282,  656,  283,  282,  283,  311,  312,  313,  311,

      655,  480,  313,  312,  313,  313,  283,  282,  481,  282,
      282,  482,  282,  478,  654,  283,  283,  317,  653,  205,
      317,  283,  205,  517,  652,  317,  283,  205,  317,  651,
      205,  484,  457,  485,  484,  282,  205,  283,  282,  283,
      487,  483,  282,  282,  650,  282,  282,  318,  282,  649,
      282,  282,  489,  282,  282,  318,  648,  282,  647,  486,
      471,  318,  646,  282,  368,  283,  282,  368,  645,  322,
      644,  643,  283,  283,  642,  488,  641,  640,  283,  331,
      283,  331,  331,  639,  283,  368,  638,  490,  368,  323,
      637,  636,  635,  283,  369,  634,  491,  327,  328,  329,

      327,  331,  328,  331,  331,  356,  357,  356,  356,  330,
      356,  357,  356,  356,  633,  369,  523,  524,  525,  523,
      370,  371,  372,  370,  632,  631,  374,  330,  374,  374,
      630,  330,  374,  371,  374,  374,  377,  376,  377,  377,
      375,  376,  377,  375,  629,  628,  369,  627,  558,  557,
      373,  377,  376,  377,  377,  556,  373,  382,  383,  382,
      382,  409,  373,  382,  383,  382,  382,  555,  550,  549,
      369,  551,  552,  551,  551,  559,  560,  561,  559,  562,
      563,  564,  562,  418,  419,  420,  418,  380,  420,  419,
      420,  420,  548,  380,  421,  422,  421,  421,  423,  267,

      423,  423,  237,  547,  237,  237,  237,  546,  237,  237,
      237,  565,  237,  237,  237,  545,  237,  237,  544,  543,
      237,  416,  237,  237,  238,  416,  542,  541,  566,  227,
      540,  539,  238,  567,  282,  569,  238,  282,  538,  282,
      238,  568,  282,  237,  238,  237,  237,  537,  596,  237,
      238,  237,  237,  237,  536,  237,  237,  598,  237,  535,
      237,  237,  572,  534,  283,  237,  570,  237,  237,  283,
      571,  573,  237,  238,  237,  237,  533,  532,  237,  238,
      237,  237,  237,  238,  237,  237,  531,  576,  238,  530,
      237,  574,  237,  237,  575,  238,  237,  282,  237,  237,

      282,  577,  238,  237,  282,  237,  237,  282,  238,  579,
      529,  683,  238,  580,  683,  237,  578,  237,  237,  237,
      238,  237,  237,  528,  599,  602,  238,  283,  581,  237,
      582,  237,  237,  238,  283,  527,  237,  526,  237,  237,
      522,  237,  521,  237,  237,  238,  520,  519,  583,  238,
      584,  237,  518,  237,  237,  237,  684,  237,  237,  238,
      516,  237,  513,  237,  237,  512,  238,  585,  511,  510,
      587,  238,  588,  237,  509,  237,  237,  586,  508,  507,
      591,  238,  237,  591,  506,  238,  449,  422,  449,  449,
      505,  238,  590,  552,  590,  590,  237,  504,  237,  237,

      503,  500,  499,  238,  589,  237,  498,  237,  237,  237,
      238,  237,  237,  495,  494,  493,  272,  237,  492,  237,
      237,  334,  238,  233,  282,  592,  238,  282,  417,  450,
      416,  227,  223,  593,  282,  238,  415,  282,  219,  238,
      456,  457,  458,  456,  214,  594,  597,  238,  458,  457,
      458,  458,  414,  282,  283,  595,  282,  601,  282,  282,
      282,  282,  282,  282,  283,  413,  282,  603,  600,  282,
      283,  282,  604,  282,  282,  607,  282,  282,  282,  412,
      282,  282,  282,  283,  411,  282,  605,  611,  283,  283,
      283,  282,  608,  606,  282,  610,  283,  282,  410,  213,

      282,  283,  613,  283,  609,  208,  282,  283,  283,  282,
      612,  207,  283,  282,  282,  282,  282,  282,  282,  282,
      282,  283,  282,  282,  408,  614,  282,  283,  615,  282,
      683,  619,  622,  683,  618,  622,  283,  405,  404,  616,
      403,  617,  402,  283,  283,  283,  401,  400,  399,  283,
      283,  485,  457,  485,  485,  398,  283,  620,  484,  457,
      485,  484,  283,  205,  621,  552,  551,  621,  282,  282,
      282,  282,  282,  282,  397,  684,  396,  623,  282,  395,
      392,  282,  551,  552,  551,  551,  391,  390,  318,  523,
      524,  525,  523,  486,  283,  387,  386,  385,  283,  283,

      283,  525,  524,  525,  525,  624,  625,  384,  283,  551,
      552,  551,  551,  175,  362,  683,  626,  361,  683,  369,
      559,  560,  561,  559,  561,  560,  561,  561,  562,  563,
      564,  562,  564,  563,  564,  564,  358,  237,  355,  237,
      237,  354,  237,  282,  237,  237,  282,  237,  351,  237,
      237,  350,  686,  687,  237,  349,  237,  237,  716,  237,
      684,  237,  237,  344,  340,  282,  227,  238,  282,  339,
      689,  338,  238,  283,  227,  688,  237,  238,  237,  237,
      237,  719,  237,  237,  238,  690,  335,  334,  692,  238,
      237,  235,  237,  237,  237,  283,  237,  237,  231,  228,

      237,  691,  237,  237,  227,  237,  238,  237,  237,  282,
      238,  237,  282,  237,  237,  694,  223,  693,  282,  695,
      238,  282,  728,  219,  238,  237,  697,  237,  237,  717,
      238,  696,  214,  213,  237,  238,  237,  237,  698,  283,
      208,  238,  699,  237,  207,  237,  237,  197,  283,  196,
      237,  700,  237,  237,  195,  238,  237,  192,  237,  237,
      237,  191,  237,  237,  238,  190,  237,  282,  237,  237,
      282,  704,  237,  238,  237,  237,  701,  185,  702,  703,
      238,  237,  181,  237,  237,  237,  238,  237,  237,  237,
      238,  237,  237,  707,  723,  705,  238,  283,  237,  706,

      237,  237,  238,  180,  237,  708,  237,  237,  179,  176,
      591,  238,  237,  591,  237,  238,  237,  237,  175,  238,
      174,  709,  590,  552,  590,  590,  975,  237,  238,  237,
      237,  975,  975,  237,  238,  237,  237,  975,  975,  714,
      238,  237,  714,  282,  238,  975,  282,  710,  282,  975,
      282,  282,  238,  282,  975,  592,  975,  238,  282,  711,
      975,  282,  975,  238,  282,  713,  722,  282,  975,  238,
      712,  718,  975,  283,  720,  721,  282,  975,  283,  282,
      283,  975,  975,  282,  715,  724,  282,  282,  283,  282,
      282,  975,  282,  282,  283,  725,  282,  729,  975,  975,

      282,  730,  727,  282,  975,  282,  283,  282,  282,  726,
      282,  282,  975,  283,  282,  282,  975,  283,  282,  283,
      733,  282,  734,  283,  282,  282,  731,  732,  282,  735,
      283,  282,  975,  737,  282,  283,  282,  283,  975,  282,
      282,  283,  975,  282,  975,  283,  622,  738,  736,  622,
      282,  283,  975,  282,  282,  283,  975,  282,  975,  739,
      975,  283,  621,  552,  551,  621,  283,  975,  282,  744,
      283,  282,  744,  975,  975,  237,  283,  237,  237,  237,
      283,  237,  237,  740,  283,  237,  915,  237,  237,  915,
      799,  623,  283,  975,  975,  741,  975,  742,  283,  283,

      743,  794,  975,  975,  237,  238,  237,  237,  282,  238,
      796,  282,  975,  975,  745,  238,  237,  795,  237,  237,
      237,  819,  237,  237,  797,  975,  975,  237,  798,  237,
      237,  916,  975,  237,  238,  237,  237,  237,  283,  237,
      237,  800,  975,  975,  915,  801,  238,  915,  975,  975,
      238,  237,  975,  237,  237,  975,  975,  238,  237,  802,
      237,  237,  237,  238,  237,  237,  803,  238,  237,  975,
      237,  237,  237,  975,  237,  237,  237,  975,  237,  237,
      237,  238,  237,  237,  975,  975,  975,  805,  238,  916,
      975,  975,  238,  237,  804,  237,  237,  237,  238,  237,

      237,  237,  238,  237,  237,  808,  238,  806,  975,  237,
      238,  237,  237,  237,  975,  237,  237,  975,  975,  975,
      807,  811,  975,  238,  809,  282,  975,  238,  282,  810,
      237,  238,  237,  237,  237,  975,  237,  237,  237,  238,
      237,  237,  237,  238,  237,  237,  237,  975,  237,  237,
      237,  818,  237,  237,  237,  283,  237,  237,  975,  813,
      238,  812,  975,  714,  238,  237,  714,  237,  238,  237,
      237,  282,  238,  975,  282,  282,  238,  975,  282,  814,
      238,  975,  815,  821,  238,  816,  282,  282,  282,  282,
      282,  282,  282,  238,  822,  282,  820,  238,  823,  282,

      824,  283,  282,  282,  975,  283,  282,  825,  715,  975,
      282,  826,  817,  282,  975,  975,  283,  283,  283,  975,
      282,  282,  283,  282,  282,  975,  975,  282,  827,  283,
      282,  282,  282,  283,  282,  282,  828,  975,  282,  282,
      283,  282,  282,  975,  975,  282,  829,  832,  282,  282,
      283,  283,  282,  282,  975,  282,  282,  283,  282,  830,
      975,  283,  283,  835,  282,  831,  975,  282,  283,  283,
      975,  282,  833,  834,  282,  283,  975,  282,  282,  283,
      282,  282,  975,  283,  975,  283,  282,  975,  975,  282,
      282,  836,  837,  282,  283,  744,  282,  975,  744,  282,

      975,  283,  237,  975,  237,  237,  975,  283,  283,  237,
      873,  237,  237,  975,  838,  975,  283,  874,  839,  975,
      283,  840,  975,  975,  975,  283,  283,  237,  975,  237,
      237,  237,  238,  237,  237,  875,  975,  975,  975,  238,
      745,  841,  237,  975,  237,  237,  237,  975,  237,  237,
      237,  282,  237,  237,  282,  975,  237,  238,  237,  237,
      237,  238,  237,  237,  237,  282,  237,  237,  282,  876,
      975,  237,  238,  237,  237,  237,  238,  237,  237,  877,
      238,  283,  975,  878,  975,  237,  238,  237,  237,  237,
      238,  237,  237,  879,  238,  283,  237,  880,  237,  237,

      237,  238,  237,  237,  237,  238,  237,  237,  237,  975,
      237,  237,  975,  282,  975,  238,  282,  882,  975,  238,
      881,  237,  975,  237,  237,  237,  238,  237,  237,  883,
      238,  975,  975,  237,  238,  237,  237,  975,  238,  237,
      975,  237,  237,  283,  975,  237,  884,  237,  237,  975,
      237,  238,  237,  237,  282,  238,  282,  282,  282,  282,
      975,  282,  888,  238,  889,  975,  890,  885,  282,  238,
      282,  282,  886,  282,  282,  238,  282,  282,  282,  282,
      238,  282,  282,  975,  283,  282,  283,  887,  283,  282,
      892,  891,  282,  282,  975,  975,  282,  893,  283,  282,

      283,  894,  282,  975,  283,  975,  283,  895,  283,  975,
      282,  282,  283,  282,  282,  282,  975,  282,  282,  283,
      282,  975,  975,  283,  897,  898,  975,  975,  975,  283,
      896,  282,  282,  282,  282,  282,  282,  975,  975,  282,
      283,  283,  282,  282,  899,  283,  282,  283,  237,  975,
      237,  237,  237,  975,  237,  237,  237,  975,  237,  237,
      975,  283,  283,  283,  975,  237,  901,  237,  237,  283,
      975,  975,  975,  283,  900,  975,  975,  237,  238,  237,
      237,  902,  238,  975,  975,  918,  238,  237,  975,  237,
      237,  237,  975,  237,  237,  238,  237,  975,  237,  237,

      237,  975,  237,  237,  975,  975,  975,  238,  919,  975,
      237,  975,  237,  237,  975,  975,  282,  238,  920,  282,
      237,  238,  237,  237,  975,  237,  238,  237,  237,  237,
      238,  237,  237,  921,  923,  922,  237,  923,  975,  237,
      238,  237,  237,  975,  282,  282,  283,  282,  282,  975,
      238,  282,  975,  282,  282,  238,  282,  282,  282,  238,
      282,  282,  282,  282,  238,  282,  282,  975,  975,  238,
      282,  926,  925,  282,  283,  283,  975,  282,  927,  924,
      282,  283,  975,  283,  975,  928,  282,  283,  283,  282,
      975,  975,  283,  283,  929,  282,  931,  975,  282,  931,

      283,  930,  282,  915,  975,  282,  915,  283,  940,  975,
      237,  940,  237,  237,  975,  975,  283,  237,  942,  237,
      237,  237,  975,  237,  237,  283,  283,  237,  975,  237,
      237,  237,  283,  237,  237,  933,  923,  975,  237,  923,
      238,  932,  237,  282,  237,  237,  282,  238,  916,  975,
      975,  238,  945,  941,  237,  945,  282,  238,  975,  282,
      975,  238,  282,  943,  947,  282,  238,  940,  282,  975,
      940,  282,  238,  283,  282,  931,  940,  282,  931,  940,
      282,  924,  238,  282,  975,  950,  283,  944,  950,  975,
      975,  975,  283,  237,  975,  237,  237,  946,  283,  237,

      975,  237,  237,  975,  283,  283,  948,  975,  975,  975,
      283,  237,  941,  237,  237,  283,  945,  975,  237,  945,
      932,  941,  975,  238,  237,  949,  237,  237,  282,  238,
      951,  282,  955,  282,  282,  950,  282,  282,  950,  975,
      282,  238,  237,  282,  237,  237,  238,  237,  282,  237,
      237,  282,  282,  282,  238,  282,  282,  975,  283,  975,
      975,  946,  975,  283,  283,  283,  957,  975,  975,  956,
      283,  237,  238,  237,  237,  975,  282,  238,  283,  282,
      951,  961,  283,  283,  975,  958,  237,  962,  237,  237,
      237,  975,  237,  237,  282,  966,  282,  282,  973,  282,

      975,  238,  974,  975,  975,  237,  283,  237,  237,  975,
      975,  970,  975,  965,  975,  975,  238,  975,  975,  975,
      238,  969,  975,  975,  283,  975,  283,  975,  975,  975,
      975,  975,  975,  975,  975,  238,   51,   51,   51,   51,
       51,   51,   56,   56,   56,   56,   56,   56,   63,   63,
       63,   63,   63,   63,   68,   68,   68,   68,   68,   68,
      163,  163,  163,  163,  163,  163,  169,  169,  169,  169,
      169,  169,  205,  205,  975,  205,  205,  205,  215,  215,
      215,  215,  215,  215,  218,  975,  975,  975,  218,  218,
      220,  220,  220,  220,  220,  220,  226,  226,  975,  975,

      226,  226,  232,  232,  232,  232,  232,  232,  236,  236,
      975,  236,  236,  236,  270,  270,  975,  270,  270,  270,
      281,  281,  975,  975,  975,  281,  316,  316,  975,  316,
      316,  316,  367,  367,  975,  975,  975,  367,  378,  378,
      378,  378,  378,  378,   19,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975

    } ;

static yyconst flex_int16_t yy_chk[3294] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    7,
        7,    2,    2,  992,    5,    5,    2,    3,    3,    3,
        3,    4,    4,    4,    4,    4,    6,    6,   48,    2,
        8,    8,   17,   17,    4,   15,   15,   15,   15,   34,
       15,   18,   18,   21,   27,    2,   21,    2,   48,    2,
      971,   27,    2,    2,    5,   33,   34,   31,   66,    5,

       31,   17,    4,   66,   31,   15,    6,   68,   68,   33,
       18,    6,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
       10,   62,   38,   10,   10,   45,  968,   49,   10,   49,
       16,   16,   16,   16,   38,   16,   54,   54,   54,   45,
      141,   10,   59,   59,   59,   59,  148,  141,  145,   62,
      152,  145,  162,  173,  162,  145,  173,   10,  967,   10,

       16,   10,  152,  148,   10,   10,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   12,  147,  103,   12,   12,  103,
      109,  161,   12,  109,   71,  158,   71,   71,  169,  147,
      155,  155,  155,  155,  109,   12,  964,  196,  180,  158,
      196,  161,  184,  203,  229,  203,  103,  206,  206,  229,
      109,   12,  180,   12,   71,   12,  184,  169,   12,   12,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   14,  171,
      355,   14,   14,  355,  118,  210,   14,  118,   72,   72,
       72,   72,  217,  217,  217,   74,   74,   74,   74,   14,
       75,  225,   75,   75,   76,  210,   76,   76,  171,  118,
       78,   76,   78,   78,  118,   14,  364,   14,   72,   14,
      232,  232,   14,   14,   42,   74,   78,   42,   42,  225,

       75,  963,   42,   78,   76,   77,  364,   77,   77,  960,
       78,   79,  959,   79,   79,   81,  339,   81,   81,   77,
       80,  953,   80,   80,   79,  222,  222,  222,  952,  343,
      339,   42,  941,   42,   82,   77,   82,   82,   42,   42,
       80,   79,   81,  343,   83,   81,   83,   83,   82,  110,
       80,   82,  110,  938,   84,   82,   84,   84,   83,   85,
      935,   85,   85,   84,   82,  110,  378,   86,   85,   86,
       86,  934,  110,   87,   83,   87,   87,   84,   88,  110,
       88,   88,  360,  360,   84,   85,  916,  914,   89,   85,
       89,   89,   86,   87,  910,  378,   90,   86,   90,   90,

      909,   88,  907,   87,   89,   90,  906,   91,   88,   91,
       91,   92,   92,   92,   92,  905,   89,  904,   89,   93,
       91,   93,   93,  903,  872,  871,   90,   94,   94,   94,
       94,   95,  869,   95,   95,  868,   96,   91,   96,   96,
      866,   92,   97,  865,   97,   97,  860,  856,  855,   93,
      854,   97,   93,   98,  853,   98,   98,   94,  852,  851,
       99,   95,   99,   99,  850,   97,   96,  100,  849,  100,
      100,  101,   97,  101,  101,  102,  848,  102,  102,  104,
      104,  104,  104,   98,  106,  106,  106,  106,  100,  847,
       99,  108,  112,  846,  108,  112,   98,  100,  108,  845,

       99,  101,  101,  111,  101,  102,  111,  113,  100,  104,
      113,  844,  112,  843,  106,  114,  111,  842,  114,  793,
      102,  108,  112,  120,  115,  791,  120,  115,  790,  114,
      789,  788,  114,  111,  113,  787,  114,  113,  115,  116,
      117,  119,  116,  117,  119,  114,  120,  121,  116,  117,
      121,  785,  784,  120,  115,  122,  125,  128,  122,  125,
      128,  119,  116,  121,  122,  123,  117,  782,  123,  116,
      117,  119,  781,  130,  780,  121,  130,  121,  123,  124,
      124,  124,  124,  779,  774,  122,  125,  128,  771,  125,
      126,  126,  126,  126,  127,  123,  127,  127,  129,  127,

      770,  129,  131,  130,  769,  131,  768,  129,  132,  124,
      133,  132,  767,  133,  134,  410,  130,  134,  410,  766,
      126,  129,  765,  764,  127,  763,  762,  163,  129,  132,
      163,  761,  131,  135,  135,  135,  135,  760,  132,  759,
      133,  133,  131,  133,  134,  137,  137,  137,  137,  132,
      157,  157,  157,  157,  758,  757,  756,  163,  518,  134,
      410,  518,  755,  135,  164,  164,  164,  164,  166,  166,
      166,  166,  754,  753,  752,  137,  168,  168,  168,  168,
      157,  172,  172,  172,  172,  231,  231,  231,  231,  236,
      751,  236,  236,  237,  164,  237,  237,  750,  166,  238,

      238,  238,  238,  518,  749,  748,  168,  239,  239,  239,
      239,  172,  241,  241,  241,  241,  747,  746,  245,  236,
      245,  245,  685,  237,  242,  242,  242,  242,  684,  238,
      553,  231,  244,  553,  244,  244,  682,  239,  245,  244,
      681,  246,  241,  246,  246,  679,  678,  677,  245,  247,
      246,  247,  247,  248,  675,  248,  248,  249,  674,  249,
      249,  250,  244,  250,  250,  251,  249,  251,  251,  247,
      252,  246,  252,  252,  250,  553,  673,  248,  251,  247,
      249,  672,  254,  248,  254,  254,  255,  249,  255,  255,
      253,  250,  253,  253,  671,  251,  670,  252,  667,  253,

      252,  256,  254,  256,  256,  257,  666,  257,  257,  665,
      664,  255,  254,  253,  663,  258,  255,  258,  258,  259,
      253,  259,  259,  256,  662,  260,  257,  260,  260,  660,
      261,  256,  261,  261,  260,  257,  259,  262,  659,  262,
      262,  261,  658,  258,  263,  258,  263,  263,  264,  259,
      264,  264,  657,  656,  263,  260,  265,  655,  265,  265,
      261,  653,  652,  264,  651,  262,  650,  262,  266,  266,
      266,  266,  649,  265,  263,  648,  265,  268,  264,  268,
      268,  647,  270,  646,  270,  270,  265,  271,  645,  271,
      271,  272,  272,  272,  272,  644,  643,  281,  266,  273,

      281,  273,  273,  274,  642,  274,  274,  268,  641,  640,
      639,  268,  270,  275,  638,  275,  275,  271,  637,  282,
      636,  272,  282,  273,  273,  635,  634,  281,  276,  273,
      276,  276,  633,  274,  274,  632,  277,  276,  277,  277,
      631,  630,  278,  275,  278,  278,  275,  629,  279,  282,
      279,  279,  280,  628,  280,  280,  627,  277,  276,  283,
      283,  283,  283,  558,  556,  555,  277,  284,  284,  284,
      284,  554,  278,  286,  286,  286,  286,  277,  279,  278,
      550,  549,  280,  287,  287,  287,  287,  548,  289,  283,
      279,  289,  547,  290,  546,  289,  290,  284,  291,  292,

      545,  291,  292,  286,  544,  543,  293,  291,  294,  293,
      542,  294,  295,  290,  541,  295,  540,  294,  289,  292,
      539,  296,  538,  290,  296,  295,  537,  536,  291,  292,
      293,  294,  297,  535,  296,  297,  293,  298,  294,  534,
      298,  299,  295,  533,  299,  300,  298,  301,  300,  532,
      301,  296,  302,  303,  308,  302,  303,  308,  531,  297,
      298,  299,  297,  304,  308,  305,  304,  298,  305,  301,
      300,  299,  530,  302,  305,  300,  306,  301,  529,  306,
      304,  303,  302,  303,  308,  307,  309,  306,  307,  309,
      528,  310,  527,  304,  310,  305,  311,  311,  311,  311,

      526,  309,  313,  313,  313,  313,  306,  314,  310,  320,
      314,  310,  320,  307,  522,  307,  309,  316,  521,  316,
      316,  310,  316,  520,  519,  317,  311,  317,  317,  516,
      317,  318,  318,  318,  318,  319,  318,  314,  319,  320,
      320,  314,  321,  322,  515,  321,  322,  316,  323,  514,
      324,  323,  322,  324,  325,  317,  513,  325,  512,  319,
      319,  318,  511,  326,  367,  319,  326,  367,  510,  323,
      509,  508,  321,  322,  507,  321,  506,  505,  323,  331,
      324,  331,  331,  504,  325,  368,  503,  324,  368,  323,
      502,  501,  500,  326,  367,  499,  325,  327,  327,  327,

      327,  329,  329,  329,  329,  330,  330,  330,  330,  331,
      356,  356,  356,  356,  498,  368,  369,  369,  369,  369,
      370,  370,  370,  370,  497,  496,  374,  327,  374,  374,
      495,  329,  372,  372,  372,  372,  373,  373,  373,  373,
      375,  375,  375,  375,  494,  493,  369,  492,  415,  414,
      370,  377,  377,  377,  377,  413,  374,  380,  380,  380,
      380,  412,  372,  382,  382,  382,  382,  411,  408,  407,
      375,  409,  409,  409,  409,  416,  416,  416,  416,  417,
      417,  417,  417,  418,  418,  418,  418,  380,  420,  420,
      420,  420,  406,  382,  421,  421,  421,  421,  423,  423,

      423,  423,  424,  405,  424,  424,  425,  404,  425,  425,
      426,  424,  426,  426,  427,  403,  427,  427,  402,  401,
      428,  416,  428,  428,  421,  417,  400,  399,  425,  418,
      398,  397,  424,  426,  461,  428,  425,  461,  396,  459,
      426,  427,  459,  429,  427,  429,  429,  395,  459,  430,
      428,  430,  430,  431,  394,  431,  431,  461,  432,  393,
      432,  432,  431,  392,  461,  433,  429,  433,  433,  459,
      430,  432,  434,  429,  434,  434,  391,  390,  435,  430,
      435,  435,  436,  431,  436,  436,  389,  435,  432,  388,
      437,  433,  437,  437,  434,  433,  438,  462,  438,  438,

      462,  436,  434,  439,  465,  439,  439,  465,  435,  438,
      387,  557,  436,  439,  557,  440,  437,  440,  440,  441,
      437,  441,  441,  386,  462,  465,  438,  462,  440,  442,
      441,  442,  442,  439,  465,  385,  443,  384,  443,  443,
      366,  444,  365,  444,  444,  440,  363,  362,  442,  441,
      443,  445,  361,  445,  445,  446,  557,  446,  446,  442,
      358,  447,  354,  447,  447,  353,  443,  444,  352,  351,
      446,  444,  447,  448,  350,  448,  448,  445,  349,  348,
      451,  445,  451,  451,  347,  446,  449,  449,  449,  449,
      346,  447,  450,  450,  450,  450,  452,  345,  452,  452,

      344,  342,  341,  448,  448,  453,  340,  453,  453,  454,
      451,  454,  454,  338,  337,  336,  449,  455,  335,  455,
      455,  334,  450,  234,  460,  451,  452,  460,  230,  453,
      227,  226,  224,  452,  464,  453,  223,  464,  221,  454,
      456,  456,  456,  456,  216,  454,  460,  455,  458,  458,
      458,  458,  212,  463,  460,  455,  463,  464,  466,  467,
      468,  466,  467,  468,  464,  211,  470,  466,  463,  470,
      456,  469,  467,  471,  469,  470,  471,  474,  472,  209,
      474,  472,  473,  463,  208,  473,  468,  474,  466,  467,
      468,  476,  471,  469,  476,  473,  470,  475,  207,  204,

      475,  469,  476,  471,  472,  202,  477,  474,  472,  477,
      475,  201,  473,  479,  478,  480,  479,  478,  480,  481,
      482,  476,  481,  482,  197,  477,  483,  475,  478,  483,
      654,  482,  487,  654,  481,  487,  477,  195,  194,  479,
      193,  480,  192,  479,  478,  480,  191,  190,  189,  481,
      482,  485,  485,  485,  485,  188,  483,  483,  484,  484,
      484,  484,  487,  484,  486,  486,  486,  486,  488,  489,
      490,  488,  489,  490,  187,  654,  186,  487,  491,  185,
      183,  491,  517,  517,  517,  517,  182,  181,  484,  523,
      523,  523,  523,  489,  486,  179,  178,  177,  488,  489,

      490,  525,  525,  525,  525,  488,  490,  176,  491,  551,
      551,  551,  551,  175,  160,  683,  491,  159,  683,  523,
      559,  559,  559,  559,  561,  561,  561,  561,  562,  562,
      562,  562,  564,  564,  564,  564,  156,  565,  154,  565,
      565,  153,  566,  596,  566,  566,  596,  567,  151,  567,
      567,  150,  565,  566,  568,  149,  568,  568,  596,  569,
      683,  569,  569,  146,  144,  599,  559,  565,  599,  143,
      568,  142,  566,  596,  562,  567,  570,  567,  570,  570,
      571,  599,  571,  571,  568,  569,  140,  139,  571,  569,
      572,   70,  572,  572,  573,  599,  573,  573,   67,   65,

      574,  570,  574,  574,   63,  575,  570,  575,  575,  608,
      571,  576,  608,  576,  576,  573,   61,  572,  597,  574,
      572,  597,  608,   58,  573,  577,  576,  577,  577,  597,
      574,  575,   53,   50,  578,  575,  578,  578,  577,  608,
       47,  576,  578,  579,   46,  579,  579,   41,  597,   40,
      580,  579,  580,  580,   39,  577,  581,   37,  581,  581,
      583,   36,  583,  583,  578,   35,  582,  603,  582,  582,
      603,  583,  585,  579,  585,  585,  580,   32,  581,  582,
      580,  584,   30,  584,  584,  586,  581,  586,  586,  587,
      583,  587,  587,  586,  603,  584,  582,  603,  588,  585,

      588,  588,  585,   29,  589,  587,  589,  589,   28,   26,
      591,  584,  591,  591,  592,  586,  592,  592,   25,  587,
       23,  588,  590,  590,  590,  590,   19,  593,  588,  593,
      593,    0,    0,  594,  589,  594,  594,    0,    0,  595,
      591,  595,  595,  598,  592,    0,  598,  589,  600,    0,
      601,  600,  590,  601,    0,  591,    0,  593,  602,  592,
        0,  602,    0,  594,  604,  594,  602,  604,    0,  595,
      593,  598,    0,  598,  600,  601,  605,    0,  600,  605,
      601,    0,    0,  606,  595,  604,  606,  607,  602,  609,
      607,    0,  609,  610,  604,  605,  610,  609,    0,    0,

      611,  610,  607,  611,    0,  612,  605,  613,  612,  606,
      613,  614,    0,  606,  614,  615,    0,  607,  615,  609,
      613,  616,  614,  610,  616,  617,  611,  612,  617,  615,
      611,  618,    0,  617,  618,  612,  619,  613,    0,  619,
      620,  614,    0,  620,    0,  615,  622,  618,  616,  622,
      623,  616,    0,  623,  624,  617,    0,  624,    0,  619,
        0,  618,  621,  621,  621,  621,  619,    0,  625,  626,
      620,  625,  626,    0,    0,  686,  622,  686,  686,  691,
      623,  691,  691,  620,  624,  688,  870,  688,  688,  870,
      691,  622,  621,    0,    0,  623,    0,  624,  625,  626,

      625,  686,    0,    0,  687,  686,  687,  687,  717,  691,
      688,  717,    0,    0,  626,  688,  689,  687,  689,  689,
      690,  717,  690,  690,  689,    0,    0,  692,  690,  692,
      692,  870,    0,  693,  687,  693,  693,  694,  717,  694,
      694,  693,    0,    0,  908,  694,  689,  908,    0,    0,
      690,  695,    0,  695,  695,    0,    0,  692,  696,  695,
      696,  696,  698,  693,  698,  698,  696,  694,  697,    0,
      697,  697,  699,    0,  699,  699,  700,    0,  700,  700,
      701,  695,  701,  701,    0,    0,    0,  698,  696,  908,
        0,    0,  698,  702,  697,  702,  702,  703,  697,  703,

      703,  704,  699,  704,  704,  703,  700,  701,    0,  705,
      701,  705,  705,  706,    0,  706,  706,    0,    0,    0,
      702,  706,    0,  702,  704,  716,    0,  703,  716,  705,
      707,  704,  707,  707,  708,    0,  708,  708,  709,  705,
      709,  709,  710,  706,  710,  710,  711,    0,  711,  711,
      712,  716,  712,  712,  713,  716,  713,  713,    0,  709,
      707,  708,    0,  714,  708,  714,  714,  715,  709,  715,
      715,  718,  710,    0,  718,  719,  711,    0,  719,  710,
      712,    0,  712,  719,  713,  713,  720,  721,  722,  720,
      721,  722,  723,  714,  720,  723,  718,  715,  721,  724,

      723,  718,  724,  725,    0,  719,  725,  724,  714,    0,
      727,  725,  715,  727,    0,    0,  720,  721,  722,    0,
      726,  728,  723,  726,  728,    0,    0,  729,  726,  724,
      729,  730,  731,  725,  730,  731,  727,    0,  732,  733,
      727,  732,  733,    0,    0,  737,  728,  733,  737,  734,
      726,  728,  734,  735,    0,  736,  735,  729,  736,  731,
        0,  730,  731,  736,  738,  732,    0,  738,  732,  733,
        0,  739,  734,  735,  739,  737,    0,  740,  741,  734,
      740,  741,    0,  735,    0,  736,  742,    0,    0,  742,
      743,  738,  739,  743,  738,  744,  745,    0,  744,  745,

        0,  739,  794,    0,  794,  794,    0,  740,  741,  795,
      794,  795,  795,    0,  740,    0,  742,  795,  742,    0,
      743,  743,    0,    0,    0,  744,  745,  796,    0,  796,
      796,  797,  794,  797,  797,  796,    0,    0,    0,  795,
      744,  745,  798,    0,  798,  798,  799,    0,  799,  799,
      800,  821,  800,  800,  821,    0,  801,  796,  801,  801,
      802,  797,  802,  802,  803,  822,  803,  803,  822,  799,
        0,  804,  798,  804,  804,  805,  799,  805,  805,  804,
      800,  821,    0,  805,    0,  806,  801,  806,  806,  807,
      802,  807,  807,  806,  803,  822,  808,  807,  808,  808,

      809,  804,  809,  809,  810,  805,  810,  810,  811,    0,
      811,  811,    0,  824,    0,  806,  824,  810,    0,  807,
      809,  812,    0,  812,  812,  814,  808,  814,  814,  812,
      809,    0,    0,  813,  810,  813,  813,    0,  811,  815,
        0,  815,  815,  824,    0,  816,  813,  816,  816,    0,
      817,  812,  817,  817,  818,  814,  819,  818,  820,  819,
        0,  820,  818,  813,  819,    0,  820,  814,  823,  815,
      825,  823,  815,  825,  826,  816,  827,  826,  832,  827,
      817,  832,  828,    0,  818,  828,  819,  816,  820,  829,
      828,  823,  829,  830,    0,    0,  830,  829,  823,  831,

      825,  830,  831,    0,  826,    0,  827,  831,  832,    0,
      833,  834,  828,  833,  834,  835,    0,  836,  835,  829,
      836,    0,    0,  830,  834,  836,    0,    0,    0,  831,
      833,  837,  838,  839,  837,  838,  839,    0,    0,  840,
      833,  834,  840,  841,  837,  835,  841,  836,  873,    0,
      873,  873,  874,    0,  874,  874,  875,    0,  875,  875,
        0,  837,  838,  839,    0,  876,  839,  876,  876,  840,
        0,    0,    0,  841,  838,    0,    0,  877,  873,  877,
      877,  840,  874,    0,    0,  876,  875,  878,    0,  878,
      878,  879,    0,  879,  879,  876,  880,    0,  880,  880,

      881,    0,  881,  881,    0,    0,    0,  877,  881,    0,
      882,    0,  882,  882,    0,    0,  888,  878,  882,  888,
      883,  879,  883,  883,    0,  884,  880,  884,  884,  885,
      881,  885,  885,  884,  886,  885,  886,  886,    0,  887,
      882,  887,  887,    0,  889,  890,  888,  889,  890,    0,
      883,  891,    0,  892,  891,  884,  892,  893,  894,  885,
      893,  894,  895,  898,  886,  895,  898,    0,    0,  887,
      896,  891,  887,  896,  889,  890,    0,  897,  896,  886,
      897,  891,    0,  892,    0,  897,  899,  893,  894,  899,
        0,    0,  895,  898,  899,  900,  901,    0,  900,  901,

      896,  900,  902,  915,    0,  902,  915,  897,  917,    0,
      918,  917,  918,  918,    0,    0,  899,  919,  918,  919,
      919,  920,    0,  920,  920,  900,  901,  921,    0,  921,
      921,  922,  902,  922,  922,  902,  923,    0,  923,  923,
      918,  901,  924,  927,  924,  924,  927,  919,  915,    0,
        0,  920,  925,  917,  925,  925,  926,  921,    0,  926,
        0,  922,  928,  922,  926,  928,  923,  936,  929,    0,
      936,  929,  924,  927,  930,  931,  940,  930,  931,  940,
      932,  923,  925,  932,    0,  933,  926,  924,  933,    0,
        0,    0,  928,  942,    0,  942,  942,  925,  929,  943,

        0,  943,  943,    0,  930,  931,  930,    0,    0,    0,
      932,  944,  936,  944,  944,  933,  945,    0,  945,  945,
      931,  940,    0,  942,  946,  932,  946,  946,  947,  943,
      933,  947,  943,  948,  949,  950,  948,  949,  950,    0,
      951,  944,  955,  951,  955,  955,  945,  956,  957,  956,
      956,  957,  958,  962,  946,  958,  962,    0,  947,    0,
        0,  945,    0,  948,  949,  950,  948,    0,    0,  946,
      951,  961,  955,  961,  961,    0,  966,  956,  957,  966,
      950,  955,  958,  962,    0,  951,  965,  957,  965,  965,
      969,    0,  969,  969,  970,  962,  974,  970,  969,  974,

        0,  961,  970,    0,    0,  973,  966,  973,  973,    0,
        0,  966,    0,  961,    0,    0,  965,    0,    0,    0,
      969,  965,    0,    0,  970,    0,  974,    0,    0,    0,
        0,    0,    0,    0,    0,  973,  976,  976,  976,  976,
      976,  976,  977,  977,  977,  977,  977,  977,  978,  978,
      978,  978,  978,  978,  979,  979,  979,  979,  979,  979,
      980,  980,  980,  980,  980,  980,  981,  981,  981,  981,
      981,  981,  982,  982,    0,  982,  982,  982,  983,  983,
      983,  983,  983,  983,  984,    0,    0,    0,  984,  984,
      985,  985,  985,  985,  985,  985,  986,  986,    0,    0,

      986,  986,  987,  987,  987,  987,  987,  987,  988,  988,
        0,  988,  988,  988,  989,  989,    0,  989,  989,  989,
      990,  990,    0,    0,    0,  990,  991,  991,    0,  991,
      991,  991,  993,  993,    0,    0,    0,  993,  994,  994,
      994,  994,  994,  994,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[76] =
    {   0,
0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 
    0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#line 2 "levcomp.lpp"

// levcomp.lpp:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
//
// Based loosely on NetHack's lev_comp.l

#include <algorithm>
#include <cstring>
#include <queue>
#include "AppHdr.h"
#include "mapdef.h"
#include "levcomp.tab.h"

static bool alloced = false;

std::queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(100);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

// Enter a new state, first clearing yylval of junk.
#define CBEGIN(x) do { BEGIN(x); clean(); } while (0)

static void post_proc_text(char *text, bool trim_right, int strip_trailing)
{
    char *s = NULL;
    if (trim_right)
    {
        s = text + strlen(text) - 1;
        while (s >= text && isspace(*s))
            *s-- = 0;
    }
    if (strip_trailing)
    {
        if (!s)
            s = text + strlen(text) - 1;
        while (s >= text && --strip_trailing >= 0)
            *s-- = 0;
    }
}

static char *copy_text(bool trim_right, int strip_trailing)
{
    char *newstring = NULL;
    if ((yylval.text = newstring = strdup(yytext)))
    {
        alloced = true;
        post_proc_text(newstring, trim_right, strip_trailing);
    }
    return (newstring);
}

static void settext(bool trim_right = false, int strip_trailing = 0)
{
    clean();
    char *newstring = copy_text(trim_right, strip_trailing);
    yylval.text = newstring;
}

static void str_check()
{
    if (!yylval.text)
    {
        char *buf = (char *) malloc(1);
        if (buf)
        {
            yylval.text = buf;
            *buf = 0;
            alloced = true;
        }
    }
}

static void cattext(bool trim_right = false, int strip_trailing = 0)
{
    if (!yylval.text)
        settext(trim_right, strip_trailing);
    else
    {
        bool was_alloced = alloced;
        char *newbuf = (char*) malloc(strlen(yylval.text) + strlen(yytext) + 1);
        if (!newbuf)
            end(1, "Out of memory");
        alloced = true;
        strcpy(newbuf, yylval.text);
        strcat(newbuf, yytext);
        post_proc_text(newbuf, trim_right, strip_trailing);
        if (was_alloced)
            free((void*) yylval.text);
        yylval.text = newbuf;
    }
}









#line 1653 "levcomp.lex.cc"

#define INITIAL 0
#define MAPDEF 1
#define LUA 2
#define LUA_ONELINER 3
#define ARGUMENT 4
#define MNAME 5
#define KEYWORDS 6
#define ITEM_LIST 7
#define TOEOL 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 133 "levcomp.lpp"


#line 1820 "levcomp.lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 976 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 975 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 135 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 137 "levcomp.lpp"
{
                        settext(true);
                        return MAP_LINE;
                    }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 142 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 143 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 144 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 146 "levcomp.lpp"
;
	YY_BREAK
case 7:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 148 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 8:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 149 "levcomp.lpp"
{
                            settext(true, 2);
                            BEGIN(INITIAL);
                            return LUA_LINE;
                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 154 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 158 "levcomp.lpp"
;
	YY_BREAK
case 11:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 160 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 164 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 166 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 171 "levcomp.lpp"
;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 172 "levcomp.lpp"
;
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 173 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 175 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 179 "levcomp.lpp"
;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 181 "levcomp.lpp"
{
                        cattext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 186 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 187 "levcomp.lpp"
;
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 188 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 190 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 192 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 196 "levcomp.lpp"
;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 198 "levcomp.lpp"
{
                        cattext();
                        return MONSTER_NAME;
                    }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 203 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 204 "levcomp.lpp"
;
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 206 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 210 "levcomp.lpp"
;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 212 "levcomp.lpp"
{
                        cattext();
                    }
	YY_BREAK
case 32:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 216 "levcomp.lpp"
{ BEGIN(INITIAL); str_check(); return STRING; }
	YY_BREAK
case 33:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 218 "levcomp.lpp"
{
                        settext(true, 1);
                        return STRING;
                    }
	YY_BREAK
case 34:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 223 "levcomp.lpp"
{
                        BEGIN(INITIAL);
                        settext(true);
                        return STRING;
                    }
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 228 "levcomp.lpp"
;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 230 "levcomp.lpp"
;
	YY_BREAK
case 37:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 232 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 234 "levcomp.lpp"
{ BEGIN(LUA_ONELINER); return MAIN; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 236 "levcomp.lpp"
{ BEGIN(LUA); return PRELUDE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 237 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 238 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 239 "levcomp.lpp"
{ BEGIN(LUA); return VALIDATE; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 240 "levcomp.lpp"
{ BEGIN(LUA); return VETO; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 243 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 244 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEFAULT_DEPTH; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 245 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEPTH; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 246 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return ORIENT; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 247 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 248 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return WELCOME; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 249 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 250 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 251 "levcomp.lpp"
{ CBEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 252 "levcomp.lpp"
{ CBEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 253 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLAGS; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 254 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return BFLAGS; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 255 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SUBST; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 256 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return NSUBST; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 257 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return COLOUR; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 258 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return FLOORCOL; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 259 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return ROCKCOL; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 260 "levcomp.lpp"
{ CBEGIN(MNAME); return MONS; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 261 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 262 "levcomp.lpp"
{ CBEGIN(TOEOL); return MARKER; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 263 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SHUFFLE; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 265 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KFEAT; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 266 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KITEM; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 267 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMONS; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 268 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMASK; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 270 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 272 "levcomp.lpp"
{
                        clean();
                        yylval.i = atoi(yytext);
                        return INTEGER;
                    }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 278 "levcomp.lpp"
;
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 279 "levcomp.lpp"
;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 280 "levcomp.lpp"
;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 281 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 283 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 2363 "levcomp.lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MAPDEF):
case YY_STATE_EOF(LUA):
case YY_STATE_EOF(LUA_ONELINER):
case YY_STATE_EOF(ARGUMENT):
case YY_STATE_EOF(MNAME):
case YY_STATE_EOF(KEYWORDS):
case YY_STATE_EOF(ITEM_LIST):
case YY_STATE_EOF(TOEOL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 976 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 976 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 975);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 283 "levcomp.lpp"



int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}

