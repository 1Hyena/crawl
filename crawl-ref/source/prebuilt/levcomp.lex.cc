#line 2 "levcomp.lex.cc"

#line 4 "levcomp.lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 73
#define YY_END_OF_BUFFER 74
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1461] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   74,   72,   66,   67,   72,   70,   68,   69,
       64,   63,   65,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   66,   20,   72,   72,   73,
        6,   73,   73,    4,    2,    3,   73,   73,    2,    2,
        2,   72,   19,   72,   70,   68,   69,   64,   63,   65,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   20,   72,   72,   72,   17,   14,   17,   70,

       68,   69,   16,   63,   65,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   17,   20,   72,
       72,    8,    9,   72,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    8,    7,
        7,   72,   12,   13,   72,   70,   68,   69,   11,   63,
       65,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   12,   20,   72,   72,   66,   67,   65,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   66,   20,   20,
       71,   71,   71,    6,    5,    0,    0,    2,    3,    0,
        0,    2,    2,    2,   18,    0,   19,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   20,   18,   18,   18,
        0,   17,   14,   17,   14,   65,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   17,   20,   71,   71,   71,    8,    9,
        0,    9,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    8,    7,    7,    7,    0,   12,   13,    0,   13,
       65,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   12,   20,
       71,   71,   71,   71,   71,   71,   71,   71,   42,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   21,    2,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   56,   71,   71,

       71,   71,   71,   71,   71,   71,   57,    2,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   71,   71,   71,   71,   36,   71,
       71,   71,   71,   71,   32,   41,   31,   71,   22,   71,
       71,   71,   71,   71,   71,   71,   71,   29,   71,   71,
       62,   71,   71,   71,   54,   71,   55,    2,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,

       10,   10,   10,   10,   10,   71,   71,   71,   24,   71,
       71,   71,   28,   71,   71,   71,   26,   71,   71,   71,
       71,   71,   30,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,    1,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   37,   71,   27,   35,   71,   71,   71,   71,
       71,   25,   71,   43,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   71,   71,   71,   71,   71,   47,   71,
       71,   71,   33,    0,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   71,   71,   71,   46,   71,   71,   71,   71,
        0,   53,   71,   52,   71,   58,   59,   71,   60,   61,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   34,   71,   45,   71,   71,   71,   71,    0,   50,
       51,   49,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,    7,    7,    7,    7,    7,    7,
        7,    7,    7,   10,   10,   10,   10,   10,   10,   10,

       10,   10,   10,   10,   48,   71,   44,   71,   38,    0,
       18,   18,   18,   18,   18,   18,   15,   15,   15,   15,
       15,   15,    7,    7,    7,    7,   10,   10,   10,   10,
       10,   10,   71,   40,    0,   18,   18,   18,   15,   15,
       15,    7,    7,   10,   10,   10,   39,    0,   18,   18,
       15,   15,    7,   10,   10,   23,   18,   15,   10,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    1,    1,    1,    1,    8,
        9,    1,    1,   10,   11,    1,    1,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   13,    1,    1,
        1,    1,    1,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       23,   30,   31,   32,   33,   34,   23,   35,   36,   23,
        1,    1,    1,    1,   37,    1,   38,   23,   39,   40,

       41,   42,   23,   43,   44,   23,   23,   45,   46,   47,
       48,   49,   23,   50,   51,   52,   53,   54,   55,   23,
       23,   23,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[56] =
    {   0,
        1,    2,    3,    4,    2,    1,    1,    1,    1,    5,
        6,    7,    1,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7
    } ;

static yyconst flex_int16_t yy_base[1484] =
    {   0,
        0,   54,   59,   65,  116,  170,  221,  275,  326,  380,
      431,  485, 4053, 4054,   55, 4054, 4049, 4054, 4054, 4054,
     4054, 4054, 4039,    0, 4020, 4028, 4030,   38, 4022, 4014,
     4027, 4016, 4029, 4012,   50, 4013,   53, 4026, 3998,   40,
     3993, 3989, 3998, 3987, 3993,   83,    0,   63,   45, 4054,
     4054, 4030,   94, 4054,    0, 4054, 4029,   97,    0, 4004,
       61,   90, 4054, 4027,  102,  106,  174,  178,  182,  186,
      536,  549,  164,   85,  162,   84,  163,  181,  172,  187,
     3999,  178,  177,  185,  264,  179,  249,  253,  251,   51,
      254,  256,  286,  275,  274,    0,  304, 4054,  308,    0,

        0,    0, 4054,    0, 4016,  579,  592,  622,  643,  661,
      289,  288,  365,  146,  370,  359,  376,  363,  386,  381,
      377,  382,  461,  462,  361,  464,  387,  498,  206,  480,
      556,  421, 4054, 4024,    0, 4014, 4014,  484,  274,  498,
      493,  502,  487,  506,  507,  307,  518,  541,  511,  585,
      416,  482,  523,  519,  515,  281,  520,  554,  569,  597,
      591,    0,  610, 4054, 4021,    0,    0,    0, 4054,    0,
     4011,  696,  709,  739,  760,  778,  611,  605,  646,  630,
      620,  648,  659,  652,  692,  694,  665,  696,  697,  664,
      737,  701,  747,  751,  209,  767,  766,  614, 4054, 4010,

        0, 4007, 4006,  777,  609, 3997,  662, 4000, 3983, 3989,
     3989, 3992, 3999, 3990, 3997,  505, 3977, 3994, 3988, 3965,
     3955, 3966, 3956,  645, 3956, 3949, 3950,  728,    0,    0,
     3971, 3985,  700, 4054, 4054, 3995,  794,    0, 4054, 3994,
      806, 3979, 3968,  559,  814,  818, 4054,  822, 3964,  798,
      801,  806,  812,  808,  818,  591,  729,  773,  813,  811,
      826,  823,  833,  834,  774,  836,  829,  629,  822,  539,
      824,  740,  630,  825,  828,  863,  872,  708,  855,  831,
      878,  884, 4054,  888, 4054,  892,  904,  917,  931,  945,
      938,  944,  958,  930,  949,  963,  962,  976,  982,  981,

      985,  990,  996, 1005, 1011, 1004, 1018, 1019, 1022, 1025,
     1026, 1045, 1048,  896, 1061, 1049, 1071, 1062, 1092, 4054,
     3990, 4054,    0, 3980, 3980,  870,  951, 1090,  897,  849,
     1075,  514,  909, 1032,  991,  885, 1073,  905, 1093, 1094,
      382, 1011, 1041,   71,  884, 1021,  923, 1081,  642,  986,
     1061, 1121, 1100, 1103, 1104, 1130, 1134, 4054, 3987, 4054,
     1138, 1155, 1168, 1182, 1196, 1189, 1122, 1200, 1181, 1203,
     1211, 1123, 1204, 1222, 1225, 1229, 1233, 1226, 1248, 1249,
     1252, 1253, 1256, 1257, 1270, 1271, 1277, 1284, 1307, 1317,
     1297, 1310, 1314, 3962, 3961, 3973, 3954, 3969, 3958, 3953,

     3950, 3961, 3952, 3953, 3960, 3946, 3958, 3957, 3958, 3946,
     3939, 3947, 3938, 3950, 3937, 3936, 3928, 3913, 3916, 3925,
     1196, 3910, 3921, 3908, 3907,    0, 3932, 1118, 1186, 1164,
     1076, 1104, 1141, 3927, 1261, 1312, 1295, 1240, 1128,  954,
     1129, 1162, 1156, 1304, 1314, 1103, 1306, 1318, 1052, 1243,
     1316, 1319, 1320, 1321, 1323, 1322, 1327, 1326, 1328, 3926,
     1358, 1367, 1356, 1357, 1362, 1376, 1377, 1381, 1373, 1384,
     1392, 1397, 1401, 1408, 1417, 1412, 1426, 1431, 1435, 1434,
     1439, 1450, 1454, 1458, 1459, 1463, 1472, 1476, 1477, 1480,
     1483, 1498, 1501, 1505, 1516, 1511, 1520, 1523, 1524, 1540,

     1371, 1411, 1350, 1351,  859, 1344,  746, 1408, 1422, 1390,
     1441, 1206,  910, 1482, 1486, 1281, 1448, 1414, 1460, 1487,
     1512,  997, 1154, 1529, 1511, 1533, 1535, 1545, 1537, 1547,
     1549, 1550, 3944, 1560, 1570, 1545, 1565, 1578, 1579, 1584,
     1595, 1599, 1602, 1608, 1615, 1619, 1623, 1637, 1622, 1640,
     1643, 1644, 1651, 1648, 1664, 1665, 1670, 1671, 1679, 1684,
     1685, 1688, 1692, 1709, 1710, 1713, 1714, 1727, 1575, 1736,
     1741, 1754, 1745, 3938, 3937, 3919, 3930, 3937, 3921, 3912,
     3910, 3915, 3915, 3931, 3918,  947, 3929, 3914, 3922, 3917,
     3913, 3900, 3899, 3916, 3902, 3920, 3879,    0, 3885, 3878,

     3883, 3880, 3881, 3883, 3884, 3881,    0, 3909, 1570, 1574,
     1587, 1615, 1593, 1657, 1656, 1582, 1634, 3892, 1696, 1553,
     1718, 1705, 1697, 1731, 1690, 1750, 1592, 1717, 1758, 1752,
     1721, 1739, 3891, 1748, 1751, 1756, 1757, 1760, 1761, 1759,
     1765, 3890, 1782, 1791, 1790, 1795, 1799, 1806, 1810, 1813,
     1814, 1828, 1835, 1836, 1843, 1850, 1849, 1864, 1865, 1872,
     1869, 1873, 1880, 1886, 1894, 1893, 1897, 1901, 1900, 1908,
     1914, 1919, 1930, 1922, 1937, 1938, 1820, 1874, 1782, 1806,
     1786, 1842, 1841, 1849, 1445, 1287, 1827, 1632, 1923, 1838,
     1862, 1903, 1949, 1680, 1933, 1947, 1953, 1963, 1929, 1924,

     3908, 1964, 1965, 1967, 1860, 1968, 1714, 1665, 1972, 3907,
     1969, 1970, 1963, 1987, 1974, 1992, 1993, 2006, 1978, 2009,
     2013, 2022, 2017, 2037, 2033, 2036, 2050, 2051, 2054, 2055,
     2058, 2069, 2077, 2074, 2078, 2083, 2091, 2092, 2097, 2105,
     2106, 2111, 2125, 2128, 3896, 3898, 3890, 3901, 4054, 3886,
     3875, 3885, 3897, 3872, 4054,    0, 4054, 3890, 4054, 3875,
     3893, 3871, 3872, 3887, 3885, 3876, 3887, 4054, 3854, 3849,
        0, 3853, 3844, 3851, 1949, 3848, 1978, 3864, 2074, 2027,
     2033, 2048, 2113, 2004, 2102, 2045, 2118, 2116, 2156, 3862,
     2160, 2137, 2167, 2143, 2120, 2136, 2144, 2083, 2160, 2153,

     2150, 2177, 2154, 2155, 3861, 2156, 2089, 2157, 2161, 2159,
     2162, 2177, 2191, 2194, 2199, 2192, 2202, 2195, 2208, 2222,
     2217, 2238, 2226, 2242, 2231, 2254, 2239, 2248, 2244, 2253,
     2264, 2257, 2271, 2268, 2264, 2272, 2275, 2279, 2290, 2294,
     2297, 2301, 2308, 2314, 1970, 2177, 2182, 2294, 2304, 2227,
     2303, 2325, 2281, 3879, 2329, 2333, 2337, 2231, 2338, 2341,
     2342, 2347, 2349, 2340, 2324, 3878, 2278, 2200, 2350, 2352,
     2048, 2355, 2355, 2349, 2352, 2369, 2385, 2370, 2383, 2387,
     2390, 2386, 2390, 2403, 2406, 2406, 2424, 2409, 2414, 2417,
     2423, 2428, 2439, 2442, 2447, 2448, 2443, 2446, 2450, 2461,

     2465, 2468, 2472, 2479, 2485, 2362, 3875, 3855, 4054, 3855,
     3859, 3853, 4054, 3867, 3852, 3868, 4054, 3866, 3866, 3850,
     3859, 3858, 4054, 3823, 3836, 3823, 3834, 3821, 3832, 3828,
     3820, 3829, 3825,    0, 2472, 2470, 2477, 2516, 2281, 2456,
     2400, 2526, 2433, 3835, 2493, 2530, 2508, 2506, 2509, 2511,
     2515, 2542, 2463, 2512, 2513, 2518, 2519, 2521, 2523, 2522,
     2524, 2525, 2548, 2555, 2556, 2555, 2552, 2563, 2571, 2571,
     2577, 2580, 2584, 2593, 2593, 2601, 2597, 2600, 2615, 2599,
     2608, 2616, 2619, 2624, 2630, 2637, 2645, 2648, 2652, 2653,
     2674, 2567, 2610, 2647, 2625, 2662, 2641, 2561, 2652, 2678,

     2684, 2612, 2687, 2688, 2659, 2353, 2677, 2690, 2689, 2691,
     2692, 2693, 2696, 2697, 2701, 2706, 2717, 2707, 2721, 2725,
     2724, 2708, 2741, 2744, 2748, 2719, 2752, 2749, 2757, 2771,
     2774, 2721, 2765, 2768, 2779, 2782, 2785, 2790, 2793, 2796,
     2807, 2811, 4054, 3846, 4054,    0, 3831, 3831, 3841, 3832,
     3828, 4054, 3825, 4054, 3828, 3819, 3834, 3835, 3790, 3790,
     3787, 3782, 3776, 3775, 3778, 3769, 3768, 2844, 2587, 2849,
     3788, 2685, 2728, 2803, 2717, 2734, 2853, 2817, 2857, 2807,
     2834, 2826, 2830, 2835, 2692, 2739, 2837, 2838, 2839, 2836,
     2840, 2841, 2870, 2866, 2871, 2869, 2874, 2880, 2888, 2885,

     2891, 2872, 2896, 2876, 2899, 2902, 2913, 2924, 2917, 2920,
     2921, 2928, 2935, 2943, 2946, 2950, 2961, 2883, 3800, 2891,
     2927, 2956, 2868, 2930, 2901, 2960, 2934, 2869, 3795, 2945,
     2949, 2971, 2972, 2973, 2976, 2771, 2977, 2978, 2993, 2984,
     2995, 2985, 2988, 3002, 3006, 3011, 3015, 3003, 3019, 3004,
     3022, 3026, 3030, 3043, 3037, 3044, 3048, 3051, 3052, 3066,
     3067, 3073, 3080, 3786, 3786, 3779, 3785, 3772,    0, 3761,
     3753, 3748, 4054, 3739, 3723, 3725, 3731, 3717, 3706, 3699,
     3701, 3692, 3691, 3039, 2777, 3085, 3063, 3035, 3700, 3059,
     3078, 3080, 3114, 3118, 2981, 2988, 3091, 3077, 3061, 3096,

     3034, 3097, 3098, 3110, 3115, 3116, 3124, 3132, 3111, 3135,
     3140, 3143, 3085, 3165, 3157, 3154, 3158, 3161, 3162, 3165,
     3181, 3182, 3187, 3184, 3186, 3145, 3208, 3127, 3701, 3204,
     3196, 3209, 3671, 3171, 3187, 3212, 3215, 3216, 3217, 3220,
     3219, 3221, 3214, 3218, 3231, 3225, 3236, 3247, 3255, 3260,
     3263, 3270, 3285, 3277, 3274, 3278, 3281, 3282, 3285, 3301,
     3302, 3307, 3692, 3670, 3681, 4054, 3664, 3647, 3645, 3651,
     3627,    0, 3589,    0, 3568,    0,    0, 3575,    0,    0,
     3227, 3576, 3229, 3313, 3218, 3251, 3269, 3314, 3337, 3516,
     3293, 3504, 3297, 3449, 3436, 3310, 3422, 3394, 3333, 3336,

     3344, 3346, 3341, 3352, 3357, 3358, 3351, 3366, 3372, 3375,
     3379, 3380, 3383, 3386, 3397, 3401, 3369, 2980, 3408, 3385,
     3266, 3407, 3347, 3382, 3339, 3274, 3259, 3350, 3247, 3241,
     3396, 2926, 2832, 3414, 3417, 3425, 3429, 3422, 3430, 3436,
     3439, 3437, 3444, 3445, 3452, 3453, 3458, 3461, 3467, 3478,
     3481, 4054, 2800, 4054, 2698, 2703, 2611, 2545, 2475,    0,
        0,    0, 3489, 3148, 3497, 3455, 3491, 2481, 3492, 3509,
     2434, 2409, 2374, 3513, 3497, 3515, 3500, 3511, 3506, 3519,
     3539, 3520, 3524, 3528, 3426, 3512, 3541, 3363, 3549, 2166,
     2016, 1991, 1559, 3559, 3537, 3565, 3544, 3552, 3555, 3563,

     3567, 3560, 3568, 3571,    0, 1450, 4054, 1381, 4054, 1213,
     1181, 1086, 3591, 3585, 3599, 3603, 3590, 3593, 3608, 3598,
     3623, 3628,  891, 3497, 3567,  769, 3607, 3612, 3630, 3621,
     3642, 3643,  607, 4054,  546, 3607, 3649, 3654, 3644, 3644,
     3659, 3649,  274, 3652, 3664, 3665, 4054,  280, 3672, 3680,
     3684, 3685,  201, 3686, 3694, 4054, 3699, 3704, 3708, 4054,
     3713, 3720,   51, 3727, 3734, 3741, 3748, 3755, 3762, 3769,
     3776, 3783, 3785, 3787, 3794, 3801, 3808, 3815, 3822, 3829,
     3836, 3843, 3850
    } ;

static yyconst flex_int16_t yy_def[1484] =
    {   0,
     1460,    1, 1461, 1462, 1460,    5, 1460,    7, 1460,    9,
     1460,   11, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1460, 1464, 1463, 1463, 1460,
     1460, 1460, 1465, 1460, 1466, 1460, 1460, 1465, 1466, 1466,
     1466, 1467, 1460, 1460, 1467, 1467, 1467, 1467, 1467, 1467,
     1468, 1468,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72, 1469,   72,   72, 1470, 1460, 1460, 1460, 1470,

     1470, 1470, 1460, 1470, 1470, 1471, 1471, 1471, 1471, 1471,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110, 1460, 1472,  110,
      110, 1460, 1460, 1460, 1473, 1473, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1460, 1474,
     1474, 1475, 1460, 1460, 1460, 1475, 1475, 1475, 1460, 1475,
     1475, 1476, 1476, 1476, 1476, 1476,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176, 1460, 1477,  176,  176, 1460, 1460, 1460,

     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1460, 1464, 1464,
     1463, 1463, 1463, 1460, 1460, 1460, 1460, 1466, 1460, 1460,
     1460, 1466, 1466, 1466, 1467, 1467, 1460, 1467,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72, 1469, 1469,   72,   72,   72,
     1478, 1460, 1460, 1460, 1460, 1478, 1479, 1479, 1479, 1479,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,

      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290, 1460, 1480,  290,  290,  290, 1460, 1460,
     1460, 1460, 1473, 1473, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1460, 1474, 1474, 1474, 1481, 1460, 1460, 1460, 1460,
     1481, 1482, 1482, 1482, 1482,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365, 1460, 1483,
      365,  365,  365, 1463, 1463, 1463, 1463, 1463, 1463, 1463,

     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1466,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
     1478, 1478,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290, 1480,  290,  290,  290,  290,

     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1481, 1481,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365, 1483,  365,
      365,  365,  365, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,

     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1466,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,

     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365, 1463, 1463, 1463, 1463, 1460, 1463,
     1463, 1463, 1463, 1463, 1460, 1463, 1460, 1463, 1460, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1460, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1466,   72,   72,
       72,   72, 1467,   72,   72,   72,   72,   72, 1467,   72,
     1467,   72, 1467,   72,   72,   72,   72,   72,   72,   72,

       72, 1467,   72,   72,   72,   72,   72,   72,   72,   72,
       72,  290,  290,  290,  290, 1478,  290,  290,  290,  290,
      290, 1478,  290, 1478,  290, 1478,  290,  290,  290,  290,
      290,  290,  290,  290, 1478,  290,  290,  290,  290,  290,
      290,  290,  290,  290, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474,  365,  365,  365,  365, 1481,  365,  365,  365,
      365,  365, 1481,  365, 1481,  365, 1481,  365,  365,  365,
      365,  365,  365,  365,  365, 1481,  365,  365,  365,  365,

      365,  365,  365,  365,  365, 1463, 1463, 1463, 1460, 1463,
     1463, 1463, 1460, 1463, 1463, 1463, 1460, 1463, 1463, 1463,
     1463, 1463, 1460, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1466,   72,   72,   72, 1467,   72,   72,
       72, 1467,   72,   72,   72, 1467,   72,   72,   72,   72,
       72, 1467,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,  290,  290,  290, 1478,  290,  290,  290, 1478,
      290,  290,  290, 1478,  290,  290,  290,  290,  290, 1478,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,

     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1474,  365,  365,  365, 1481,  365,  365,
      365, 1481,  365,  365,  365, 1481,  365,  365,  365,  365,
      365, 1481,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365, 1460, 1463, 1460, 1463, 1463, 1463, 1463, 1463,
     1463, 1460, 1463, 1460, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1467,   72, 1467,
       72,   72,   72,   72,   72,   72, 1467,   72, 1467,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72, 1478,  290, 1478,  290,  290,  290,  290,  290,

      290, 1478,  290, 1478,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1481,  365,
     1481,  365,  365,  365,  365,  365,  365, 1481,  365, 1481,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1460, 1460, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463,   72,   72,   72,   72,   72,   72,   72,
       72,   72, 1467, 1467,   72,   72,   72,   72,   72,   72,

       72,   72,   72,  290,  290,  290,  290,  290,  290,  290,
      290,  290, 1478, 1478,  290,  290,  290,  290,  290,  290,
      290,  290,  290, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474, 1473, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474,  365,  365,  365,  365,  365,  365,  365,  365,
      365, 1481, 1481,  365,  365,  365,  365,  365,  365,  365,
      365,  365, 1463, 1463, 1463, 1460, 1463, 1463, 1463, 1463,
     1460, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
       72,   72,   72, 1467,   72,   72,   72,   72, 1467,   72,
       72,   72,   72,   72,   72,   72,   72,   72,  290,  290,

      290, 1478,  290,  290,  290,  290, 1478,  290,  290,  290,
      290,  290,  290,  290,  290,  290, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1473, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474, 1474,  365,  365,  365, 1481,  365,  365,  365,
      365, 1481,  365,  365,  365,  365,  365,  365,  365,  365,
      365, 1460, 1463, 1460, 1463, 1463, 1463, 1463, 1460, 1463,
     1463, 1463, 1467,   72, 1467,   72,   72,   72,   72, 1467,
       72,   72,   72, 1478,  290, 1478,  290,  290,  290,  290,
     1478,  290,  290,  290, 1474, 1474, 1474, 1474, 1474, 1473,
     1474, 1474, 1474, 1481,  365, 1481,  365,  365,  365,  365,

     1481,  365,  365,  365, 1463, 1463, 1460, 1463, 1460, 1460,
       72,   72, 1467,   72, 1467, 1467,  290,  290, 1478,  290,
     1478, 1478, 1474, 1474, 1474, 1473,  365,  365, 1481,  365,
     1481, 1481, 1463, 1460, 1460,   72, 1467, 1467,  290, 1478,
     1478, 1474, 1473,  365, 1481, 1481, 1460, 1460, 1467, 1467,
     1478, 1478, 1473, 1481, 1481, 1460, 1467, 1478, 1481,    0,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460
    } ;

static yyconst flex_int16_t yy_nxt[4110] =
    {   0,
       14,   15,   16,   17,   15,   18,   14,   19,   20,   21,
       22,   23,   14,   24,   25,   26,   27,   28,   29,   24,
       24,   30,   24,   24,   31,   32,   33,   34,   35,   36,
       37,   38,   24,   24,   24,   24,   24,   24,   24,   39,
       40,   41,   24,   24,   24,   24,   42,   24,   43,   24,
       44,   24,   24,   24,   45,   46,  198,  201,   46,  198,
       47,   51,   52,   53,  205,   54,   50,   56,   57,   58,
      232,   59,  206,  217,  213,  214,  231,  221,  243,   48,
      249,  323,   60,  215,  228,  218,  222,  228,  273,  229,
      210,  246,  226,  246,  246,  233,  234,  236,  237,  239,

      240,  241,  252,  246,   49,  246,  246,  246,  255,  246,
      246,  244,  524,  249,  249,   61,   62,   15,   63,   64,
       15,   65,   62,   66,   67,   68,   69,   70,   62,   71,
       72,   73,   74,   75,   76,   71,   71,   77,   71,   71,
       78,   79,   80,   81,   82,   83,   84,   85,   71,   71,
       71,   71,   71,   71,   71,   86,   87,   88,   71,   71,
       71,   71,   89,   71,   90,   71,   91,   71,   71,   71,
       92,   46,  287,  296,   46,  246,   93,  246,  246,  246,
      287,  246,  246,  246,  251,  246,  246,  246,  253,  246,
      246,  249,  249,  249,  256,   94,  254,  248,  257,  258,

      259,  249,  261,  262,  264,  265,  249,  249,  249,  230,
      249,  263,  230, 1456,  249,  230,  249,  266,  230,  268,
       95,   96,   97,   98,   99,   97,  100,   96,  101,  102,
      103,  104,  105,   96,  106,  107,  108,  109,  110,  111,
      106,  106,  112,  106,  106,  113,  114,  115,  116,  117,
      118,  119,  120,  106,  106,  106,  106,  106,  106,  106,
      121,  122,  123,  106,  106,  106,  106,  124,  106,  125,
      106,  126,  106,  106,  106,  127,  128,  267,  249,  128,
      249,  129,  249,  249,  323,  249,  269,  277,  278,  277,
      277,  323, 1456,  249,  327,  270,  275,  271,  272,  279,

      130,  274,  258,  249,  249,  282,  283,  284,  282,  284,
      285,  284,  284,  293,  287,  287, 1453,  323,  349,  294,
      335,  274,  287,  287,  280,  131,   14,  132,  133,  134,
      132,   18,   14,   19,   20,   21,  135,  136,   14,  137,
      138,  139,  140,  141,  142,  137,  137,  143,  137,  137,
      144,  145,  146,  147,  148,  149,  150,  151,  137,  137,
      137,  137,  137,  137,  137,  152,  153,  154,  137,  137,
      137,  137,  155,  137,  156,  137,  157,  137,  137,  137,
      158,  159,  295,  297,  159,  287,   47,  287,  298,  287,
      302,  287,  323,  287,  305,  287,  287,  287,  311,  287,

      299,  300,  287,  287,  287,  160,  303,  287,  287,  301,
      287,  287,  287,  287,  521,  287,  287,  306,  304,  307,
      287,  287,  319,  320,  321,  319,  323,  313,  308,  343,
      161,  162,  163,  164,  165,  163,  166,  162,  167,  168,
      169,  170,  171,  162,  172,  173,  174,  175,  176,  177,
      172,  172,  178,  172,  172,  179,  180,  181,  182,  183,
      184,  185,  186,  172,  172,  172,  172,  172,  172,  172,
      187,  188,  189,  172,  172,  172,  172,  190,  172,  191,
      172,  192,  172,  172,  172,  193,  194,  287,  287,  194,
      287,  195,  323,  316,  323,  287,  287,  323,  287,  314,

      283,  284,  314,  323,  229,  309,  287,  296,  323,  310,
      196,  312,  323,  326,  287,  328,  323,  323,  332,  329,
      412,  323,  344,  333,  323,  323,  331,  330,  323,  323,
      323,  511,  413,  323,  334,  197,  245,  246,  340,  246,
      246,  245,  245,  245,  245,  245,  245,  336,  245,  245,
      246,  323,  246,  246,  245,  245,  245,  245,  245,  245,
      345,  245,  348,  347,  323,  337,  338,  350,  249,  346,
      352,  320,  321,  352,  339,  229,  243,  453,  250,  281,
      281,  317,  287,  281,  281,  281,  281,  281, 1448,  281,
      287,  281,  281,  281,  351,  323,  281,  281,  281,  281,

      281,  323,  281,  312,  281,  341,  318,  323,  438,  244,
      353,  357,  358,  359,  357,  198,  354,  342,  198, 1447,
      249,  288,  281,  281,  334,  399,  281,  281,  281,  281,
      281,  362,  281,  372,  281,  368,  369,  362,  350,  362,
      400,  355,  289,  281,  281,  362,  362,  281,  281,  281,
      281,  281,  323,  281,  362,  281,  362,  371,  249,  249,
      290,  281,  281,  370,  362,  281,  281,  281,  281,  281,
      451,  281,  362,  281,  362,  402,  457,  373,  362,  377,
      362,  421,  362,  374,  375,  362,  362,  291,  530,  403,
      362,  362,  376,  362,  422,  292,  356,  356,  362,  362,

      356,  356,  356,  356,  356,  381,  356,  380,  356,  356,
      356,  385,  378,  356,  356,  356,  356,  356,  362,  356,
      362,  356,  362,  362,  379,  232,  362,  362,  362,  228,
      362,  362,  228,  382,  229,  362,  460,  249,  363,  356,
      356,  384,  383,  356,  356,  356,  356,  356,  387,  356,
      233,  356,  389,  358,  359,  389,  323,  229,  249,  364,
      356,  356,  439,  362,  356,  356,  356,  356,  356,  249,
      356,  362,  356,  362,  386,  683,  455,  365,  356,  356,
      391,  362,  356,  356,  356,  356,  356,  388,  356,  456,
      356,  392,  362,  362,  371,  396,  234,  236,  237,  440,

      362,  362,  249,  249,  366,  397,  448,  398,  239,  240,
      241,  428,  367,  387,  429,  246,  393,  246,  246,  246,
     1443,  246,  246,  246,  430,  246,  246,  249,  433,  435,
      249,  436,  442,  248,  431,  249,  432,  249,  441,  443,
      249,  249,  249,  434,  444,  437,  445,  249,  450,  446,
      449,  249,  249,  249,  249,  249,  279,  249,  249,  323,
      249,  447,  249,  249,  277,  249,  277,  277,  278,  323,
      508,  454,  452,  277,  681,  277,  277,  458,  459,  281,
      323,  280,  281,  501,  249,  282,  283,  284,  282,  284,
      283,  284,  284,  281,  323,  323,  281,  314,  283,  284,

      314,  323,  229,  462,  461,  281,  515,  323,  281,  461,
      461,  461,  461,  506,  461,  323,  461,  461,  281,  323,
      323,  281,  461,  461,  461,  461,  517,  461,  507,  461,
      464,  461,  281,  323,  525,  281,  461,  461,  461,  461,
      689,  461,  512,  461,  465,  461,  281,  474,  463,  281,
      461,  461,  461,  461,  469,  461,  463,  461,  463,  757,
      463,  323,  463,  466,  502,  471,  463,  463,  463,  470,
      527,  472,  463,  467,  463,  468,  463,  463,  758,  463,
      463,  463,  475,  249,  621,  473,  463,  477,  463,  476,
      463,  463,  463,  463,  463,  479,  323,  478,  481,  463,

      463,  323,  480,  463,  463,  482,  463,  323,  463,  463,
      463,  463,  463,  463,  463,  463,  514,  483,  463,  485,
      463,  323,  463,  463,  463,  522,  463,  698,  484,  463,
      486,  323,  463,  463,  463,  463,  463,  463,  531,  463,
      463,  463,  323,  463,  463,  487,  463,  463,  463,  463,
      463,  323,  463,  463,  463,  463,  463,  489,  513,  526,
      523,  491,  315,  463,  230,  315,  463,  463,  488,  490,
      230,  323,  493,  463,  492,  463,  463,  497,  463,  463,
      463,  249,  630,  323,  498,  323,  516,  499,  509,  463,
      463,  323,  463,  319,  320,  321,  319,  494,  495,  463,

      323,  463,  510,  323,  323,  249,  518,  612,  503,  519,
      323,  532,  500,  323,  323, 1436,  353,  528,  504,  613,
      505,  520,  352,  320,  321,  352,  627,  229,  533,  354,
      529,  356,  249,  249,  356,  357,  358,  359,  357,  356,
      536,  536,  356,  544,  609,  620,  622,  249,  550,  535,
      536,  536,  536,  536,  355,  534,  356,  249,  249,  356,
      534,  534,  534,  534,  323,  534,  614,  534,  534,  356,
      249,  624,  356,  534,  534,  534,  534,  611,  534,  623,
      534,  537,  534,  356,  699,  249,  356,  534,  534,  534,
      534,  249,  534,  249,  534,  538,  534,  356,  547,  536,

      356,  534,  534,  534,  534,  542,  534,  536,  534,  536,
      249,  536,  610,  545,  539,  249,  323,  536,  536,  536,
      543,  536,  536,  688,  540,  551,  541,  546,  536,  536,
      536,  536,  536,  536,  536,  552,  548,  549,  601,  536,
      536,  536,  554,  536,  536,  602,  553,  536,  555,  603,
      536,  536,  536,  536,  536,  536,  536,  536,  557,  536,
      556,  536,  558,  536, 1435,  619,  536,  536,  559,  249,
      536,  536,  249,  631,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      249,  323,  616,  560,  562,  536,  692,  323,  536,  536,

      536,  536,  536,  561,  563,  536,  564,  536,  389,  358,
      359,  389,  536,  229,  536,  536,  853,  566,  390,  565,
      230,  390,  618,  571,  249,  570,  230,  536,  536,  567,
      625,  617,  536,  249,  568,  249,  629,  628,  536,  572,
      536,  249,  536,  249,  536,  249,  626,  249,  249,  249,
      249,  249,  249,  632,  323,  249,  249,  249,  635,  281,
      323,  323,  281,  679,  573,  636,  640,  634,  281,  682,
      633,  281,  637,  639,  463,  463,  638,  641,  462,  642,
      463,  323,  680,  643,  463,  463,  463,  463,  644,  645,
      463,  463,  463, 1434,  463,  463,  647,  677,  648,  463,

      323,  463,  463,  463,  463,  463,  463,  463,  646,  463,
      463,  463,  463,  649,  463,  463,  651,  686,  323,  463,
      463,  323,  463,  650,  323,  463,  463,  463,  652,  463,
      463,  463,  323,  653,  654,  463,  463,  678,  463,  684,
      463,  685,  655,  656,  463,  463,  694,  463,  657,  463,
      658,  323,  463,  463,  463,  323,  463,  463,  323,  463,
      659,  463,  463,  463,  463,  463,  687,  463,  463,  463,
      323,  660,  463,  661,  693,  852,  663,  463,  463, 1433,
      463,  463,  463,  695,  463,  662,  463,  463,  463,  664,
      463,  463,  323,  665,  463,  463,  323,  323,  463,  690,

      463,  463,  463,  691,  463,  463,  463,  463,  463,  666,
      463,  463,  315,  463,  230,  315,  463,  669,  696,  463,
      230,  323,  323,  463,  668,  670,  463,  667,  463,  463,
      697,  463,  671,  463,  463,  463,  672,  498,  463,  323,
      674,  463,  463,  323,  463,  323,  463,  323,  463,  673,
      463,  497,  463,  463,  463,  323,  675,  323,  463,  323,
      323,  356,  701,  536,  356,  499,  700,  676,  463,  323,
      463,  356,  703,  536,  356,  536,  390,  790,  230,  390,
      702,  535,  249,  536,  230,  779,  708,  704,  707,  780,
      500,  711,  713,  536,  705,  536,  536,  536,  706,  249,

      709,  710,  536,  249,  712,  783,  536,  536,  536,  536,
      715,  249,  536,  536,  536,  714,  249,  536,  786,  781,
      536,  249,  249,  536,  716,  536,  536,  536,  798,  536,
      536,  717,  536,  536,  719,  782,  536,  536,  536,  718,
      536,  536,  323,  536,  249,  536,  720,  536,  721,  536,
      536,  536,  723,  536,  722,  536,  854,  724,  536,  726,
      725,  536,  536,  249,  787,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  323,  536,  727,  536,  536,
      728,  536,  536,  536,  784,  249,  249,  729,  731,  536,
      323,  785,  536,  536,  536,  536,  730,  536,  536,  536,

      536,  732,  536,  536,  859,  871,  536,  536,  789,  733,
      536,  796,  536,  536,  536,  536,  536,  793,  536,  249,
      536,  734,  536,  794,  323,  249,  249,  536,  536,  737,
      791,  536,  536,  802,  249,  736,  735,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  249,  249,  795,  792,
      249,  738,  742,  799,  536,  536,  870,  536,  739,  536,
      249,  741,  740,  536,  536,  743,  536,  571,  249,  570,
      572,  536,  536,  536,  797,  536,  800,  249,  744,  249,
      249,  249,  536,  801,  536,  249,  249,  249,  249,  249,
      249,  803,  323,  804,  249,  573,  323,  812,  749,  810,

      463,  806,  805,  809,  807,  808,  813,  811,  463,  463,
      463,  816,  463,  463,  847,  815,  323,  463,  463,  463,
      463,  463,  814,  463,  463,  463,  848,  463,  463,  463,
      323,  463,  463,  817,  463,  845,  463,  323,  463,  755,
      463,  463,  463,  463,  820,  818,  463,  822,  323,  819,
      759,  323,  323,  463,  463,  824,  463,  821,  463,  323,
      823,  463,  826,  463,  463,  463,  463,  463,  463,  849,
      323,  463,  323,  463,  825,  827,  850,  463,  463,  463,
      463,  828,  463,  463,  323,  851,  829,  463,  856,  846,
      463,  463,  463,  463,  463,  463,  830,  463,  833,  463,

      463,  463,  463,  463,  463,  831,  835,  868,  463,  832,
      463,  463,  463,  323,  463,  463,  463,  834,  463,  463,
      857,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  323,  323,  757,  463,  463,  463,  323,
      463,  768,  463,  323,  463,  836,  837,  463,  463,  463,
      463,  838,  463,  839,  855,  463,  463,  323,  463,  323,
      463,  840,  843,  323,  841,  463,  463,  463,  463,  860,
      858,  862,  842,  323,  323,  323,  864,  323,  323,  844,
      323,  536,  323,  861,  873,  874,  877,  536,  536,  929,
      991,  536,  536,  536,  863,  875,  536,  536,  536,  536,

      536,  323,  536,  930,  536,  536,  536,  876,  881,  865,
      536,  536,  867,  869,  872,  536,  866,  536,  932,  878,
      536,  536,  536,  536,  536,  883,  323,  536,  879,  885,
      939,  536,  933,  249,  536,  536,  536,  536,  882,  536,
      536,  536,  880,  536,  936,  536,  884,  536,  886,  887,
      536,  536,  536,  889,  536,  536,  249,  937,  323,  888,
      938,  536,  249,  536,  536,  536,  536,  536,  536,  536,
      941,  890,  536,  536,  249,  891,  894,  249,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  896,
      892,  893,  536, 1012,  935,  536,  536,  536,  949,  536,

      895,  536,  536,  249,  536,  536,  536,  536,  536,  536,
      536,  536,  249,  536,  246,  536,  246,  246,  249,  536,
      536,  536,  536,  536,  536,  536,  897,  536,  898,  536,
      942,  249,  946,  536,  536,  536,  536,  900,  940,  536,
      956,  536,  899,  536,  901,  249,  536,  249,  903,  249,
      902,  904,  943,  536,  944,  536,  536,  246,  536,  246,
      246,  246,  952,  246,  246,  249,  249,  905,  246,  947,
      246,  246,  249,  249,  945,  948,  950,  951,  246,  249,
      246,  246,  249,  249,  249,  249,  249,  323,  249,  249,
      249,  249,  323,  281,  992,  463,  281,  963,  953,  955,

      957,  958,  961,  954,  960,  463,  993,  463,  964,  463,
      323,  966,  463,  463, 1426,  959,  962,  463,  965,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  967,  463,
      463,  968,  463,  969,  970,  463,  463,  323,  463,  281,
      463,  323,  281,  281,  463,  463,  281,  463,  972,  463,
      463, 1008,  463,  971,  463,  281,  463,  463,  281,  463,
      974,  463,  463,  995, 1000,  281,  463,  463,  281,  463,
      973,  463,  463,  978,  463,  463,  463,  975,  463,  977,
      980,  463,  463,  463,  976,  463,  463,  463,  323,  463,
      463,  323,  463,  463,  463,  979,  463,  463,  463,  463,

      463,  463,  463,  463,  323,  463,  909,  463,  463,  463,
      249, 1072,  463,  323,  323,  463,  981,  997,  463,  463,
      463, 1007,  463,  982,  463,  463,  463,  463,  996,  463,
      994,  463,  463,  983,  323,  323,  463,  913,  463,  323,
      985,  986,  463,  323,  463,  984,  998,  323,  323,  917,
      323,  323,  323,  988,  989,  987, 1002,  323, 1003,  323,
      323,  923,  323,  323,  999,  323, 1016,  536,  990, 1001,
      536, 1004, 1006,  536, 1043, 1015, 1017,  536, 1044,  536,
      536, 1018,  536,  536, 1005,  536,  356,  536,  536,  356,
     1130,  356, 1010, 1009,  356, 1013, 1019,  536,  536,  536,

      536,  536, 1022,  249,  536,  536, 1011,  356,  536, 1014,
      356,  536, 1021,  536,  536,  536,  536,  536,  536, 1020,
      536,  536, 1023, 1024,  536,  356, 1026,  536,  356,  249,
     1074,  536,  536,  536,  536,  536,  536,  536,  249,  536,
     1025,  536,  536, 1029,  536,  536,  536,  536, 1075,  356,
     1027,  536,  356,  536, 1028, 1030,  536,  536,  536, 1032,
      536,  536,  249,  249,  536,  536, 1031,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536, 1073, 1070,  536, 1068,  249,  536, 1033, 1069,  536,
      536,  536,  249,  536, 1034,  536,  536,  536,  536,  249,

      536,  249,  536,  536, 1035, 1077,  249,  536, 1071,  536,
     1414, 1037, 1038,  536, 1083,  536, 1036,  246, 1079,  246,
      246, 1078,  249, 1410, 1040, 1041, 1039,  246, 1081,  246,
      246,  246, 1082,  246,  246,  249, 1080,  249,  249, 1042,
      249,  249,  249,  246,  249,  246,  246,  249,  249, 1084,
      249,  249,  249,  249,  249, 1086,  281, 1409, 1088,  281,
     1093, 1091, 1085, 1089, 1094, 1092,  463, 1095, 1087, 1090,
      463,  323,  281,  463,  463,  281,  463,  323,  463, 1045,
      463,  463, 1097,  463,  463,  463,  463, 1096, 1098,  463,
     1124,  463, 1100,  463,  281,  463, 1102,  281,  463,  463,

      281, 1099,  463,  281, 1184,  463, 1103,  463,  463, 1101,
      463,  463,  463, 1104,  463,  463,  249, 1106,  463,  463,
      323,  463,  323,  463, 1105,  463,  463,  463,  463,  463,
      463,  463, 1107,  463,  463,  323,  463,  463,  463, 1126,
     1408, 1119,  463,  463,  463,  463,  463,  463,  463,  463,
     1121,  323,  463, 1109,  463,  463, 1123,  323,  463, 1108,
      463, 1111,  323,  463, 1052,  463,  463,  463, 1110,  323,
      463,  463,  323,  463, 1113,  463,  463, 1120,  463, 1112,
      463,  463,  463,  463,  323, 1114, 1043,  323,  323, 1116,
     1118, 1125, 1122, 1117,  323, 1115, 1054,  323,  323,  323,

      323,  323,  323,  323, 1127, 1128,  323,  323,  356,  356,
     1129,  356,  356, 1139,  249, 1407, 1185, 1140, 1141,  536,
      356,  249,  356,  356,  536,  356, 1131, 1132, 1134,  536,
     1406,  536, 1135, 1137,  536,  536,  536, 1138, 1133,  536,
     1136, 1196,  536,  536, 1188,  536,  249,  536, 1142,  536,
     1144, 1143,  536,  536, 1145,  536, 1146,  249, 1186,  536,
     1148, 1150,  536,  249, 1189, 1149,  536,  536,  249,  536,
      536,  536,  536, 1147,  536,  536,  536,  536,  536,  536,
      536,  323,  536,  536, 1151,  536,  536,  536, 1152,  536,
     1197, 1153,  536,  536, 1282,  536,  536,  536,  536,  536,

      536,  536,  536,  536,  536, 1155,  249,  536,  536,  536,
      536,  536,  536,  536,  536,  536, 1154, 1240,  536, 1157,
      536,  536, 1187,  536,  536,  536,  536, 1159, 1156,  536,
     1405, 1191,  249, 1160, 1158,  536,  249,  536, 1193,  536,
     1194,  536,  323, 1161, 1162,  246,  249,  246,  246, 1190,
      246, 1163,  246,  246,  246,  249,  246,  246,  246,  249,
      246,  246, 1192,  249,  249,  249,  249,  249,  249,  249,
      249,  281,  281,  281,  281,  281,  281,  281,  323,  323,
      281, 1173, 1201, 1204,  463, 1195, 1198,  463, 1199, 1200,
     1202, 1203,  463,  323,  463, 1228,  463,  463,  463,  463,

     1224,  323,  463,  463,  463, 1205,  463, 1207,  463,  463,
     1206,  323, 1208,  463,  463,  463,  463,  463,  463,  463,
      463, 1209, 1225, 1211,  463, 1213,  463,  463, 1210,  463,
     1212,  463,  463, 1230, 1214,  463,  323,  323,  463,  463,
      323,  463,  463,  463,  323,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  323,  463, 1226,  463,  323,
     1229,  463, 1232,  463,  463,  463,  323, 1215,  463, 1216,
      323,  463, 1217,  463,  463, 1227,  463, 1218,  463,  463,
      463,  323,  323,  323, 1231, 1219,  323,  323,  323,  463,
      323,  463, 1221, 1220,  356, 1234,  356,  356, 1235,  356,

     1222, 1243,  536,  536,  356,  356,  536,  356,  356, 1385,
      249, 1223,  536,  536,  536,  536,  536,  249,  536, 1244,
      536, 1237, 1236, 1238,  536, 1246, 1239, 1241, 1242,  536,
      536, 1290, 1245,  536,  536, 1291,  536,  536, 1247,  536,
      536,  536, 1252,  536,  536, 1248, 1250,  536,  536,  536,
      536, 1249,  536, 1253, 1251,  536,  536, 1281,  536, 1285,
      536,  536,  536,  249,  249,  536,  536,  536,  249,  536,
      536,  536,  536,  536,  536, 1284,  536, 1296,  536,  536,
      536,  536,  536, 1286,  536,  536,  281, 1254,  249,  281,
      249,  536,  249, 1255,  536,  536,  536,  536,  536, 1256,

     1257,  536, 1258,  536, 1283, 1287,  249,  249,  536,  249,
      536, 1288, 1294, 1260,  249,  246, 1259,  246,  246,  246,
      249,  246,  246, 1261, 1293,  249,  249,  249, 1299,  463,
     1262, 1292, 1300,  463,  463, 1301, 1302,  323,  463,  463,
      463,  463,  463,  463,  463,  463,  463, 1295, 1297, 1298,
      463, 1320,  463,  463,  463,  323, 1303, 1289,  463, 1304,
      463,  463,  463,  463, 1319,  463,  281, 1305,  463,  281,
      463,  463,  463,  463, 1306,  463,  463,  249, 1411,  463,
      463,  323,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  323,  463,  323,  323, 1310,  463,

      463, 1309, 1317, 1318, 1307,  463,  323, 1308, 1311,  463,
      463,  463,  463, 1312,  323,  463, 1313,  463,  323,  323,
     1266, 1325,  323, 1322, 1314,  323,  323,  323, 1321,  323,
      323,  323, 1334, 1315, 1326, 1335,  536, 1337, 1316, 1363,
     1323, 1365,  536,  536,  536, 1366,  536,  249,  536,  536,
     1336,  323, 1327,  536,  536,  536,  249,  323,  249,  536,
     1338,  536, 1328, 1331,  536,  536,  536, 1329, 1330,  323,
     1332,  356, 1333,  536,  356,  536,  323,  536,  536, 1339,
      249,  536, 1367,  536,  323,  536,  356, 1340,  536,  356,
      536,  536,  536,  536, 1341,  536,  536, 1387,  249,  536,

      536, 1368,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  246,  536,  246,  246, 1345,  536,
      536, 1344,  249, 1391, 1342,  536,  249, 1343, 1346,  536,
      536,  536,  536, 1347, 1369,  536, 1348,  536,  246,  249,
      246,  246, 1371,  249, 1349, 1374, 1372,  281, 1373,  323,
      281,  463,  281, 1350,  463,  281, 1376,  323, 1351,  463,
      323,  463,  463,  463,  463, 1375,  463, 1389, 1377,  463,
      463,  463,  463,  323,  463,  463,  463, 1370, 1380,  323,
      463, 1352,  463, 1378,  463,  463,  463,  463,  463, 1379,
      463, 1381, 1425,  463,  463,  323,  463,  463,  463, 1392,

      463,  463,  463,  463,  463,  463,  323,  463,  463,  463,
      463,  463, 1386,  463,  463,  463,  463,  323,  323,  463,
     1354, 1382, 1390,  249, 1384,  463, 1394,  463, 1383,  463,
      356,  463,  536,  356, 1393,  536,  323, 1396,  356, 1388,
      536,  356,  536,  536,  536,  536, 1395,  536,  536, 1397,
      536,  249,  536,  536,  536,  536, 1423,  536,  536, 1400,
      536, 1398,  536,  536,  536,  249,  536,  536, 1399,  536,
      536,  536,  536,  536,  536,  536,  536, 1401,  249,  536,
      536,  536,  536,  536,  249,  536,  536, 1412,  536,  536,
      246,  536,  246,  246, 1402,  536,  536,  536,  246,  536,

      246,  246, 1403, 1413, 1415, 1404,  536,  323,  536,  536,
      246,  536,  246,  246,  281,  463,  281,  281,  463,  281,
      249,  249,  323, 1419,  463,  463, 1442, 1417,  463,  463,
      463, 1421, 1418,  249,  463, 1420,  463,  463,  463,  463,
      281,  463,  463,  281, 1424,  249,  463,  463,  463,  463,
      463,  323,  463, 1407,  463,  536,  463, 1416,  463,  323,
      356, 1409,  536,  356, 1429,  536,  356, 1427,  356,  356,
      536,  356,  536,  536,  536, 1431, 1428,  323,  536, 1434,
      536,  536,  536,  536, 1430,  536,  536, 1422,  536,  536,
      536,  536,  246,  536,  246,  246,  536, 1437,  536,  536,

      246,  536,  246,  246,  246, 1364,  246,  246,  463,  281,
     1440,  463,  281, 1362,  249, 1432,  463, 1361,  463, 1449,
      463,  463, 1439,  463,  281,  536,  463,  281,  463,  281,
      536,  356,  281, 1445,  356,  536,  249,  536, 1360,  536,
      536, 1444,  536,  356,  356,  281,  356,  356,  281,  536,
      246,  536,  246,  246, 1438,  246, 1451,  246,  246,  323,
      281, 1447,  463,  281, 1454,  356,  356, 1359,  356,  356,
      536, 1358,  463,  246,  463,  246,  246, 1357, 1356, 1441,
      536,  246,  536,  246,  246,  281,  281,  356,  281,  281,
      356, 1355, 1457, 1354, 1446,  356, 1450, 1458,  356, 1353,

      246, 1452,  246,  246, 1352,  281, 1459, 1455,  281,  356,
     1324,  323,  356,   50,   50,   50,   50,   50,   50,   50,
       55,   55,   55,   55,   55,   55,   55,  230,  230,  249,
      230,  230,  230,  230,  235,  235,  235,  235,  235,  235,
      235,  238, 1280, 1279, 1278,  238,  238,  238,  245,  245,
     1277,  245,  245,  245,  245,  249,  249, 1276,  249,  249,
      249,  249,  276,  276, 1275,  276,  276,  276,  276,  281,
      281, 1274, 1273, 1272,  281,  281,  287,  287, 1271, 1270,
     1269,  287,  287,  315,  315, 1268,  315,  315,  315,  315,
      323,  323,  325,  325,  356,  356, 1267, 1266, 1265,  356,

      356,  362,  362, 1264, 1263, 1233,  362,  362,  390,  390,
      323,  390,  390,  390,  390,  461,  461,  249, 1183, 1182,
      461,  461,  463,  463, 1181, 1180, 1179,  463,  463,  496,
      496, 1178,  496,  496,  496,  496,  534,  534, 1177, 1176,
     1175,  534,  534,  536,  536, 1174, 1173, 1172,  536,  536,
      569,  569, 1171,  569,  569,  569,  569, 1170, 1169, 1168,
     1167, 1166, 1165, 1164, 1076, 1067, 1066, 1065, 1064, 1063,
     1062, 1061, 1060, 1059, 1058, 1057, 1056, 1055, 1054, 1053,
     1052, 1051, 1050, 1049, 1048, 1047, 1046, 1045,  323,  323,
      249,  249,  934,  931,  928,  927,  926,  925,  924,  923,

      922,  921,  920,  919,  918,  917,  916,  915,  914,  913,
      912,  911,  910,  909,  908,  907,  906,  323,  323,  249,
      249,  788,  778,  777,  776,  775,  774,  773,  772,  771,
      770,  769,  768,  767,  766,  765,  764,  763,  762,  761,
      760,  759,  756,  755,  754,  753,  752,  751,  750,  749,
      748,  747,  746,  745,  323,  249,  615,  608,  607,  606,
      605,  604,  600,  599,  598,  597,  596,  595,  594,  593,
      592,  591,  590,  589,  588,  587,  586,  585,  584,  583,
      582,  581,  580,  579,  578,  577,  576,  575,  574,  358,
      323,  324,  320,  249,  242,  427,  239,  234,  231,  426,

      425,  424,  423,  420,  419,  418,  417,  416,  415,  414,
      411,  410,  409,  408,  407,  406,  405,  404,  401,  395,
      394,  200,  361,  360,  323,  324,  322,  286,  260,  247,
      242,  239,  234,  227,  226,  225,  224,  223,  220,  219,
      216,  212,  211,  210,  209,  208,  207,  204,  203,  202,
      200,  199, 1460,   13, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,

     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460
    } ;

static yyconst flex_int16_t yy_chk[4110] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,   15, 1463,    2,   15,
        2,    3,    3,    3,   28,    3,    4,    4,    4,    4,
       49,    4,   28,   37,   35,   35,   48,   40,   61,    2,
       90,  344,    4,   35,   46,   37,   40,   46,   90,   46,
       48,   62,   49,   62,   62,   49,   53,   53,   53,   58,

       58,   58,   74,   65,    2,   65,   65,   66,   76,   66,
       66,   61,  344,   76,   74,    4,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    6,  114,  114,    6,   67,    6,   67,   67,   68,
      114,   68,   68,   69,   73,   69,   69,   70,   75,   70,
       70,   75,   77,   73,   77,    6,   75,   70,   78,   79,

       80,   79,   82,   82,   83,   84,   83,   82,   86,  129,
       78,   82,  195, 1453,   84,  129,   80,   84,  195,   86,
        6,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    8,   85,   87,    8,
       89,    8,   88,   91,  139,   92,   87,   93,   94,   93,
       93,  156, 1448,   85,  139,   87,   92,   88,   89,   95,

        8,   91,   94,   95,   94,   97,   97,   97,   97,   99,
       99,   99,   99,  111,  112,  111, 1443,  146,  156,  112,
      146,   95,  112,  111,   95,    8,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,   10,  113,  115,   10,  116,   10,  125,  116,  118,
      118,  113,  341,  116,  120,  125,  115,  118,  125,  113,

      117,  117,  117,  121,  115,   10,  119,  120,  122,  117,
      117,  121,  119,  127,  341,  120,  122,  121,  119,  122,
      119,  127,  132,  132,  132,  132,  151,  127,  122,  151,
       10,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   12,  123,  124,   12,
      126,   12,  152,  130,  138,  123,  124,  143,  126,  128,

      128,  128,  128,  141,  128,  123,  130,  130,  140,  124,
       12,  126,  142,  138,  130,  140,  144,  145,  143,  141,
      216,  149,  152,  144,  332,  155,  142,  141,  147,  154,
      157,  332,  216,  153,  145,   12,   71,   71,  149,   71,
       71,   71,   71,   71,   71,   71,   71,  147,   71,   72,
       72,  148,   72,   72,   72,   72,   72,   72,   72,   72,
      153,   72,  155,  154,  158,  148,  148,  157,  270,  153,
      159,  159,  159,  159,  148,  159,  244,  270,   72,  106,
      106,  131,  131,  106,  106,  106,  106,  106, 1435,  106,
      131,  106,  107,  107,  158,  150,  107,  107,  107,  107,

      107,  161,  107,  131,  107,  150,  131,  160,  256,  244,
      160,  163,  163,  163,  163,  198,  161,  150,  198, 1433,
      256,  107,  108,  108,  160,  205,  108,  108,  108,  108,
      108,  178,  108,  181,  108,  177,  178,  177,  161,  178,
      205,  161,  108,  109,  109,  177,  181,  109,  109,  109,
      109,  109,  349,  109,  181,  109,  180,  180,  268,  273,
      109,  110,  110,  179,  180,  110,  110,  110,  110,  110,
      268,  110,  179,  110,  182,  207,  273,  182,  184,  184,
      179,  224,  182,  183,  183,  183,  184,  110,  349,  207,
      190,  187,  183,  183,  224,  110,  172,  172,  190,  187,

      172,  172,  172,  172,  172,  187,  172,  186,  172,  173,
      173,  190,  185,  173,  173,  173,  173,  173,  185,  173,
      186,  173,  188,  189,  185,  233,  185,  192,  186,  228,
      188,  189,  228,  188,  228,  192,  278,  278,  173,  174,
      174,  189,  188,  174,  174,  174,  174,  174,  192,  174,
      233,  174,  194,  194,  194,  194,  507,  194,  257,  174,
      175,  175,  257,  191,  175,  175,  175,  175,  175,  272,
      175,  191,  175,  193,  191,  507,  272,  175,  176,  176,
      196,  193,  176,  176,  176,  176,  176,  193,  176,  272,
      176,  197,  197,  196,  196,  204,  237,  237,  237,  258,

      197,  196,  258,  265,  176,  204,  265,  204,  241,  241,
      241,  250,  176,  197,  251,  245,  197,  245,  245,  246,
     1426,  246,  246,  248,  252,  248,  248,  250,  253,  254,
      251,  255,  260,  248,  252,  252,  252,  254,  259,  261,
      260,  253,  259,  253,  262,  255,  263,  255,  267,  264,
      266,  269,  262,  271,  274,  261,  280,  275,  267,  330,
      280,  264,  263,  264,  276,  266,  276,  276,  279,  505,
      330,  271,  269,  277,  505,  277,  277,  274,  275,  281,
      326,  280,  281,  326,  279,  282,  282,  282,  282,  284,
      284,  284,  284,  286,  345,  336,  286,  314,  314,  314,

      314, 1423,  314,  286,  287,  287,  336,  329,  287,  287,
      287,  287,  287,  329,  287,  338,  287,  288,  288,  333,
      513,  288,  288,  288,  288,  288,  338,  288,  329,  288,
      288,  289,  289,  347,  345,  289,  289,  289,  289,  289,
      513,  289,  333,  289,  289,  290,  290,  294,  294,  290,
      290,  290,  290,  290,  291,  290,  291,  290,  294,  586,
      294,  327,  292,  290,  327,  292,  291,  295,  291,  291,
      347,  293,  292,  290,  292,  290,  293,  295,  586,  295,
      297,  296,  295,  440,  440,  293,  293,  297,  293,  296,
      297,  296,  297,  296,  298,  299,  350,  298,  301,  300,

      299,  335,  300,  301,  298,  302,  298,  522,  302,  300,
      299,  300,  299,  301,  303,  301,  335,  302,  302,  304,
      302,  342,  306,  304,  303,  342,  303,  522,  303,  305,
      305,  346,  306,  304,  306,  304,  307,  308,  350,  305,
      309,  305,  334,  310,  311,  306,  307,  308,  307,  308,
      309,  343,  309,  310,  311,  310,  311,  308,  334,  346,
      343,  310,  315,  312,  315,  315,  313,  316,  307,  309,
      315,  351,  311,  312,  310,  312,  313,  316,  313,  316,
      318,  449,  449,  337,  317,  331,  337,  318,  331,  317,
      318,  348,  318,  319,  319,  319,  319,  312,  313,  317,

      328,  317,  331,  339,  340,  431,  339,  431,  328,  340,
      353,  351,  318,  354,  355, 1412,  354,  348,  328,  432,
      328,  340,  352,  352,  352,  352,  446,  352,  353,  355,
      348,  356,  446,  432,  356,  357,  357,  357,  357,  361,
      367,  372,  361,  367,  428,  439,  441,  428,  372,  361,
      367,  372,  367,  372,  355,  362,  362,  439,  441,  362,
      362,  362,  362,  362,  523,  362,  433,  362,  363,  363,
      433,  443,  363,  363,  363,  363,  363,  430,  363,  442,
      363,  363,  364,  364,  523,  443,  364,  364,  364,  364,
      364,  442,  364,  430,  364,  364,  365,  365,  369,  369,

      365,  365,  365,  365,  365,  366,  365,  366,  365,  369,
     1411,  369,  429,  368,  365,  429,  512,  366,  368,  366,
      366,  370,  373,  512,  365,  373,  365,  368,  368,  371,
      368,  370,  373,  370,  373,  374,  370,  371,  421,  371,
      374,  371,  376,  375,  378,  421,  375,  376,  377,  421,
      374,  377,  374,  375,  378,  375,  378,  376,  378,  376,
      377,  377,  379,  377, 1410,  438,  379,  380,  380,  438,
      381,  382,  450,  450,  383,  384,  379,  380,  379,  380,
      381,  382,  381,  382,  383,  384,  383,  384,  385,  386,
      435,  516,  435,  381,  383,  387,  516,  686,  385,  386,

      385,  386,  388,  382,  384,  387,  385,  387,  389,  389,
      389,  389,  388,  389,  388,  391,  686,  386,  390,  385,
      390,  390,  437,  392,  437,  391,  390,  391,  392,  387,
      444,  436,  393,  444,  388,  447,  448,  447,  392,  393,
      392,  436,  393,  445,  393,  451,  445,  448,  452,  453,
      454,  456,  455,  451,  506,  458,  457,  459,  454,  461,
      503,  504,  461,  503,  393,  455,  457,  453,  462,  506,
      452,  462,  455,  456,  463,  464,  455,  458,  462,  459,
      465,  501,  504,  464,  463,  464,  463,  464,  465,  466,
      465,  469,  465, 1408,  466,  467,  468,  501,  469,  468,

      510,  469,  470,  469,  466,  467,  466,  467,  467,  468,
      471,  468,  470,  470,  470,  472,  472,  510,  508,  473,
      471,  502,  471,  471,  518,  472,  474,  472,  473,  473,
      476,  473,  509,  474,  475,  475,  474,  502,  474,  508,
      476,  509,  476,  477,  477,  475,  518,  475,  478,  478,
      479,  511,  480,  479,  477,  685,  477,  481,  517,  478,
      480,  478,  480,  479,  480,  479,  511,  481,  482,  481,
      519,  481,  483,  482,  517,  685,  484,  485,  482, 1406,
      482,  486,  483,  519,  483,  483,  484,  485,  484,  485,
      487,  486,  514,  486,  488,  489,  515,  520,  490,  514,

      487,  491,  487,  515,  488,  489,  488,  489,  490,  487,
      490,  491,  496,  491,  496,  496,  492,  490,  520,  493,
      496,  525,  521,  494,  489,  491,  492,  488,  492,  493,
      521,  493,  491,  494,  495,  494,  491,  499,  497,  524,
      493,  498,  499,  526,  495,  527,  495,  529,  497,  492,
      497,  498,  499,  498,  499,  528,  494,  530,  500,  531,
      532,  534,  525,  536,  534,  500,  524,  495,  500, 1393,
      500,  535,  527,  536,  535,  536,  569,  620,  569,  569,
      526,  535,  620,  537,  569,  609,  530,  528,  529,  610,
      500,  537,  539,  537,  528,  537,  538,  539,  528,  609,

      531,  532,  540,  610,  538,  613,  538,  539,  538,  539,
      541,  616,  540,  541,  540,  540,  611,  542,  616,  611,
      543,  627,  613,  541,  542,  541,  544,  542,  627,  542,
      543,  543,  543,  545,  545,  612,  544,  546,  544,  544,
      549,  547,  688,  545,  612,  545,  546,  546,  547,  546,
      549,  547,  549,  547,  548,  548,  688,  550,  550,  552,
      551,  551,  552,  617,  617,  548,  554,  548,  550,  553,
      550,  551,  552,  551,  552,  708,  554,  553,  554,  553,
      554,  553,  555,  556,  614,  615,  614,  555,  557,  558,
      694,  615,  555,  556,  555,  556,  556,  559,  557,  558,

      557,  558,  560,  561,  694,  708,  562,  559,  619,  559,
      563,  625,  560,  561,  560,  561,  562,  622,  562,  625,
      563,  560,  563,  623,  707,  619,  623,  564,  565,  563,
      621,  566,  567,  631,  622,  562,  561,  564,  565,  564,
      565,  566,  567,  566,  567,  568,  628,  621,  624,  621,
      631,  564,  566,  628,  570,  568,  707,  568,  564,  571,
      624,  565,  564,  573,  570,  567,  570,  572,  632,  571,
      573,  571,  572,  573,  626,  573,  629,  634,  568,  626,
      635,  630,  572,  630,  572,  636,  637,  629,  640,  638,
      639,  632,  679,  634,  641,  573,  681,  643,  681,  640,

      643,  636,  635,  639,  637,  638,  644,  641,  645,  644,
      643,  647,  643,  646,  679,  646,  680,  647,  645,  644,
      645,  644,  645,  646,  648,  646,  680,  647,  649,  647,
      677,  650,  651,  648,  648,  677,  648,  687,  649,  687,
      649,  650,  651,  650,  651,  649,  652,  653,  690,  650,
      690,  683,  682,  653,  654,  655,  652,  652,  652,  684,
      654,  655,  656,  653,  654,  653,  654,  657,  656,  682,
      705,  655,  691,  655,  655,  657,  683,  657,  656,  657,
      656,  658,  658,  659,  678,  684,  659,  661,  691,  678,
      660,  662,  658,  659,  658,  659,  660,  661,  663,  661,

      660,  662,  660,  662,  664,  661,  665,  705,  663,  662,
      663,  666,  665,  692,  664,  667,  664,  664,  669,  668,
      692,  666,  665,  666,  665,  667,  670,  667,  669,  668,
      669,  668,  671,  689,  700,  689,  670,  672,  670,  699,
      674,  699,  671,  695,  671,  666,  668,  672,  673,  672,
      674,  669,  674,  670,  689,  675,  676,  696,  673,  693,
      673,  671,  674,  697,  672,  675,  676,  675,  676,  695,
      693,  697,  673,  698,  702,  703,  700,  704,  706,  675,
      845,  713,  709,  696,  711,  712,  715,  711,  712,  775,
      845,  713,  715,  713,  698,  713,  719,  711,  712,  711,

      712, 1392,  715,  775,  715,  714,  719,  714,  719,  702,
      716,  717,  704,  706,  709,  714,  703,  714,  777,  716,
      716,  717,  716,  717,  718,  721, 1391,  720,  717,  723,
      784,  721,  777,  784,  718,  723,  718,  720,  720,  720,
      722,  721,  718,  721,  780,  723,  722,  723,  723,  724,
      722,  725,  722,  726,  726,  724,  780,  781,  871,  725,
      782,  725,  781,  725,  726,  724,  726,  724,  727,  728,
      786,  727,  729,  730,  786,  728,  731,  782,  727,  728,
      727,  728,  729,  730,  729,  730,  731,  732,  731,  733,
      729,  730,  734,  871,  779,  733,  735,  732,  798,  732,

      732,  736,  734,  779,  734,  733,  735,  733,  735,  737,
      738,  736,  798,  736,  783,  739,  783,  783,  807,  737,
      738,  737,  738,  740,  741,  739,  734,  739,  736,  742,
      787,  785,  795,  740,  741,  740,  741,  738,  785,  742,
      807,  742,  737,  743,  739,  788,  744,  787,  741,  795,
      740,  742,  788,  743,  792,  743,  744,  789,  744,  789,
      789,  791,  801,  791,  791,  796,  792,  743,  793,  796,
      793,  793,  794,  797,  794,  797,  799,  800,  802,  801,
      802,  802,  800,  803,  804,  806,  808,  846,  810,  799,
      809,  811,  847,  816,  846,  812,  816,  812,  803,  806,

      808,  809,  811,  804,  810,  812,  847,  812,  813,  813,
      868,  815,  814,  818, 1390,  809,  811,  815,  814,  813,
      817,  813,  814,  818,  814,  818,  819,  815,  817,  815,
      817,  818,  817,  819,  820,  821,  819,  850,  819,  822,
      820,  858,  822,  824,  823,  821,  824,  821,  825,  825,
      820,  868,  820,  821,  823,  826,  823,  827,  826,  825,
      828,  825,  829,  850,  858,  835,  828,  827,  835,  827,
      827,  830,  829,  832,  829,  832,  828,  829,  828,  831,
      834,  830,  831,  830,  830,  832,  834,  832,  867,  833,
      836,  853,  831,  837,  831,  833,  834,  838,  834,  833,

      836,  833,  836,  837,  848,  837,  848,  838,  839,  838,
      939,  939,  840,  851,  849,  841,  836,  853,  839,  842,
      839,  867,  840,  837,  840,  841,  843,  841,  851,  842,
      849,  842,  844,  839,  865,  852,  843,  852,  843,  855,
      841,  842,  844,  856,  844,  840,  855,  857,  859,  857,
      864,  860,  861,  843,  844,  842,  860,  862,  861,  863,
      869,  863,  870, 1006,  856,  872,  874,  874,  844,  859,
      875,  862,  865,  873,  906,  873,  875,  874,  906,  874,
      875,  876,  875,  873,  864,  873,  877,  876,  878,  877,
     1006,  883,  870,  869,  883,  872,  878,  876,  878,  876,

      878,  879,  881, 1373,  882,  880,  870,  885,  881,  872,
      885,  879,  880,  879,  882,  880,  882,  880,  881,  879,
      881,  884,  882,  886,  886,  887,  889,  888,  887,  941,
      941,  884,  889,  884,  886,  890,  886,  888, 1372,  888,
      888,  891,  889,  892,  889,  890,  892,  890,  943,  896,
      890,  891,  896,  891,  891,  893,  892,  893,  892,  895,
      894,  897,  943, 1371,  898,  895,  894,  893,  899,  893,
      894,  897,  894,  897,  898,  895,  898,  895,  899,  900,
      899,  940,  936,  901,  935,  940,  902,  897,  935,  900,
      903,  900,  953,  901,  898,  901,  902,  904,  902,  936,

      903,  935,  903,  905,  900,  945,  937,  904,  937,  904,
     1368,  902,  903,  905,  953,  905,  901,  938,  948,  938,
      938,  947,  945, 1359,  904,  905,  903,  942,  950,  942,
      942,  946,  951,  946,  946,  948,  949,  947,  949,  905,
      950,  954,  955,  952,  951,  952,  952,  956,  957,  954,
      958,  960,  959,  961,  962,  956,  966, 1358,  958,  966,
      963,  961,  955,  959,  963,  962,  963,  964,  957,  960,
      967,  998,  970,  964,  965,  970,  963,  992,  963,  992,
      967,  968,  967,  964,  965,  964,  965,  965,  968,  969,
      998,  968,  971,  968,  974,  971,  973,  974,  972,  969,

      980,  969,  973,  980, 1069,  971,  975,  971,  972,  972,
      972,  975,  973,  976,  973,  977, 1069,  978,  978,  976,
      993,  975, 1002,  975,  977,  977,  981,  977,  978,  976,
      978,  976,  979,  979,  982,  995,  981,  983,  981, 1002,
     1357,  993,  984,  979,  982,  979,  982,  983,  985,  983,
      995,  997,  984,  982,  984,  986,  997,  994,  985,  981,
      985,  984,  999,  987,  999,  986,  988,  986,  983, 1005,
      989,  990,  996,  987,  986,  987,  988,  994,  988,  985,
      989,  990,  989,  990,  991,  987,  991, 1007, 1000,  989,
      991, 1000,  996,  990, 1001,  988, 1001, 1003, 1004, 1009,

     1008, 1010, 1011, 1012, 1003, 1004, 1013, 1014, 1018, 1022,
     1005, 1018, 1022, 1015, 1072, 1356, 1072, 1015, 1016, 1015,
     1026, 1085, 1032, 1026, 1016, 1032, 1007, 1008, 1010, 1015,
     1355, 1015, 1011, 1013, 1016, 1017, 1016, 1014, 1009, 1019,
     1012, 1085, 1021, 1020, 1075, 1017, 1075, 1017, 1017, 1019,
     1020, 1019, 1021, 1020, 1021, 1020, 1023, 1073, 1073, 1023,
     1025, 1028, 1024, 1076, 1076, 1027, 1025, 1028, 1086, 1023,
     1027, 1023, 1024, 1024, 1024, 1029, 1025, 1028, 1025, 1028,
     1027, 1136, 1027, 1033, 1029, 1029, 1034, 1029, 1030, 1030,
     1086, 1031, 1031, 1033, 1185, 1033, 1034, 1035, 1034, 1030,

     1036, 1030, 1031, 1037, 1031, 1034, 1185, 1035, 1038, 1035,
     1036, 1039, 1036, 1037, 1040, 1037, 1033, 1136, 1038, 1036,
     1038, 1039, 1074, 1039, 1040, 1041, 1040, 1038, 1035, 1042,
     1353, 1080, 1074, 1039, 1037, 1041, 1080, 1041, 1082, 1042,
     1083, 1042, 1333, 1040, 1041, 1068, 1078, 1068, 1068, 1078,
     1070, 1042, 1070, 1070, 1077, 1082, 1077, 1077, 1079, 1083,
     1079, 1079, 1081, 1081, 1084, 1090, 1087, 1088, 1089, 1091,
     1092, 1093, 1095, 1102, 1093, 1095, 1102, 1104, 1123, 1128,
     1104, 1128, 1090, 1094, 1094, 1084, 1087, 1096, 1088, 1089,
     1091, 1092, 1097, 1118, 1094, 1123, 1094, 1096, 1098, 1096,

     1118, 1120, 1097, 1100, 1097, 1097, 1099, 1099, 1098, 1101,
     1098, 1125, 1100, 1100, 1103, 1100, 1099, 1105, 1099, 1101,
     1106, 1101, 1120, 1105, 1103, 1107, 1103, 1105, 1103, 1105,
     1106, 1107, 1106, 1125, 1108, 1109, 1332, 1121, 1110, 1111,
     1124, 1107, 1108, 1107, 1127, 1109, 1112, 1109, 1110, 1111,
     1110, 1111, 1108, 1113, 1108, 1130, 1112, 1121, 1112, 1131,
     1124, 1114, 1127, 1113, 1115, 1113, 1122, 1109, 1116, 1110,
     1126, 1114, 1111, 1114, 1115, 1122, 1115, 1112, 1116, 1117,
     1116, 1132, 1133, 1134, 1126, 1113, 1135, 1137, 1138, 1117,
     1318, 1117, 1115, 1114, 1139, 1130, 1141, 1139, 1131, 1141,

     1116, 1140, 1140, 1142, 1148, 1150, 1143, 1148, 1150, 1318,
     1195, 1117, 1140, 1142, 1140, 1142, 1143, 1196, 1143, 1143,
     1144, 1133, 1132, 1134, 1145, 1145, 1135, 1137, 1138, 1146,
     1144, 1195, 1144, 1147, 1145, 1196, 1145, 1149, 1146, 1146,
     1151, 1146, 1153, 1147, 1152, 1147, 1151, 1149, 1153, 1149,
     1151, 1149, 1151, 1154, 1152, 1155, 1152, 1184, 1153, 1188,
     1153, 1154, 1156, 1201, 1188, 1155, 1157, 1155, 1184, 1158,
     1159, 1154, 1156, 1154, 1156, 1187, 1157, 1201, 1157, 1158,
     1159, 1158, 1159, 1190, 1160, 1161, 1213, 1155, 1190, 1213,
     1199, 1162, 1187, 1156, 1160, 1161, 1160, 1161, 1163, 1157,

     1158, 1162, 1159, 1162, 1186, 1191, 1198, 1191, 1163, 1192,
     1163, 1192, 1199, 1161, 1186, 1193, 1160, 1193, 1193, 1194,
     1197, 1194, 1194, 1162, 1198, 1200, 1202, 1203, 1204, 1209,
     1163, 1197, 1205, 1205, 1206, 1206, 1207, 1228, 1204, 1209,
     1204, 1209, 1207, 1205, 1206, 1205, 1206, 1200, 1202, 1203,
     1208, 1228, 1207, 1210, 1207, 1226, 1208, 1194, 1211, 1210,
     1208, 1212, 1208, 1210, 1226, 1210, 1214, 1211, 1211, 1214,
     1211, 1212, 1216, 1212, 1212, 1215, 1217, 1364, 1364, 1218,
     1219, 1234, 1216, 1220, 1216, 1215, 1217, 1215, 1217, 1218,
     1219, 1218, 1219, 1220, 1224, 1220, 1225, 1235, 1217, 1221,

     1222, 1216, 1224, 1225, 1214, 1223, 1231, 1215, 1218, 1221,
     1222, 1221, 1222, 1219, 1230, 1223, 1220, 1223, 1227, 1232,
     1227, 1234, 1236, 1231, 1221, 1237, 1238, 1239, 1230, 1241,
     1240, 1242, 1243, 1222, 1235, 1244, 1244, 1246, 1223, 1281,
     1232, 1283, 1243, 1246, 1243, 1285, 1244, 1285, 1244, 1245,
     1245, 1330, 1236, 1246, 1247, 1246, 1281, 1329, 1283, 1245,
     1247, 1245, 1237, 1240, 1247, 1248, 1247, 1238, 1239, 1327,
     1241, 1252, 1242, 1249, 1252, 1248, 1321, 1248, 1250, 1249,
     1286, 1251, 1286, 1249, 1326, 1249, 1253, 1250, 1250, 1253,
     1250, 1251, 1255, 1251, 1251, 1254, 1256, 1321, 1287, 1257,

     1258, 1287, 1255, 1259, 1255, 1254, 1256, 1254, 1256, 1257,
     1258, 1257, 1258, 1259, 1284, 1259, 1284, 1284, 1256, 1260,
     1261, 1255, 1291, 1326, 1253, 1262, 1293, 1254, 1257, 1260,
     1261, 1260, 1261, 1258, 1288, 1262, 1259, 1262, 1289, 1296,
     1289, 1289, 1291, 1288, 1260, 1299, 1293, 1302, 1296, 1325,
     1302, 1299, 1307, 1261, 1300, 1307, 1301, 1323, 1262, 1303,
     1328, 1299, 1301, 1299, 1300, 1300, 1300, 1323, 1303, 1303,
     1304, 1303, 1301, 1388, 1301, 1305, 1306, 1289, 1306, 1317,
     1304, 1317, 1304, 1304, 1308, 1305, 1306, 1305, 1306, 1305,
     1309, 1307, 1388, 1310, 1308, 1320, 1308, 1311, 1312, 1328,

     1309, 1313, 1309, 1310, 1314, 1310, 1331, 1311, 1312, 1311,
     1312, 1313, 1320, 1313, 1314, 1315, 1314, 1322, 1319, 1316,
     1319, 1309, 1324, 1298, 1314, 1315, 1334, 1315, 1311, 1316,
     1337, 1316, 1334, 1337, 1331, 1335, 1385, 1336, 1342, 1322,
     1338, 1342, 1334, 1336, 1334, 1335, 1335, 1335, 1339, 1338,
     1338, 1297, 1338, 1336, 1340, 1336, 1385, 1341, 1339, 1341,
     1339, 1339, 1343, 1344, 1340, 1295, 1340, 1341, 1340, 1341,
     1345, 1346, 1343, 1344, 1343, 1344, 1347, 1342, 1294, 1348,
     1345, 1346, 1345, 1346, 1366, 1349, 1347, 1366, 1347, 1348,
     1363, 1348, 1363, 1363, 1344, 1349, 1350, 1349, 1365, 1351,

     1365, 1365, 1346, 1367, 1369, 1349, 1350, 1424, 1350, 1351,
     1370, 1351, 1370, 1370, 1374, 1375, 1376, 1374, 1377, 1376,
     1367, 1369, 1386, 1378, 1379, 1375, 1424, 1375, 1377, 1378,
     1377, 1380, 1377, 1292, 1379, 1379, 1379, 1380, 1382, 1378,
     1381, 1378, 1383, 1381, 1386, 1290, 1384, 1380, 1382, 1380,
     1382, 1387, 1383, 1387, 1383, 1395, 1384, 1370, 1384, 1389,
     1394, 1389, 1397, 1394, 1398, 1395, 1396, 1395, 1401, 1396,
     1398, 1401, 1397, 1399, 1397, 1400, 1397, 1425, 1402, 1425,
     1398, 1400, 1398, 1399, 1399, 1399, 1403, 1381, 1402, 1404,
     1402, 1400, 1413, 1400, 1413, 1413, 1403, 1414, 1403, 1404,

     1415, 1404, 1415, 1415, 1416, 1282, 1416, 1416, 1417, 1419,
     1420, 1418, 1419, 1278, 1414, 1401, 1420, 1275, 1417, 1436,
     1417, 1418, 1418, 1418, 1421, 1427, 1420, 1421, 1420, 1422,
     1428, 1429, 1422, 1430, 1429, 1427, 1436, 1427, 1273, 1430,
     1428, 1428, 1428, 1431, 1432, 1440, 1431, 1432, 1440, 1430,
     1437, 1430, 1437, 1437, 1416, 1438, 1439, 1438, 1438, 1442,
     1441, 1442, 1439, 1441, 1444, 1445, 1446, 1271, 1445, 1446,
     1444, 1270, 1439, 1449, 1439, 1449, 1449, 1269, 1268, 1422,
     1444, 1450, 1444, 1450, 1450, 1451, 1452, 1454, 1451, 1452,
     1454, 1267, 1450, 1265, 1432, 1455, 1438, 1452, 1455, 1264,

     1457, 1441, 1457, 1457, 1263, 1458, 1455, 1446, 1458, 1459,
     1233, 1229, 1459, 1461, 1461, 1461, 1461, 1461, 1461, 1461,
     1462, 1462, 1462, 1462, 1462, 1462, 1462, 1464, 1464, 1189,
     1464, 1464, 1464, 1464, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1466, 1183, 1182, 1181, 1466, 1466, 1466, 1467, 1467,
     1180, 1467, 1467, 1467, 1467, 1468, 1468, 1179, 1468, 1468,
     1468, 1468, 1469, 1469, 1178, 1469, 1469, 1469, 1469, 1470,
     1470, 1177, 1176, 1175, 1470, 1470, 1471, 1471, 1174, 1172,
     1171, 1471, 1471, 1472, 1472, 1170, 1472, 1472, 1472, 1472,
     1473, 1473, 1474, 1474, 1475, 1475, 1168, 1167, 1166, 1475,

     1475, 1476, 1476, 1165, 1164, 1129, 1476, 1476, 1477, 1477,
     1119, 1477, 1477, 1477, 1477, 1478, 1478, 1071, 1067, 1066,
     1478, 1478, 1479, 1479, 1065, 1064, 1063, 1479, 1479, 1480,
     1480, 1062, 1480, 1480, 1480, 1480, 1481, 1481, 1061, 1060,
     1059, 1481, 1481, 1482, 1482, 1058, 1057, 1056, 1482, 1482,
     1483, 1483, 1055, 1483, 1483, 1483, 1483, 1053, 1051, 1050,
     1049, 1048, 1047, 1044,  944,  933,  932,  931,  930,  929,
      928,  927,  926,  925,  924,  922,  921,  920,  919,  918,
      916,  915,  914,  912,  911,  910,  908,  907,  866,  854,
      805,  790,  778,  776,  774,  773,  772,  770,  769,  767,

      766,  765,  764,  763,  762,  761,  760,  758,  754,  753,
      752,  751,  750,  748,  747,  746,  745,  710,  701,  642,
      633,  618,  608,  606,  605,  604,  603,  602,  601,  600,
      599,  597,  596,  595,  594,  593,  592,  591,  590,  589,
      588,  587,  585,  584,  583,  582,  581,  580,  579,  578,
      577,  576,  575,  574,  533,  460,  434,  427,  425,  424,
      423,  422,  420,  419,  418,  417,  416,  415,  414,  413,
      412,  411,  410,  409,  408,  407,  406,  405,  404,  403,
      402,  401,  400,  399,  398,  397,  396,  395,  394,  359,
      325,  324,  321,  249,  243,  242,  240,  236,  232,  231,

      227,  226,  225,  223,  222,  221,  220,  219,  218,  217,
      215,  214,  213,  212,  211,  210,  209,  208,  206,  203,
      202,  200,  171,  165,  137,  136,  134,  105,   81,   64,
       60,   57,   52,   45,   44,   43,   42,   41,   39,   38,
       36,   34,   33,   32,   31,   30,   29,   27,   26,   25,
       23,   17,   13, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,

     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[74] =
    {   0,
0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#line 2 "levcomp.lpp"

// levcomp.l:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
// 
// Based loosely on NetHack's lev_comp.l

#include "AppHdr.h"
#include "levcomp.tab.h"
#include <cstring>
#include <queue>

static bool alloced = false;

std::queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(20);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

static void settext()
{
    clean();
    if ((yylval.text = strdup(yytext)))
        alloced = true;
}






#line 1917 "levcomp.lex.cc"

#define INITIAL 0
#define MAPDEF 1
#define ARGUMENT 2
#define MNAME 3
#define KEYWORDS 4
#define ITEM_LIST 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 61 "levcomp.lpp"


#line 2081 "levcomp.lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1461 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1460 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 63 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 65 "levcomp.lpp"
{
                        settext();
                        return MAP_LINE;
                    }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 70 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 71 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 72 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 74 "levcomp.lpp"
;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 76 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 81 "levcomp.lpp"
;
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 82 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 84 "levcomp.lpp"
{ 
                        settext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 89 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 90 "levcomp.lpp"
;
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 91 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 93 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 95 "levcomp.lpp"
{ 
                        settext();
                        return MONSTER_NAME; 
                    }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 100 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 101 "levcomp.lpp"
;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 103 "levcomp.lpp"
{ 
                        BEGIN(INITIAL);
                        settext();
                        return STRING; 
                    }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 109 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 111 "levcomp.lpp"
;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 113 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 116 "levcomp.lpp"
{ BEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 117 "levcomp.lpp"
return DEFAULT_DEPTH;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 118 "levcomp.lpp"
return DEPTH;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 119 "levcomp.lpp"
return ORIENT;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 120 "levcomp.lpp"
{ BEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 121 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 122 "levcomp.lpp"
return FLAGS;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 123 "levcomp.lpp"
{ BEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 124 "levcomp.lpp"
{ BEGIN(ARGUMENT); return SUBST; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 125 "levcomp.lpp"
{ BEGIN(MNAME); return MONS; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 126 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 127 "levcomp.lpp"
{ BEGIN(ARGUMENT); return SHUFFLE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 129 "levcomp.lpp"
return BRANCH;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 130 "levcomp.lpp"
return DEFAULT;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 131 "levcomp.lpp"
return DESC;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 132 "levcomp.lpp"
return BRANCH;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 133 "levcomp.lpp"
return ROOT_DEPTH;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 134 "levcomp.lpp"
return FLOOR_COLOUR;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 135 "levcomp.lpp"
return ROCK_COLOUR;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 137 "levcomp.lpp"
return LEVEL;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 138 "levcomp.lpp"
return END;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 139 "levcomp.lpp"
return PVAULT;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 140 "levcomp.lpp"
return PMINIVAULT;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 142 "levcomp.lpp"
{ BEGIN(ARGUMENT); return ENTRY_MSG; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 143 "levcomp.lpp"
{ BEGIN(ARGUMENT); return EXIT_MSG; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 145 "levcomp.lpp"
return MONSTERS;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 146 "levcomp.lpp"
return ENDMONSTERS;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 149 "levcomp.lpp"
return PANDEMONIC;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 150 "levcomp.lpp"
return NO_HMIRROR;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 151 "levcomp.lpp"
return NO_VMIRROR;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 152 "levcomp.lpp"
return NO_ROTATE;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 154 "levcomp.lpp"
return ENCOMPASS;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 155 "levcomp.lpp"
return NORTH;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 156 "levcomp.lpp"
return SOUTH;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 157 "levcomp.lpp"
return EAST;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 158 "levcomp.lpp"
return WEST;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 159 "levcomp.lpp"
return NORTHEAST;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 160 "levcomp.lpp"
return NORTHWEST;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 161 "levcomp.lpp"
return SOUTHEAST;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 162 "levcomp.lpp"
return SOUTHWEST;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 163 "levcomp.lpp"
return FLOAT;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 165 "levcomp.lpp"
return DASH;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 166 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 168 "levcomp.lpp"
{
                        clean();
                        yylval.i = atoi(yytext);
                        return INTEGER;
                    }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 174 "levcomp.lpp"
;
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 175 "levcomp.lpp"
;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 177 "levcomp.lpp"
return OPAREN;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 178 "levcomp.lpp"
return CPAREN;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 180 "levcomp.lpp"
return QUOTE;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 182 "levcomp.lpp"
{
                        settext();
                        return IDENTIFIER;
                    }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 187 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 189 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 2566 "levcomp.lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MAPDEF):
case YY_STATE_EOF(ARGUMENT):
case YY_STATE_EOF(MNAME):
case YY_STATE_EOF(KEYWORDS):
case YY_STATE_EOF(ITEM_LIST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1461 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1461 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1460);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 189 "levcomp.lpp"



int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}

