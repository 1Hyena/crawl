#line 2 "levcomp.lex.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvs/root/flex/flex/skel.c,v 1.2 2004/05/07 00:28:17 jkh Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 69
#define YY_END_OF_BUFFER 70
static yyconst short int yy_acclist[3180] =
    {   0,
        3,    3,   70,   68,   69,   62,   68,   69,   63,   69,
       68,   69,   66,   68,   69,   64,   68,   69,   65,   68,
       69,   60,   68,   69,   59,   68,   69,   61,   68,   69,
       68,   69,   68,   69,   68,   69,   68,   69,   68,   69,
       68,   69,   68,   69,   68,   69,   68,   69,   68,   69,
       68,   69,   68,   69,   68,   69,   68,   69,   68,   69,
       68,   69,   68,   69,   68,   69,   68,   69,   68,   69,
       68,   69,   68,   69,   62,   68,   69,   17,   68,   69,
       68,   69,   68,   69,    3,   68,   69,    3,   64,   68,
       69,    3,   65,   68,   69,    3,   59,   68,   69,    3,

       61,   68,   69,    3,   68,   69,    3,   68,   69,    3,
       68,   69,    3,   68,   69,    3,   68,   69,    3,   68,
       69,    3,   68,   69,    3,   68,   69,    3,   68,   69,
        3,   68,   69,    3,   68,   69,    3,   68,   69,    3,
       68,   69,    3,   68,   69,    3,   68,   69,    3,   68,
       69,    3,   68,   69,    3,   68,   69,    3,   68,   69,
        3,   68,   69,    3,   68,   69,    3,   68,   69,    3,
       17,   68,   69,    3,   68,   69,    3,   68,   69,    3,
       68,   69,   68,   69,   16,   63,   69,   68,   69,   66,
       68,   69,   64,   68,   69,   65,   68,   69,   60,   68,

       69,   59,   68,   69,   61,   68,   69,   68,   69,   68,
       69,   68,   69,   68,   69,   68,   69,   68,   69,   68,
       69,   68,   69,   68,   69,   68,   69,   68,   69,   68,
       69,   68,   69,   68,   69,   68,   69,   68,   69,   68,
       69,   68,   69,   68,   69,   68,   69,   68,   69,   68,
       69,   17,   68,   69,   68,   69,   68,   69,   68,   69,
       14,   62,   68,   69,   11,   63,   69,   14,   68,   69,
       66,   68,   69,   64,   68,   69,   65,   68,   69,   13,
       60,   68,   69,   59,   68,   69,   61,   68,   69,   68,
       69,   68,   69,   68,   69,   68,   69,   68,   69,   68,

       69,   68,   69,   68,   69,   68,   69,   68,   69,   68,
       69,   68,   69,   68,   69,   68,   69,   68,   69,   68,
       69,   68,   69,   68,   69,   68,   69,   68,   69,   68,
       69,   68,   69,   14,   62,   68,   69,   17,   68,   69,
       68,   69,   68,   69,    5,   62,   68,   69,    6,   63,
       69,   68,   69,    4,   59,   68,   69,    4,   61,   68,
       69,    4,   68,   69,    4,   68,   69,    4,   68,   69,
        4,   68,   69,    4,   68,   69,    4,   68,   69,    4,
       68,   69,    4,   68,   69,    4,   68,   69,    4,   68,
       69,    4,   68,   69,    4,   68,   69,    4,   68,   69,

        4,   68,   69,    4,   68,   69,    4,   68,   69,    4,
       68,   69,    4,   68,   69,    4,   68,   69,    4,   68,
       69,    4,   68,   69,    4,   68,   69,    5,   62,   68,
       69,    4,   68,   69,    4,   68,   69,   68,   69,    9,
       62,   68,   69,   10,   63,   69,   68,   69,   66,   68,
       69,   64,   68,   69,   65,   68,   69,    8,   60,   68,
       69,   59,   68,   69,   61,   68,   69,   68,   69,   68,
       69,   68,   69,   68,   69,   68,   69,   68,   69,   68,
       69,   68,   69,   68,   69,   68,   69,   68,   69,   68,
       69,   68,   69,   68,   69,   68,   69,   68,   69,   68,

       69,   68,   69,   68,   69,   68,   69,   68,   69,   68,
       69,    9,   62,   68,   69,   17,   68,   69,   68,   69,
       68,   69,   62,   63,   61,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   62,   17,   17,   67,   67,   67,    3,    3,   61,
        3,   67,    3,   67,    3,   67,    3,   67,    3,   67,
        3,   67,    3,   67,    3,   67,    3,   67,    3,   67,
        3,   67,    3,   67,    3,   67,    3,   67,    3,   67,
        3,   67,    3,   67,    3,   67,    3,   67,    3,   67,

        3,   67,    3,   67,    3,   67,    3,   67,    3,   67,
        3,   67,   17,    2,   17,    3,   17,    3,   67,    3,
       67,    3,   67,    3,   67,    3,   67,   15,   16,   63,
       15,   61,   15,   67,   15,   67,   15,   67,   15,   67,
       15,   67,   15,   67,   15,   67,   15,   67,   15,   67,
       15,   67,   15,   67,   15,   67,   15,   67,   15,   67,
       15,   67,   15,   67,   15,   67,   15,   67,   15,   67,
       15,   67,   15,   67,   15,   67,   15,   67,   15,   67,
       15,   67,   15,   67,   15,   17,   17,   15,   67,   15,
       67,   15,   67,   14,   62,   11,   14,   11,   63,   61,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   14,   62,   17,   67,
       67,   67,    5,   62,    6,    6,   63,    4,    4,   61,
        4,   67,    4,   67,    4,   67,    4,   67,    4,   67,
        4,   67,    4,   67,    4,   67,    4,   67,    4,   67,
        4,   67,    4,   67,    4,   67,    4,   67,    4,   67,
        4,   67,    4,   67,    4,   67,    4,   67,    4,   67,
        4,   67,    4,   67,    4,   67,    4,   67,    4,   67,
        4,   67,    5,   62,    4,   67,    4,   67,    4,   67,

        9,   62,   10,   10,   63,   61,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,    9,   62,   17,   67,   67,   67,   67,   67,
       67,   67,   67,   38,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       18,   67,    3,   67,    3,   67,    3,   67,    3,   67,
        3,   67,    3,   38,   67,    3,   67,    3,   67,    3,
       67,    3,   67,    3,   67,    3,   67,    3,   67,    3,

       67,    3,   67,    3,   67,    3,   67,    3,   67,    3,
       67,    3,   67,    3,   67,    3,   67,    3,   67,    3,
       67,    3,   67,    3,   67,    3,   67,    3,   67,    3,
       67,    3,   67,    3,   67,    3,   38,   67,    3,   18,
       67,    3,   67,   15,   67,   15,   67,   15,   67,   15,
       67,   15,   67,   15,   38,   67,   15,   67,   15,   67,
       15,   67,   15,   67,   15,   67,   15,   67,   15,   67,
       15,   67,   15,   67,   15,   67,   15,   67,   15,   67,
       15,   67,   15,   67,   15,   67,   15,   67,   15,   67,
       15,   67,   15,   67,   15,   67,   15,   67,   15,   67,

       15,   67,   15,   67,   15,   67,   15,   18,   67,   12,
       12,   61,   12,   67,   12,   67,   12,   67,   12,   67,
       12,   67,   12,   67,   12,   38,   67,   12,   67,   12,
       67,   12,   67,   12,   67,   12,   67,   12,   67,   12,
       67,   12,   67,   12,   67,   12,   67,   12,   67,   12,
       67,   12,   67,   12,   67,   12,   67,   12,   67,   12,
       67,   12,   67,   12,   67,   12,   67,   12,   67,   12,
       67,   12,   67,   12,   67,   12,   67,   12,   17,   12,
       18,   67,   12,   67,   12,   67,   12,   67,    4,   67,
        4,   67,    4,   67,    4,   67,    4,   67,    4,   38,

       67,    4,   67,    4,   67,    4,   67,    4,   67,    4,
       67,    4,   67,    4,   67,    4,   67,    4,   67,    4,
       67,    4,   67,    4,   67,    4,   67,    4,   67,    4,
       67,    4,   67,    4,   67,    4,   67,    4,   67,    4,
       67,    4,   67,    4,   67,    4,   67,    4,   67,    4,
       67,    4,   18,   67,    7,    7,   61,    7,   67,    7,
       67,    7,   67,    7,   67,    7,   67,    7,   67,    7,
       38,   67,    7,   67,    7,   67,    7,   67,    7,   67,
        7,   67,    7,   67,    7,   67,    7,   67,    7,   67,
        7,   67,    7,   67,    7,   67,    7,   67,    7,   67,

        7,   67,    7,   67,    7,   67,    7,   67,    7,   67,
        7,   67,    7,   67,    7,   67,    7,   67,    7,   67,
        7,   67,    7,   17,    7,   18,   67,    7,   67,    7,
       67,    7,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   52,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   53,   67,    3,   67,
        3,   67,    3,   67,    3,   67,    3,   67,    3,   67,
        3,   67,    3,   67,    3,   67,    3,   67,    3,   67,
        3,   67,    3,   67,    3,   67,    3,   67,    3,   67,

        3,   67,    3,   67,    3,   67,    3,   67,    3,   67,
        3,   67,    3,   67,    3,   52,   67,    3,   67,    3,
       67,    3,   67,    3,   67,    3,   67,    3,   67,    3,
       67,    3,   67,    3,   53,   67,    3,   67,    3,   67,
       15,   67,   15,   67,   15,   67,   15,   67,   15,   67,
       15,   67,   15,   67,   15,   67,   15,   67,   15,   67,
       15,   67,   15,   67,   15,   67,   15,   67,   15,   67,
       15,   67,   15,   67,   15,   67,   15,   67,   15,   67,
       15,   67,   15,   67,   15,   67,   15,   52,   67,   15,
       67,   15,   67,   15,   67,   15,   67,   15,   67,   15,

       67,   15,   67,   15,   67,   15,   53,   67,   12,   67,
       12,   67,   12,   67,   12,   67,   12,   67,   12,   67,
       12,   67,   12,   67,   12,   67,   12,   67,   12,   67,
       12,   67,   12,   67,   12,   67,   12,   67,   12,   67,
       12,   67,   12,   67,   12,   67,   12,   67,   12,   67,
       12,   67,   12,   67,   12,   52,   67,   12,   67,   12,
       67,   12,   67,   12,   67,   12,   67,   12,   67,   12,
       67,   12,   67,   12,   53,   67,    4,   67,    4,   67,
        4,   67,    4,   67,    4,   67,    4,   67,    4,   67,
        4,   67,    4,   67,    4,   67,    4,   67,    4,   67,

        4,   67,    4,   67,    4,   67,    4,   67,    4,   67,
        4,   67,    4,   67,    4,   67,    4,   67,    4,   67,
        4,   67,    4,   52,   67,    4,   67,    4,   67,    4,
       67,    4,   67,    4,   67,    4,   67,    4,   67,    4,
       67,    4,   53,   67,    7,   67,    7,   67,    7,   67,
        7,   67,    7,   67,    7,   67,    7,   67,    7,   67,
        7,   67,    7,   67,    7,   67,    7,   67,    7,   67,
        7,   67,    7,   67,    7,   67,    7,   67,    7,   67,
        7,   67,    7,   67,    7,   67,    7,   67,    7,   67,
        7,   52,   67,    7,   67,    7,   67,    7,   67,    7,

       67,    7,   67,    7,   67,    7,   67,    7,   67,    7,
       53,   67,   67,   67,   67,   67,   32,   67,   67,   67,
       67,   67,   29,   37,   67,   28,   67,   19,   67,   67,
       67,   67,   67,   67,   67,   26,   67,   67,   58,   67,
       67,   67,   67,   50,   67,   67,   51,   67,    3,   67,
        3,   67,    3,   67,    3,   67,    3,   67,    3,   67,
        3,   67,    3,   67,    3,   67,    3,   37,   67,    3,
       67,    3,   67,    3,   67,    3,   67,    3,   67,    3,
       67,    3,   67,    3,   67,    3,   67,    3,   67,    3,
       58,   67,    3,   67,    3,   67,    3,   67,    3,   50,

       67,    3,   67,    3,   51,   67,    3,   67,    3,   67,
       15,   67,   15,   67,   15,   67,   15,   67,   15,   32,
       15,   67,   15,   67,   15,   67,   15,   67,   15,   67,
       15,   29,   15,   37,   67,   15,   28,   15,   67,   15,
       19,   15,   67,   15,   67,   15,   67,   15,   67,   15,
       67,   15,   67,   15,   67,   15,   26,   15,   67,   15,
       67,   15,   58,   67,   15,   67,   15,   67,   15,   67,
       15,   50,   67,   15,   67,   15,   51,   67,   12,   67,
       12,   67,   12,   67,   12,   67,   12,   32,   12,   67,
       12,   67,   12,   67,   12,   67,   12,   67,   12,   29,

       12,   37,   67,   12,   28,   12,   67,   12,   19,   12,
       67,   12,   67,   12,   67,   12,   67,   12,   67,   12,
       67,   12,   67,   12,   26,   12,   67,   12,   67,   12,
       58,   67,   12,   67,   12,   67,   12,   67,   12,   50,
       67,   12,   67,   12,   51,   67,    4,   67,    4,   67,
        4,   67,    4,   67,    4,   67,    4,   67,    4,   67,
        4,   67,    4,   67,    4,   37,   67,    4,   67,    4,
       67,    4,   67,    4,   67,    4,   67,    4,   67,    4,
       67,    4,   67,    4,   67,    4,   67,    4,   58,   67,
        4,   67,    4,   67,    4,   67,    4,   50,   67,    4,

       67,    4,   51,   67,    7,   67,    7,   67,    7,   67,
        7,   67,    7,   32,    7,   67,    7,   67,    7,   67,
        7,   67,    7,   67,    7,   29,    7,   37,   67,    7,
       28,    7,   67,    7,   19,    7,   67,    7,   67,    7,
       67,    7,   67,    7,   67,    7,   67,    7,   67,    7,
       26,    7,   67,    7,   67,    7,   58,   67,    7,   67,
        7,   67,    7,   67,    7,   50,   67,    7,   67,    7,
       51,   67,   67,   67,   67,   21,   67,   67,   67,   25,
       67,   67,   67,   23,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,    3,

       67,    3,   67,    3,   67,    3,   67,    3,   67,    3,
       67,    3,   67,    3,   67,    3,   67,    3,   67,    3,
       67,    3,   67,    3,   67,    3,   67,    3,   67,    3,
       67,    3,   67,    3,   67,    3,   67,    3,   67,    3,
       67,    3,   67,    3,   67,    3,   67,    1,    3,   67,
       15,   67,   15,   67,   15,   67,   15,   21,   15,   67,
       15,   67,   15,   67,   15,   25,   15,   67,   15,   67,
       15,   67,   15,   23,   15,   67,   15,   67,   15,   67,
       15,   67,   15,   67,   15,   67,   15,   67,   15,   67,
       15,   67,   15,   67,   15,   67,   15,   67,   15,   67,

       15,   67,   15,   67,   12,   67,   12,   67,   12,   67,
       12,   21,   12,   67,   12,   67,   12,   67,   12,   25,
       12,   67,   12,   67,   12,   67,   12,   23,   12,   67,
       12,   67,   12,   67,   12,   67,   12,   67,   12,   67,
       12,   67,   12,   67,   12,   67,   12,   67,   12,   67,
       12,   67,   12,   67,   12,   67,   12,   67,    4,   67,
        4,   67,    4,   67,    4,   67,    4,   67,    4,   67,
        4,   67,    4,   67,    4,   67,    4,   67,    4,   67,
        4,   67,    4,   67,    4,   67,    4,   67,    4,   67,
        4,   67,    4,   67,    4,   67,    4,   67,    4,   67,

        4,   67,    4,   67,    4,   67,    7,   67,    7,   67,
        7,   67,    7,   21,    7,   67,    7,   67,    7,   67,
        7,   25,    7,   67,    7,   67,    7,   67,    7,   23,
        7,   67,    7,   67,    7,   67,    7,   67,    7,   67,
        7,   67,    7,   67,    7,   67,    7,   67,    7,   67,
        7,   67,    7,   67,    7,   67,    7,   67,    7,   67,
       33,   67,   24,   31,   67,   67,   67,   67,   67,   67,
       22,   67,   39,   67,   67,   27,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,    3,   67,    3,   31,
       67,    3,   67,    3,   67,    3,   67,    3,   67,    3,

       67,    3,   67,    3,   67,    3,   67,    3,   67,    3,
       67,    3,   67,    3,   67,    3,   67,    3,   67,    3,
       67,    3,   67,    3,   67,    3,   67,   15,   33,   15,
       67,   15,   24,   15,   31,   67,   15,   67,   15,   67,
       15,   67,   15,   67,   15,   67,   15,   22,   15,   67,
       15,   39,   15,   67,   15,   67,   15,   27,   15,   67,
       15,   67,   15,   67,   15,   67,   15,   67,   15,   67,
       15,   67,   15,   67,   15,   67,   15,   67,   12,   33,
       12,   67,   12,   24,   12,   31,   67,   12,   67,   12,
       67,   12,   67,   12,   67,   12,   67,   12,   22,   12,

       67,   12,   39,   12,   67,   12,   67,   12,   27,   12,
       67,   12,   67,   12,   67,   12,   67,   12,   67,   12,
       67,   12,   67,   12,   67,   12,   67,   12,   67,    4,
       67,    4,   31,   67,    4,   67,    4,   67,    4,   67,
        4,   67,    4,   67,    4,   67,    4,   67,    4,   67,
        4,   67,    4,   67,    4,   67,    4,   67,    4,   67,
        4,   67,    4,   67,    4,   67,    4,   67,    4,   67,
        7,   33,    7,   67,    7,   24,    7,   31,   67,    7,
       67,    7,   67,    7,   67,    7,   67,    7,   67,    7,
       22,    7,   67,    7,   39,    7,   67,    7,   67,    7,

       27,    7,   67,    7,   67,    7,   67,    7,   67,    7,
       67,    7,   67,    7,   67,    7,   67,    7,   67,    7,
       67,   67,   67,   67,   67,   67,   43,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
        3,   67,    3,   67,    3,   67,    3,   67,    3,   67,
        3,   43,   67,    3,   67,    3,   67,    3,   67,    3,
        3,   67,    3,   67,    3,   67,    3,   67,    3,   67,
        3,   67,    3,   67,    3,   67,    3,   67,   15,   67,
       15,   67,   15,   67,   15,   67,   15,   67,   15,   43,
       67,   15,   67,   15,   67,   15,   67,   15,   15,   67,

       15,   67,   15,   67,   15,   67,   15,   67,   15,   67,
       15,   67,   15,   67,   15,   67,   12,   67,   12,   67,
       12,   67,   12,   67,   12,   67,   12,   43,   67,   12,
       67,   12,   67,   12,   67,   12,   12,   67,   12,   67,
       12,   67,   12,   67,   12,   67,   12,   67,   12,   67,
       12,   67,   12,   67,    4,   67,    4,   67,    4,   67,
        4,   67,    4,   67,    4,   43,   67,    4,   67,    4,
       67,    4,   67,    4,    4,   67,    4,   67,    4,   67,
        4,   67,    4,   67,    4,   67,    4,   67,    4,   67,
        4,   67,    7,   67,    7,   67,    7,   67,    7,   67,

        7,   67,    7,   43,   67,    7,   67,    7,   67,    7,
       67,    7,    7,   67,    7,   67,    7,   67,    7,   67,
        7,   67,    7,   67,    7,   67,    7,   67,    7,   67,
       67,   67,   67,   42,   67,   67,   67,   67,   49,   67,
       67,   48,   67,   67,   54,   67,   55,   67,   67,   56,
       67,   57,   67,    3,   67,    3,   67,    3,   67,    3,
       67,    3,   67,    3,   67,    3,   67,    3,    3,   49,
       67,    3,   67,    3,   48,   67,    3,   67,    3,   54,
       67,    3,   55,   67,    3,   67,    3,   56,   67,    3,
       57,   67,   15,   67,   15,   67,   15,   67,   15,   42,

       15,   67,   15,   67,   15,   67,   15,   67,   15,   15,
       49,   67,   15,   67,   15,   48,   67,   15,   67,   15,
       54,   67,   15,   55,   67,   15,   67,   15,   56,   67,
       15,   57,   67,   12,   67,   12,   67,   12,   67,   12,
       42,   12,   67,   12,   67,   12,   67,   12,   67,   12,
       12,   49,   67,   12,   67,   12,   48,   67,   12,   67,
       12,   54,   67,   12,   55,   67,   12,   67,   12,   56,
       67,   12,   57,   67,    4,   67,    4,   67,    4,   67,
        4,   67,    4,   67,    4,   67,    4,   67,    4,    4,
       49,   67,    4,   67,    4,   48,   67,    4,   67,    4,

       54,   67,    4,   55,   67,    4,   67,    4,   56,   67,
        4,   57,   67,    7,   67,    7,   67,    7,   67,    7,
       42,    7,   67,    7,   67,    7,   67,    7,   67,    7,
        7,   49,   67,    7,   67,    7,   48,   67,    7,   67,
        7,   54,   67,    7,   55,   67,    7,   67,    7,   56,
       67,    7,   57,   67,   30,   67,   41,   67,   67,   67,
       67,   46,   67,   47,   67,   45,   67,    3,   67,    3,
       67,    3,   67,    3,   67,    3,   67,    3,    3,   46,
       67,    3,   47,   67,    3,   45,   67,   15,   30,   15,
       67,   15,   41,   15,   67,   15,   67,   15,   67,   15,

       67,   15,   15,   46,   67,   15,   47,   67,   15,   45,
       67,   12,   30,   12,   67,   12,   41,   12,   67,   12,
       67,   12,   67,   12,   67,   12,   12,   46,   67,   12,
       47,   67,   12,   45,   67,    4,   67,    4,   67,    4,
       67,    4,   67,    4,   67,    4,    4,   46,   67,    4,
       47,   67,    4,   45,   67,    7,   30,    7,   67,    7,
       41,    7,   67,    7,   67,    7,   67,    7,   67,    7,
        7,   46,   67,    7,   47,   67,    7,   45,   67,   44,
       67,   67,   40,   67,   34,    3,   44,   67,    3,   67,
        3,   67,    3,   15,   44,   67,   15,   67,   15,   40,

       15,   67,   15,   34,   15,   12,   44,   67,   12,   67,
       12,   40,   12,   67,   12,   34,   12,    4,   44,   67,
        4,   67,    4,   67,    4,    7,   44,   67,    7,   67,
        7,   40,    7,   67,    7,   34,    7,   67,   36,    3,
       67,    3,   15,   67,   15,   36,   15,   12,   67,   12,
       36,   12,    4,   67,    4,    7,   67,    7,   36,    7,
       35,    3,   15,   35,   15,   12,   35,   12,    4,    7,
       35,    7,   20,   15,   20,   12,   20,    7,   20
    } ;

static yyconst short int yy_accept[1669] =
    {   0,
        1,    1,    1,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    4,    6,    9,   11,   13,   16,   19,
       22,   25,   28,   31,   33,   35,   37,   39,   41,   43,
       45,   47,   49,   51,   53,   55,   57,   59,   61,   63,
       65,   67,   69,   71,   73,   75,   78,   81,   83,   85,
       88,   92,   96,  100,  104,  107,  110,  113,  116,  119,
      122,  125,  128,  131,  134,  137,  140,  143,  146,  149,
      152,  155,  158,  161,  164,  167,  170,  174,  177,  180,
      183,  185,  188,  190,  193,  196,  199,  202,  205,  208,
      210,  212,  214,  216,  218,  220,  222,  224,  226,  228,

      230,  232,  234,  236,  238,  240,  242,  244,  246,  248,
      250,  252,  255,  257,  259,  261,  265,  268,  271,  274,
      277,  280,  284,  287,  290,  292,  294,  296,  298,  300,
      302,  304,  306,  308,  310,  312,  314,  316,  318,  320,
      322,  324,  326,  328,  330,  332,  334,  338,  341,  343,
      345,  349,  352,  354,  358,  362,  365,  368,  371,  374,
      377,  380,  383,  386,  389,  392,  395,  398,  401,  404,
      407,  410,  413,  416,  419,  422,  425,  428,  432,  435,
      438,  440,  444,  447,  449,  452,  455,  458,  462,  465,
      468,  470,  472,  474,  476,  478,  480,  482,  484,  486,

      488,  490,  492,  494,  496,  498,  500,  502,  504,  506,
      508,  510,  512,  516,  519,  521,  523,  524,  525,  526,
      527,  528,  529,  530,  531,  532,  533,  534,  535,  536,
      537,  538,  539,  540,  541,  542,  543,  544,  545,  546,
      547,  548,  549,  550,  551,  552,  553,  554,  555,  556,
      557,  558,  559,  561,  563,  565,  567,  569,  571,  573,
      575,  577,  579,  581,  583,  585,  587,  589,  591,  593,
      595,  597,  599,  601,  603,  605,  607,  609,  611,  613,
      614,  615,  616,  618,  620,  622,  624,  626,  628,  629,
      629,  631,  633,  635,  637,  639,  641,  643,  645,  647,

      649,  651,  653,  655,  657,  659,  661,  663,  665,  667,
      669,  671,  673,  675,  677,  679,  681,  683,  685,  687,
      688,  690,  692,  694,  694,  696,  697,  698,  700,  701,
      702,  703,  704,  705,  706,  707,  708,  709,  710,  711,
      712,  713,  714,  715,  716,  717,  718,  719,  720,  721,
      722,  723,  724,  725,  726,  727,  729,  730,  731,  732,
      733,  735,  736,  736,  738,  739,  741,  743,  745,  747,
      749,  751,  753,  755,  757,  759,  761,  763,  765,  767,
      769,  771,  773,  775,  777,  779,  781,  783,  785,  787,
      789,  791,  793,  795,  797,  799,  801,  801,  803,  804,

      804,  806,  807,  808,  809,  810,  811,  812,  813,  814,
      815,  816,  817,  818,  819,  820,  821,  822,  823,  824,
      825,  826,  827,  828,  829,  830,  831,  832,  833,  835,
      836,  837,  838,  839,  840,  841,  842,  843,  844,  846,
      847,  848,  849,  850,  851,  852,  853,  854,  855,  856,
      857,  858,  859,  860,  861,  862,  863,  864,  865,  866,
      867,  868,  869,  870,  871,  873,  875,  877,  879,  881,
      883,  886,  888,  890,  892,  894,  896,  898,  900,  902,
      904,  906,  908,  910,  912,  914,  916,  918,  920,  922,
      924,  926,  928,  930,  932,  934,  936,  939,  942,  944,

      946,  948,  950,  952,  954,  957,  959,  961,  963,  965,
      967,  969,  971,  973,  975,  977,  979,  981,  983,  985,
      987,  989,  991,  993,  995,  997,  999, 1001, 1003, 1005,
     1007, 1010, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025,
     1028, 1030, 1032, 1034, 1036, 1038, 1040, 1042, 1044, 1046,
     1048, 1050, 1052, 1054, 1056, 1058, 1060, 1062, 1064, 1066,
     1068, 1070, 1072, 1074, 1076, 1078, 1080, 1083, 1085, 1087,
     1089, 1091, 1093, 1095, 1097, 1099, 1102, 1104, 1106, 1108,
     1110, 1112, 1114, 1116, 1118, 1120, 1122, 1124, 1126, 1128,
     1130, 1132, 1134, 1136, 1138, 1140, 1142, 1144, 1146, 1148,

     1150, 1152, 1155, 1156, 1158, 1160, 1162, 1164, 1166, 1168,
     1170, 1173, 1175, 1177, 1179, 1181, 1183, 1185, 1187, 1189,
     1191, 1193, 1195, 1197, 1199, 1201, 1203, 1205, 1207, 1209,
     1211, 1213, 1215, 1217, 1219, 1221, 1223, 1225, 1228, 1230,
     1232, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242,
     1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252,
     1253, 1254, 1255, 1256, 1257, 1259, 1260, 1261, 1262, 1263,
     1264, 1265, 1266, 1267, 1269, 1271, 1273, 1275, 1277, 1279,
     1281, 1283, 1285, 1287, 1289, 1291, 1293, 1295, 1297, 1299,
     1301, 1303, 1305, 1307, 1309, 1311, 1313, 1315, 1318, 1320,

     1322, 1324, 1326, 1328, 1330, 1332, 1334, 1337, 1339, 1341,
     1343, 1345, 1347, 1349, 1351, 1353, 1355, 1357, 1359, 1361,
     1363, 1365, 1367, 1369, 1371, 1373, 1375, 1377, 1379, 1381,
     1383, 1385, 1387, 1390, 1392, 1394, 1396, 1398, 1400, 1402,
     1404, 1406, 1409, 1411, 1413, 1415, 1417, 1419, 1421, 1423,
     1425, 1427, 1429, 1431, 1433, 1435, 1437, 1439, 1441, 1443,
     1445, 1447, 1449, 1451, 1453, 1455, 1458, 1460, 1462, 1464,
     1466, 1468, 1470, 1472, 1474, 1477, 1479, 1481, 1483, 1485,
     1487, 1489, 1491, 1493, 1495, 1497, 1499, 1501, 1503, 1505,
     1507, 1509, 1511, 1513, 1515, 1517, 1519, 1521, 1523, 1526,

     1528, 1530, 1532, 1534, 1536, 1538, 1540, 1542, 1545, 1547,
     1549, 1551, 1553, 1555, 1557, 1559, 1561, 1563, 1565, 1567,
     1569, 1571, 1573, 1575, 1577, 1579, 1581, 1583, 1585, 1587,
     1589, 1591, 1594, 1596, 1598, 1600, 1602, 1604, 1606, 1608,
     1610, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621,
     1622, 1623, 1624, 1626, 1627, 1628, 1629, 1630, 1631, 1632,
     1633, 1634, 1635, 1636, 1637, 1638, 1639, 1641, 1642, 1643,
     1644, 1646, 1647, 1649, 1651, 1653, 1655, 1657, 1659, 1661,
     1663, 1665, 1667, 1670, 1672, 1674, 1676, 1678, 1680, 1682,
     1684, 1686, 1688, 1690, 1693, 1695, 1697, 1699, 1702, 1704,

     1707, 1709, 1711, 1713, 1715, 1717, 1719, 1721, 1723, 1725,
     1727, 1729, 1731, 1733, 1736, 1738, 1740, 1742, 1744, 1746,
     1748, 1750, 1752, 1754, 1756, 1758, 1760, 1762, 1765, 1767,
     1769, 1771, 1774, 1776, 1779, 1781, 1783, 1785, 1787, 1789,
     1791, 1793, 1795, 1797, 1799, 1801, 1804, 1806, 1808, 1810,
     1812, 1814, 1816, 1818, 1820, 1822, 1824, 1826, 1828, 1830,
     1833, 1835, 1837, 1839, 1842, 1844, 1847, 1849, 1851, 1853,
     1855, 1857, 1859, 1861, 1863, 1865, 1868, 1870, 1872, 1874,
     1876, 1878, 1880, 1882, 1884, 1886, 1888, 1891, 1893, 1895,
     1897, 1900, 1902, 1905, 1907, 1909, 1911, 1913, 1915, 1917,

     1919, 1921, 1923, 1925, 1927, 1930, 1932, 1934, 1936, 1938,
     1940, 1942, 1944, 1946, 1948, 1950, 1952, 1954, 1956, 1959,
     1961, 1963, 1965, 1968, 1970, 1973, 1974, 1975, 1976, 1977,
     1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987,
     1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997,
     1998, 1999, 2000, 2002, 2004, 2006, 2008, 2010, 2012, 2014,
     2016, 2018, 2020, 2022, 2024, 2026, 2028, 2030, 2032, 2034,
     2036, 2038, 2040, 2042, 2044, 2046, 2048, 2051, 2053, 2055,
     2057, 2059, 2061, 2063, 2065, 2067, 2069, 2071, 2073, 2075,
     2077, 2079, 2081, 2083, 2085, 2087, 2089, 2091, 2093, 2095,

     2097, 2099, 2101, 2103, 2105, 2107, 2109, 2111, 2113, 2115,
     2117, 2119, 2121, 2123, 2125, 2127, 2129, 2131, 2133, 2135,
     2137, 2139, 2141, 2143, 2145, 2147, 2149, 2151, 2153, 2155,
     2157, 2159, 2161, 2163, 2165, 2167, 2169, 2171, 2173, 2175,
     2177, 2179, 2181, 2183, 2185, 2187, 2189, 2191, 2193, 2195,
     2197, 2199, 2201, 2203, 2205, 2207, 2209, 2211, 2213, 2215,
     2217, 2219, 2221, 2223, 2225, 2227, 2229, 2231, 2233, 2235,
     2237, 2239, 2241, 2243, 2245, 2247, 2249, 2251, 2253, 2255,
     2257, 2259, 2261, 2262, 2263, 2264, 2266, 2267, 2268, 2269,
     2270, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279,

     2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2289, 2292,
     2294, 2296, 2298, 2300, 2302, 2304, 2306, 2308, 2310, 2312,
     2314, 2316, 2318, 2320, 2322, 2324, 2326, 2328, 2330, 2332,
     2334, 2337, 2339, 2341, 2343, 2345, 2347, 2349, 2351, 2353,
     2355, 2357, 2359, 2361, 2363, 2365, 2367, 2369, 2371, 2373,
     2375, 2377, 2379, 2381, 2383, 2385, 2388, 2390, 2392, 2394,
     2396, 2398, 2400, 2402, 2404, 2406, 2408, 2410, 2412, 2414,
     2416, 2418, 2420, 2422, 2424, 2426, 2428, 2430, 2432, 2435,
     2437, 2439, 2441, 2443, 2445, 2447, 2449, 2451, 2453, 2455,
     2457, 2459, 2461, 2463, 2465, 2467, 2469, 2471, 2473, 2475,

     2477, 2480, 2482, 2484, 2486, 2488, 2490, 2492, 2494, 2496,
     2498, 2500, 2502, 2504, 2506, 2508, 2510, 2512, 2514, 2516,
     2518, 2520, 2522, 2523, 2524, 2525, 2526, 2527, 2529, 2530,
     2531, 2532, 2532, 2533, 2534, 2535, 2536, 2537, 2538, 2539,
     2540, 2541, 2543, 2545, 2547, 2549, 2551, 2554, 2556, 2558,
     2560, 2561, 2563, 2565, 2567, 2569, 2571, 2573, 2575, 2577,
     2579, 2581, 2583, 2585, 2587, 2589, 2592, 2594, 2596, 2598,
     2599, 2601, 2603, 2605, 2607, 2609, 2611, 2613, 2615, 2617,
     2619, 2621, 2623, 2625, 2627, 2630, 2632, 2634, 2636, 2637,
     2639, 2641, 2643, 2645, 2647, 2649, 2651, 2653, 2655, 2657,

     2659, 2661, 2663, 2665, 2668, 2670, 2672, 2674, 2675, 2677,
     2679, 2681, 2683, 2685, 2687, 2689, 2691, 2693, 2695, 2697,
     2699, 2701, 2703, 2706, 2708, 2710, 2712, 2713, 2715, 2717,
     2719, 2721, 2723, 2725, 2727, 2729, 2731, 2732, 2733, 2734,
     2735, 2736, 2737, 2738, 2739, 2739, 2741, 2742, 2744, 2745,
     2747, 2749, 2750, 2752, 2754, 2756, 2758, 2760, 2762, 2764,
     2766, 2768, 2769, 2772, 2774, 2777, 2779, 2782, 2785, 2787,
     2790, 2793, 2795, 2797, 2799, 2801, 2803, 2805, 2807, 2809,
     2810, 2813, 2815, 2818, 2820, 2823, 2826, 2828, 2831, 2834,
     2836, 2838, 2840, 2842, 2844, 2846, 2848, 2850, 2851, 2854,

     2856, 2859, 2861, 2864, 2867, 2869, 2872, 2875, 2877, 2879,
     2881, 2883, 2885, 2887, 2889, 2890, 2893, 2895, 2898, 2900,
     2903, 2906, 2908, 2911, 2914, 2916, 2918, 2920, 2922, 2924,
     2926, 2928, 2930, 2931, 2934, 2936, 2939, 2941, 2944, 2947,
     2949, 2952, 2955, 2956, 2957, 2958, 2959, 2960, 2961, 2962,
     2962, 2964, 2966, 2968, 2970, 2972, 2974, 2976, 2978, 2979,
     2982, 2985, 2988, 2990, 2992, 2994, 2996, 2998, 3000, 3002,
     3003, 3006, 3009, 3012, 3014, 3016, 3018, 3020, 3022, 3024,
     3026, 3027, 3030, 3033, 3036, 3038, 3040, 3042, 3044, 3046,
     3047, 3050, 3053, 3056, 3058, 3060, 3062, 3064, 3066, 3068,

     3070, 3071, 3074, 3077, 3080, 3082, 3083, 3084, 3085, 3086,
     3086, 3089, 3091, 3093, 3094, 3097, 3099, 3101, 3103, 3105,
     3106, 3109, 3111, 3113, 3115, 3117, 3118, 3121, 3123, 3125,
     3126, 3129, 3131, 3133, 3135, 3137, 3138, 3139, 3140, 3140,
     3142, 3143, 3145, 3147, 3148, 3150, 3152, 3153, 3155, 3156,
     3158, 3160, 3161, 3162, 3162, 3163, 3165, 3166, 3168, 3169,
     3170, 3172, 3173, 3174, 3176, 3178, 3180, 3180
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    7,    7,    7,    1,    8,
        9,    7,    7,   10,   11,    7,    1,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   13,    1,    7,
        7,    7,    7,    7,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       23,   30,   31,   32,   33,   34,   23,   35,   36,   23,
        7,    1,    7,    7,   37,    1,   38,   23,   39,   40,

       41,   42,   23,   43,   44,   23,   23,   45,   46,   47,
       48,   49,   23,   50,   51,   52,   53,   54,   55,   23,
       23,   23,    7,    7,    7,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[56] =
    {   0,
        1,    1,    2,    3,    1,    4,    4,    4,    4,    3,
        5,    6,    1,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6
    } ;

static yyconst short int yy_base[1691] =
    {   0,
        0,   54,  105,  159,  210,  264,  315,  369,  420,  474,
      525,  579, 5361, 5362, 5358, 5362, 5356, 5362, 5362, 5362,
     5362, 5362, 5346,    0, 5327, 5335, 5337,   30, 5329, 5321,
     5334, 5323, 5336, 5319,   33, 5320, 5311, 5332, 5304,   23,
     5299, 5295, 5304, 5293, 5299,   60,    0,   49,   38,    0,
        0,    0,    0, 5327,   65,  160,   76,   84,  167,  173,
      265,  271,  180,  277,  370,  376,  383,  475,  287,  481,
      580,  586,  592,  600,  606,  614,  301,  488,  496,  650,
       77, 5362, 5335,   92,   96,   97,  160,  168,  191,  701,
      714,   48,  174,  170,  171,  177,  251,  279,   74, 5307,

      373,  280,  344,  169,  356,  358,  363,  461,  237,  468,
      374,  410,  596,  602,    0,  414, 5362,  475,    0,    0,
        0, 5362,    0, 5324,  744,  757,  787,  808,  826,  608,
      485,  642,  486,  569,  607,  637,  617,  612,  651,  639,
      646,  640,  265,  652,  458,  656,  726,  409,  712,  734,
      692, 5362, 5332,    0, 5322, 5322,  257,  497,   57,  706,
      591,  638,  618,  671,  395,  724,  765,  720,  677,  678,
      693,  764,  726,  571,  745,  725,  731,  775,  790,  794,
        0,  820, 5362, 5329,    0,    0,    0, 5362,    0, 5319,
      861,  874,  904,  925,  943,  811,  816,  822,  861,  838,

      820,  865,  866,  887,  881,  894,  920,  926,  829,  930,
      893,  939,  973,  580,  955,  937, 5328, 5362, 5317,    0,
     5314, 5313,  755,  780, 5304,  816, 5307, 5290, 5296, 5296,
     5299, 5306, 5297, 5304,  813, 5291, 5296, 5273, 5263, 5274,
     5264,  262, 5264, 5257, 5258,  801,    0,    0, 5279, 5293,
      833,    0, 5294,  985,  991, 1000, 1009, 1015, 1028, 1035,
     1046, 1059, 1065, 1071, 1077, 1094, 1103, 1109, 1120, 1126,
     1133, 1148, 1154, 1160, 1166, 1172, 1178, 1185, 1195,  369,
     5362,  894, 1214, 1222, 1234, 1241, 1250, 1263,  856,  935,
     5362, 1057, 5275,  872,  889, 1000,  995,  951,  932,  971,

     1026,  957, 1032,  973,  910, 1059, 1061, 1091, 1064,  621,
     1003, 1092,  974,  471, 1108,  824, 1094, 1100, 1094, 1102,
     1120, 1168, 1181, 5302, 1232, 5362, 1263, 5362, 1198, 1314,
     1327, 1341, 1355, 1256, 1261, 1265, 1279, 1272, 1280, 1346,
     1351, 1362, 1366, 1373, 1380, 1381, 1386, 1394, 1395, 1340,
     1399, 1400, 1413, 1414, 1420, 1450, 1335, 1439, 1443, 1447,
     1274, 5362, 5300, 5362,    0, 5290, 5290, 1037, 1209, 1450,
     1423,  896, 1466, 1177, 1210, 1186, 1291, 1215, 1387, 1240,
     1424, 1284, 1437, 1293, 1244, 1307, 1383,  732, 1294, 1165,
     1271, 1448, 1480, 1084, 1474, 1464, 5298, 1489, 5362, 5296,

     5362, 1485, 1515, 1528, 1542, 1556, 1549, 1481, 1560, 1477,
     1563, 1482, 1564, 1577, 1584, 1583, 1590, 1601, 1597, 1605,
     1608, 1612, 1616, 1623, 1627, 1638, 1630, 1641, 1672, 1536,
     1541, 1665, 1662, 5271, 5270, 5282, 5263, 5278, 5267, 5262,
     5259, 5270, 5261, 5262, 5269, 5255, 5267, 5266, 5267, 5255,
     5248, 5256, 5247, 5263, 5246, 5238, 5223, 5226, 5235, 1464,
     5220, 5231, 5218, 5217,    0, 1691, 1697, 1703, 1714, 1720,
     1726, 1732, 1742, 1748, 1758, 1764, 1770, 1776, 1785, 1791,
     1804, 1810, 1816, 1822, 1832, 1844, 1854, 1860, 1866, 1872,
     1881, 1888, 1894, 1900, 1906, 1915, 1921, 1928, 1942, 1475,

     1546, 1337, 1495, 1373, 1300, 5238, 1522, 1580, 1556, 1390,
     1360, 1434, 1501, 1541, 1411, 1621, 1632, 1140, 1608, 1474,
     1656, 1652, 1581, 1659, 1776, 1804, 1592, 1765, 1643, 1728,
     5237, 5264, 1824, 1813, 1914, 1925, 1941, 1942, 1946, 1950,
     1959, 1963, 1967, 1972, 1978, 1987, 1983, 1992, 2001, 2006,
     2007, 1998, 2020, 2014, 2033, 2028, 2034, 2037, 2042, 2048,
     2051, 2056, 2062, 2069, 2078, 2074, 2084, 2085, 2098, 2105,
     1733, 1734, 1705, 1669, 1731, 1642,  795, 1824, 1837,  931,
     1704, 1242, 1873, 1790, 1875, 1952, 1953, 1982, 1521, 1859,
     2013, 2029, 1946, 1566, 1834, 2031, 2085, 1752,  727, 1914,

     2002, 5254, 5262, 2108, 2113, 2114, 2119, 2133, 2134, 2138,
     2142, 2151, 2155, 2159, 2164, 2170, 2179, 2175, 2184, 2193,
     2198, 2199, 2190, 2212, 2206, 2225, 2220, 2226, 2229, 2234,
     2240, 2243, 2248, 2254, 2261, 2270, 2266, 2276, 2277, 2290,
     2297, 5247, 5246, 5228, 5239, 5246, 5230, 5221, 5219, 5224,
     5224, 5240, 5227, 2042, 5238, 5223, 5231, 5226, 5222, 5209,
     5208, 5216, 5230, 5189,    0, 5195, 5188, 5193, 5190, 5191,
     5193, 5194, 5191,    0, 2323, 2329, 2335, 2343, 2349, 2363,
     2369, 2375, 2386, 2392, 2400, 2412, 2418, 2427, 2435, 2445,
     2458, 2464, 2470, 2476, 2484, 2490, 2508, 2514, 2520, 2526,

     2533, 2539, 2545, 2551, 2561, 2574, 2589, 2597, 2607, 1969,
     2076, 2089, 2020, 2110, 2121, 1571, 2081, 2095, 5203, 2142,
     2175, 2145, 2146, 2220, 2065, 2212, 2236, 2254, 2273, 2284,
     2203, 2107, 5202, 2161, 2268, 2272, 2285, 2281, 2245, 2349,
     2323, 5201, 2429, 2555, 2428, 2544, 2475, 2591, 2605, 2570,
     2385, 2608, 2613, 2621, 2616, 2630, 2635, 2638, 2641, 2646,
     2649, 2654, 2665, 2668, 2669, 2673, 2682, 2686, 2687, 2695,
     2690, 2701, 2706, 2710, 2721, 2399, 2489, 2314, 2352, 2348,
     2374, 1972, 2209, 2221, 2419, 2354, 2499, 2498, 2376, 2428,
     2306, 2527, 2565, 2642, 2671, 2581, 2610, 2421, 5219, 2497,

     2047, 2566, 2507, 2582, 2385, 1342, 2647, 5218, 2726, 2730,
     2729, 2735, 2750, 2746, 2749, 2753, 2757, 2764, 2778, 2773,
     2786, 2793, 2792, 2807, 2808, 2815, 2812, 2816, 2823, 2837,
     2829, 2836, 2840, 2843, 2844, 2858, 2862, 2869, 2873, 2878,
     2865, 5207, 5209, 5201, 5212, 5362, 5197, 5186, 5196, 5208,
     5183, 5362,    0, 5362, 5201, 5362, 5186, 5204, 5182, 5183,
     5198, 5196, 5187, 5362, 5166, 5161,    0, 5165, 5156, 5163,
     2648, 5160, 2732, 2909, 2916, 2929, 2935, 2944, 2950, 2956,
     2966, 2977, 2983, 2989, 2995, 3002, 3010, 3017, 3023, 3029,
     3044, 3050, 3056, 3064, 3070, 3076, 3082, 3090, 3100, 3109,

     3126, 3116, 2780, 2677, 2778, 2697, 2672, 2704, 2759, 2625,
     2803, 2783, 2874, 5175, 2881, 2881, 2899, 2896, 2919, 2737,
     2899, 2784, 2840, 2880, 2943, 2834, 2721, 5174, 2889, 2990,
     2936, 2992, 2456, 3013, 3073, 3120, 3123, 3128, 5201, 3134,
     3137, 3141, 3156, 3152, 5200, 3081, 5199, 3159, 5198, 3163,
     3167, 3172, 3178, 3183, 3194, 3197, 5197, 3186, 3189, 3205,
     3208, 3211, 3214, 3225, 3222, 3228, 2949, 2958, 3049, 3108,
     3102, 2902, 2967, 3208, 3125, 5187, 2994, 3034, 3235, 3069,
     3147, 3239, 1899, 3224, 3249, 3037, 5186, 2817, 3132, 3129,
     3221, 3218, 3250, 3246, 3253, 3267, 3266, 5194, 3280, 3271,

     3284, 3293, 3297, 5193, 3298, 5192, 3301, 5191, 3304, 3312,
     3318, 3319, 3326, 3327, 3334, 5190, 3335, 3341, 3342, 3348,
     3355, 3356, 3362, 3370, 3377, 3187, 5178, 5158, 5362, 5158,
     5162, 5156, 5362, 5170, 5155, 5171, 5362, 5169, 5169, 5153,
     5162, 5166, 5126, 5139, 5126, 5137, 5124, 5135, 5131, 5123,
     5132, 5128, 3413, 3427, 3435, 3441, 3403, 3447, 3453, 3468,
     3474, 3482, 3493, 3501, 3507, 3513, 3524, 3530, 3536, 3542,
     3548, 3554, 3563, 3576, 3582, 3588, 3594, 3257, 3163, 3346,
     3393, 2600, 3263, 3309, 3400, 3288, 5138, 3375, 3411, 3368,
     3415, 3395, 3409, 3438, 3440, 3243, 3271, 3427, 3436, 3433,

     2682, 2951, 3465, 3353, 3594, 3597, 3590, 5165, 3548, 3608,
     3611, 5164, 3616, 3619, 3633, 5163, 3622, 3641, 3637, 3640,
     3644, 3648, 3655, 3659, 3663, 3666, 3677, 3683, 3688, 3691,
     3692, 3595, 3553, 3462, 3486, 3547, 3650, 3512, 3516, 3604,
     2818, 3620, 3676, 3351, 3678, 3500, 3665, 3564, 3687, 3633,
     3688, 3694, 3570, 3702, 3707, 3715, 3718, 3722, 5162, 3726,
     3733, 3737, 5161, 3742, 3746, 3750, 5160, 3753, 3761, 3766,
     3769, 3770, 3774, 3777, 3783, 3790, 3791, 3794, 3798, 3805,
     3811, 3816, 5362, 5143, 5362,    0, 5128, 5128, 5138, 5129,
     5125, 5362, 5122, 5362, 5129, 5124, 5362, 5141, 5100, 5100,

     5097, 5098, 5096, 5095, 5098, 5093, 5092, 3852, 3858, 3865,
     3871, 3878, 3884, 3897, 3907, 3913, 3923, 3935, 3942, 3948,
     3954, 3960, 3966, 3972, 3978, 3988, 3994, 3814, 3625, 3842,
     5112, 3818, 3708, 3258, 3824, 3712, 3879, 3697, 3892, 3761,
     3808, 3897, 3832, 3454, 3720, 3858, 3781, 3896, 3907, 3821,
     3940, 3958, 5139, 3989, 5138, 3904, 3995, 4000, 4013, 4009,
     4017, 5137, 4022, 5132, 4031, 4028, 5127, 4047, 4042, 4046,
     4050, 4051, 4055, 4066, 4069, 4080, 4084, 3889, 5117, 3979,
     3844, 3916, 3993, 3914, 3906, 4005, 3749, 5112, 3971, 3965,
     4002, 4041, 4032, 4038, 4057, 4056, 4061, 5120, 4101, 5114,

     4095, 4108, 4114, 4122, 4119, 4115, 5109, 4130, 5108, 4133,
     4136, 5103, 4149, 4150, 4153, 4154, 4157, 4158, 4171, 4179,
     4185, 4186, 5085, 5074, 5067, 5073, 5056,    0, 5055, 5042,
     5033, 5024, 5008, 5010, 5011, 4998, 4988, 4970, 4975, 4966,
     4965, 4212, 4221, 4234, 4186, 4240, 4249, 4255, 4261, 4267,
     4976, 4275, 4284, 4294, 4300, 4306, 4312, 4322, 4330, 4336,
     4075, 4092, 4088, 4141, 4062, 4985, 4098, 3881, 4181, 4231,
     4106, 4126, 4247, 4204, 3982, 4264, 4194, 4294, 4297, 4321,
     4336, 4340, 4343, 4332, 4349, 4354, 4358, 4362, 3538, 4371,
     4376, 4377, 4380, 4384, 4385, 4398, 4401, 4402, 4110, 4286,

     4155, 4274, 4285, 5003, 4359, 4364, 4159, 4973, 4387, 4386,
     4399, 4401, 4201, 4408, 4412, 4414, 4415, 4416, 4432, 4439,
     4433, 4446, 4450, 4453, 4457, 4461, 4399, 4468, 4472, 4475,
     4476, 4479, 4483, 4492, 4496, 4499, 4999, 4981, 4996, 5362,
     4980, 4958, 4942, 4947, 4918,    0, 4882,    0, 4863,    0,
        0, 4873,    0,    0, 4531, 4546, 4552, 4560, 4566, 4572,
     4578, 4856, 4584, 4595, 4601, 4607, 4613, 4619, 4625, 4631,
     4640, 4444, 4853, 4470, 4439, 4504, 4511, 3774, 4229, 4639,
     4847, 4459, 4828, 4483, 4823, 4790, 4295, 4774, 4766, 4631,
     4636, 4639, 4784, 4644, 4650, 4655, 4664, 4515, 4658, 4671,

     4672, 4675, 4678, 4679, 4693, 4686, 4697, 4534, 4214, 4551,
     4518, 4538, 4643, 4650, 4721, 4736, 4585, 4727, 4606, 4703,
     4700, 2525, 4688, 4612, 4700, 4704, 4717, 4609, 4721, 4722,
     4726, 4737, 4651, 4708, 4741, 4742, 4745, 4746, 4750, 4759,
     4763, 4768, 5362, 4495, 5362, 4489, 4460, 4418, 4431, 4327,
        0,    0,    0, 4794, 4800, 4806, 4815, 4821, 4304, 4829,
     4835, 4841, 4716, 4033, 4740, 4564, 4750, 4292, 4754, 4814,
     4166, 4095, 4060, 4033, 4835, 3990, 4836, 4843, 4849, 4857,
     4580, 4842, 4856, 4862, 4820, 4849, 4772, 4268, 4846, 3915,
     3845, 3669, 3523, 3435, 4865, 3429, 4870, 4879, 4876, 4896,

     4694, 4871, 4885, 4892,    0, 3338, 5362, 3301, 5362, 3092,
     4911, 4922, 4928, 2989, 2938, 2850, 4922, 4780, 4936, 4940,
     4924, 4927, 2586, 4932, 2466, 4548, 2377, 4648, 4936, 2235,
     4931, 4935, 2183, 4954, 1874, 4787, 1776, 5362, 1623, 4963,
     1378, 4964, 4976, 4977, 4969, 1206, 4453, 4973, 1103, 4974,
     1085, 4946, 5362,  997,  973, 4993, 4997,  876, 4989,  687,
      644, 4994, 5362, 5002,  204,  161, 5362,   97, 5020, 5023,
     5026, 5032, 5038, 5044, 5050, 5056, 5062, 5068, 5070, 5072,
     5078, 5084, 5090, 5096, 5102, 5108, 5114, 5120, 5126, 5132
    } ;

static yyconst short int yy_def[1691] =
    {   0,
     1667,    1, 1667,    3, 1667,    5, 1667,    7, 1667,    9,
     1667,   11, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1668, 1668, 1668, 1668, 1668, 1668, 1668,
     1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668,
     1668, 1668, 1668, 1668, 1668, 1667, 1669, 1668, 1668, 1670,
     1670, 1670, 1670, 1670, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1672, 1671, 1671, 1671,
     1673, 1667, 1667, 1673, 1673, 1673, 1673, 1673, 1673, 1674,
     1674,   91,   91,   91,   91,   91,   91,   91,   91,   91,

       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91, 1675,   91,   91, 1676, 1667, 1667, 1667, 1676, 1676,
     1676, 1667, 1676, 1676, 1677, 1677, 1677, 1677, 1677,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129, 1667, 1678,  129,  129,
     1667, 1667, 1667, 1679, 1679, 1680, 1680, 1680, 1680, 1680,
     1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680,
     1680, 1680, 1680, 1680, 1680, 1680, 1680, 1667, 1680, 1680,
     1681, 1667, 1667, 1667, 1681, 1681, 1681, 1667, 1681, 1681,
     1682, 1682, 1682, 1682, 1682,  195,  195,  195,  195,  195,

      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195, 1667, 1683,  195,  195, 1667, 1667, 1667, 1668,
     1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668,
     1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668,
     1668, 1668, 1668, 1668, 1668, 1667, 1669, 1669, 1668, 1668,
     1668, 1670, 1670, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1684,
     1667, 1684, 1672, 1671, 1671, 1671, 1671, 1671, 1673, 1673,
     1667, 1673,   91,   91,   91,   91,   91,   91,   91,   91,

       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91, 1675, 1675,
       91,   91,   91, 1685, 1667, 1667, 1667, 1667, 1685, 1686,
     1686, 1686, 1686,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333, 1667, 1687,  333,  333,  333,
     1667, 1667, 1667, 1667, 1679, 1679, 1680, 1680, 1680, 1680,
     1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680,
     1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680,
     1680, 1680, 1667, 1680, 1680, 1680, 1688, 1667, 1667, 1667,

     1667, 1688, 1689, 1689, 1689, 1689,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406, 1667, 1690,
      406,  406,  406, 1668, 1668, 1668, 1668, 1668, 1668, 1668,
     1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668,
     1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668,
     1668, 1668, 1668, 1668, 1668, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,   91,

       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91, 1685, 1685,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333, 1687,  333,  333,  333,  333,
     1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680,
     1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680,
     1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680,

     1680, 1680, 1688, 1688,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406, 1690,  406,  406,  406,
      406, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668,
     1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668,
     1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668,
     1668, 1668, 1668, 1668, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,

     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333, 1680, 1680, 1680, 1680, 1680,
     1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680,
     1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680,

     1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406, 1668, 1668, 1668, 1668, 1667, 1668, 1668, 1668, 1668,
     1668, 1667, 1668, 1667, 1668, 1667, 1668, 1668, 1668, 1668,
     1668, 1668, 1668, 1667, 1668, 1668, 1668, 1668, 1668, 1668,
     1668, 1668, 1668, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,

     1671, 1671,   91,   91,   91,   91, 1673,   91,   91,   91,
       91,   91, 1673,   91, 1673,   91, 1673,   91,   91,   91,
       91,   91,   91,   91, 1673,   91,   91,   91,   91,   91,
       91,   91,   91,   91,  333,  333,  333,  333, 1685,  333,
      333,  333,  333,  333, 1685,  333, 1685,  333, 1685,  333,
      333,  333,  333,  333,  333,  333, 1685,  333,  333,  333,
      333,  333,  333,  333,  333,  333, 1680, 1680, 1680, 1680,
     1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680,
     1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680,
     1680, 1680, 1680,  406,  406,  406,  406, 1688,  406,  406,

      406,  406,  406, 1688,  406, 1688,  406, 1688,  406,  406,
      406,  406,  406,  406,  406, 1688,  406,  406,  406,  406,
      406,  406,  406,  406,  406, 1668, 1668, 1668, 1667, 1668,
     1668, 1668, 1667, 1668, 1668, 1668, 1667, 1668, 1668, 1668,
     1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668,
     1668, 1668, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671,   91,   91,   91,
     1673,   91,   91,   91, 1673,   91,   91,   91, 1673,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,

       91,   91,   91,   91,  333,  333,  333, 1685,  333,  333,
      333, 1685,  333,  333,  333, 1685,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680,
     1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680,
     1680, 1680, 1680, 1680, 1680,  406,  406,  406, 1688,  406,
      406,  406, 1688,  406,  406,  406, 1688,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406, 1667, 1668, 1667, 1668, 1668, 1668, 1668, 1668,
     1668, 1667, 1668, 1667, 1668, 1668, 1667, 1668, 1668, 1668,

     1668, 1668, 1668, 1668, 1668, 1668, 1668, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1673,   91, 1673,
       91,   91,   91,   91,   91,   91, 1673,   91, 1673,   91,
       91, 1673,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91, 1685,  333, 1685,  333,  333,  333,  333,  333,
      333, 1685,  333, 1685,  333,  333, 1685,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333, 1680, 1680, 1680,
     1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680,
     1680, 1680, 1680, 1680, 1680, 1680, 1680, 1688,  406, 1688,

      406,  406,  406,  406,  406,  406, 1688,  406, 1688,  406,
      406, 1688,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668,
     1668, 1667, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668,
     1668, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1670, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
       91,   91,   91,   91,   91,   91,   91,   91,   91, 1673,
       91,   91,   91,   91,   91,   91,   91,   91,   91,  333,
      333,  333,  333,  333,  333,  333,  333,  333, 1685,  333,
      333,  333,  333,  333,  333,  333,  333,  333, 1680, 1680,

     1680, 1680, 1680, 1680, 1680, 1680, 1680, 1679, 1680, 1680,
     1680, 1680, 1680, 1680, 1680, 1680, 1680,  406,  406,  406,
      406,  406,  406,  406,  406,  406, 1688,  406,  406,  406,
      406,  406,  406,  406,  406,  406, 1668, 1668, 1668, 1667,
     1668, 1668, 1668, 1668, 1667, 1668, 1668, 1668, 1668, 1668,
     1668, 1668, 1668, 1668, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1670, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671,   91,   91,   91, 1673,   91,   91,   91,   91, 1673,
       91,   91,   91,   91,   91,   91,   91,   91,   91,  333,
      333,  333, 1685,  333,  333,  333,  333, 1685,  333,  333,

      333,  333,  333,  333,  333,  333,  333, 1680, 1680, 1680,
     1680, 1680, 1680, 1680, 1679, 1680, 1680, 1680, 1680, 1680,
     1680, 1680, 1680, 1680,  406,  406,  406, 1688,  406,  406,
      406,  406, 1688,  406,  406,  406,  406,  406,  406,  406,
      406,  406, 1667, 1668, 1667, 1668, 1668, 1668, 1668, 1667,
     1668, 1668, 1668, 1671, 1671, 1671, 1671, 1671, 1670, 1671,
     1671, 1671, 1673,   91, 1673,   91,   91,   91,   91, 1673,
       91,   91,   91, 1685,  333, 1685,  333,  333,  333,  333,
     1685,  333,  333,  333, 1680, 1680, 1680, 1680, 1680, 1679,
     1680, 1680, 1680, 1688,  406, 1688,  406,  406,  406,  406,

     1688,  406,  406,  406, 1668, 1668, 1667, 1668, 1667, 1667,
     1671, 1671, 1671, 1670,   91,   91, 1673,   91, 1673, 1673,
      333,  333, 1685,  333, 1685, 1685, 1680, 1680, 1680, 1679,
      406,  406, 1688,  406, 1688, 1688, 1668, 1667, 1667, 1671,
     1670,   91, 1673, 1673,  333, 1685, 1685, 1680, 1679,  406,
     1688, 1688, 1667, 1667, 1670, 1673, 1673, 1685, 1685, 1679,
     1688, 1688, 1667, 1673, 1685, 1688,    0, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667
    } ;

static yyconst short int yy_nxt[5418] =
    {   0,
       14,   15,   16,   17,   18,   14,   14,   19,   20,   21,
       22,   23,   14,   24,   25,   26,   27,   28,   29,   24,
       24,   30,   24,   24,   31,   32,   33,   34,   35,   36,
       37,   38,   24,   24,   24,   24,   24,   24,   24,   39,
       40,   41,   24,   24,   24,   24,   42,   24,   43,   24,
       44,   24,   24,   24,   45,   46,  224,  232,  233,   47,
      239,  246,  249,  250,  225,  247,  234,  365,  295,  240,
      252,  252,  252,  252,  370,  252,  229,  293,  290,   48,
      290,  252,  252,  252,  252,  244,  252,  303,  251,  252,
      252,  252,  252,  290,  252,  290,  256,  290,  290,  290,

      290,  257,  220,  293,   49,   14,   15,   16,   17,   18,
       50,   50,   51,   52,   21,   53,   54,   14,   55,   56,
       57,   58,   59,   60,   55,   55,   61,   55,   55,   62,
       63,   64,   65,   66,   67,   68,   69,   55,   55,   55,
       55,   55,   55,   55,   70,   71,   72,   55,   55,   55,
       55,   73,   55,   74,   55,   75,   55,   55,   55,   76,
       46,  290,  397,  290,   77,  252,  252,  252,  252,  290,
      252,  290,  252,  252,  252,  252,   78,  252,  252,  252,
      252,  252,  310,  252,   79,  252,  252,  252,  252,  255,
      252,  296,  290,  258,  290,  299,  297,  260,  293,  293,

      293,  259,  292,  293,  298,  324,  293,  263,  300,   80,
       81,   15,   82,   83,   84,   81,   81,   85,   86,   87,
       88,   89,   81,   90,   91,   92,   93,   94,   95,   90,
       90,   96,   90,   90,   97,   98,   99,  100,  101,  102,
      103,  104,   90,   90,   90,   90,   90,   90,   90,  105,
      106,  107,   90,   90,   90,   90,  108,   90,  109,   90,
      110,   90,   90,   90,  111,   46,  293,  365,  301,  112,
      252,  252,  252,  252,  316,  252,  252,  252,  252,  252,
      293,  252,  252,  252,  252,  252,  368,  252,  262,  113,
      264,  330,  252,  252,  252,  252,  261,  252,  460,  330,

      271,  280,  280,  281,  282,  280,  302,  308,  293,  293,
      280,  461,  352,  280,  114,  115,  116,  117,  118,  119,
      115,  115,  120,  121,  122,  123,  124,  115,  125,  126,
      127,  128,  129,  130,  125,  125,  131,  125,  125,  132,
      133,  134,  135,  136,  137,  138,  139,  125,  125,  125,
      125,  125,  125,  125,  140,  141,  142,  125,  125,  125,
      125,  143,  125,  144,  125,  145,  125,  125,  125,  146,
      147,  281,  282,  293,  148,  252,  252,  252,  252,  309,
      252,  252,  252,  252,  252,  293,  252,  293,  252,  252,
      252,  252,  293,  252,  149,  312,  311,  305,  306,  265,

      266,  267,  293,  293,  313,  365,  307,  314,  377,  268,
      269,  320,  248,  320,  318,  325,  326,  327,  248,  150,
       14,  151,  152,  153,   18,   14,   14,   19,   20,   21,
      154,  155,   14,  156,  157,  158,  159,  160,  161,  156,
      156,  162,  156,  156,  163,  164,  165,  166,  167,  168,
      169,  170,  156,  156,  156,  156,  156,  156,  156,  171,
      172,  173,  156,  156,  156,  156,  174,  156,  175,  156,
      176,  156,  156,  156,  177,  178,  327,  328,  327,   47,
      252,  252,  252,  252,  330,  252,  252,  252,  252,  252,
      293,  252,  330,  252,  252,  252,  252,  293,  252,  179,

      293,  252,  252,  252,  252,  354,  252,  365,  315,  285,
      270,  330,  330,  339,  284,  317,  337,  369,  525,  330,
      330,  272,  259,  263,  180,  181,  182,  183,  184,  185,
      181,  181,  186,  187,  188,  189,  190,  181,  191,  192,
      193,  194,  195,  196,  191,  191,  197,  191,  191,  198,
      199,  200,  201,  202,  203,  204,  205,  191,  191,  191,
      191,  191,  191,  191,  206,  207,  208,  191,  191,  191,
      191,  209,  191,  210,  191,  211,  191,  191,  191,  212,
      213,  365,  340,  248,  214,  252,  252,  252,  252,  248,
      252,  252,  252,  252,  252,  330,  252,  252,  252,  252,

      252,  365,  252,  330,  215,  252,  252,  252,  252,  321,
      252,  252,  252,  252,  252,  373,  252,  273,  389,  252,
      252,  252,  252,  302,  252,  293,  274,  322,  365,  216,
      275,  293,  336,  330,  330,  375,  341,  277,  330,  276,
      521,  330,  330,  330,  345,  397,  330,  346,  365,  317,
      293,  330,  323,  278,  279,  252,  252,  252,  252,  338,
      252,  342,  343,  330,  347,  330,  330,  286,  330,  374,
      344,  330,  330,  330,  330,  287,  330,  330,  330,  348,
      330,  365,  330,  349,  351,  330,  330,  365,  365,  353,
      330,  384,  350,  361,  362,  363,  355,  278,  376, 1663,

      288,  289,  290,  365,  290,  289,  289,  289,  289,  289,
      289,  289,  383,  289,  289,  290,  365,  290,  289,  289,
      289,  289,  289,  289,  289,  358,  289,  356,  326,  327,
      365,  247,  371,  385,  365,  365,  365,  365,  330,  339,
      372,  365,  365,  294,  324,  324,  330,  382,  324,  324,
      324,  324,  324,  378,  324,  365,  324,  324,  324,  359,
      330,  324,  324,  324,  324,  324,  806,  324,  330,  324,
      388,  392,  391,  436,  365,  365,  393,  362,  363,  596,
      247,  354,  390,  437,  360,  438,  331,  324,  324,  379,
      380,  324,  324,  324,  324,  324,  439,  324,  381,  324,

      365,  386,  246,  394,  365,  365,  247,  332,  324,  324,
      387,  440,  324,  324,  324,  324,  324,  376,  324,  395,
      324,  398,  399,  400,  782,  333,  324,  324,  452,  442,
      324,  324,  324,  324,  324,  409,  324,  403,  324,  411,
      453,  391,  403,  443,  396,  403,  403,  410,  403,  414,
      403,  413,  334,  293,  403,  403,  403,  290,  250,  290,
      335,  397,  397,  403,  403,  397,  397,  397,  397,  397,
      528,  397,  403,  397,  397,  397,  425,  324,  397,  397,
      397,  397,  397,  251,  397,  500,  397,  403,  412,  415,
      416,  403,  403,  418,  420,  403,  281,  282,  417,  403,

      403,  293,  501,  404,  397,  397,  365,  403,  397,  397,
      397,  397,  397,  403,  397,  403,  397,  578,  293,  403,
      403,  403,  419,  515,  405,  397,  397,  403,  403,  397,
      397,  397,  397,  397,  421,  397,  290,  397,  290,  293,
      427,  365,  406,  397,  397,  508,  403,  397,  397,  397,
      397,  397,  403,  397,  403,  397,  403,  422,  785,  509,
      403,  293,  432,  403,  403,  403,  423,  426,  431,  407,
      424,  403,  507,  403,  429,  399,  400,  408,  247,  428,
      293,  403,  412,  512,  427, 1663,  293,  433,  510,  403,
      252,  252,  252,  252,  514,  252,  252,  252,  252,  252,

      293,  252,  293,  293,  466,  252,  252,  252,  252, 1663,
      252,  505,  524,  467,  252,  252,  252,  252,  502,  252,
      252,  252,  252,  252,  293,  252,  506,  468,  503,  293,
      504,  471,  293,  252,  252,  252,  252,  469,  252,  470,
      252,  252,  252,  252,  522,  252,  472,  365,  474,  473,
      571,  252,  252,  252,  252,  293,  252,  513,  290,  511,
      290,  293,  475,  476,  252,  252,  252,  252,  292,  252,
      252,  252,  252,  252,  517,  252,  252,  252,  252,  252,
      516,  252,  252,  252,  252,  252,  397,  252,  293,  520,
      293,  478,  477,  293,  365,  320,  479,  320,  480,  252,

      252,  252,  252,  320,  252,  320,  518,  481,  252,  252,
      252,  252,  602,  252,  252,  252,  252,  252,  519,  252,
      293,  293,  483,  293,  482,  252,  252,  252,  252,  293,
      252,  252,  252,  252,  252,  484,  252,  293,  252,  252,
      252,  252,  523,  252,  526, 1660,  529,  485,  531,  293,
      530,  486,  487,  252,  252,  252,  252,  527,  252,  252,
      252,  252,  252,  728,  252,  252,  252,  252,  252,  293,
      252,  252,  252,  252,  252,  365,  252,  252,  252,  252,
      252,  321,  252,  252,  252,  252,  252,  365,  252,  488,
      252,  252,  252,  252,  581,  252,  365,  293,  490,  324,

      252,  252,  252,  252,  489,  252,  322,  324,  492,  533,
      293,  599,  583,  491,  280,  280,  281,  282,  280,  365,
      365,  493,  572,  280,  494,  365,  280,  252,  252,  252,
      252,  323,  252,  325,  326,  327,  585,  495,  497,  252,
      252,  252,  252,  582,  252,  496,  252,  252,  252,  252,
      365,  252,  365,  472,  365,  252,  252,  252,  252,  787,
      252,  587,  498,  285,  327,  326,  327,  499,  252,  252,
      252,  252,  540,  252,  534,  361,  362,  363,  543,  534,
      286,  365,  542,  534,  534,  593,  534,  541,  287,  534,
      534,  534,  544,  534,  365,  534,  545,  534,  534,  589,

      534,  365,  534,  365,  365,  546,  547,  534,  534,  534,
      534,  590,  592,  288,  532,  324,  584,  365,  532,  532,
      532,  532,  532,  600,  532,  715,  532,  532,  324,  293,
      597,  532,  532,  532,  532,  532,  357,  532,  248,  532,
      535,  532,  324,  598,  248,  532,  532,  532,  532,  532,
      712,  532,  365,  532,  536,  532,  324,  594,  534,  532,
      532,  532,  532,  532,  534,  532,  293,  532,  534,  534,
      534,  548,  549,  537,  534,  550,  534,  721,  559,  534,
      534,  534,  992,  538,  534,  539,  552,  551,  714,  293,
      534,  534,  534,  365,  534,  553,  534,  365,  534,  534,

      586,  534,  293,  534,  534,  556,  555,  554,  534,  534,
      534,  534,  534,  534,  534,  720,  534,  534,  534,  293,
     1655,  595,  534,  534,  534,  534,  725,  534,  534,  534,
      534,  534,  534,  365,  365,  557,  561,  588,  534,  576,
      293,  534,  534,  534,  534,  558,  560,  365,  534,  562,
      534,  356,  326,  327,  577,  247,  568,  534,  365,  563,
      365,  534,  591,  293,  722,  534,  564,  567,  573,  534,
      565,  534,  569,  534,  365,  534,  365,  534,  574,  579,
      575,  393,  362,  363,  365,  247,  397,  394,  730,  395,
      398,  399,  400,  580,  616,  605,  604,  570,  601,  605,

      605,  710,  613,  293,  293,  605,  668,  605,  618,  605,
      605,  605,  605,  669,  396,  603,  397,  670,  723,  603,
      603,  603,  603,  603,  293,  603,  713,  603,  603,  397,
      293,  365,  603,  603,  603,  603,  603,  430,  603,  248,
      603,  606,  603,  397,  794,  248,  603,  603,  603,  603,
      603,  293,  603,  717,  603,  607,  603,  397,  724,  605,
      603,  603,  603,  603,  603,  611,  603,  605,  603,  638,
      293,  605,  711,  614,  608,  293,  365,  605,  605,  605,
      612,  605,  605,  719,  609,  293,  610,  615,  605,  619,
      605,  605,  605,  605,  605,  605,  617,  621,  620,  718,

      293,  605,  605,  623,  622,  605,  909,  605,  605,  293,
      293,  605,  605,  605,  605,  605,  624,  799,  605,  605,
      605,  293,  626,  605,  627,  605,  605,  605,  625,  605,
      605,  605,  733,  605,  605,  605,  605,  293,  605,  729,
      605,  605,  605,  739,  605,  605,  605,  726,  605,  628,
      293,  605,  365,  605,  630,  605,  605,  605,  605,  605,
      605,  293,  629,  632,  727, 1654,  605,  781,  605,  605,
      631,  605,  293,  429,  399,  400,  633,  247,  639,  365,
      605,  293,  635,  605,  634,  293,  731,  640,  293,  732,
      605,  636,  605,  605,  741,  605,  252,  252,  252,  252,

      779,  252,  252,  252,  252,  252,  734,  252,  252,  252,
      252,  252,  641,  252,  365,  365,  677,  675,  778,  252,
      252,  252,  252,  676,  252,  252,  252,  252,  252,  786,
      252,  252,  252,  252,  252,  679,  252,  252,  252,  252,
      252,  365,  252,  365,  365,  678,  780,  252,  252,  252,
      252,  680,  252,  252,  252,  252,  252,  293,  252,  776,
      777,  681,  365,  252,  252,  252,  252,  683,  252,  252,
      252,  252,  252,  682,  252,  252,  252,  252,  252,  742,
      252,  252,  252,  252,  252,  684,  252,  686, 1653,  685,
      252,  252,  252,  252,  293,  252,  252,  252,  252,  252,

      365,  252,  688,  805,  740,  293,  687,  789,  689,  252,
      252,  252,  252,  735,  252,  252,  252,  252,  252,  690,
      252,  252,  252,  252,  252,  324,  252,  252,  252,  252,
      252,  534,  252,  293,  365,  533,  691,  252,  252,  252,
      252,  534,  252,  534,  365,  693,  736,  365,  692,  252,
      252,  252,  252,  737,  252,  783,  784,  738,  695,  252,
      252,  252,  252,  694,  252,  252,  252,  252,  252,  365,
      252,  252,  252,  252,  252,  397,  252,  252,  252,  252,
      252,  800,  252,  365,  696,  365,  252,  252,  252,  252,
      795,  252,  790,  252,  252,  252,  252,  697,  252,  252,

      252,  252,  252,  788,  252,  252,  252,  252,  252,  365,
      252,  252,  252,  252,  252, 1144,  252,  698,  700,  699,
      252,  252,  252,  252,  365,  252,  252,  252,  252,  252,
      701,  252,  534,  252,  252,  252,  252,  702,  252,  705,
      743,  703,  534,  534,  534,  704,  708,  252,  252,  252,
      252,  744,  252,  534,  745,  534,  365,  706,  709,  534,
      534,  747,  365,  365,  534,  807,  707,  791,  534,  534,
      534,  534,  534,  746,  534,  748,  534,  534,  534,  792,
      534,  534,  365,  798,  903,  534,  751,  534,  749,  534,
      534,  534,  365,  534,  750,  534,  534,  534,  293,  752,

      534,  534,  534,  753,  754,  534,  534,  972,  534,  756,
      534,  534,  365,  755,  793,  534,  534,  534,  757,  534,
      534,  758,  534,  365,  534,  534,  534,  796,  534,  534,
      760,  534,  534,  759,  534,  534,  534,  534,  534,  365,
      906,  365,  534,  761,  534,  762,  534,  763,  534,  293,
      534,  534,  534,  808,  854,  534,  534,  365,  764,  797,
      534,  534,  534,  534,  534,  534,  534,  534,  801,  534,
      534,  765,  534,  855,  534,  357,  534,  248,  534,  534,
      534,  534,  919,  248,  534,  768,  534,  534,  766,  767,
      534,  904,  534,  769,  293,  365,  534,  534,  987,  534,

      770,  773,  534,  534,  771,  293,  534,  772,  534,  397,
      293,  568,  534,  567,  534,  534,  534,  910,  293,  604,
      774,  905,  907,  534,  293,  911,  534,  802,  534,  775,
      569,  605,  605,  534,  803,  534,  293,  605,  804,  293,
      809,  605,  605,  605,  605,  810,  811,  605,  908,  605,
      293,  605,  605,  813,  913,  570,  605,  915,  917,  926,
      605,  605,  605,  605,  605,  812,  605,  814,  605,  605,
      605,  293,  605,  605,  293,  293,  916,  605,  817,  605,
      815,  605,  605,  605,  397,  605,  816,  605,  605,  605,
      293,  818,  605,  605,  605,  819,  820,  605,  605,  914,

      605,  822,  605,  605,  293,  821,  927,  605,  605,  605,
      823,  605,  605,  824,  605,  925,  605,  605,  605,  365,
      605,  605,  826,  605,  605,  825,  605,  605,  605,  605,
      605,  365,  293,  920,  605,  827,  605,  828,  605,  829,
      605,  293,  605,  605,  605,  973,  918,  605,  605,  293,
      830,  974,  605,  605,  605,  605,  605,  605,  605,  605,
      921,  605,  605,  831,  605,  293,  605,  430,  605,  248,
      605,  605,  605,  605,  293,  248,  605,  834,  605,  605,
      832,  833,  605,  293,  605,  835, 1649,  932,  605,  605,
      922,  605,  836,  839,  605,  605,  837,  293,  605,  838,

      605,  293,  293,  639,  605,  638,  605,  605,  605,  923,
      293,  924,  840,  293,  293,  605,  365,  929,  605,  928,
      605,  841,  640,  979,  365,  605,  931,  605,  252,  252,
      252,  252,  930,  252,  252,  252,  252,  252,  874,  252,
      252,  252,  252,  252,  875,  252,  969,  641,  252,  252,
      252,  252,  293,  252,  252,  252,  252,  252,  365,  252,
      846,  846,  365,  877,  365,  934,  852,  876,  252,  252,
      252,  252,  970,  252,  252,  252,  252,  252,  293,  252,
      252,  252,  252,  252,  365,  252,  365,  365,  856,  933,
      878,  252,  252,  252,  252,  365,  252,  252,  252,  252,

      252,  971,  252,  534,  879,  252,  252,  252,  252,  365,
      252,  880,  852,  534,  967,  943,  881,  252,  252,  252,
      252,  882,  252,  252,  252,  252,  252,  991,  252,  365,
      854,  365,  252,  252,  252,  252,  883,  252,  365,  856,
      252,  252,  252,  252,  935,  252,  534,  534,  975,  884,
      252,  252,  252,  252,  978,  252,  534,  534,  534,  534,
      937,  885,  886,  252,  252,  252,  252,  324,  252,  252,
      252,  252,  252,  985,  252,  252,  252,  252,  252,  887,
      252,  252,  252,  252,  252,  293,  252,  939,  888,  252,
      252,  252,  252,  534,  252,  252,  252,  252,  252,  365,

      252, 1102,  864,  534,  968,  534,  889,  365,  365,  365,
      854,  891,  890,  252,  252,  252,  252,  365,  252,  252,
      252,  252,  252,  976,  252,  252,  252,  252,  252,  977,
      252,  252,  252,  252,  252,  365,  252,  365,  252,  252,
      252,  252,  986,  252,  252,  252,  252,  252,  980,  252,
      252,  252,  252,  252,  989,  252,  252,  252,  252,  252,
      892,  252,  534, 1593,  938,  893,  252,  252,  252,  252,
      936,  252,  534,  534,  534,  365,  365,  894,  895,  252,
      252,  252,  252,  534,  252,  534,  896,  324,  534,  981,
      897,  365,  365,  898,  252,  252,  252,  252,  534,  252,

      534,  899,  252,  252,  252,  252,  942,  252,  984,  534,
      901,  988,  252,  252,  252,  252,  900,  252,  940,  534,
      365,  534,  864,  534,  878,  945,  534,  990,  947,  293,
     1232,  534,  902,  534,  534,  534,  534,  944,  534,  534,
      941,  534,  949,  534,  534,  946,  534,  948,  534,  534,
     1084,  534,  365,  534,  293,  951,  534,  365,  534,  534,
      534,  950,  952,  534,  534,  534,  534,  534,  534,  534,
      953,  534,  534,  290,  534,  290,  534,  534,  982,  534,
      957,  365,  534,  534,  534,  954,  534,  534, 1048,  993,
      955,  534,  956,  534, 1079,  534,  534,  534,  534,  534,

      534,  534, 1049,  534,  534,  534,  293,  983,  534, 1081,
      534,  293,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  958, 1249,  534,  534,  534,  293,  959,  534,  534,
     1082,  534,  961,  293,  534,  963,  534,  960,  534,  534,
      534,  994,  962,  964,  605,  995,  965,  605,  605,  534,
      293,  534,  966,  605,  605,  997,  605,  605,  605,  605,
      605,  996,  998,  605,  605,  605,  293,  605,  605, 1096,
     1090,  605, 1051,  999,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605, 1000,  605, 1052, 1002,  293, 1001,
     1004,  605,  605, 1003,  605, 1083,  605, 1005, 1006, 1092,

     1078,  605, 1080,  605,  605, 1008,  605,  293,  605,  293,
      605,  605,  293,  293,  605, 1085,  605, 1007, 1009, 1086,
      605,  605,  605,  605, 1010,  605,  605,  365,  365, 1011,
      605, 1285,  293,  605,  605,  605,  605,  605,  605, 1012,
      605,  605,  605,  605,  605,  605,  605,  605, 1013, 1016,
     1015,  605, 1014,  605,  605,  605, 1093,  605,  605,  605,
     1148,  605,  605,  293,  605,  605,  605,  605,  605,  293,
      605,  605,  605,  605,  605,  290,  605,  290, 1095, 1642,
      605, 1017,  290,  605,  290, 1018,  605,  605,  605, 1020,
      605,  605,  605,  605, 1019,  605,  605,  605, 1087,  605,

      290,  605,  290,  605, 1094, 1021,  605, 1022,  605,  293,
      293, 1023,  365, 1024,  252,  252,  252,  252,  293,  252,
     1025,  252,  252,  252,  252,  293,  252, 1088,  293, 1053,
     1091, 1089, 1097, 1054,  252,  252,  252,  252, 1136,  252,
      252,  252,  252,  252,  290,  252,  290, 1029,  293,  252,
      252,  252,  252, 1055,  252,  252,  252,  252,  252,  365,
      252,  252,  252,  252,  252,  293,  252,  293,  365, 1132,
     1056,  252,  252,  252,  252, 1133,  252,  365, 1033, 1099,
      293, 1058,  252,  252,  252,  252, 1057,  252,  252,  252,
      252,  252, 1137,  252,  252,  252,  252,  252, 1250,  252,

      252,  252,  252,  252,  365,  252, 1060,  252,  252,  252,
      252, 1139,  252, 1059, 1037,  252,  252,  252,  252,  293,
      252,  293,  252,  252,  252,  252, 1061,  252,  252,  252,
      252,  252, 1100,  252,  252,  252,  252,  252, 1064,  252,
     1641, 1098,  293, 1062,  365, 1065, 1101,  365, 1063,  252,
      252,  252,  252, 1103,  252,  252,  252,  252,  252,  365,
      252,  252,  252,  252,  252, 1140,  252, 1104, 1066,  252,
      252,  252,  252, 1134,  252,  252,  252,  252,  252,  365,
      252,  252,  252,  252,  252, 1147,  252,  252,  252,  252,
      252,  534,  252, 1105, 1067,  252,  252,  252,  252,  534,

      252,  534, 1141,  534, 1068,  252,  252,  252,  252,  534,
      252,  534,  365, 1069,  252,  252,  252,  252,  365,  252,
     1029,  252,  252,  252,  252, 1071,  252, 1070, 1135,  901,
     1072,  252,  252,  252,  252,  365,  252, 1106,  534,  365,
     1108,  534,  365, 1639, 1073, 1074,  534, 1107,  534, 1075,
      534,  534,  534,  534, 1077,  534,  534,  365,  534,  534,
     1109, 1138,  534, 1076,  534,  534, 1111,  534, 1112,  534,
      534,  534, 1150, 1110,  534, 1230, 1114,  534, 1142, 1116,
      534,  534,  534, 1149,  534,  534,  534,  534, 1113,  534,
      534,  534,  293,  534, 1115,  534,  534,  534, 1119, 1183,

      534,  534,  534, 1184,  534, 1117,  534,  534,  534, 1118,
     1120,  534,  534,  534,  534,  534,  534,  534,  365,  534,
     1033, 1121,  534,  534,  534,  534,  534,  534,  365,  534,
     1122,  365,  534,  534,  365,  534,  534, 1123,  534,  534,
      534,  534,  534,  534,  534,  365,  534, 1037, 1145,  365,
      534, 1124,  534,  534, 1143,  534,  534, 1126,  534,  365,
      365, 1151, 1125, 1153,  605, 1127, 1156, 1129, 1130, 1228,
     1157,  605,  293, 1229,  605, 1152,  605, 1364, 1159, 1128,
     1244,  605, 1131,  605,  605,  605,  293,  293, 1233,  605,
     1154, 1158,  293, 1146,  605,  605,  605,  605,  605,  605,

      293,  605,  605, 1235, 1155, 1163, 1160, 1161,  605, 1162,
      605,  605,  605, 1638,  605,  605,  605,  293, 1165,  605,
     1245,  605,  605,  605, 1167,  605,  605,  605,  605,  605,
      605,  605,  605, 1164,  605, 1166,  605,  605,  293, 1234,
      605, 1170,  605, 1171,  605,  605,  605,  605,  605,  605,
     1169, 1168,  605,  605,  605,  605,  605,  605, 1172,  605,
      605,  365,  605,  605,  605,  605,  605, 1637, 1287,  605,
      605,  605,  605,  605,  605,  293,  605, 1231,  605, 1173,
      605, 1238,  293,  605,  605,  605,  605, 1237,  605, 1174,
      605, 1175,  605, 1252,  290,  605,  290,  293,  605, 1177,

      605,  290, 1178,  290,  293,  605, 1176,  605,  252,  252,
      252,  252,  290,  252,  290, 1180, 1179, 1181,  252,  252,
      252,  252, 1240,  252,  293, 1183, 1241, 1239, 1211, 1208,
      397, 1182,  252,  252,  252,  252,  397,  252,  293, 1185,
      252,  252,  252,  252,  293,  252,  252,  252,  252,  252,
     1242,  252,  252,  252,  252,  252,  293,  252,  252,  252,
      252,  252,  293,  252, 1246,  293, 1209,  293, 1213,  293,
     1248, 1210,  365,  252,  252,  252,  252, 1212,  252,  252,
      252,  252,  252,  293,  252, 1247, 1192,  252,  252,  252,
      252, 1243,  252, 1279,  293, 1215,  365, 1214,  252,  252,

      252,  252, 1251,  252, 1371, 1194,  252,  252,  252,  252,
      365,  252,  252,  252,  252,  252, 1280,  252,  252,  252,
      252,  252,  365,  252, 1217, 1197,  365, 1283, 1216,  252,
      252,  252,  252,  365,  252,  252,  252,  252,  252,  324,
      252,  252,  252,  252,  252, 1284,  252,  252,  252,  252,
      252, 1288,  252,  252,  252,  252,  252,  365,  252,  252,
      252,  252,  252,  365,  252, 1185,  534, 1219,  252,  252,
      252,  252, 1281,  252,  365, 1218,  534, 1498, 1257, 1221,
      365,  252,  252,  252,  252, 1220,  252,  252,  252,  252,
      252, 1223,  252,  252,  252,  252,  252, 1222,  252,  252,

      252,  252,  252, 1224,  252,  365, 1253, 1183,  534, 1255,
     1254, 1278,  534, 1290,  365,  534, 1192, 1295,  534, 1226,
      534, 1256,  534, 1225,  534,  534,  534,  534, 1227,  534,
      365, 1260, 1194, 1258,  534, 1263,  534,  534,  534,  534,
      534, 1259, 1361,  365,  534, 1262,  534,  534, 1261,  534,
      534,  534,  534, 1264,  293,  534, 1267, 1266,  534,  534,
      365,  534,  534,  534, 1265,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  365,  534,  534,  534,  365,
     1282,  534, 1292,  534,  534,  534,  365,  534,  365,  534,
     1197,  534, 1269,  534,  534,  534,  534,  365,  365, 1268,

     1271,  534, 1289, 1286,  365,  534,  534,  534, 1270,  534,
      534,  534,  365,  534, 1273, 1272,  534,  365,  534,  534,
      534,  534,  534, 1274, 1291, 1293,  293, 1298, 1276, 1367,
     1300, 1299, 1277,  605, 1294, 1275,  605,  293, 1363, 1296,
      605,  293, 1366,  605,  605,  605,  605, 1297,  605,  293,
      605,  605,  605, 1301,  605,  605, 1302, 1305, 1303,  365,
      605,  605, 1307,  605,  605,  605, 1308, 1304,  605, 1372,
      605,  605,  605, 1309,  605, 1306,  605, 1407,  605,  605,
      605,  605, 1312,  605,  605, 1368, 1311,  605,  605,  605,
      293,  605,  605, 1310,  605,  605,  605,  605,  605,  605,

      605,  605,  605,  293,  605,  605, 1568,  605,  605,  605,
      293,  605,  605,  605, 1314,  290,  605,  290,  605,  605,
      605,  605,  605,  605,  605, 1313,  605, 1316,  605,  605,
     1374, 1318, 1315,  605,  605,  605, 1369,  293, 1319,  605,
     1317,  605, 1370,  290,  605,  290,  605,  293, 1321, 1362,
      293, 1365, 1320,  293,  365,  365, 1322,  252,  252,  252,
      252,  293,  252,  252,  252,  252,  252, 1377,  252, 1342,
      252,  252,  252,  252, 1401,  252,  252,  252,  252,  252,
      290,  252,  290,  252,  252,  252,  252,  293,  252,  252,
      252,  252,  252,  290,  252,  290, 1343, 1345,  290,  365,

      290, 1344,  252,  252,  252,  252, 1399,  252, 1478, 1373,
      293, 1346,  252,  252,  252,  252,  365,  252,  252,  252,
      252,  252,  534,  252,  365,  293,  365, 1347,  252,  252,
      252,  252,  534,  252,  534, 1402,  293, 1349, 1405, 1348,
      252,  252,  252,  252, 1404, 1351, 1375,  252,  252,  252,
      252, 1350,  252,  252,  252,  252,  252, 1376,  252,  252,
      252,  252,  252, 1630,  252,  252,  252,  252,  252,  293,
      252,  252,  252,  252,  252,  365,  252,  252,  252,  252,
      252,  365,  252,  252,  252,  252,  252,  293,  252,  365,
     1378,  324, 1352,  252,  252,  252,  252, 1353,  252,  252,

      252,  252,  252,  365,  252, 1354, 1380,  534, 1379, 1355,
     1400,  293,  365,  534, 1410,  365, 1356,  534,  534,  534,
     1403, 1409, 1357,  534, 1358,  534, 1381,  534,  534, 1406,
     1382,  534, 1383, 1485,  324,  534, 1384,  534, 1359,  534,
      534,  534,  365,  534, 1360,  534,  534, 1385,  365,  534,
      534,  365,  534, 1411, 1386, 1387, 1388, 1389,  534,  534,
      534,  534,  293, 1615,  534,  534,  365,  365,  534,  534,
      534,  365,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534, 1413,  534,  534,  534, 1476,  534, 1414,  293,
     1412,  293, 1390, 1472,  534, 1391,  534,  534,  534,  534,

     1393, 1392,  534, 1415,  293, 1394, 1416, 1474,  534, 1473,
      534, 1417,  534,  605,  534, 1396, 1395,  293, 1418,  605,
      365,  293, 1477,  605,  293,  605,  605,  293, 1508,  605,
     1397,  605,  605,  605, 1398,  293,  605,  605,  605, 1419,
      605, 1421,  605,  605, 1420, 1423, 1422,  605,  605,  605,
      605,  605,  605, 1475,  605,  293, 1481, 1425,  605, 1427,
      605,  605, 1424,  605, 1426,  365,  605,  605,  605,  365,
      293,  605,  605, 1482, 1510,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
     1514,  252,  252,  252,  252,  293,  252,  605, 1440,  605,

     1428,  605, 1429,  605,  605, 1430, 1431,  605, 1432,  605,
      293,  365, 1479,  605,  605,  605,  605,  252,  252,  252,
      252, 1433,  252,  293,  365, 1434,  252,  252,  252,  252,
     1455,  252,  290,  293,  290, 1435, 1436, 1487, 1456,  252,
      252,  252,  252, 1585,  252,  252,  252,  252,  252, 1569,
      252, 1484, 1520, 1457,  252,  252,  252,  252,  293,  252,
      252,  252,  252,  252, 1458,  252,  252,  252,  252,  252,
     1480,  252,  252,  252,  252,  252,  293,  252,  365, 1459,
      252,  252,  252,  252,  365,  252, 1440, 1483, 1460,  252,
      252,  252,  252,  293,  252,  365,  365, 1629, 1461,  252,

      252,  252,  252, 1509,  252,  252,  252,  252,  252, 1511,
      252,  252,  252,  252,  252, 1486,  252,  252,  252,  252,
      252, 1618,  252,  293,  293, 1463,  293,  252,  252,  252,
      252, 1464,  252, 1573, 1465,  252,  252,  252,  252, 1490,
      252,  252,  252,  252,  252, 1488,  252, 1466, 1489,  534,
      534,  534, 1614, 1491,  534, 1493, 1494, 1467,  534, 1492,
      534,  534,  534, 1468,  534, 1469,  534,  534,  534,  365,
      534,  534,  534,  534,  365, 1610,  534,  534, 1495,  534,
      534, 1470,  534, 1512,  534, 1496,  534, 1471,  534,  534,
      534, 1513,  534, 1497,  534,  534,  365,  365,  534,  534,

      397,  534,  534,  534,  534,  534,  534,  534,  534,  365,
      534,  365,  534,  534,  534,  534,  534, 1501,  365,  534,
      534, 1499,  365, 1500,  365,  365,  534, 1502,  534,  534,
      534,  534,  534, 1517, 1525, 1503, 1504, 1516, 1533, 1518,
      290, 1505,  290, 1609,  605, 1528,  605, 1608, 1519, 1526,
      605,  605, 1506, 1507,  324, 1522, 1563,  605, 1527, 1521,
      605,  605,  605,  605,  605, 1523, 1524,  605,  605,  605,
     1529,  605, 1607,  293,  605,  605,  605, 1530,  605,  605,
      605,  605, 1565,  605, 1531,  605,  605,  605,  293,  605,
      605,  605, 1532,  605,  605, 1659,  605,  605,  605,  293,

      605,  605,  605,  605,  605,  605,  605,  605, 1571,  605,
      605,  605,  293,  605,  605, 1536,  324,  605, 1534, 1535,
      605, 1606,  605, 1537,  605, 1605,  605,  605,  365,  605,
     1538, 1566, 1572,  293, 1539, 1540,  252,  252,  252,  252,
      293,  252, 1567, 1543,  365, 1586, 1543, 1541,  365,  324,
     1542,  252,  252,  252,  252, 1581,  252,  252,  252,  252,
      252,  365,  252, 1545, 1545,  252,  252,  252,  252, 1587,
      252,  252,  252,  252,  252, 1554,  252,  252,  252,  252,
      252,  324,  252,  252,  252,  252,  252, 1555,  252,  252,
      252,  252,  252,  293,  252,  365, 1616, 1556, 1558, 1647,

      252,  252,  252,  252, 1557,  252,  252,  252,  252,  252,
      397,  252,  252,  252,  252,  252,  365,  252,  252,  252,
      252,  252,  365,  252,  252,  252,  252,  252, 1626,  252,
      252,  252,  252,  252, 1591,  252,  252,  252,  252,  252,
      290,  252,  290, 1574, 1560,  252,  252,  252,  252,  534,
      252, 1576,  397,  365,  534, 1592, 1561,  534,  365,  534,
      365,  534,  534, 1562,  534, 1575,  534,  534,  534,  534,
     1589, 1577,  534,  534,  534, 1588,  534, 1648,  534, 1570,
      534, 1578,  534,  534, 1580,  534,  534, 1579,  534,  534,
      534, 1601,  534,  534,  534,  397,  534,  534,  365,  534,

      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      365,  534, 1594,  365,  534,  534,  534,  290,  605,  290,
     1582,  534,  605,  534, 1583,  534,  605,  534,  605, 1596,
      605, 1584,  605, 1595,  605,  605,  605,  365,  605,  605,
      605,  290, 1636,  290,  605,  605,  365,  605, 1597,  605,
      605,  605,  605, 1598,  605,  605,  605, 1600, 1599,  605,
      605, 1590, 1617,  605,  605,  605, 1619,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  293,
      605,  605,  365,  293, 1607,  324,  605,  605,  397,  605,
     1602,  605, 1643,  605, 1603,  293,  605, 1604,  605,  252,

      252,  252,  252,  293,  252,  252,  252,  252,  252,  293,
      252,  252,  252,  252,  252,  290,  252,  290, 1607,  293,
      252,  252,  252,  252, 1611,  252,  252,  252,  252,  252,
      365,  252, 1612, 1609,  252,  252,  252,  252, 1652,  252,
      252,  252,  252,  252, 1613,  252,  252,  252,  252,  252,
     1627,  252,  293,  534,  534, 1623,  365,  293, 1609,  365,
      534,  534, 1620,  534,  534, 1621,  534,  534, 1622, 1625,
      534,  534,  534,  534,  534,  534,  293,  534, 1624,  534,
      534, 1628, 1564,  605,  534,  534,  534,  534,  605,  605,
      534, 1633,  534,  605,  605, 1631, 1559,  605,  605,  605,

      605,  605, 1632,  605,  605, 1634,  605,  605, 1635,  605,
      605, 1553, 1552,  605,  605,  605,  252,  252,  252,  252,
      605,  252,  605,  290,  605,  290,  605,  252,  252,  252,
      252, 1551,  252,  252,  252,  252,  252,  290,  252,  290,
     1638,  290,  534,  290, 1646,  534,  365,  397, 1638,  605,
      534, 1640,  534,  605,  534,  534, 1645,  534, 1550,  605,
      534,  605,  534,  605, 1650,  605, 1651, 1549,  252,  252,
      252,  252,  605,  252, 1548, 1653, 1656,  290,  290,  290,
      290, 1658,  605,  365,  605, 1653, 1661,  534, 1662, 1547,
      324, 1644,  605,  293,  290,  397,  290,  534,  290,  534,

      290, 1665,  605,  290,  605,  290, 1666, 1546, 1545, 1664,
     1544, 1543, 1515,  365,  293, 1462, 1454, 1453, 1452, 1657,
      248, 1451,  248,  248,  248,  248,  252,  252,  252,  254,
      254,  254,  283,  283,  283,  283,  283,  283,  289, 1450,
      289,  289,  289,  289,  293, 1449,  293,  293,  293,  293,
      319, 1448,  319,  319,  319,  319,  324, 1447, 1446,  324,
      324,  324,  330, 1445, 1444,  330,  330,  330,  357, 1443,
      357,  357,  357,  357,  365,  365,  367,  367,  397, 1442,
     1441,  397,  397,  397,  403, 1440, 1439,  403,  403,  403,
      430, 1438,  430,  430,  430,  430,  280,  280,  280,  280,

      280,  280,  532, 1437,  397,  532,  532,  532,  534,  397,
      397,  534,  534,  534,  566,  397,  566,  566,  566,  566,
      603,  397, 1408,  603,  603,  603,  605,  365,  324,  605,
      605,  605,  637,  324,  637,  637,  637,  637,  324,  324,
      324,  293, 1341, 1340, 1339, 1338, 1337, 1336, 1335, 1334,
     1333, 1332, 1331, 1330, 1329, 1328, 1327, 1326, 1325, 1324,
     1323,  397,  397,  397,  324,  324,  324, 1236, 1207, 1206,
     1205, 1204, 1203, 1202, 1201, 1200, 1199, 1198, 1197, 1196,
     1195, 1194, 1193, 1192, 1191, 1190, 1189, 1188, 1187, 1186,
     1185,  397,  397,  397,  397,  397,  365,  365,  324,  324,

      324,  324,  324,  293,  293, 1050, 1047, 1046, 1045, 1044,
     1043, 1042, 1041, 1040, 1039, 1038, 1037, 1036, 1035, 1034,
     1033, 1032, 1031, 1030, 1029, 1028, 1027, 1026,  365,  365,
      293,  293,  912,  873,  872,  871,  870,  869,  868,  867,
      866,  865,  864,  863,  862,  861,  860,  859,  858,  857,
      856,  853,  852,  851,  850,  849,  848,  847,  846,  845,
      844,  843,  842,  397,  365,  324,  293,  716,  674,  673,
      672,  671,  667,  666,  665,  664,  663,  662,  661,  660,
      659,  658,  657,  656,  655,  654,  653,  652,  651,  650,
      649,  648,  647,  646,  645,  644,  643,  642,  399,  397,

      365,  366,  362,  324,  293,  253,  249,  465,  464,  463,
      462,  459,  458,  457,  456,  455,  454,  451,  450,  449,
      448,  447,  446,  445,  444,  441,  435,  434,  219,  217,
      402,  401,  365,  366,  364,  329,  304,  291,  253,  245,
      244,  243,  242,  241,  238,  237,  236,  235,  231,  230,
      229,  228,  227,  226,  223,  222,  221,  219,  218,  217,
     1667,   13, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,

     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667
    } ;

static yyconst short int yy_chk[5418] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,   28,   35,   35,    2,
       40,   46,   48,   49,   28,   46,   35,  159,   92,   40,
       55,   55,   55,   55,  159,   55,   48,   92,   81,    2,
       81,   57,   57,   57,   57,   49,   57,   99,   49,   58,
       58,   58,   58,   84,   58,   84,   57,   85,   86,   85,

       86,   58, 1668,   99,    2,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        4,   87, 1666,   87,    4,   56,   56,   56,   56,   88,
       56,   88,   59,   59,   59,   59,    4,   59,   60,   60,
       60,   60,  104,   60,    4,   63,   63,   63,   63,   56,
       63,   93,   89,   59,   89,   95,   94,   60,  104,   94,

       95,   59,   89,   93,   94, 1665,   96,   63,   96,    4,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    6,  109,  157,   97,    6,
       61,   61,   61,   61,  109,   61,   62,   62,   62,   62,
       97,   62,   64,   64,   64,   64,  157,   64,   62,    6,
       64,  143,   69,   69,   69,   69,   61,   69,  242,  143,

       69,   77,   77,   77,   77,   77,   98,  102,   98,  102,
       77,  242,  143,   77,    6,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        8,  280,  280,  103,    8,   65,   65,   65,   65,  103,
       65,   66,   66,   66,   66,  105,   66,  106,   67,   67,
       67,   67,  107,   67,    8,  106,  105,  101,  101,   65,

       66,   66,  101,  111,  106,  165,  101,  107,  165,   66,
       67,  112,  148,  112,  111,  116,  116,  116,  148,    8,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,   10,  118,  118,  118,   10,
       68,   68,   68,   68,  145,   68,   70,   70,   70,   70,
      108,   70,  145,   78,   78,   78,   78,  110,   78,   10,

      314,   79,   79,   79,   79,  145,   79,  158,  108,   79,
       68,  131,  133,  133,   78,  110,  131,  158,  314,  131,
      133,   70,   78,   79,   10,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       12,  174,  134,  214,   12,   71,   71,   71,   71,  214,
       71,   72,   72,   72,   72,  134,   72,   73,   73,   73,

       73,  161,   73,  134,   12,   74,   74,   74,   74,  113,
       74,   75,   75,   75,   75,  161,   75,   71,  174,   76,
       76,   76,   76,  113,   76,  113,   71,  114,  163,   12,
       72,  114,  130,  135,  130,  163,  135,   74,  138,   73,
      310,  135,  130,  137,  137, 1661,  138,  138,  162,  114,
      310,  137,  114,   75,   76,   80,   80,   80,   80,  132,
       80,  136,  136,  136,  139,  140,  142,   80,  132,  162,
      136,  136,  141,  140,  142,   80,  132,  139,  144,  140,
      141,  164,  146,  141,  142,  139,  144,  169,  170,  144,
      146,  170,  141,  151,  151,  151,  146,   80,  164, 1660,

       80,   90,   90,  171,   90,   90,   90,   90,   90,   90,
       90,   90,  169,   90,   91,   91,  160,   91,   91,   91,
       91,   91,   91,   91,   91,  149,   91,  147,  147,  147,
      168,  147,  160,  171,  166,  176,  173,  599,  149,  149,
      160,  177,  388,   91,  125,  125,  149,  168,  125,  125,
      125,  125,  125,  166,  125,  175,  125,  126,  126,  150,
      150,  126,  126,  126,  126,  126,  599,  126,  150,  126,
      173,  177,  176,  223,  172,  167,  178,  178,  178,  388,
      178,  150,  175,  223,  150,  223,  126,  127,  127,  167,
      167,  127,  127,  127,  127,  127,  224,  127,  167,  127,

      179,  172,  246,  179,  180,  577,  246,  127,  128,  128,
      172,  224,  128,  128,  128,  128,  128,  179,  128,  180,
      128,  182,  182,  182,  577,  128,  129,  129,  235,  226,
      129,  129,  129,  129,  129,  196,  129,  196,  129,  198,
      235,  180,  197,  226,  180,  196,  201,  197,  198,  201,
      197,  200,  129,  316,  201,  209,  198,  289,  251,  289,
      129,  191,  191,  209,  200,  191,  191,  191,  191,  191,
      316,  191,  200,  191,  192,  192,  209, 1658,  192,  192,
      192,  192,  192,  251,  192,  294,  192,  199,  199,  202,
      202,  202,  203,  203,  205,  199,  282,  282,  202,  202,

      203,  294,  295,  192,  193,  193,  372,  205,  193,  193,
      193,  193,  193,  204,  193,  205,  193,  372,  295,  211,
      206,  204,  204,  305,  193,  194,  194,  211,  206,  194,
      194,  194,  194,  194,  206,  194,  290,  194,  290,  305,
      211,  580,  194,  195,  195,  299,  207,  195,  195,  195,
      195,  195,  208,  195,  207,  195,  210,  207,  580,  299,
      208,  299,  216,  216,  210,  212,  207,  210,  215,  195,
      208,  216,  298,  212,  213,  213,  213,  195,  213,  212,
      298,  215,  215,  302,  216, 1655,  302,  216,  300,  215,
      254,  254,  254,  254,  304,  254,  255,  255,  255,  255,

      300,  255,  304,  313,  255,  256,  256,  256,  256, 1654,
      256,  297,  313,  256,  257,  257,  257,  257,  296,  257,
      258,  258,  258,  258,  297,  258,  297,  257,  296,  296,
      296,  258,  311,  259,  259,  259,  259,  257,  259,  257,
      260,  260,  260,  260,  311,  260,  258,  368,  260,  259,
      368,  261,  261,  261,  261,  301,  261,  303,  292,  301,
      292,  303,  260,  261,  262,  262,  262,  262,  292,  262,
      263,  263,  263,  263,  307,  263,  264,  264,  264,  264,
      306,  264,  265,  265,  265,  265, 1651,  265,  306,  309,
      307,  263,  262,  309,  394,  319,  264,  319,  265,  266,

      266,  266,  266,  320,  266,  320,  308,  266,  267,  267,
      267,  267,  394,  267,  268,  268,  268,  268,  308,  268,
      308,  312,  268,  317,  267,  269,  269,  269,  269,  318,
      269,  270,  270,  270,  270,  269,  270,  315,  271,  271,
      271,  271,  312,  271,  315, 1649,  317,  269,  321,  321,
      318,  270,  271,  272,  272,  272,  272,  315,  272,  273,
      273,  273,  273,  518,  273,  274,  274,  274,  274,  518,
      274,  275,  275,  275,  275,  390,  275,  276,  276,  276,
      276,  322,  276,  277,  277,  277,  277,  374,  277,  272,
      278,  278,  278,  278,  374,  278,  376,  322,  274,  329,

      279,  279,  279,  279,  273,  279,  323, 1646,  276,  329,
      323,  390,  376,  275,  283,  283,  283,  283,  283,  369,
      375,  276,  369,  283,  277,  378,  283,  284,  284,  284,
      284,  323,  284,  325,  325,  325,  378,  278,  284,  285,
      285,  285,  285,  375,  285,  279,  286,  286,  286,  286,
      380,  286,  582,  284,  385,  287,  287,  287,  287,  582,
      287,  380,  285,  287,  327,  327,  327,  286,  288,  288,
      288,  288,  334,  288,  334,  361,  361,  361,  336,  335,
      288,  391,  335,  336,  334,  385,  334,  334,  288,  335,
      338,  335,  336,  336,  382,  336,  337,  337,  339,  382,

      338,  377,  338,  384,  389,  338,  339,  337,  339,  337,
      339,  382,  384,  288,  330,  330,  377,  386,  330,  330,
      330,  330,  330,  391,  330,  505,  330,  331,  331,  505,
      389,  331,  331,  331,  331,  331,  357,  331,  357,  331,
      331,  332,  332,  389,  357,  332,  332,  332,  332,  332,
      502,  332,  806,  332,  332,  333,  333,  386,  350,  333,
      333,  333,  333,  333,  340,  333,  502,  333,  350,  341,
      350,  340,  341,  333,  340,  342,  340,  511,  350,  341,
      342,  341,  806,  333,  343,  333,  344,  343,  504,  511,
      342,  344,  342,  387,  343,  345,  343,  379,  345,  346,

      379,  344,  504,  344,  347,  347,  346,  345,  345,  346,
      345,  346,  348,  349,  347,  510,  347,  351,  352,  510,
     1641,  387,  348,  349,  348,  349,  515,  351,  352,  351,
      352,  353,  354,  371,  381,  348,  352,  381,  355,  371,
      515,  353,  354,  353,  354,  349,  351,  383,  355,  352,
      355,  356,  356,  356,  371,  356,  359,  358,  392,  353,
      370,  359,  383,  512,  512,  360,  354,  358,  370,  358,
      355,  359,  360,  359,  396,  360,  373,  360,  370,  373,
      370,  393,  393,  393,  395,  393,  402,  395,  520,  396,
      398,  398,  398,  373,  410,  410,  402,  360,  392,  408,

      412,  500,  408,  520,  500,  410,  460,  410,  412,  408,
      412,  408,  412,  460,  396,  403,  403,  460,  513,  403,
      403,  403,  403,  403,  503,  403,  503,  403,  404,  404,
      513,  589,  404,  404,  404,  404,  404,  430,  404,  430,
      404,  404,  405,  405,  589,  430,  405,  405,  405,  405,
      405,  507,  405,  507,  405,  405,  406,  406,  514,  431,
      406,  406,  406,  406,  406,  407,  406,  407,  406,  431,
      514,  431,  501,  409,  406,  501,  594,  407,  409,  407,
      407,  411,  413,  509,  406,  509,  406,  409,  409,  413,
      409,  411,  413,  411,  413,  414,  411,  415,  414,  508,

      716,  416,  415,  417,  416,  414,  716,  414,  417,  508,
      523,  416,  415,  416,  415,  419,  418,  594,  417,  418,
      417,  527,  419,  420,  420,  419,  421,  419,  418,  418,
      422,  418,  523,  420,  423,  420,  421,  519,  421,  519,
      422,  424,  422,  527,  423,  425,  423,  516,  427,  421,
      516,  424,  576,  424,  423,  425,  426,  425,  427,  428,
      427,  517,  422,  425,  517, 1639,  426,  576,  426,  428,
      424,  428,  529,  429,  429,  429,  425,  429,  432,  574,
      433,  522,  427,  432,  426,  521,  521,  433,  524,  522,
      433,  428,  433,  432,  529,  432,  466,  466,  466,  466,

      574,  466,  467,  467,  467,  467,  524,  467,  468,  468,
      468,  468,  433,  468,  581,  573,  468,  466,  573,  469,
      469,  469,  469,  467,  469,  470,  470,  470,  470,  581,
      470,  471,  471,  471,  471,  470,  471,  472,  472,  472,
      472,  575,  472,  571,  572,  469,  575,  473,  473,  473,
      473,  471,  473,  474,  474,  474,  474,  530,  474,  571,
      572,  472,  598,  475,  475,  475,  475,  474,  475,  476,
      476,  476,  476,  473,  476,  477,  477,  477,  477,  530,
      477,  478,  478,  478,  478,  475,  478,  477, 1637,  476,
      479,  479,  479,  479,  528,  479,  480,  480,  480,  480,

      584,  480,  479,  598,  528,  525,  478,  584,  480,  481,
      481,  481,  481,  525,  481,  482,  482,  482,  482,  481,
      482,  483,  483,  483,  483,  533,  483,  484,  484,  484,
      484,  534,  484,  526,  578,  533,  482,  485,  485,  485,
      485,  534,  485,  534,  595,  484,  526,  579,  483,  486,
      486,  486,  486,  526,  486,  578,  579,  526,  486,  487,
      487,  487,  487,  485,  487,  488,  488,  488,  488,  590,
      488,  489,  489,  489,  489, 1635,  489,  490,  490,  490,
      490,  595,  490,  583,  487,  585,  491,  491,  491,  491,
      590,  491,  585,  492,  492,  492,  492,  488,  492,  493,

      493,  493,  493,  583,  493,  494,  494,  494,  494,  983,
      494,  495,  495,  495,  495,  983,  495,  489,  491,  490,
      496,  496,  496,  496,  600,  496,  497,  497,  497,  497,
      492,  497,  535,  498,  498,  498,  498,  492,  498,  494,
      535,  492,  535,  536,  535,  493,  497,  499,  499,  499,
      499,  536,  499,  536,  537,  536,  593,  495,  499,  537,
      538,  539,  586,  587,  539,  600,  496,  586,  540,  537,
      538,  537,  538,  538,  539,  540,  539,  541,  540,  587,
      540,  542,  782,  593,  710,  543,  543,  541,  541,  541,
      544,  542,  588,  542,  542,  543,  545,  543,  710,  544,

      544,  547,  544,  545,  546,  546,  545,  782,  545,  548,
      548,  547,  601,  547,  588,  546,  552,  546,  549,  549,
      548,  550,  548,  591,  550,  551,  552,  591,  552,  549,
      552,  549,  554,  551,  550,  551,  550,  551,  553,  592,
      713,  596,  554,  553,  554,  554,  556,  555,  553,  713,
      553,  555,  557,  601,  654,  558,  556,  801,  556,  592,
      559,  555,  557,  555,  557,  558,  560,  558,  596,  561,
      559,  557,  559,  654,  562,  566,  560,  566,  560,  561,
      563,  561,  725,  566,  562,  560,  562,  564,  558,  559,
      563,  711,  563,  561,  725,  597,  565,  564,  801,  564,

      561,  563,  567,  568,  561,  711,  565,  562,  565,  604,
      717,  569,  567,  568,  567,  568,  569,  717,  712,  604,
      564,  712,  714,  570,  718,  718,  569,  597,  569,  565,
      570,  605,  606,  570,  597,  570,  732,  607,  597,  714,
      606,  605,  606,  605,  606,  607,  608,  607,  715,  607,
      715,  608,  609,  610,  720,  570,  610,  722,  723,  732,
      611,  608,  609,  608,  609,  609,  610,  611,  610,  612,
      611,  720,  611,  613,  722,  723,  722,  614,  614,  612,
      612,  612,  615,  613, 1633,  613,  613,  614,  616,  614,
      734,  615,  615,  618,  615,  616,  617,  617,  616,  721,

      616,  619,  619,  618,  721,  618,  734,  617,  623,  617,
      620,  620,  619,  621,  619,  731,  621,  622,  623,  783,
      623,  620,  623,  620,  625,  622,  621,  622,  621,  622,
      624,  784,  731,  726,  625,  624,  625,  625,  627,  626,
      624,  726,  624,  626,  628,  783,  724,  629,  627,  724,
      627,  784,  630,  626,  628,  626,  628,  629,  631,  629,
      727,  632,  630,  628,  630,  727,  633,  637,  631,  637,
      631,  632,  634,  632,  739,  637,  633,  631,  633,  635,
      629,  630,  634,  728,  634,  632, 1630,  739,  636,  635,
      728,  635,  632,  634,  638,  639,  632,  735,  636,  633,

      636,  736,  729,  640,  638,  639,  638,  639,  640,  729,
      738,  730,  635,  730,  737,  641,  791,  736,  640,  735,
      640,  636,  641,  791,  778,  641,  738,  641,  675,  675,
      675,  675,  737,  675,  676,  676,  676,  676,  675,  676,
      677,  677,  677,  677,  676,  677,  778,  641,  678,  678,
      678,  678,  741,  678,  679,  679,  679,  679,  780,  679,
      780,  679,  779,  678,  786,  741,  786,  677,  680,  680,
      680,  680,  779,  680,  681,  681,  681,  681,  740,  681,
      682,  682,  682,  682,  781,  682,  789, 1627,  789,  740,
      680,  683,  683,  683,  683,  805,  683,  684,  684,  684,

      684,  781,  684,  751,  681,  685,  685,  685,  685,  776,
      685,  682,  685,  751,  776,  751,  683,  686,  686,  686,
      686,  684,  686,  687,  687,  687,  687,  805,  687,  785,
      687,  798,  688,  688,  688,  688,  686,  688,  790,  688,
      689,  689,  689,  689,  743,  689,  745,  743,  785,  687,
      690,  690,  690,  690,  790,  690,  745,  743,  745,  743,
      745,  689,  690,  691,  691,  691,  691, 1625,  691,  692,
      692,  692,  692,  798,  692,  693,  693,  693,  693,  691,
      693,  694,  694,  694,  694,  933,  694,  747,  692,  695,
      695,  695,  695,  747,  695,  696,  696,  696,  696,  777,

      696,  933,  696,  747,  777,  747,  693,  800,  788,  787,
      788,  695,  694,  697,  697,  697,  697,  803,  697,  698,
      698,  698,  698,  787,  698,  699,  699,  699,  699,  788,
      699,  700,  700,  700,  700, 1522,  700,  792,  701,  701,
      701,  701,  800,  701,  702,  702,  702,  702,  792,  702,
      703,  703,  703,  703,  803,  703,  704,  704,  704,  704,
      697,  704,  746, 1522,  746,  699,  705,  705,  705,  705,
      744,  705,  746,  744,  746,  793,  802,  700,  701,  706,
      706,  706,  706,  744,  706,  744,  702, 1623,  750,  793,
      703,  796,  804,  704,  707,  707,  707,  707,  750,  707,

      750,  705,  708,  708,  708,  708,  750,  708,  796,  748,
      708,  802,  709,  709,  709,  709,  706,  709,  748,  748,
      797,  748,  797,  749,  708,  753,  752,  804,  755, 1082,
     1082,  753,  709,  749,  755,  749,  752,  752,  752,  754,
      749,  753,  756,  753,  755,  754,  755,  755,  756,  754,
      910,  754,  794,  757,  910,  758,  758,  807,  756,  759,
      756,  757,  759,  757,  760,  757,  758,  761,  758,  759,
      760,  759,  762,  907,  760,  907,  760,  761,  794,  761,
      764,  795,  762,  763,  762,  761,  764,  765,  871,  807,
      762,  766,  763,  763,  904,  763,  764,  765,  764,  765,

      767,  766,  871,  766,  768,  769,  904,  795,  771,  906,
      767, 1101,  767,  770,  768,  769,  768,  769,  771,  772,
      771,  765, 1101,  770,  773,  770,  906,  767,  774,  772,
      908,  772,  769,  908,  773,  771,  773,  768,  774,  775,
      774,  809,  770,  772,  809,  810,  773,  811,  810,  775,
      927,  775,  774,  812,  809,  812,  809,  811,  810,  811,
      810,  811,  813,  812,  814,  812,  920,  815,  813,  927,
      920,  816,  873,  814,  814,  817,  814,  815,  813,  815,
      813,  816,  818,  816,  815,  817,  873,  817,  909,  816,
      819,  820,  818,  818,  818,  909,  819,  820,  821,  922,

      903,  820,  905,  820,  821,  822,  819,  905,  819,  903,
      823,  822,  912,  922,  821,  911,  821,  821,  823,  912,
      823,  822,  823,  822,  824,  824,  825,  988, 1141,  825,
      827, 1141,  911,  826,  828,  824,  825,  824,  825,  826,
      827,  829,  827,  826,  828,  826,  828,  831,  827,  830,
      829,  829,  828,  829,  832,  830,  923,  831,  833,  831,
      988,  834,  835,  926,  832,  830,  832,  830,  833,  923,
      833,  834,  835,  834,  835,  913,  836,  913,  926, 1616,
      837,  831,  915,  841,  915,  833,  836,  838,  836,  835,
      837,  839,  837,  841,  834,  841,  840,  838,  916,  838,

      917,  839,  917,  839,  924,  836,  840,  837,  840,  924,
      916,  838,  972,  839,  874,  874,  874,  874,  929,  874,
      840,  875,  875,  875,  875,  918,  875,  918,  921,  874,
      921,  919,  929,  875,  876,  876,  876,  876,  972,  876,
      877,  877,  877,  877,  925,  877,  925,  877,  919,  878,
      878,  878,  878,  876,  878,  879,  879,  879,  879,  967,
      879,  880,  880,  880,  880,  931,  880, 1615,  968,  967,
      878,  881,  881,  881,  881,  968,  881,  973,  881,  931,
     1102,  880,  882,  882,  882,  882,  879,  882,  883,  883,
      883,  883,  973,  883,  884,  884,  884,  884, 1102,  884,

      885,  885,  885,  885,  977,  885,  884,  886,  886,  886,
      886,  977,  886,  882,  886,  887,  887,  887,  887,  930,
      887,  932,  888,  888,  888,  888,  885,  888,  889,  889,
      889,  889,  932,  889,  890,  890,  890,  890,  889,  890,
     1614,  930,  934,  887,  978,  890,  932,  986,  888,  891,
      891,  891,  891,  934,  891,  892,  892,  892,  892,  969,
      892,  893,  893,  893,  893,  978,  893,  934,  891,  894,
      894,  894,  894,  969,  894,  895,  895,  895,  895,  980,
      895,  896,  896,  896,  896,  986,  896,  897,  897,  897,
      897,  935,  897,  935,  892,  898,  898,  898,  898,  946,

      898,  935,  980,  935,  893,  899,  899,  899,  899,  946,
      899,  946,  971,  895,  900,  900,  900,  900,  970,  900,
      970,  902,  902,  902,  902,  897,  902,  896,  971,  902,
      898,  901,  901,  901,  901,  975,  901,  936,  936,  990,
      938,  937,  989, 1610,  898,  899,  938,  937,  936,  900,
      936,  937,  940,  937,  901,  941,  938,  981,  938,  942,
      940,  975,  940,  900,  940,  941,  942,  941,  943,  942,
      944,  942,  990,  941,  943, 1079,  948,  948,  981,  951,
      944,  950,  944,  989,  943,  951,  943,  948,  944,  948,
      952,  950, 1079,  950,  950,  951,  953,  951,  954, 1026,

      952,  954,  952, 1026,  958,  952,  953,  959,  953,  953,
      955,  954,  955,  954,  958,  956,  958,  959,  974,  959,
      974,  956,  955,  960,  955,  956,  961,  956,  992,  962,
      958,  991,  963,  960,  984,  960,  961,  959,  961,  962,
      965,  962,  963,  964,  963,  979,  966,  979,  984,  982,
      965,  961,  965,  964,  982,  964,  966,  963,  966,  985,
      993,  991,  962,  992,  994,  964,  994,  965,  966, 1078,
      995,  995, 1096, 1078,  994,  991,  994, 1234,  997,  964,
     1096,  995,  966,  995,  997,  996, 1078, 1234, 1083, 1000,
      993,  996, 1083,  985,  997,  996,  997,  996,  999, 1000,

     1097, 1000, 1001, 1086,  993, 1002,  999, 1000,  999, 1001,
      999, 1002, 1001, 1608, 1001, 1003, 1005, 1086, 1007, 1007,
     1097, 1002, 1009, 1002, 1010, 1003, 1005, 1003, 1005, 1007,
     1010, 1007, 1009, 1003, 1009, 1009, 1011, 1012, 1084, 1084,
     1010, 1013, 1010, 1014, 1013, 1014, 1011, 1012, 1011, 1012,
     1012, 1011, 1015, 1017, 1013, 1014, 1013, 1014, 1015, 1018,
     1019, 1144, 1015, 1017, 1015, 1017, 1020, 1606, 1144, 1018,
     1019, 1018, 1019, 1021, 1022, 1080, 1020, 1080, 1020, 1017,
     1023, 1090, 1104, 1021, 1022, 1021, 1022, 1088, 1024, 1018,
     1023, 1020, 1023, 1104, 1081, 1025, 1081, 1090, 1024, 1022,

     1024, 1085, 1023, 1085, 1088, 1025, 1021, 1025, 1057, 1057,
     1057, 1057, 1089, 1057, 1089, 1024, 1023, 1025, 1053, 1053,
     1053, 1053, 1092, 1053, 1092, 1053, 1093, 1091, 1057, 1053,
     1596, 1025, 1054, 1054, 1054, 1054, 1594, 1054, 1093, 1054,
     1055, 1055, 1055, 1055, 1091, 1055, 1056, 1056, 1056, 1056,
     1094, 1056, 1058, 1058, 1058, 1058, 1098, 1058, 1059, 1059,
     1059, 1059, 1100, 1059, 1098, 1099, 1055, 1094, 1059, 1095,
     1100, 1056, 1134, 1060, 1060, 1060, 1060, 1058, 1060, 1061,
     1061, 1061, 1061, 1244, 1061, 1099, 1061, 1062, 1062, 1062,
     1062, 1095, 1062, 1134, 1103, 1062, 1135, 1060, 1063, 1063,

     1063, 1063, 1103, 1063, 1244, 1063, 1064, 1064, 1064, 1064,
     1146, 1064, 1065, 1065, 1065, 1065, 1135, 1065, 1066, 1066,
     1066, 1066, 1138, 1066, 1065, 1066, 1139, 1138, 1064, 1067,
     1067, 1067, 1067, 1593, 1067, 1068, 1068, 1068, 1068, 1389,
     1068, 1069, 1069, 1069, 1069, 1139, 1069, 1070, 1070, 1070,
     1070, 1146, 1070, 1071, 1071, 1071, 1071, 1136, 1071, 1072,
     1072, 1072, 1072, 1133, 1072, 1133, 1109, 1068, 1073, 1073,
     1073, 1073, 1136, 1073, 1148, 1067, 1109, 1389, 1109, 1070,
     1153, 1074, 1074, 1074, 1074, 1069, 1074, 1075, 1075, 1075,
     1075, 1072, 1075, 1076, 1076, 1076, 1076, 1071, 1076, 1077,

     1077, 1077, 1077, 1073, 1077, 1132, 1105, 1132, 1107, 1106,
     1105, 1132, 1105, 1148, 1140, 1106, 1140, 1153, 1107, 1075,
     1107, 1107, 1105, 1074, 1105, 1106, 1110, 1106, 1076, 1111,
     1142, 1113, 1142, 1110, 1113, 1117, 1110, 1114, 1110, 1111,
     1117, 1111, 1229, 1150, 1113, 1115, 1113, 1114, 1114, 1114,
     1117, 1115, 1117, 1118, 1229, 1119, 1121, 1120, 1120, 1118,
     1137, 1115, 1121, 1115, 1119, 1119, 1122, 1119, 1120, 1118,
     1120, 1118, 1121, 1123, 1121, 1147, 1122, 1124, 1122, 1592,
     1137, 1125, 1150, 1123, 1126, 1123, 1143, 1124, 1145, 1124,
     1145, 1125, 1123, 1125, 1126, 1127, 1126, 1149, 1151, 1122,

     1125, 1128, 1147, 1143, 1152, 1127, 1129, 1127, 1124, 1130,
     1131, 1128, 1154, 1128, 1127, 1126, 1129, 1155, 1129, 1130,
     1131, 1130, 1131, 1128, 1149, 1151, 1238, 1156, 1130, 1238,
     1157, 1156, 1131, 1156, 1152, 1129, 1157, 1233, 1233, 1154,
     1158, 1236, 1236, 1156, 1160, 1156, 1157, 1155, 1157, 1245,
     1158, 1161, 1158, 1158, 1160, 1162, 1160, 1164, 1161, 1287,
     1164, 1161, 1166, 1161, 1165, 1162, 1168, 1162, 1166, 1245,
     1164, 1168, 1164, 1169, 1165, 1165, 1165, 1287, 1166, 1169,
     1166, 1168, 1172, 1168, 1170, 1240, 1171, 1171, 1172, 1169,
     1240, 1169, 1173, 1170, 1170, 1174, 1170, 1171, 1172, 1171,

     1172, 1175, 1173, 1478, 1173, 1174, 1478, 1174, 1176, 1177,
     1247, 1175, 1178, 1175, 1174, 1228, 1179, 1228, 1176, 1177,
     1176, 1177, 1178, 1180, 1178, 1173, 1179, 1176, 1179, 1181,
     1247, 1178, 1175, 1180, 1182, 1180, 1241, 1241, 1179, 1181,
     1177, 1181, 1243, 1230, 1182, 1230, 1182, 1232, 1181, 1232,
     1250, 1235, 1180, 1235, 1281, 1591, 1182, 1208, 1208, 1208,
     1208, 1243, 1208, 1209, 1209, 1209, 1209, 1250, 1209, 1208,
     1210, 1210, 1210, 1210, 1281, 1210, 1211, 1211, 1211, 1211,
     1237, 1211, 1237, 1212, 1212, 1212, 1212, 1246, 1212, 1213,
     1213, 1213, 1213, 1239, 1213, 1239, 1210, 1212, 1242, 1278,

     1242, 1211, 1214, 1214, 1214, 1214, 1278, 1214, 1368, 1246,
     1368, 1213, 1215, 1215, 1215, 1215, 1285, 1215, 1216, 1216,
     1216, 1216, 1256, 1216, 1284, 1248, 1282, 1214, 1217, 1217,
     1217, 1217, 1256, 1217, 1256, 1282, 1249, 1216, 1285, 1215,
     1218, 1218, 1218, 1218, 1284, 1218, 1248, 1219, 1219, 1219,
     1219, 1217, 1219, 1220, 1220, 1220, 1220, 1249, 1220, 1221,
     1221, 1221, 1221, 1590, 1221, 1222, 1222, 1222, 1222, 1251,
     1222, 1223, 1223, 1223, 1223, 1290, 1223, 1224, 1224, 1224,
     1224, 1289, 1224, 1225, 1225, 1225, 1225, 1252, 1225, 1280,
     1251, 1576, 1219, 1226, 1226, 1226, 1226, 1220, 1226, 1227,

     1227, 1227, 1227, 1283, 1227, 1221, 1254, 1254, 1252, 1222,
     1280, 1375, 1291, 1257, 1290, 1286, 1223, 1254, 1258, 1254,
     1283, 1289, 1224, 1257, 1225, 1257, 1257, 1260, 1258, 1286,
     1258, 1259, 1259, 1375, 1574, 1261, 1260, 1260, 1226, 1260,
     1263, 1259, 1293, 1259, 1227, 1261, 1266, 1261, 1294, 1265,
     1263, 1292, 1263, 1291, 1263, 1265, 1266, 1268, 1266, 1265,
     1269, 1265, 1564, 1564, 1270, 1268, 1296, 1295, 1271, 1272,
     1269, 1297, 1269, 1273, 1270, 1268, 1270, 1268, 1271, 1272,
     1271, 1272, 1293, 1273, 1274, 1273, 1365, 1275, 1294, 1573,
     1292, 1365, 1269, 1361, 1274, 1270, 1274, 1275, 1276, 1275,

     1272, 1271, 1277, 1295, 1361, 1273, 1296, 1363, 1276, 1362,
     1276, 1297, 1277, 1301, 1277, 1275, 1274, 1363, 1299, 1299,
     1399, 1362, 1367, 1301, 1572, 1301, 1302, 1367, 1399, 1299,
     1276, 1299, 1303, 1306, 1277, 1371, 1302, 1305, 1302, 1302,
     1304, 1304, 1303, 1306, 1303, 1306, 1305, 1305, 1308, 1305,
     1304, 1310, 1304, 1364, 1311, 1372, 1371, 1310, 1308, 1313,
     1308, 1310, 1308, 1310, 1311, 1401, 1311, 1313, 1314, 1407,
     1364, 1315, 1316, 1372, 1401, 1317, 1318, 1313, 1314, 1313,
     1314, 1315, 1316, 1315, 1316, 1317, 1318, 1317, 1318, 1319,
     1407, 1345, 1345, 1345, 1345, 1571, 1345, 1320, 1345, 1319,

     1314, 1319, 1315, 1321, 1322, 1316, 1317, 1320, 1318, 1320,
     1369, 1413, 1369, 1321, 1322, 1321, 1322, 1342, 1342, 1342,
     1342, 1319, 1342, 1377, 1509, 1320, 1343, 1343, 1343, 1343,
     1342, 1343, 1370, 1374, 1370, 1321, 1322, 1377, 1343, 1344,
     1344, 1344, 1344, 1509, 1344, 1346, 1346, 1346, 1346, 1479,
     1346, 1374, 1413, 1344, 1347, 1347, 1347, 1347, 1479, 1347,
     1348, 1348, 1348, 1348, 1346, 1348, 1349, 1349, 1349, 1349,
     1370, 1349, 1350, 1350, 1350, 1350, 1373, 1350, 1588, 1348,
     1352, 1352, 1352, 1352, 1402, 1352, 1402, 1373, 1349, 1353,
     1353, 1353, 1353, 1376, 1353, 1403, 1400, 1588, 1350, 1354,

     1354, 1354, 1354, 1400, 1354, 1355, 1355, 1355, 1355, 1403,
     1355, 1356, 1356, 1356, 1356, 1376, 1356, 1357, 1357, 1357,
     1357, 1568, 1357, 1378, 1487, 1352, 1379, 1358, 1358, 1358,
     1358, 1353, 1358, 1487, 1354, 1359, 1359, 1359, 1359, 1380,
     1359, 1360, 1360, 1360, 1360, 1378, 1360, 1355, 1379, 1380,
     1384, 1380, 1559, 1381, 1381, 1383, 1384, 1356, 1382, 1382,
     1384, 1383, 1384, 1357, 1381, 1358, 1381, 1385, 1382, 1405,
     1382, 1383, 1386, 1383, 1406, 1550, 1387, 1385, 1386, 1385,
     1388, 1359, 1386, 1405, 1386, 1387, 1387, 1360, 1387, 1390,
     1388, 1406, 1388, 1388, 1391, 1392, 1410, 1409, 1393, 1390,

     1427, 1390, 1394, 1395, 1391, 1392, 1391, 1392, 1393, 1411,
     1393, 1412, 1394, 1395, 1394, 1395, 1396, 1392, 1414, 1397,
     1398, 1390, 1415, 1391, 1416, 1417, 1396, 1393, 1396, 1397,
     1398, 1397, 1398, 1410, 1418, 1394, 1395, 1409, 1427, 1411,
     1475, 1396, 1475, 1549, 1418, 1421, 1418, 1548, 1412, 1419,
     1419, 1421, 1397, 1398, 1647, 1415, 1472, 1420, 1420, 1414,
     1419, 1421, 1419, 1421, 1422, 1416, 1417, 1420, 1423, 1420,
     1422, 1424, 1547, 1472, 1422, 1425, 1422, 1424, 1423, 1426,
     1423, 1424, 1474, 1424, 1425, 1425, 1428, 1425, 1482, 1426,
     1429, 1426, 1426, 1430, 1431, 1647, 1428, 1432, 1428, 1474,

     1429, 1433, 1429, 1430, 1431, 1430, 1431, 1432, 1482, 1432,
     1434, 1433, 1484, 1433, 1435, 1430, 1498, 1436, 1428, 1429,
     1434, 1546, 1434, 1431, 1435, 1544, 1435, 1436, 1511, 1436,
     1432, 1476, 1484, 1476, 1433, 1434, 1455, 1455, 1455, 1455,
     1477, 1455, 1477, 1455, 1508, 1511, 1508, 1435, 1512, 1626,
     1436, 1456, 1456, 1456, 1456, 1498, 1456, 1457, 1457, 1457,
     1457, 1510, 1457, 1510, 1457, 1458, 1458, 1458, 1458, 1512,
     1458, 1459, 1459, 1459, 1459, 1456, 1459, 1460, 1460, 1460,
     1460, 1581, 1460, 1461, 1461, 1461, 1461, 1458, 1461, 1463,
     1463, 1463, 1463, 1566, 1463, 1517, 1566, 1459, 1461, 1626,

     1464, 1464, 1464, 1464, 1460, 1464, 1465, 1465, 1465, 1465,
     1528, 1465, 1466, 1466, 1466, 1466, 1519, 1466, 1467, 1467,
     1467, 1467, 1524, 1467, 1468, 1468, 1468, 1468, 1581, 1468,
     1469, 1469, 1469, 1469, 1517, 1469, 1470, 1470, 1470, 1470,
     1480, 1470, 1480, 1490, 1464, 1471, 1471, 1471, 1471, 1490,
     1471, 1492, 1533, 1513, 1491, 1519, 1466, 1492, 1628, 1490,
     1514, 1490, 1494, 1469, 1491, 1491, 1491, 1492, 1495, 1492,
     1514, 1494, 1494, 1496, 1494, 1513, 1499, 1628, 1495, 1480,
     1495, 1495, 1497, 1496, 1497, 1496, 1499, 1496, 1499, 1500,
     1501, 1533, 1497, 1502, 1497, 1601, 1503, 1504, 1523, 1500,

     1501, 1500, 1501, 1502, 1506, 1502, 1503, 1504, 1503, 1504,
     1521, 1505, 1525, 1520, 1506, 1507, 1506, 1563, 1525, 1563,
     1500, 1505, 1526, 1505, 1502, 1507, 1534, 1507, 1525, 1527,
     1525, 1505, 1526, 1526, 1526, 1527, 1534, 1518, 1534, 1529,
     1530, 1565, 1601, 1565, 1531, 1527, 1516, 1527, 1529, 1529,
     1530, 1529, 1530, 1530, 1531, 1532, 1531, 1532, 1531, 1535,
     1536, 1515, 1567, 1537, 1538, 1532, 1569, 1532, 1539, 1535,
     1536, 1535, 1536, 1537, 1538, 1537, 1538, 1540, 1539, 1567,
     1539, 1541, 1587, 1569, 1587, 1493, 1542, 1540, 1636, 1540,
     1535, 1541, 1618, 1541, 1537, 1489, 1542, 1540, 1542, 1554,

     1554, 1554, 1554, 1488, 1554, 1555, 1555, 1555, 1555, 1618,
     1555, 1556, 1556, 1556, 1556, 1570, 1556, 1570, 1556, 1486,
     1557, 1557, 1557, 1557, 1554, 1557, 1558, 1558, 1558, 1558,
     1585, 1558, 1555, 1558, 1560, 1560, 1560, 1560, 1636, 1560,
     1561, 1561, 1561, 1561, 1557, 1561, 1562, 1562, 1562, 1562,
     1585, 1562, 1485, 1575, 1577, 1578, 1589, 1483, 1589, 1586,
     1582, 1578, 1570, 1575, 1577, 1575, 1577, 1579, 1577, 1580,
     1582, 1578, 1582, 1578, 1583, 1580, 1481, 1579, 1579, 1579,
     1584, 1586, 1473, 1595, 1583, 1580, 1583, 1580, 1597, 1602,
     1584, 1598, 1584, 1595, 1599, 1595, 1462, 1598, 1597, 1602,

     1597, 1602, 1597, 1603, 1599, 1599, 1599, 1598, 1600, 1598,
     1604, 1452, 1449, 1603, 1600, 1603, 1611, 1611, 1611, 1611,
     1604, 1611, 1604, 1617, 1600, 1617, 1600, 1612, 1612, 1612,
     1612, 1447, 1612, 1613, 1613, 1613, 1613, 1619, 1613, 1619,
     1613, 1620, 1621, 1620, 1624, 1622, 1629, 1652, 1629, 1631,
     1624, 1612, 1621, 1632, 1621, 1622, 1622, 1622, 1445, 1631,
     1624, 1631, 1624, 1632, 1632, 1632, 1634, 1444, 1640, 1640,
     1640, 1640, 1634, 1640, 1443, 1640, 1642, 1643, 1644, 1643,
     1644, 1645, 1634, 1648, 1634, 1648, 1650, 1645, 1652, 1442,
     1659, 1620, 1650, 1642, 1656, 1662, 1656, 1645, 1657, 1645,

     1657, 1659, 1650, 1664, 1650, 1664, 1662, 1441, 1439, 1657,
     1438, 1437, 1408, 1404, 1366, 1351, 1341, 1340, 1339, 1644,
     1669, 1338, 1669, 1669, 1669, 1669, 1670, 1670, 1670, 1671,
     1671, 1671, 1672, 1672, 1672, 1672, 1672, 1672, 1673, 1337,
     1673, 1673, 1673, 1673, 1674, 1336, 1674, 1674, 1674, 1674,
     1675, 1335, 1675, 1675, 1675, 1675, 1676, 1334, 1333, 1676,
     1676, 1676, 1677, 1332, 1331, 1677, 1677, 1677, 1678, 1330,
     1678, 1678, 1678, 1678, 1679, 1679, 1680, 1680, 1681, 1329,
     1327, 1681, 1681, 1681, 1682, 1326, 1325, 1682, 1682, 1682,
     1683, 1324, 1683, 1683, 1683, 1683, 1684, 1684, 1684, 1684,

     1684, 1684, 1685, 1323, 1312, 1685, 1685, 1685, 1686, 1309,
     1307, 1686, 1686, 1686, 1687, 1300, 1687, 1687, 1687, 1687,
     1688, 1298, 1288, 1688, 1688, 1688, 1689, 1279, 1267, 1689,
     1689, 1689, 1690, 1264, 1690, 1690, 1690, 1690, 1262, 1255,
     1253, 1231, 1207, 1206, 1205, 1204, 1203, 1202, 1201, 1200,
     1199, 1198, 1196, 1195, 1193, 1191, 1190, 1189, 1188, 1187,
     1184, 1167, 1163, 1159, 1116, 1112, 1108, 1087, 1052, 1051,
     1050, 1049, 1048, 1047, 1046, 1045, 1044, 1043, 1042, 1041,
     1040, 1039, 1038, 1036, 1035, 1034, 1032, 1031, 1030, 1028,
     1027, 1016, 1008, 1006, 1004,  998,  987,  976,  957,  949,

      947,  945,  939,  928,  914,  872,  870,  869,  868,  866,
      865,  863,  862,  861,  860,  859,  858,  857,  855,  851,
      850,  849,  848,  847,  845,  844,  843,  842,  808,  799,
      742,  733,  719,  673,  672,  671,  670,  669,  668,  667,
      666,  664,  663,  662,  661,  660,  659,  658,  657,  656,
      655,  653,  652,  651,  650,  649,  648,  647,  646,  645,
      644,  643,  642,  603,  602,  532,  531,  506,  464,  463,
      462,  461,  459,  458,  457,  456,  455,  454,  453,  452,
      451,  450,  449,  448,  447,  446,  445,  444,  443,  442,
      441,  440,  439,  438,  437,  436,  435,  434,  400,  397,

      367,  366,  363,  324,  293,  253,  250,  249,  245,  244,
      243,  241,  240,  239,  238,  237,  236,  234,  233,  232,
      231,  230,  229,  228,  227,  225,  222,  221,  219,  217,
      190,  184,  156,  155,  153,  124,  100,   83,   54,   45,
       44,   43,   42,   41,   39,   38,   37,   36,   34,   33,
       32,   31,   30,   29,   27,   26,   25,   23,   17,   15,
       13, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,

     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#define INITIAL 0
#line 2 "levcomp.lpp"

// levcomp.l:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
// 
// Based loosely on NetHack's lev_comp.l

#include "AppHdr.h"
#include "levcomp.tab.h"
#include <cstring>
#include <queue>

static bool alloced = false;

std::queue<const char *> free_queue;

static void flush_free_queue(int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(20);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

static void settext()
{
    clean();
    if ((yylval.text = strdup(yytext)))
        alloced = true;
}

#define MAPDEF 1

#define ARGUMENT 2

#define MNAME 3

#define KEYWORDS 4

#define ITEM_LIST 5

#define YY_NEVER_INTERACTIVE 1
#line 2527 "levcomp.lex.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 61 "levcomp.lpp"


#line 2684 "levcomp.lex.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1668 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5362 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 63 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 65 "levcomp.lpp"
;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 67 "levcomp.lpp"
{
                        settext();
                        return MAP_LINE;
                    }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 72 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 77 "levcomp.lpp"
;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 78 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 80 "levcomp.lpp"
{ 
                        settext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 85 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 86 "levcomp.lpp"
;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 87 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 89 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 91 "levcomp.lpp"
{ 
                        settext();
                        return MONSTER_NAME; 
                    }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 96 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 97 "levcomp.lpp"
;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 99 "levcomp.lpp"
{ 
                        BEGIN(INITIAL);
                        settext();
                        return STRING; 
                    }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 105 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 107 "levcomp.lpp"
;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 109 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 112 "levcomp.lpp"
{ BEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 113 "levcomp.lpp"
return DEFAULT_DEPTH;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 114 "levcomp.lpp"
return DEPTH;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 115 "levcomp.lpp"
return ORIENT;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 116 "levcomp.lpp"
{ BEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 117 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 118 "levcomp.lpp"
return FLAGS;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 119 "levcomp.lpp"
{ BEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 120 "levcomp.lpp"
{ BEGIN(ARGUMENT); return SYMBOL; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 121 "levcomp.lpp"
{ BEGIN(MNAME); return MONS; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 122 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 124 "levcomp.lpp"
return BRANCH;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 125 "levcomp.lpp"
return DEFAULT;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 126 "levcomp.lpp"
return DESC;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 127 "levcomp.lpp"
return BRANCH;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 128 "levcomp.lpp"
return ROOT_DEPTH;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 129 "levcomp.lpp"
return FLOOR_COLOUR;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 130 "levcomp.lpp"
return ROCK_COLOUR;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 132 "levcomp.lpp"
return LEVEL;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 133 "levcomp.lpp"
return END;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 134 "levcomp.lpp"
return PVAULT;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 135 "levcomp.lpp"
return PMINIVAULT;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 137 "levcomp.lpp"
{ BEGIN(ARGUMENT); return ENTRY_MSG; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 138 "levcomp.lpp"
{ BEGIN(ARGUMENT); return EXIT_MSG; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 140 "levcomp.lpp"
return MONSTERS;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 141 "levcomp.lpp"
return ENDMONSTERS;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 144 "levcomp.lpp"
return PANDEMONIC;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 145 "levcomp.lpp"
return NO_HMIRROR;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 146 "levcomp.lpp"
return NO_VMIRROR;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 147 "levcomp.lpp"
return NO_ROTATE;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 149 "levcomp.lpp"
return ENCOMPASS;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 150 "levcomp.lpp"
return NORTH;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 151 "levcomp.lpp"
return SOUTH;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 152 "levcomp.lpp"
return EAST;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 153 "levcomp.lpp"
return WEST;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 154 "levcomp.lpp"
return NORTHEAST;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 155 "levcomp.lpp"
return NORTHWEST;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 156 "levcomp.lpp"
return SOUTHEAST;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 157 "levcomp.lpp"
return SOUTHWEST;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 158 "levcomp.lpp"
return FLOAT;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 160 "levcomp.lpp"
return DASH;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 161 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 163 "levcomp.lpp"
{
                        clean();
                        yylval.i = atoi(yytext);
                        return INTEGER;
                    }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 169 "levcomp.lpp"
;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 170 "levcomp.lpp"
;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 172 "levcomp.lpp"
return OPAREN;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 173 "levcomp.lpp"
return CPAREN;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 175 "levcomp.lpp"
return QUOTE;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 177 "levcomp.lpp"
{
                        settext();
                        return IDENTIFIER;
                    }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 182 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 184 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 3144 "levcomp.lex.cc"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(MAPDEF):
			case YY_STATE_EOF(ARGUMENT):
			case YY_STATE_EOF(MNAME):
			case YY_STATE_EOF(KEYWORDS):
			case YY_STATE_EOF(ITEM_LIST):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1668 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1668 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1667);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');
	if ( yy_current_buffer->yy_at_bol )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 184 "levcomp.lpp"


int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}
