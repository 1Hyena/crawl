#line 2 "levcomp.lex.cc"

#line 4 "levcomp.lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 82
#define YY_END_OF_BUFFER 83
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1111] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   83,   81,   78,   79,
       80,   76,   81,   74,   77,   75,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   78,   34,   36,   81,   81,   81,   81,   81,
       81,   82,    6,   82,   82,    4,    2,    3,   82,    2,
        2,    2,    2,    9,   10,   82,    9,    9,   82,   12,
       82,   32,   78,   33,   80,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   78,   32,   32,

       32,   32,   32,   32,   32,   32,   81,   28,   23,   28,
       76,   81,   27,   77,   75,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   28,   34,   36,   81,   81,   81,   81,   81,
       81,   15,   16,   80,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   81,   13,   15,   13,   13,   13,   13,   13,
       82,   21,   22,   82,   20,   82,   78,   79,   77,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   78,   34,   36,    0,    0,
        0,    0,   34,    0,    0,    0,    0,    0,    0,    0,
       39,    6,    5,    0,    0,    2,    3,    2,    0,    2,
        2,    2,    2,    9,    9,   10,    9,    9,    9,    0,
       11,    0,   12,   31,    0,   31,   78,   33,    0,    0,
       33,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,    0,   30,   31,
       78,   31,   34,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   26,    0,   26,   28,   23,   28,    0,   23,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,    0,   25,    0,   26,
       28,   26,   34,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   15,   16,    0,    0,    0,   16,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,    0,   14,   13,   15,   13,
       13,   13,   13,   13,   13,   13,   19,    0,   19,   21,
       22,    0,    0,    0,    0,   18,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    2,    9,    9,    9,    7,    0,    0,   29,    0,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   34,   31,
       31,   31,   31,   31,   31,    0,   24,    0,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   34,   34,   26,   26,
       26,   26,   26,   26,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,    0,   17,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   35,    0,    0,    0,    0,    0,    2,    9,
        8,    0,    9,    7,    0,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,    0,    0,   31,   31,   31,
       31,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,    0,    0,   26,   26,   26,   26,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

        0,    0,    0,    0,    0,    0,   65,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   64,   42,    0,    0,
        0,    0,    0,    0,    0,   51,   63,    0,    0,    0,
       38,    0,    0,    0,    0,    2,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,    0,
       31,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,    0,   26,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,    0,    0,    0,   44,   50,   61,   68,
       69,   71,   70,   72,    0,    0,    0,    0,    0,    0,
        0,   46,   62,    0,   54,    0,    0,    0,    0,    0,
        0,   41,    1,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   53,   48,
       56,   52,    0,    0,    0,    0,   66,   55,   45,    0,
        0,   49,    0,    0,    0,    0,    1,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,    0,    0,    0,    0,   67,    0,   47,
        0,    0,    0,    0,   31,   31,   31,   31,   31,   31,
       31,   31,    0,   31,   31,   26,   26,   26,   26,   26,
       26,   26,   26,    0,   26,   26,   13,   13,   13,   13,
       13,   13,   13,    0,    0,   58,    0,   73,    0,   37,
        0,    0,   31,   31,   31,   31,   31,   31,   31,    0,
       31,   26,   26,   26,   26,   26,   26,   26,    0,   26,
       13,   13,   13,   13,   57,    0,   60,    0,   40,   31,
       31,   31,   31,   31,   26,   26,   26,   26,   26,   13,
       13,   59,    0,   31,   31,   26,   26,   13,    0,   31,

       26,   13,    0,   31,   26,   13,   43,   31,   26,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    6,    1,    7,    1,    1,    1,
        1,    1,    8,    9,   10,    1,    1,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   12,    1,    1,
        1,    1,    1,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       22,   29,   30,   31,   32,   33,   34,   22,   22,   22,
        1,   35,    1,    1,   22,    1,   36,   22,   22,   37,

       38,   39,   22,   40,   41,   22,   22,   42,   22,   22,
       43,   44,   22,   45,   46,   47,   48,   49,   22,   22,
       22,   22,   50,    1,   51,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[52] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    1,    5,    6,
        6,    1,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    1,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    1,
        1
    } ;

static yyconst flex_int16_t yy_base[1128] =
    {   0,
        0,   50,   54,   61,   65,   67,   50,   69,  118,  168,
      218,  268,  318,  368,   77,  173, 2365, 3660,   72, 3660,
     2361, 3660, 2350, 3660, 2345, 3660, 2335,   56, 2335,   60,
     2310,   77,   72,   76,   74, 2311, 2309, 2294,   65,   93,
     2301, 2274,  417,    0, 3660,  158, 2263, 2260,   63,   72,
     2254, 3660, 3660, 2289,  183, 3660,    0, 3660, 2285,  187,
        0, 2260,  155, 2224, 3660, 2263,  133, 2214,  191, 3660,
     2257,  273,  280, 3660,  373,  380,  385,  390,  395,  399,
      422,  433,  437,  445,  460,  494,  479,  498,  488,  502,
      522,  530,  534,  538,  543,  572,  548,  577,  566,  583,

      587,  591,  600,  606,  611,  615,  274,  625, 3660,  651,
      381,  631, 3660,  632,  386,  453,  443,  646,  656,  657,
      672,  666,  697,  701,  680,  670,  706,  714,  737,  716,
      724,  718,  758,  743,  562,  752,  720,  738,  764,  762,
      769,  803, 3660,  809, 2248, 2239,    0, 2226,  176, 2220,
      173, 2200,  181,  182,  259,  168, 2190, 2194, 2181,  267,
      192, 2189,  286, 2159,  813,  268, 2135, 2132,  246,   79,
      786,  820, 3660,  824, 3660,  828,  292, 3660, 2162, 2134,
     2133, 2121, 2110, 2119, 2110, 2111, 2109, 2093,  289, 2094,
     2090, 2086, 2078, 2080, 2080, 2068, 2078, 2082, 2071, 2059,

     2074, 2068, 2057,  277, 2041,    0,    0, 3660, 2028, 2029,
      267, 2017,    0,  187, 2028, 2019, 2042,  356, 2006, 1997,
     3660, 3660, 3660, 2034,  428,    0, 3660,    0, 2030,  470,
     2011, 1999,  390, 1949, 1948, 3660,  260, 1947,  832,  368,
     3660, 1987, 3660,  837,  841,  847,  862, 3660,  866,  875,
     3660,  882,  886,  890,  894,  900,  907,  911,  922,  932,
      939,  946,  950,  956,  960,  964,  984,  973,  992,  999,
     1009, 1021, 1013, 1026, 1031, 1047, 1053, 1060, 3660, 1065,
        0, 1071, 1076, 1081, 1085, 1089, 1094, 1105, 1117, 1126,
     1131, 1139,  928, 1004, 1144, 1151, 3660, 1155, 1167, 3660,

     1162, 1103, 1110, 1160, 1175, 1180, 1186, 1187, 1194, 1196,
     1203, 1204, 1212, 1218, 1223, 1230, 1232, 1238, 1239, 1246,
     1259, 1244, 1261, 1266, 1267, 1282, 1295, 3660, 1305, 1281,
        0, 1309, 1317, 1329, 1322, 1310, 1290, 1334, 1335, 1351,
     1288, 1353, 1363, 3660, 1369, 1373, 1357, 3660,    0, 1974,
     1956, 1965, 1951, 1941, 1952, 1940, 1915, 1912, 1897,  503,
     1898, 1901, 1892, 1889, 1891, 1890, 1882, 1892, 1894, 1885,
     1873, 1880, 1872, 1846,  283, 1380, 3660, 1830,    0,  415,
     1822, 1816, 1840,  431, 1805, 1794, 1385, 1389, 1397, 1403,
     3660, 1407, 1411, 1417, 1423, 3660, 1431, 1816, 1802, 1789,

     1780, 1787, 1781, 1774, 1785, 1775, 1758, 1760, 1748,  528,
     1755, 1740, 1724, 1736, 1738, 1718, 1713, 1692, 1697,  449,
     1684, 1693, 1686, 1686, 1659, 1441,  508, 1652, 1661, 1647,
     1630, 1647, 1445, 1451, 1457, 3660, 1461, 1465, 3660, 1469,
     1474, 1478, 1484, 1489, 1493, 1501, 1512, 1525, 1529, 1537,
     1547, 1551, 1557, 1561, 1575, 1583, 1589, 1595, 1599, 1610,
     1603, 1615, 1624, 1635, 1639, 1644, 1656, 1662, 1673, 1678,
     1682, 1688, 1698, 1702, 1707, 1716, 3660, 1736, 1505, 1720,
     1722, 1729, 1650, 1742, 1743, 1754, 1756, 1760, 1767, 1769,
     1774, 1779, 1780, 1778, 1795, 1805, 1815, 1816, 1820, 1821,

     1831, 1822, 1832, 1840, 1833, 1841, 1869, 1877, 1881, 1858,
     1694, 1860, 1885, 1887, 1655, 1636, 1626, 1620, 1628, 1618,
     1611, 1622, 1615, 1601, 1597, 1595,  536, 1606, 1588, 1565,
     1573, 1575, 1566, 1566, 1551, 1556,  456, 1539, 1551, 1539,
     1535, 1512, 1894,  619, 1503, 1516, 1502, 1492, 1898, 3660,
     1907, 1513, 1507, 1489, 1495, 1471, 1482, 1480, 1459, 1459,
     1458, 1447, 1447, 1438, 1424, 1418, 1422, 1419, 1418, 1399,
     1397, 1401, 1400, 1385, 1366, 1383, 1383, 1377, 1360, 1352,
     1315, 1932, 3660,  790, 1304, 1301, 1311,  856, 1330, 1936,
     3660, 1940, 1944, 3660, 1948, 1953, 1958, 1962, 1966, 1972,

     1979, 1919, 1987, 2001, 2006, 2015, 2011, 2019, 2026, 2047,
     2030, 2054, 2067, 2038, 2058, 2073, 2081, 2092, 2099, 2107,
     2113, 2117, 2131, 2135, 2139, 2151, 2145, 2155, 2159, 2163,
     2167, 2173, 2174, 1977, 2179, 2180, 2186, 2199, 2191, 2211,
     2218, 2222, 2223, 2228, 2227, 2233, 2238, 2237, 2259, 2265,
     2243, 2272, 2274, 2278, 2279, 2280, 2285, 2296, 2297, 2301,
     2314, 2319, 2324, 2325, 2332, 2333, 2337, 1323, 1326, 1297,
     1285, 1274, 1272, 1276, 1251, 1253, 1254, 1232, 1227, 1235,
     1223, 1219, 1209, 1212, 1207, 1188, 1187, 1195, 1185, 1182,
     1163, 1174, 1171, 1169, 1156, 1148, 1103, 1102, 1102, 1435,

     1107, 1117, 1097, 1105, 1091, 1090, 3660, 1089, 1085, 1080,
     1067, 1060, 1038, 1031,  490, 1030, 3660, 3660, 1023, 1022,
     1035, 1034, 1019, 1029, 1006, 3660, 3660, 1006, 1007,  987,
     3660,  984,  980, 1521,  962,  979, 2341, 2346, 2353, 2381,
     2387, 2392, 2396, 2401, 2405, 2416, 2421, 2430, 2439, 2410,
     2444, 2448, 2453, 2458, 2466, 2476, 2480, 2494, 2485, 2498,
     2512, 2517, 2521, 2526, 2530, 2534, 2538, 2544, 2549, 2558,
     2562, 2566, 2459, 2570, 2575, 2586, 2590, 2342, 2601, 2602,
     2614, 2615, 2626, 2613, 2627, 2637, 2628, 2639, 2649, 2662,
     2664, 2653, 2668, 2674, 2673, 2681, 2685, 2687, 2699, 2689,

     2700, 2705, 2710, 2716, 2721, 2723,  975,  985,  971,  980,
      978,  972,  971,  970,  964,  960,  959,  926,  924,  513,
      918,  914,  909,  926,  919,  899,  910,  887,  883,  883,
      865,  863,  853,  873,  869,  863, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660,  862,  541,  846,  841,  848,  845,
      844, 3660, 3660,  837, 3660,  829,  835,  803,  762,  765,
      755, 3660,  796, 2727, 2755, 2764, 2739, 2744, 2759, 2773,
     2778, 2782, 2787, 2791, 2798, 2810, 2802, 2814, 2819, 2834,
     2838, 2851, 2855, 2859, 2863, 2873, 2877, 2883, 2891, 2897,
     2901, 2905, 2909, 2911, 2915, 2869, 2917, 2923, 2928, 2929,

     2937, 2949, 2951, 2955, 2960, 2966, 2964, 2968, 2976, 2977,
     2972, 2992, 3000, 3004, 3008, 3013, 3014, 3018, 3019, 3024,
     3028,  784,  782,  778,  774,  575,  758,  763,  770,  769,
      768,  760,  752,  763,  753,  697,  700,  688, 3660, 3660,
     3660, 3660,  703,  696,  689,  688, 3660, 3660, 3660,  692,
      667, 3660,  684,  679, 1552,  645,  674, 3032, 3040, 3056,
     3064, 3068, 3072, 3076, 3080, 3084, 3092, 3104, 3108, 3119,
     3112, 3124, 3128, 3140, 3144, 3096, 3100, 3120, 3132, 3151,
     3156, 3160, 3164, 3166, 3168, 3178, 3192, 3187, 3191, 3200,
     3204, 3205, 3206,  651,  655,  649,  646,  652,  626,  632,

      630, 1954,  600,  608,  601,  611,  592, 3660,  591, 3660,
      562, 2584,  548, 2731, 3219, 3226, 3244, 3255, 3232, 3261,
     3266, 3272, 3276, 3280, 3284, 3227, 3240, 3290, 3289, 3298,
     3308, 3303, 3312, 3316, 3326, 3327,  570,  560,  550,  503,
      505,  472, 2748,  482,  470, 3660,  473, 3660,  414, 3660,
     2842,  401, 3340, 3351, 3335, 3355, 3367, 3376, 3380, 3387,
     3391, 3392, 3396, 3398, 3404, 3403, 3405, 3415, 3416, 3423,
      434,  411,  401,  373, 3660,  397, 3660,  361, 3660, 3430,
     3440, 3444, 3451, 3455, 3459, 3465, 3466, 3467, 3478,  386,
      335, 3660,  266, 3480, 3487, 3491, 3501,  253,  256, 3503,

     3507,  167,  171, 3515, 3516,   81, 3660, 3527, 3528, 3660,
     3563, 3569, 3575, 3581, 3587, 3593, 3599, 3605, 3611, 3617,
     3623, 3629, 3635, 3641, 3647,   55, 3653
    } ;

static yyconst flex_int16_t yy_def[1128] =
    {   0,
     1110,    1, 1111, 1112, 1113, 1113, 1114, 1114, 1110,    9,
     1110,   11, 1110,   13, 1115, 1115, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1116, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1117, 1110, 1118, 1110, 1110, 1119,
     1118, 1118, 1118, 1120, 1110, 1110, 1120, 1120, 1121, 1110,
     1110, 1122, 1110, 1110, 1110, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122,   43, 1123, 1122,

     1122, 1122, 1122, 1122, 1122, 1122, 1124, 1110, 1110, 1110,
     1124, 1124, 1110, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
     1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
     1124, 1124,   43, 1125, 1124, 1124, 1124, 1124, 1124, 1124,
     1124, 1110, 1110, 1110, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1110, 1126,   43, 1126, 1126, 1126, 1126, 1126,
     1127, 1110, 1110, 1110, 1110, 1127, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,

     1110, 1110, 1110, 1110, 1110,   43, 1116, 1110, 1110, 1110,
     1110, 1110, 1116, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1118, 1110, 1118, 1110, 1118,
     1118, 1118, 1118, 1120, 1120, 1110, 1120, 1120, 1120, 1121,
     1110, 1110, 1110, 1122, 1122, 1122, 1110, 1110, 1110, 1110,
     1110, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1110, 1122,
       98, 1123, 1123, 1123, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1124, 1124, 1124, 1110, 1110, 1110, 1110, 1110,

     1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
     1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
     1124, 1124, 1124, 1124, 1124, 1124, 1124, 1110, 1110, 1124,
      133, 1125, 1125, 1125, 1124, 1124, 1124, 1124, 1124, 1124,
     1124, 1124, 1110, 1110, 1110, 1110, 1110, 1110, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1110, 1110, 1126,  165, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1127, 1127, 1127, 1110,
     1110, 1110, 1110, 1110, 1127, 1110, 1110, 1110, 1110, 1110,

     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1118, 1120, 1120, 1120, 1110, 1110, 1122, 1110, 1110,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1123, 1122,
     1122, 1122, 1122, 1122, 1122, 1124, 1110, 1110, 1124, 1124,
     1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
     1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,

     1124, 1124, 1124, 1124, 1124, 1124, 1125, 1116, 1124, 1124,
     1124, 1124, 1124, 1124, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1127, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1118, 1120,
     1110, 1110, 1120, 1110, 1110, 1122, 1122, 1122, 1122, 1122,

     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
     1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
     1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
     1124, 1124, 1124, 1124, 1124, 1124, 1124, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,

     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1118, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
     1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
     1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,

     1124, 1124, 1124, 1124, 1124, 1124, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1118, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,

     1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
     1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
     1124, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1118, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1124, 1124, 1124, 1124, 1124,
     1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
     1124, 1124, 1124, 1126, 1126, 1126, 1126, 1126, 1126, 1126,

     1126, 1126, 1126, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1124, 1124, 1124, 1124, 1124,
     1124, 1124, 1124, 1124, 1124, 1124, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
     1126, 1126, 1126, 1126, 1110, 1110, 1110, 1110, 1110, 1122,
     1122, 1122, 1122, 1122, 1124, 1124, 1124, 1124, 1124, 1126,
     1126, 1110, 1110, 1122, 1122, 1124, 1124, 1126, 1110, 1122,

     1124, 1126, 1110, 1122, 1124, 1126, 1110, 1122, 1124,    0,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110
    } ;

static yyconst flex_int16_t yy_nxt[3712] =
    {   0,
       18,   19,   20,   21,   19,   18,   22,   23,   24,   23,
       25,   26,   18,   27,   28,   29,   18,   30,   18,   18,
       31,   18,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   18,   18,   41,   18,   18,   42,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   43,   70,   71,   43,   44,   53,   54,   55,   56,
      349,   45,   52,   58,   59,   60,   61,   65,   66,   65,
       66,   70,   71,  177,   46,  181,  177,   62,  172,  173,
      174,  172,  182,  184,  200,  175,  195,  217,  193,  191,
      185,   47, 1107,   48,  187,   49,  201,  188,   50,   51,

      192,  189,  194,  196,  190,  202,   63,  219,  218,  220,
       67,  176,   67,  203,  385,   68,  386,   68,   72,   73,
       74,   75,   73,   72,   76,   77,   78,   77,   79,   80,
       72,   81,   82,   83,   72,   84,   72,   72,   85,   72,
       86,   87,   88,   89,   90,   91,   92,   93,   94,   72,
       72,   95,   96,   72,   97,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   98,
      214,  232,   98,   99,  172,  173,  174,  172,  237,  100,
      366,  175, 1107,  238,  194,  222,  224,  225,  223,  227,
      229,  230,  101,  241,  242,  352,  355,  367,  358,  362,

      233,  359,  353,  356,  373,  360, 1106,  176,  361,  102,
      363,  103,  374,  104,  426,  412,  105,  106,  107,  108,
      109,  110,  108,  107,  111,  112,  113,  112,  114,  115,
      107,  116,  117,  118,  107,  119,  107,  107,  120,  107,
      121,  122,  123,  124,  125,  126,  127,  128,  129,  107,
      107,  130,  131,  107,  132,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  133,
      383,  364,  133,  134,  245,  294,  245,  245,  294,  135,
      380,  247,  248,  249,  247,  365,  371,  376,  377,  376,
      376,  384,  136,  177,  365, 1103,  177,  423,  372, 1102,

      424,  407,  219,  540,  220,  237,  541,  246,  295,  137,
      238,  138, 1099,  139,  250,  408,  140,  141,   18,  142,
      143,  144,  142,   18,   22,   23,   24,  145,  146,   26,
      147,  148,  149,  150,  147,  151,  147,  147,  152,  147,
      153,  154,  155,  156,  157,  158,  159,  160,  161,  147,
      147,  162,  163,  147,  164,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,   18,   18,  165,
      241,  242,  165,   44,  249,  251,  249,  249, 1098,   45,
      217,  245,  294,  245,  245,  294,  245,  294,  245,  245,
      294,  245,  166,  245,  245,  252,  245, 1092,  245,  245,

      245,  218,  245,  245, 1093,  252,  232,  250, 1092,  167,
     1091,  168, 1077,  169,  246,  295,  170,   51,  206,  246,
      295,  206,  207,  245,  246,  245,  245, 1090,  208,  246,
      222,  224,  225,  246,  245,  233,  245,  245,  245,  253,
      245,  245,  543,  529,  294, 1075,  245,  294,  245,  245,
     1079, 1078,  254,  256,  294,  383,  246,  294,  209,  255,
      210,  245,  303,  245,  245,  211,  212,  246,  257,  304,
      302,  246,  227,  229,  230,  258,  384,  295,  575,  246,
      245,  576,  245,  245, 1077,  691, 1076,  295,  692,  245,
      259,  245,  245, 1075,  246,  245,  264,  245,  245,  245,

      268,  245,  245,  245,  847,  245,  245,  265, 1074,  584,
      266,  260,  584,  246,  261,  524, 1048,  269,  262, 1073,
      848,  263,  246,  245,  267,  245,  245,  927,  246,  525,
      270,  245,  246,  245,  245,  245,  246,  245,  245,  245,
      564,  245,  245,  928,  245,  271,  245,  245,  680,  245,
      275,  245,  245,  273,  565,  943,  246,  585,  276,  277,
      272, 1046,  681,  294,  246,  274,  294,  283,  246,  283,
      283,  944,  246,  278,  279,  278,  278,  246,  281,  248,
      249,  281,  246, 1072,  245,  280,  245,  245,  245,  994,
      245,  245,  245, 1071,  245,  245,  295, 1050, 1049,  285,

      284,  245, 1048,  245,  245,  995,  246,  245, 1047,  245,
      245,  250,  245,  267,  245,  245,  245,  246,  245,  245,
      584,  246, 1046,  584, 1045,  246,  296,  297,  298,  296,
      288, 1044,  294,  294,  246,  294,  294, 1043,  286, 1042,
      246,  301,  301, 1010,  287,  246,  290,  294,  291,  246,
      294,  289,  298,  300,  298,  298, 1041,  294,  294,  299,
      294,  294,  305, 1008,  292,  295,  295,  294,  585, 1040,
      294,  294, 1039,  294,  294, 1038,  294, 1037,  957,  306,
      295,  294, 1014,  313,  294,  299,  307,  308, 1011,  309,
      295,  295,  310,  320,  314, 1010,  311, 1009,  294,  312,

      295,  294,  294, 1008,  295,  294,  295,  294,  319,  315,
      294, 1007, 1006,  317,  295,  294, 1005,  294,  294,  294,
      294,  294,  294,  316,  294,  327,  328,  329,  327, 1004,
      318,  295,  326,  322, 1003,  295,  321, 1002,  294,  294,
      295,  294,  294, 1001,  333,  323,  213,  333,  295,  324,
      295,  213,  295,  294,  295,  330,  294,  325,  295,  331,
      297,  298,  331,  294,  335,  294,  294,  336,  294, 1000,
      294,  295,  295,  294,  952,  999,  998,  334,  316,  949,
      948,  947,  337,  997,  996,  942,  295,  388,  338,  941,
      388,  584,  299,  940,  584,  939,  295,  340,  295,  341,

      957,  956,  955,  295,  343,  344,  345,  343,  954,  339,
      347,  348,  347,  347,  379,  344,  345,  379,  342,  953,
      389,  390,  391,  392,  390,  394,  391,  394,  394,  395,
      396,  397,  395,  435,  436,  437,  435,  346,  245,  585,
      245,  245,  245,  346,  245,  245,  952,  346,  438,  439,
      438,  438,  951,  950,  393,  949,  948,  734,  393,  947,
      734,  946,  389,  247,  248,  249,  247,  249,  248,  249,
      249,  246,  945,  942,  941,  246,  440,  279,  440,  440,
      940,  246,  433,  245,  939,  245,  245,  245,  938,  245,
      245,  245,  252,  245,  245,  245,  250,  245,  245,  937,

      250,  245,  442,  245,  245,  735,  936,  935,  245,  441,
      245,  245,  245,  934,  245,  245,  246,  443,  933,  445,
      246,  855,  932,  245,  246,  245,  245,  444,  246,  294,
      853,  446,  294,  245,  246,  245,  245,  852,  447,  931,
      245,  246,  245,  245,  930,  246,  929,  245,  448,  245,
      245,  245,  926,  245,  245,  925,  246,  245,  450,  245,
      245,  245,  295,  245,  245,  245,  246,  245,  245,  449,
      844,  843,  451,  246,  245,  842,  245,  245,  452,  453,
      246,  841,  840,  839,  246,  245,  454,  245,  245,  838,
      246,  837,  455,  245,  246,  245,  245,  457,  246,  924,

      245,  923,  245,  245,  922,  294,  863,  246,  294,  456,
      245,  862,  245,  245,  245,  861,  245,  245,  246,  459,
      860,  460,  245,  458,  245,  245,  246,  245,  859,  245,
      245,  858,  245,  246,  245,  245,  857,  856,  295,  463,
      855,  461,  854,  246,  462,  853,  852,  246,  245,  464,
      245,  245,  851,  850,  245,  246,  245,  245,  849,  846,
      246,  278,  279,  278,  278,  246,  245,  845,  245,  245,
      465,  844,  283,  466,  283,  283,  467,  283,  843,  283,
      283,  246,  469,  439,  469,  469,  245,  246,  245,  245,
      245,  842,  245,  245,  246,  245,  841,  245,  245,  246,

      840,  839,  838,  468,  294,  284,  245,  294,  245,  245,
      284,  294,  470,  455,  294,  284,  837,  473,  245,  246,
      245,  245,  480,  246,  471,  836,  479,  245,  246,  245,
      245,  472,  245,  835,  245,  245,  834,  295,  833,  246,
      245,  288,  245,  245,  295,  476,  477,  478,  476,  832,
      831,  246,  296,  297,  298,  296,  298,  297,  298,  298,
      246,  294,  289,  294,  294,  246,  294,  474,  329,  328,
      329,  329,  301,  246,  830,  829,  294,  475,  295,  294,
      727,  294,  726,  481,  294,  299,  828,  294,  294,  299,
      294,  294,  483,  827,  295,  294,  295,  294,  294,  826,

      294,  825,  482,  485,  294,  294,  484,  294,  294,  295,
      486,  824,  823,  294,  295,  488,  294,  822,  718,  294,
      295,  295,  294,  717,  294,  821,  487,  294,  295,  489,
      295,  294,  490,  294,  294,  491,  294,  295,  295,  294,
      294,  820,  294,  294,  492,  294,  295,  294,  294,  819,
      294,  493,  295,  818,  817,  494,  495,  295,  498,  497,
      294,  816,  294,  294,  295,  294,  295,  294,  294,  496,
      294,  294,  295,  295,  501,  500,  815,  814,  295,  499,
      295,  813,  294,  294,  502,  294,  294,  707,  812,  294,
      503,  294,  294,  295,  294,  295,  327,  328,  329,  327,

      295,  295,  504,  811,  810,  505,  329,  328,  329,  329,
      333,  294,  213,  333,  294,  295,  295,  213,  333,  506,
      213,  333,  295,  294,  295,  213,  294,  511,  809,  295,
      507,  477,  508,  507,  514,  294,  294,  213,  294,  294,
      808,  807,  736,  334,  295,  510,  512,  733,  732,  509,
      493,  334,  294,  731,  294,  294,  295,  294,  347,  338,
      347,  347,  730,  334,  343,  344,  345,  343,  295,  295,
      347,  344,  347,  347,  376,  377,  376,  376,  729,  728,
      339,  376,  377,  376,  376,  295,  388,  295,  727,  388,
      388,  346,  513,  388,  726,  725,  724,  346,  549,  550,

      551,  549,  723,  346,  390,  391,  392,  390,  394,  391,
      394,  394,  397,  396,  397,  397,  722,  721,  394,  389,
      394,  394,  720,  389,  395,  396,  397,  395,  719,  718,
      717,  389,  397,  396,  397,  397,  734,  393,  716,  734,
      715,  393,  582,  583,  582,  582,  590,  591,  592,  590,
      714,  393,  593,  594,  595,  593,  713,  389,  435,  436,
      437,  435,  437,  436,  437,  437,  438,  439,  438,  438,
      440,  279,  440,  440,  712,  245,  711,  245,  245,  245,
      710,  245,  245,  709,  735,  245,  596,  245,  245,  708,
      245,  707,  245,  245,  245,  433,  245,  245,  706,  246,

      705,  433,  245,  597,  245,  245,  294,  235,  246,  294,
      598,  600,  246,  245,  704,  245,  245,  632,  246,  599,
      703,  702,  734,  246,  601,  734,  245,  246,  245,  245,
      245,  701,  245,  245,  700,  246,  602,  603,  245,  295,
      245,  245,  699,  543,  698,  604,  246,  697,  245,  696,
      245,  245,  245, 1012,  245,  245, 1012,  695,  245,  246,
      245,  245,  245,  246,  245,  245,  605,  694,  693,  608,
      735,  246,  606,  690,  689,  610,  245,  607,  245,  245,
      688,  246,  687,  609,  245,  246,  245,  245,  686,  685,
      245,  246,  245,  245,  684,  246,  245,  611,  245,  245,

      245, 1013,  245,  245,  245,  613,  245,  245,  614,  246,
      683,  245,  612,  245,  245,  615,  245,  246,  245,  245,
      682,  679,  678,  246,  616,  245,  617,  245,  245,  246,
      677,  676,  618,  246,  675,  674,  245,  246,  245,  245,
      245,  673,  245,  245,  246,  245,  672,  245,  245,  246,
      671,  294,  670,  619,  294,  622,  620,  245,  246,  245,
      245,  669,  623,  245,  621,  245,  245,  668,  636,  246,
      624,  589,  588,  246,  469,  439,  469,  469,  246,  626,
      583,  626,  626,  627,  295,  245,  627,  587,  426,  245,
      246,  245,  245,  586,  581,  294,  246,  625,  294,  245,

      580,  245,  245,  245,  579,  245,  245,  284,  245,  578,
      245,  245,  246,  577,  574,  573,  246,  476,  477,  478,
      476,  294,  246,  294,  294,  470,  294,  572,  295,  629,
      294,  628,  246,  294,  571,  665,  246,  478,  477,  478,
      478,  246,  630,  294,  294,  633,  294,  294,  634,  631,
      295,  570,  569,  568,  295,  294,  295,  294,  294,  635,
      294,  294,  567,  295,  294,  637,  639,  638,  294,  566,
      294,  294,  640,  294,  563,  294,  295,  295,  294,  294,
      294,  294,  294,  294,  294,  562,  644,  561,  295,  641,
      295,  560,  642,  646,  295,  643,  294,  559,  558,  294,

      645,  295,  647,  295,  557,  556,  294,  648,  295,  294,
      555,  649,  295,  295,  295,  554,  294,  294,  650,  294,
      294,  294,  294,  294,  294,  294,  294,  553,  552,  295,
      652,  651,  294,  294,  294,  294,  294,  294,  654,  295,
      548,  294,  294,  653,  294,  294,  547,  660,  658,  295,
      295,  657,  546,  545,  295,  295,  295,  544,  659,  663,
      655,  294,  663,  656,  294,  295,  295,  295,  542,  539,
      507,  477,  508,  507,  295,  295,  661,  213,  508,  477,
      508,  508,  662,  583,  582,  662,  294,  509,  294,  294,
      538,  294,  295,  537,  295,  582,  583,  582,  582,  549,

      550,  551,  549,  334,  536,  535,  534,  664,  551,  550,
      551,  551,  533,  532,  531,  295,  530,  529,  528,  295,
      245,  295,  245,  245,  527,  666,  526,  523,  522,  667,
      743,  521,  389,  582,  583,  582,  582,  590,  591,  592,
      590,  592,  591,  592,  592,  593,  594,  595,  593,  595,
      594,  595,  595,  246,  245, 1012,  245,  245, 1012,  245,
      520,  245,  245,  245,  519,  245,  245,  245,  518,  245,
      245,  737,  738,  245,  517,  245,  245,  516,  294,  515,
      245,  294,  245,  245,  350,  740,  235,  246,  245,  241,
      245,  245,  246,  739,  235,  742,  246,  434,  433,  235,

      246,  741,  245, 1013,  245,  245,  246,  245,  774,  245,
      245,  295,  245,  246,  245,  245,  245,  744,  245,  245,
      245,  246,  245,  245,  231,  745,  432,  245,  746,  245,
      245,  245,  227,  245,  245,  246,  222,  749,  748,  245,
      246,  245,  245,  431,  747,  246,  752,  430,  245,  246,
      245,  245,  750,  246,  429,  245,  428,  245,  245,  245,
      246,  245,  245,  427,  246,  753,  221,  755,  245,  751,
      245,  245,  246,  216,  245,  215,  245,  245,  754,  425,
      422,  246,  245,  756,  245,  245,  421,  420,  246,  757,
      419,  418,  246,  245,  417,  245,  245,  758,  416,  415,

      245,  246,  245,  245,  414,  413,  412,  246,  245,  759,
      245,  245,  411,  410,  245,  246,  245,  245,  245,  761,
      245,  245,  409,  406,  762,  405,  246,  404,  763,  760,
      403,  402,  245,  246,  245,  245,  245,  401,  245,  245,
      245,  246,  245,  245,  400,  399,  627,  246,  245,  627,
      764,  246,  626,  583,  626,  626,  245,  398,  245,  245,
      245,  765,  245,  245,  245,  246,  245,  245,  770,  246,
      245,  770,  179,  246,  294,  294,  382,  294,  294,  246,
      294,  294,  381,  294,  294,  246,  766,  294,  773,  246,
      294,  772,  294,  246,  628,  294,  378,  246,  775,  769,

      294,  246,  777,  294,  767,  375,  768,  295,  295,  776,
      778,  370,  294,  295,  295,  294,  771,  369,  368,  294,
      295,  779,  294,  294,  294,  295,  294,  294,  294,  294,
      357,  294,  294,  295,  294,  780,  354,  294,  294,  294,
      781,  294,  294,  351,  294,  295,  784,  294,  788,  350,
      783,  782,  295,  785,  787,  786,  295,  295,  350,  243,
      294,  295,  295,  294,  239,  236,  294,  295,  791,  294,
      789,  295,  295,  294,  235,  294,  294,  295,  294,  294,
      294,  294,  294,  294,  294,  231,  294,  227,  792,  294,
      793,  222,  796,  295,  790,  794,  797,  294,  294,  295,

      294,  294,  294,  221,  216,  294,  295,  798,  295,  795,
      215,  205,  295,  295,  295,  294,  799,  204,  294,  295,
      662,  583,  582,  662,  199,  663,  294,  800,  663,  294,
      295,  295,  198,  294,  294,  295,  294,  294,  805,  197,
      186,  805,  245,  294,  245,  245,  294,  245,  295,  245,
      245,  183,  180,  295,  245,  179,  245,  245,  295,  295,
      179,  801,  865,  178, 1110, 1110,  295,  295, 1110,  804,
      864,  295, 1110,  664,  802,  246,  295, 1110, 1110,  803,
      246,  866,  245, 1110,  245,  245,  806,  246,  245, 1110,
      245,  245,  867,  245, 1110,  245,  245,  245,  868,  245,

      245, 1110,  245,  869,  245,  245,  245, 1110,  245,  245,
     1110,  245,  870,  245,  245,  246,  871,  245, 1110,  245,
      245,  246,  245, 1110,  245,  245,  246,  872, 1110, 1110,
      246,  245,  873,  245,  245,  246, 1110, 1110,  876,  246,
      245,  874,  245,  245,  246,  245, 1110,  245,  245,  245,
      246,  245,  245, 1110,  245,  246,  245,  245,  877,  245,
      294,  245,  245,  294,  246, 1110, 1110,  245,  875,  245,
      245, 1110, 1110,  246,  878,  894,  879,  245,  246,  245,
      245,  245,  246,  245,  245, 1110,  245,  246,  245,  245,
     1110,  882,  246,  295, 1110,  245,  880,  245,  245,  245,

      246,  245,  245, 1110, 1110,  883,  881, 1110,  884,  885,
      246, 1110, 1110,  245,  246,  245,  245, 1110,  245,  246,
      245,  245,  245, 1110,  245,  245, 1110,  245,  246,  245,
      245,  245,  246,  245,  245,  245, 1110,  245,  245,  245,
     1110,  245,  245,  886, 1110,  245,  246,  245,  245, 1110,
      245,  246,  245,  245,  888,  246,  887, 1110, 1110,  770,
      246,  245,  770,  245,  246,  245,  245,  294,  246, 1110,
      294,  294,  246, 1110,  294,  889,  294, 1110,  246,  294,
      890, 1110, 1110,  246,  891, 1012,  896,  294, 1012, 1110,
      294,  294,  246, 1110,  294,  893,  246,  897,  895, 1110,

      295,  898,  294,  294,  295,  294,  294,  771, 1110,  295,
     1110,  892,  899,  900,  294,  294,  294,  294,  294,  294,
      295, 1110, 1110, 1110,  295,  901,  902,  294,  294,  294,
      294,  294,  294, 1013, 1110,  295,  295,  903,  294, 1110,
      294,  294,  904,  294, 1110, 1110, 1110,  295,  295,  295,
      294,  906, 1110,  294,  294,  905,  908,  294, 1110, 1110,
      295,  295,  295,  294,  911,  294,  294,  907,  294,  294,
     1110,  295,  294,  295,  294,  294, 1110,  294,  294,  912,
     1110, 1110,  294,  295,  914,  294,  294,  295,  294,  294,
      294,  294,  909,  294,  910, 1110,  295,  913,  295, 1110,

      294,  294,  295,  294,  294, 1110,  294,  295,  295,  294,
     1110,  294,  915,  917,  294,  295, 1110,  294, 1110,  295,
      294,  295,  805,  295,  294,  805, 1110,  294,  245,  916,
      245,  245, 1051,  295,  295, 1051, 1110, 1110,  958,  295,
      245,  918,  245,  245,  295,  245,  919,  245,  245, 1051,
      295,  920, 1051, 1110, 1110,  295,  245,  295,  245,  245,
      245,  246,  245,  245, 1110,  245,  959,  245,  245, 1110,
      806, 1110,  921,  246,  245,  960,  245,  245,  246,  245,
     1052,  245,  245,  245, 1110,  245,  245, 1110,  245,  246,
      245,  245,  245,  246,  245,  245, 1110, 1052,  246,  245,

     1110,  245,  245,  245, 1110,  245,  245,  246, 1110,  961,
     1110,  245,  246,  245,  245,  245,  246,  245,  245, 1110,
      245,  246,  245,  245,  962,  246, 1110, 1110,  964, 1110,
      966, 1110,  246, 1110,  965,  245,  246,  245,  245,  245,
      963,  245,  245, 1051,  246,  967, 1051, 1110,  246,  968,
     1110, 1110,  245,  246,  245,  245,  245, 1110,  245,  245,
      245, 1110,  245,  245,  245, 1110,  245,  245,  246, 1110,
      294, 1110,  246,  294,  245,  969,  245,  245,  245, 1110,
      245,  245, 1110, 1110,  245,  246,  245,  245,  971,  246,
     1110, 1052,  245,  246,  245,  245,  970,  246,  245,  972,

      245,  245,  245,  295,  245,  245,  245,  246,  245,  245,
      294,  246,  294,  294, 1110,  294,  294,  246,  294,  294,
      976,  294,  977, 1110,  294,  246,  978,  294, 1110,  294,
      294,  246,  294,  294,  974,  246, 1110,  973,  294,  246,
     1110,  294, 1110,  295, 1110,  295, 1110,  975, 1110,  295,
      294,  295,  294,  294, 1110,  294,  294,  295, 1110,  294,
     1110,  294,  295,  295,  294,  294,  979,  294,  294,  294,
      294,  295,  294,  294,  980, 1110,  294,  294,  294,  984,
      294,  294, 1110,  295,  983,  295, 1110,  985,  986,  295,
      981, 1110,  982,  294,  295, 1110,  294, 1110,  295, 1110,

      295,  294,  295, 1110,  294,  294,  295, 1110,  294,  294,
      295,  295,  294, 1110,  294,  294,  987,  294,  294,  294,
      294, 1110,  294,  294,  989,  294,  295, 1110,  294,  294,
      990,  988,  294,  245,  295,  245,  245, 1110,  295, 1110,
     1110,  245,  295,  245,  245, 1110, 1110,  295,  295, 1110,
     1110, 1110,  295,  295, 1110, 1110,  992,  245,  295,  245,
      245, 1110,  295, 1110,  991,  245,  246,  245,  245,  245,
      993,  245,  245,  245,  246,  245,  245,  245, 1110,  245,
      245,  245, 1110,  245,  245,  245, 1110,  245,  245, 1110,
      246, 1110, 1016,  245, 1015,  245,  245,  294,  246, 1017,

      294,  294,  246, 1018,  294,  245,  246,  245,  245,  245,
      246,  245,  245,  245,  246,  245,  245, 1110,  246, 1019,
      245,  294,  245,  245,  294,  245,  246,  245,  245,  245,
      295,  245,  245,  294,  295, 1021,  294, 1022,  246, 1110,
     1110, 1023,  246,  245, 1023,  245,  246,  245,  245, 1020,
     1110, 1110,  294,  246,  295,  294, 1110,  294,  246, 1110,
      294,  294,  246, 1110,  294,  294,  295,  294,  294,  294,
      294, 1110,  294, 1110,  246, 1110, 1027, 1026,  246,  294,
     1110, 1025,  294, 1028, 1110,  295, 1110, 1029,  294, 1024,
      295,  294,  294,  294,  295,  294,  294, 1110,  295, 1110,

      295,  294,  295, 1030,  294,  294, 1034,  294,  294, 1034,
      294, 1032,  295, 1033, 1110, 1110, 1110, 1031, 1110, 1110,
      245,  295,  245,  245, 1110,  295,  295,  245,  294,  245,
      245,  294, 1110,  245,  295,  245,  245, 1110,  295,  295,
      295,  294, 1053, 1036,  294,  245, 1110,  245,  245, 1054,
     1062, 1110, 1110,  246, 1035, 1055,  245, 1110,  245,  245,
      246,  295,  245, 1063,  245,  245,  246,  245, 1110,  245,
      245, 1056, 1057,  245,  295,  245,  245, 1023,  246,  245,
     1023,  245, 1110,  245,  245, 1060, 1110,  245, 1060,  246,
      294,  294, 1110,  294,  294,  246, 1110, 1110, 1110,  294,

      246, 1064,  294, 1110,  294, 1065,  246,  294, 1058,  294,
      246, 1110,  294,  294,  246, 1110,  294, 1034,  246, 1066,
     1034, 1110, 1110,  295,  295, 1024, 1110,  294, 1069, 1059,
      294, 1069,  295, 1061, 1110, 1110,  245,  295,  245,  245,
     1110,  245,  295,  245,  245, 1110,  295, 1110, 1067, 1110,
      295, 1080,  245, 1110,  245,  245,  245, 1110,  245,  245,
      295,  295, 1110, 1110, 1110, 1035, 1082, 1081,  245,  246,
      245,  245, 1110, 1110,  246, 1068, 1070,  245, 1110,  245,
      245,  245, 1110,  245,  245,  246, 1110, 1110, 1060,  246,
      245, 1060,  245,  294,  245,  245,  294,  294, 1110,  294,

      294,  246,  294, 1085,  294,  294,  294,  294,  294,  294,
      246, 1110, 1086, 1083,  246, 1087,  294, 1069, 1110,  294,
     1069,  246, 1110, 1110,  294,  246,  295,  294, 1110, 1110,
      295,  245,  295,  245,  245, 1110, 1061,  295,  295,  295,
     1084,  245, 1088,  245,  245,  245, 1110,  245,  245,  295,
      295, 1094,  245, 1110,  245,  245,  245,  295,  245,  245,
      294, 1110, 1110,  294,  246, 1070,  294,  294,  294,  294,
      294,  294, 1089, 1110,  246, 1110, 1096, 1110,  246,  294,
     1110,  245,  294,  245,  245,  246, 1110, 1110,  245,  246,
      245,  245,  294,  295, 1095,  294, 1110, 1110, 1110,  295,

      295,  295,  294, 1110,  245,  294,  245,  245,  294, 1110,
     1097,  294,  295, 1110,  246, 1110,  245,  294,  245,  245,
      294,  246, 1110, 1110, 1110,  295, 1108, 1109,  245,  294,
      245,  245,  294, 1100, 1110,  295, 1110,  246, 1110, 1110,
     1110,  295, 1104, 1110, 1110, 1110, 1105, 1101, 1110,  246,
      295, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110,  246,  295,   52,   52,   52,   52,   52,   52,   57,
       57,   57,   57,   57,   57,   64,   64,   64,   64,   64,
       64,   69,   69,   69,   69,   69,   69,  171,  171,  171,
      171,  171,  171,  213,  213, 1110,  213,  213,  213,  223,

      223,  223,  223,  223,  223,  226, 1110, 1110, 1110,  226,
      226,  228,  228,  228,  228,  228,  228,  234,  234, 1110,
     1110,  234,  234,  240,  240,  240,  240,  240,  240,  244,
      244, 1110,  244,  244,  244,  282,  282, 1110,  282,  282,
      282,  293,  293, 1110, 1110, 1110,  293,  332,  332, 1110,
      332,  332,  332,  387,  387, 1110, 1110, 1110,  387,   17,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,

     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110
    } ;

static yyconst flex_int16_t yy_chk[3712] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    7,    7,    2,    2,    3,    3,    3,    3,
     1126,    2,    4,    4,    4,    4,    4,    5,    5,    6,
        6,    8,    8,   19,    2,   28,   19,    4,   15,   15,
       15,   15,   28,   30,   39,   15,   35,   49,   34,   33,
       30,    2, 1106,    2,   32,    2,   39,   32,    2,    2,

       33,   32,   34,   35,   32,   40,    4,   50,   49,   50,
        5,   15,    6,   40,  170,    5,  170,    6,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,   10,
       46,   63,   10,   10,   16,   16,   16,   16,   67,   10,
      156,   16, 1103,   67,   46,   55,   55,   55,   60,   60,
       60,   60,   10,   69,   69,  149,  151,  156,  153,  154,

       63,  153,  149,  151,  161,  153, 1102,   16,  153,   10,
      154,   10,  161,   10,  214,  214,   10,   10,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   12,
      169,  155,   12,   12,   72,  107,   72,   72,  107,   12,
      166,   73,   73,   73,   73,  155,  160,  163,  163,  163,
      163,  169,   12,  177,  166, 1099,  177,  204,  160, 1098,

      204,  189,  211,  375,  211,  237,  375,   72,  107,   12,
      237,   12, 1093,   12,   73,  189,   12,   12,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   14,
      240,  240,   14,   14,   75,   75,   75,   75, 1091,   14,
      218,   76,  111,   76,   76,  111,   77,  115,   77,   77,
      115,   78,   14,   78,   78,   77,   79, 1090,   79,   79,

       80,  218,   80,   80, 1078,   79,  233,   75, 1076,   14,
     1074,   14, 1073,   14,   76,  111,   14,   14,   43,   77,
      115,   43,   43,   81,   78,   81,   81, 1072,   43,   79,
      225,  225,  225,   80,   82,  233,   82,   82,   83,   81,
       83,   83,  380,  380,  117, 1071,   84,  117,   84,   84,
     1052, 1049,   82,   83,  116,  384,   81,  116,   43,   82,
       43,   85,  117,   85,   85,   43,   43,   82,   84,  117,
      116,   83,  230,  230,  230,   84,  384,  117,  420,   84,
       87,  420,   87,   87, 1047,  537, 1045,  116,  537,   89,
       85,   89,   89, 1044,   85,   86,   87,   86,   86,   88,

       89,   88,   88,   90,  715,   90,   90,   87, 1042,  427,
       88,   86,  427,   87,   86,  360, 1041,   89,   86, 1040,
      715,   86,   89,   91,   88,   91,   91,  820,   86,  360,
       90,   92,   88,   92,   92,   93,   90,   93,   93,   94,
      410,   94,   94,  820,   95,   91,   95,   95,  527,   97,
       94,   97,   97,   93,  410,  846,   91,  427,   94,   95,
       92, 1039,  527,  135,   92,   93,  135,   99,   93,   99,
       99,  846,   94,   96,   96,   96,   96,   95,   98,   98,
       98,   98,   97, 1038,  100,   97,  100,  100,  101,  926,
      101,  101,  102, 1037,  102,  102,  135, 1013, 1011,  101,

       99,  103, 1009,  103,  103,  926,   96,  104, 1007,  104,
      104,   98,  105,  101,  105,  105,  106,  100,  106,  106,
      544,  101, 1006,  544, 1005,  102,  108,  108,  108,  108,
      104, 1004,  112,  114,  103,  112,  114, 1003,  102, 1001,
      104,  112,  114, 1000,  103,  105,  105,  118,  105,  106,
      118,  104,  110,  110,  110,  110,  999,  119,  120,  108,
      119,  120,  118,  998,  106,  112,  114,  122,  544,  997,
      122,  126,  996,  121,  126,  995,  121,  994,  957,  119,
      118,  125,  956,  122,  125,  110,  119,  120,  954,  121,
      119,  120,  121,  126,  122,  953,  121,  951,  123,  121,

      122,  123,  124,  950,  126,  124,  121,  127,  125,  123,
      127,  946,  945,  124,  125,  128,  944,  130,  128,  132,
      130,  137,  132,  123,  137,  131,  131,  131,  131,  943,
      124,  123,  130,  128,  938,  124,  127,  937,  129,  138,
      127,  129,  138,  936,  134,  128,  134,  134,  128,  129,
      130,  134,  132,  136,  137,  132,  136,  129,  131,  133,
      133,  133,  133,  140,  136,  139,  140,  137,  139,  935,
      141,  129,  138,  141,  934,  933,  932,  134,  136,  931,
      930,  929,  138,  928,  927,  925,  136,  171,  139,  924,
      171,  584,  133,  923,  584,  922,  140,  140,  139,  140,

      863,  861,  860,  141,  142,  142,  142,  142,  859,  139,
      144,  144,  144,  144,  165,  165,  165,  165,  141,  858,
      171,  172,  172,  172,  172,  174,  174,  174,  174,  176,
      176,  176,  176,  239,  239,  239,  239,  142,  244,  584,
      244,  244,  245,  144,  245,  245,  857,  165,  246,  246,
      246,  246,  856,  854,  172,  851,  850,  588,  174,  849,
      588,  848,  176,  247,  247,  247,  247,  249,  249,  249,
      249,  244,  847,  845,  836,  245,  250,  250,  250,  250,
      835,  246,  239,  252,  834,  252,  252,  253,  833,  253,
      253,  254,  252,  254,  254,  255,  247,  255,  255,  832,

      249,  256,  254,  256,  256,  588,  831,  830,  257,  253,
      257,  257,  258,  829,  258,  258,  252,  255,  828,  257,
      253,  827,  826,  259,  254,  259,  259,  256,  255,  293,
      825,  258,  293,  260,  256,  260,  260,  824,  259,  823,
      261,  257,  261,  261,  822,  258,  821,  262,  260,  262,
      262,  263,  819,  263,  263,  818,  259,  264,  262,  264,
      264,  265,  293,  265,  265,  266,  260,  266,  266,  261,
      817,  816,  262,  261,  268,  815,  268,  268,  263,  264,
      262,  814,  813,  812,  263,  267,  265,  267,  267,  811,
      264,  810,  266,  269,  265,  269,  269,  268,  266,  809,

      270,  808,  270,  270,  807,  294,  736,  268,  294,  267,
      271,  735,  271,  271,  273,  733,  273,  273,  267,  270,
      732,  271,  272,  269,  272,  272,  269,  274,  730,  274,
      274,  729,  275,  270,  275,  275,  728,  725,  294,  274,
      724,  272,  723,  271,  273,  722,  721,  273,  276,  275,
      276,  276,  720,  719,  277,  272,  277,  277,  716,  714,
      274,  278,  278,  278,  278,  275,  280,  713,  280,  280,
      276,  712,  282,  277,  282,  282,  277,  283,  711,  283,
      283,  276,  284,  284,  284,  284,  285,  277,  285,  285,
      286,  710,  286,  286,  278,  287,  709,  287,  287,  280,

      708,  706,  705,  280,  302,  282,  288,  302,  288,  288,
      283,  303,  285,  285,  303,  284,  704,  288,  289,  285,
      289,  289,  303,  286,  286,  703,  302,  290,  287,  290,
      290,  287,  291,  702,  291,  291,  701,  302,  699,  288,
      292,  289,  292,  292,  303,  295,  295,  295,  295,  698,
      697,  289,  296,  296,  296,  296,  298,  298,  298,  298,
      290,  304,  289,  301,  304,  291,  301,  290,  299,  299,
      299,  299,  301,  292,  696,  695,  305,  291,  295,  305,
      694,  306,  693,  304,  306,  296,  692,  307,  308,  298,
      307,  308,  306,  691,  304,  309,  301,  310,  309,  690,

      310,  689,  305,  308,  311,  312,  307,  311,  312,  305,
      309,  688,  687,  313,  306,  311,  313,  686,  685,  314,
      307,  308,  314,  684,  315,  683,  310,  315,  309,  311,
      310,  316,  312,  317,  316,  313,  317,  311,  312,  318,
      319,  682,  318,  319,  314,  322,  313,  320,  322,  681,
      320,  315,  314,  680,  679,  316,  317,  315,  320,  319,
      321,  678,  323,  321,  316,  323,  317,  324,  325,  318,
      324,  325,  318,  319,  323,  322,  677,  676,  322,  321,
      320,  675,  330,  326,  324,  330,  326,  674,  673,  341,
      325,  337,  341,  321,  337,  323,  327,  327,  327,  327,

      324,  325,  326,  672,  671,  326,  329,  329,  329,  329,
      332,  336,  332,  332,  336,  330,  326,  332,  333,  330,
      333,  333,  341,  335,  337,  333,  335,  337,  670,  327,
      334,  334,  334,  334,  341,  338,  339,  334,  338,  339,
      669,  668,  589,  332,  336,  336,  338,  587,  586,  335,
      335,  333,  340,  585,  342,  340,  335,  342,  347,  339,
      347,  347,  581,  334,  343,  343,  343,  343,  338,  339,
      345,  345,  345,  345,  346,  346,  346,  346,  580,  579,
      339,  376,  376,  376,  376,  340,  387,  342,  578,  387,
      388,  347,  340,  388,  577,  576,  575,  343,  389,  389,

      389,  389,  574,  345,  390,  390,  390,  390,  392,  392,
      392,  392,  393,  393,  393,  393,  573,  572,  394,  387,
      394,  394,  571,  388,  395,  395,  395,  395,  570,  569,
      568,  389,  397,  397,  397,  397,  700,  390,  567,  700,
      566,  392,  426,  426,  426,  426,  433,  433,  433,  433,
      565,  394,  434,  434,  434,  434,  564,  395,  435,  435,
      435,  435,  437,  437,  437,  437,  438,  438,  438,  438,
      440,  440,  440,  440,  563,  441,  562,  441,  441,  442,
      561,  442,  442,  560,  700,  443,  441,  443,  443,  559,
      444,  558,  444,  444,  445,  433,  445,  445,  557,  438,

      556,  434,  446,  442,  446,  446,  479,  435,  441,  479,
      443,  445,  442,  447,  555,  447,  447,  479,  443,  444,
      554,  553,  734,  444,  446,  734,  448,  445,  448,  448,
      449,  552,  449,  449,  548,  446,  447,  448,  450,  479,
      450,  450,  547,  546,  545,  449,  447,  542,  451,  541,
      451,  451,  452,  955,  452,  452,  955,  540,  453,  448,
      453,  453,  454,  449,  454,  454,  450,  539,  538,  453,
      734,  450,  451,  536,  535,  454,  455,  452,  455,  455,
      534,  451,  533,  453,  456,  452,  456,  456,  532,  531,
      457,  453,  457,  457,  530,  454,  458,  455,  458,  458,

      459,  955,  459,  459,  461,  457,  461,  461,  458,  455,
      529,  460,  456,  460,  460,  459,  462,  456,  462,  462,
      528,  526,  525,  457,  460,  463,  461,  463,  463,  458,
      524,  523,  462,  459,  522,  521,  464,  461,  464,  464,
      465,  520,  465,  465,  460,  466,  519,  466,  466,  462,
      518,  483,  517,  463,  483,  465,  463,  467,  463,  467,
      467,  516,  466,  468,  464,  468,  468,  515,  483,  464,
      467,  432,  431,  465,  469,  469,  469,  469,  466,  470,
      470,  470,  470,  471,  483,  471,  471,  430,  429,  472,
      467,  472,  472,  428,  425,  511,  468,  468,  511,  473,

      424,  473,  473,  474,  423,  474,  474,  469,  475,  422,
      475,  475,  470,  421,  419,  418,  471,  476,  476,  476,
      476,  480,  472,  481,  480,  473,  481,  417,  511,  472,
      482,  471,  473,  482,  416,  511,  474,  478,  478,  478,
      478,  475,  474,  484,  485,  480,  484,  485,  481,  475,
      476,  415,  414,  413,  480,  486,  481,  487,  486,  482,
      487,  488,  412,  482,  488,  484,  486,  485,  489,  411,
      490,  489,  487,  490,  409,  491,  484,  485,  491,  494,
      492,  493,  494,  492,  493,  408,  491,  407,  486,  488,
      487,  406,  489,  492,  488,  490,  495,  405,  404,  495,

      491,  489,  493,  490,  403,  402,  496,  494,  491,  496,
      401,  495,  494,  492,  493,  400,  497,  498,  496,  497,
      498,  499,  500,  502,  499,  500,  502,  399,  398,  495,
      498,  497,  501,  503,  505,  501,  503,  505,  500,  496,
      386,  504,  506,  499,  504,  506,  385,  505,  503,  497,
      498,  502,  383,  382,  499,  500,  502,  381,  504,  510,
      501,  512,  510,  501,  512,  501,  503,  505,  378,  374,
      507,  507,  507,  507,  504,  506,  506,  507,  508,  508,
      508,  508,  509,  509,  509,  509,  513,  512,  514,  513,
      373,  514,  510,  372,  512,  543,  543,  543,  543,  549,

      549,  549,  549,  507,  371,  370,  369,  510,  551,  551,
      551,  551,  368,  367,  366,  509,  365,  364,  363,  513,
      602,  514,  602,  602,  362,  513,  361,  359,  358,  514,
      602,  357,  549,  582,  582,  582,  582,  590,  590,  590,
      590,  592,  592,  592,  592,  593,  593,  593,  593,  595,
      595,  595,  595,  602,  596, 1002,  596,  596, 1002,  597,
      356,  597,  597,  598,  355,  598,  598,  599,  354,  599,
      599,  596,  597,  600,  353,  600,  600,  352,  634,  351,
      601,  634,  601,  601,  350,  599,  590,  596,  603,  242,
      603,  603,  597,  598,  593,  601,  598,  238,  235,  234,

      599,  600,  604, 1002,  604,  604,  600,  605,  634,  605,
      605,  634,  607,  601,  607,  607,  606,  603,  606,  606,
      608,  603,  608,  608,  232,  604,  231,  609,  605,  609,
      609,  611,  229,  611,  611,  604,  224,  608,  607,  614,
      605,  614,  614,  220,  606,  607,  611,  219,  610,  606,
      610,  610,  609,  608,  217,  612,  216,  612,  612,  615,
      609,  615,  615,  215,  611,  612,  212,  614,  613,  610,
      613,  613,  614,  210,  616,  209,  616,  616,  613,  205,
      203,  610,  617,  615,  617,  617,  202,  201,  612,  616,
      200,  199,  615,  618,  198,  618,  618,  617,  197,  196,

      619,  613,  619,  619,  195,  194,  193,  616,  620,  618,
      620,  620,  192,  191,  621,  617,  621,  621,  622,  620,
      622,  622,  190,  188,  621,  187,  618,  186,  622,  619,
      185,  184,  623,  619,  623,  623,  624,  183,  624,  624,
      625,  620,  625,  625,  182,  181,  627,  621,  627,  627,
      623,  622,  626,  626,  626,  626,  628,  180,  628,  628,
      629,  624,  629,  629,  630,  623,  630,  630,  631,  624,
      631,  631,  179,  625,  632,  633,  168,  632,  633,  627,
      635,  636,  167,  635,  636,  626,  625,  637,  633,  628,
      637,  632,  639,  629,  627,  639,  164,  630,  635,  630,

      638,  631,  637,  638,  628,  162,  629,  632,  633,  636,
      638,  159,  640,  635,  636,  640,  631,  158,  157,  641,
      637,  639,  641,  642,  643,  639,  642,  643,  645,  644,
      152,  645,  644,  638,  646,  640,  150,  646,  648,  647,
      641,  648,  647,  148,  651,  640,  644,  651,  648,  146,
      643,  642,  641,  645,  647,  646,  642,  643,  145,   71,
      649,  645,  644,  649,   68,   66,  650,  646,  651,  650,
      649,  648,  647,  652,   64,  653,  652,  651,  653,  654,
      655,  656,  654,  655,  656,   62,  657,   59,  652,  657,
      653,   54,  656,  649,  650,  654,  657,  658,  659,  650,

      658,  659,  660,   51,   48,  660,  652,  658,  653,  655,
       47,   42,  654,  655,  656,  661,  659,   41,  661,  657,
      662,  662,  662,  662,   38,  663,  664,  660,  663,  664,
      658,  659,   37,  665,  666,  660,  665,  666,  667,   36,
       31,  667,  737,  778,  737,  737,  778,  738,  661,  738,
      738,   29,   27,  662,  739,   25,  739,  739,  663,  664,
       23,  661,  738,   21,   17,    0,  665,  666,    0,  666,
      737,  667,    0,  663,  664,  737,  778,    0,    0,  665,
      738,  739,  740,    0,  740,  740,  667,  739,  741,    0,
      741,  741,  740,  742,    0,  742,  742,  743,  741,  743,

      743,    0,  744,  742,  744,  744,  745,    0,  745,  745,
        0,  750,  744,  750,  750,  740,  745,  746,    0,  746,
      746,  741,  747,    0,  747,  747,  742,  746,    0,    0,
      743,  748,  747,  748,  748,  744,    0,    0,  750,  745,
      749,  748,  749,  749,  750,  751,    0,  751,  751,  752,
      746,  752,  752,    0,  753,  747,  753,  753,  751,  754,
      773,  754,  754,  773,  748,    0,    0,  755,  749,  755,
      755,    0,    0,  749,  751,  773,  752,  756,  751,  756,
      756,  757,  752,  757,  757,    0,  759,  753,  759,  759,
        0,  757,  754,  773,    0,  758,  755,  758,  758,  760,

      755,  760,  760,    0,    0,  758,  756,    0,  759,  760,
      756,    0,    0,  761,  757,  761,  761,    0,  762,  759,
      762,  762,  763,    0,  763,  763,    0,  764,  758,  764,
      764,  765,  760,  765,  765,  766,    0,  766,  766,  767,
        0,  767,  767,  761,    0,  768,  761,  768,  768,    0,
      769,  762,  769,  769,  765,  763,  764,    0,    0,  770,
      764,  770,  770,  771,  765,  771,  771,  772,  766,    0,
      772,  774,  767,    0,  774,  766,  775,    0,  768,  775,
      768,    0,    0,  769,  769, 1012,  775,  776, 1012,    0,
      776,  777,  770,    0,  777,  772,  771,  776,  774,    0,

      772,  777,  779,  780,  774,  779,  780,  770,    0,  775,
        0,  771,  779,  780,  784,  781,  782,  784,  781,  782,
      776,    0,    0,    0,  777,  781,  782,  783,  785,  787,
      783,  785,  787, 1012,    0,  779,  780,  783,  786,    0,
      788,  786,  784,  788,    0,    0,    0,  784,  781,  782,
      789,  786,    0,  789,  792,  785,  787,  792,    0,    0,
      783,  785,  787,  790,  792,  791,  790,  786,  791,  793,
        0,  786,  793,  788,  795,  794,    0,  795,  794,  793,
        0,    0,  796,  789,  795,  796,  797,  792,  798,  797,
      800,  798,  790,  800,  791,    0,  790,  794,  791,    0,

      799,  801,  793,  799,  801,    0,  802,  795,  794,  802,
        0,  803,  796,  800,  803,  796,    0,  804,    0,  797,
      804,  798,  805,  800,  806,  805,    0,  806,  864,  799,
      864,  864, 1014,  799,  801, 1014,    0,    0,  864,  802,
      867,  801,  867,  867,  803,  868,  803,  868,  868, 1043,
      804,  804, 1043,    0,    0,  805,  865,  806,  865,  865,
      869,  864,  869,  869,    0,  866,  865,  866,  866,    0,
      805,    0,  806,  867,  870,  866,  870,  870,  868,  871,
     1014,  871,  871,  872,    0,  872,  872,    0,  873,  865,
      873,  873,  874,  869,  874,  874,    0, 1043,  866,  875,

        0,  875,  875,  877,    0,  877,  877,  870,    0,  875,
        0,  876,  871,  876,  876,  878,  872,  878,  878,    0,
      879,  873,  879,  879,  876,  874,    0,    0,  877,    0,
      879,    0,  875,    0,  878,  880,  877,  880,  880,  881,
      876,  881,  881, 1051,  876,  880, 1051,    0,  878,  881,
        0,    0,  882,  879,  882,  882,  883,    0,  883,  883,
      884,    0,  884,  884,  885,    0,  885,  885,  880,    0,
      896,    0,  881,  896,  886,  884,  886,  886,  887,    0,
      887,  887,    0,    0,  888,  882,  888,  888,  887,  883,
        0, 1051,  889,  884,  889,  889,  886,  885,  890,  888,

      890,  890,  891,  896,  891,  891,  892,  886,  892,  892,
      893,  887,  894,  893,    0,  894,  895,  888,  897,  895,
      893,  897,  894,    0,  898,  889,  895,  898,    0,  899,
      900,  890,  899,  900,  890,  891,    0,  889,  901,  892,
        0,  901,    0,  893,    0,  894,    0,  891,    0,  895,
      902,  897,  903,  902,    0,  903,  904,  898,    0,  904,
        0,  905,  899,  900,  905,  907,  904,  906,  907,  908,
      906,  901,  908,  911,  905,    0,  911,  909,  910,  908,
      909,  910,    0,  902,  907,  903,    0,  909,  910,  904,
      905,    0,  906,  912,  905,    0,  912,    0,  907,    0,

      906,  913,  908,    0,  913,  914,  911,    0,  914,  915,
      909,  910,  915,    0,  916,  917,  913,  916,  917,  918,
      919,    0,  918,  919,  916,  920,  912,    0,  920,  921,
      917,  915,  921,  958,  913,  958,  958,    0,  914,    0,
        0,  959,  915,  959,  959,    0,    0,  916,  917,    0,
        0,    0,  918,  919,    0,    0,  919,  960,  920,  960,
      960,    0,  921,    0,  918,  961,  958,  961,  961,  962,
      920,  962,  962,  963,  959,  963,  963,  964,    0,  964,
      964,  965,    0,  965,  965,  966,    0,  966,  966,    0,
      960,    0,  963,  967,  962,  967,  967,  976,  961,  964,

      976,  977,  962,  965,  977,  968,  963,  968,  968,  969,
      964,  969,  969,  971,  965,  971,  971,    0,  966,  969,
      970,  978,  970,  970,  978,  972,  967,  972,  972,  973,
      976,  973,  973,  979,  977,  972,  979,  973,  968,    0,
        0,  974,  969,  974,  974,  975,  971,  975,  975,  970,
        0,    0,  980,  970,  978,  980,    0,  981,  972,    0,
      981,  982,  973,    0,  982,  983,  979,  984,  983,  985,
      984,    0,  985,    0,  974,    0,  981,  980,  975,  986,
        0,  975,  986,  982,    0,  980,    0,  983,  988,  974,
      981,  988,  989,  987,  982,  989,  987,    0,  983,    0,

      984,  990,  985,  987,  990,  991,  992,  993,  991,  992,
      993,  990,  986,  991,    0,    0,    0,  988,    0,    0,
     1015,  988, 1015, 1015,    0,  989,  987, 1016, 1026, 1016,
     1016, 1026,    0, 1019,  990, 1019, 1019,    0,  991,  992,
      993, 1027, 1015,  993, 1027, 1017,    0, 1017, 1017, 1016,
     1026,    0,    0, 1015,  992, 1017, 1018,    0, 1018, 1018,
     1016, 1026, 1020, 1027, 1020, 1020, 1019, 1021,    0, 1021,
     1021, 1018, 1020, 1022, 1027, 1022, 1022, 1023, 1017, 1023,
     1023, 1024,    0, 1024, 1024, 1025,    0, 1025, 1025, 1018,
     1029, 1028,    0, 1029, 1028, 1020,    0,    0,    0, 1030,

     1021, 1028, 1030,    0, 1032, 1029, 1022, 1032, 1022, 1031,
     1023,    0, 1031, 1033, 1024,    0, 1033, 1034, 1025, 1031,
     1034,    0,    0, 1029, 1028, 1023,    0, 1035, 1036, 1024,
     1035, 1036, 1030, 1025,    0,    0, 1055, 1032, 1055, 1055,
        0, 1053, 1031, 1053, 1053,    0, 1033,    0, 1033,    0,
     1034, 1053, 1054,    0, 1054, 1054, 1056,    0, 1056, 1056,
     1035, 1036,    0,    0,    0, 1034, 1056, 1054, 1057, 1055,
     1057, 1057,    0,    0, 1053, 1035, 1036, 1058,    0, 1058,
     1058, 1059,    0, 1059, 1059, 1054,    0,    0, 1060, 1056,
     1060, 1060, 1061, 1062, 1061, 1061, 1062, 1063,    0, 1064,

     1063, 1057, 1064, 1062, 1066, 1065, 1067, 1066, 1065, 1067,
     1058,    0, 1063, 1058, 1059, 1065, 1068, 1069,    0, 1068,
     1069, 1060,    0,    0, 1070, 1061, 1062, 1070,    0,    0,
     1063, 1080, 1064, 1080, 1080,    0, 1060, 1066, 1065, 1067,
     1061, 1081, 1067, 1081, 1081, 1082,    0, 1082, 1082, 1068,
     1069, 1081, 1083,    0, 1083, 1083, 1084, 1070, 1084, 1084,
     1085,    0,    0, 1085, 1080, 1069, 1086, 1087, 1088, 1086,
     1087, 1088, 1070,    0, 1081,    0, 1086,    0, 1082, 1089,
        0, 1094, 1089, 1094, 1094, 1083,    0,    0, 1095, 1084,
     1095, 1095, 1096, 1085, 1083, 1096,    0,    0,    0, 1086,

     1087, 1088, 1097,    0, 1100, 1097, 1100, 1100, 1101,    0,
     1088, 1101, 1089,    0, 1094,    0, 1104, 1105, 1104, 1104,
     1105, 1095,    0,    0,    0, 1096, 1104, 1105, 1108, 1109,
     1108, 1108, 1109, 1095,    0, 1097,    0, 1100,    0,    0,
        0, 1101, 1100,    0,    0,    0, 1101, 1097,    0, 1104,
     1105,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1108, 1109, 1111, 1111, 1111, 1111, 1111, 1111, 1112,
     1112, 1112, 1112, 1112, 1112, 1113, 1113, 1113, 1113, 1113,
     1113, 1114, 1114, 1114, 1114, 1114, 1114, 1115, 1115, 1115,
     1115, 1115, 1115, 1116, 1116,    0, 1116, 1116, 1116, 1117,

     1117, 1117, 1117, 1117, 1117, 1118,    0,    0,    0, 1118,
     1118, 1119, 1119, 1119, 1119, 1119, 1119, 1120, 1120,    0,
        0, 1120, 1120, 1121, 1121, 1121, 1121, 1121, 1121, 1122,
     1122,    0, 1122, 1122, 1122, 1123, 1123,    0, 1123, 1123,
     1123, 1124, 1124,    0,    0,    0, 1124, 1125, 1125,    0,
     1125, 1125, 1125, 1127, 1127,    0,    0,    0, 1127, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,

     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[83] =
    {   0,
0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 
    0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
    0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#line 2 "levcomp.lpp"

// levcomp.lpp:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
//
// Based loosely on NetHack's lev_comp.l

#include <algorithm>
#include <cstring>
#include <queue>
#include "AppHdr.h"
#include "mapdef.h"
#include "levcomp.tab.h"
#include "stuff.h"

static bool alloced = false;

std::queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(100);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

// Enter a new state, first clearing yylval of junk.
#define CBEGIN(x) do { BEGIN(x); clean(); } while (0)

static void post_proc_text(char *text, bool trim_right, int strip_trailing)
{
    char *s = NULL;
    if (trim_right)
    {
        s = text + strlen(text) - 1;
        while (s >= text && isspace(*s))
            *s-- = 0;
    }
    if (strip_trailing)
    {
        if (!s)
            s = text + strlen(text) - 1;
        while (s >= text && --strip_trailing >= 0)
            *s-- = 0;
    }
}

static char *copy_text(bool trim_right, int strip_trailing)
{
    char *newstring = NULL;
    if ((yylval.text = newstring = strdup(yytext)))
    {
        alloced = true;
        post_proc_text(newstring, trim_right, strip_trailing);
    }
    return (newstring);
}

static void settext(bool trim_right = false, int strip_trailing = 0)
{
    clean();
    char *newstring = copy_text(trim_right, strip_trailing);
    yylval.text = newstring;
}

static void str_check()
{
    if (!yylval.text)
    {
        char *buf = (char *) malloc(1);
        if (buf)
        {
            yylval.text = buf;
            *buf = 0;
            alloced = true;
        }
    }
}

static void cattext(bool trim_right = false, int strip_trailing = 0)
{
    if (!yylval.text)
        settext(trim_right, strip_trailing);
    else
    {
        bool was_alloced = alloced;
        char *newbuf = (char*) malloc(strlen(yylval.text) + strlen(yytext) + 1);
        if (!newbuf)
            end(1, "Out of memory");
        alloced = true;
        strcpy(newbuf, yylval.text);
        strcat(newbuf, yytext);
        post_proc_text(newbuf, trim_right, strip_trailing);
        if (was_alloced)
            free((void*) yylval.text);
        yylval.text = newbuf;
    }
}








#line 1792 "levcomp.lex.cc"

#define INITIAL 0
#define MAPDEF 1
#define LUA 2
#define LUA_ONELINER 3
#define ARGUMENT 4
#define MNAME 5
#define KEYWORDS 6
#define ITEM_LIST 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 133 "levcomp.lpp"


#line 1992 "levcomp.lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1111 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1110 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 135 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 137 "levcomp.lpp"
{
                        settext(true);
                        return MAP_LINE;
                    }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 142 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 143 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 144 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 146 "levcomp.lpp"
;
	YY_BREAK
case 7:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 148 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 8:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 149 "levcomp.lpp"
{
                            settext(true, 2);
                            BEGIN(INITIAL);
                            return LUA_LINE;
                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 154 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 158 "levcomp.lpp"
;
	YY_BREAK
case 11:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 160 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 164 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 166 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 171 "levcomp.lpp"
;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 172 "levcomp.lpp"
;
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 173 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 175 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 179 "levcomp.lpp"
;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 181 "levcomp.lpp"
{
                        cattext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 186 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 187 "levcomp.lpp"
;
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 188 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 190 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 192 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 196 "levcomp.lpp"
;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 198 "levcomp.lpp"
{
                        cattext();
                        return MONSTER_NAME;
                    }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 203 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 204 "levcomp.lpp"
;
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 206 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 210 "levcomp.lpp"
;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 212 "levcomp.lpp"
{
                        cattext();
                    }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 216 "levcomp.lpp"
cattext();
	YY_BREAK
case 33:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 218 "levcomp.lpp"
{ BEGIN(INITIAL); str_check(); return STRING; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 220 "levcomp.lpp"
;
	YY_BREAK
case 35:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 222 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 224 "levcomp.lpp"
{ BEGIN(LUA_ONELINER); return MAIN; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 226 "levcomp.lpp"
{ BEGIN(LUA); return PRELUDE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 227 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 228 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 229 "levcomp.lpp"
{ BEGIN(LUA); return VALIDATE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 230 "levcomp.lpp"
{ BEGIN(LUA); return VETO; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 233 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 234 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEFAULT_DEPTH; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 235 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEPTH; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 236 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return ORIENT; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 237 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 238 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return WELCOME; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 239 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 240 "levcomp.lpp"
return WEIGHT;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 241 "levcomp.lpp"
{ CBEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 242 "levcomp.lpp"
{ CBEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 243 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLAGS; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 244 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return BFLAGS; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 245 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SUBST; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 246 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return NSUBST; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 247 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return COLOUR; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 248 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLOORCOL; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 249 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LROCKCOL; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 250 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLOORTILE; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 251 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LROCKTILE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 252 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return FTILE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 253 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return RTILE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 254 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return TILE; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 255 "levcomp.lpp"
{ CBEGIN(MNAME); return MONS; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 256 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 257 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return MARKER; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 258 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SHUFFLE; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 260 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KFEAT; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 261 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KITEM; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 262 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMONS; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 263 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMASK; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 264 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KPROP; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 265 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return SUBVAULT; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 267 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 269 "levcomp.lpp"
return COLON;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 271 "levcomp.lpp"
return PERC;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 273 "levcomp.lpp"
{
                        clean();
                        yylval.i = atoi(yytext);
                        return INTEGER;
                    }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 279 "levcomp.lpp"
;
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 280 "levcomp.lpp"
;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 281 "levcomp.lpp"
;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 282 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 284 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 2556 "levcomp.lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MAPDEF):
case YY_STATE_EOF(LUA):
case YY_STATE_EOF(LUA_ONELINER):
case YY_STATE_EOF(ARGUMENT):
case YY_STATE_EOF(MNAME):
case YY_STATE_EOF(KEYWORDS):
case YY_STATE_EOF(ITEM_LIST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1111 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1111 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1110);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 284 "levcomp.lpp"



int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}

