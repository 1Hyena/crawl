#line 2 "levcomp.lex.cc"

#line 4 "levcomp.lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 58
#define YY_END_OF_BUFFER 59
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[745] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   59,   57,   55,   56,
       57,   53,   54,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   55,   27,   29,   57,
       57,   57,   57,   57,   57,   58,    6,   58,   58,    4,
        2,    3,   58,   58,    2,    2,    2,    9,   10,   58,
        9,    9,   58,   12,   58,   57,   26,   57,   53,   54,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   27,   29,   57,   57,   57,   57,   57,
       57,   57,   24,   21,   24,   23,   54,   57,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       24,   27,   29,   57,   57,   57,   57,   57,   57,   14,
       15,   57,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   13,   13,
       13,   13,   13,   17,   19,   20,   58,   18,   55,   56,
       54,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   55,
       27,   29,    0,    0,    0,    0,   27,    0,    0,    0,
        0,    0,    0,    0,   32,    6,    5,    0,    0,    2,
        3,    0,    0,    2,    2,    2,    9,    9,   10,    9,

        9,    9,    0,   11,   12,   25,    0,   26,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   27,   25,
       25,   25,   25,   25,   25,   25,   25,    0,   24,   21,
       24,   21,   54,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   24,   27,    0,    0,    0,    0,    0,    0,    0,
       32,   14,   15,    0,   15,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   14,   13,   13,   13,   13,

       13,   13,   13,   16,    0,   19,   20,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    2,    9,    9,    9,    7,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   28,    0,    0,    0,    0,    0,    2,
        9,    8,    9,    7,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,    0,    0,   25,   25,   25,   25,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,    0,    0,   22,   22,
       22,   22,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,    0,    0,    0,   47,    0,    0,    0,
        0,   46,   35,    0,    0,    0,    0,    0,   43,    0,
        0,   31,    0,    0,    0,    0,    2,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,    0,   25,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,    0,   22,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,    0,

       37,   42,   50,   51,   52,    0,    0,    0,   39,    0,
       44,    0,    0,    0,    0,   34,    1,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       40,   48,   45,   38,    0,   41,    0,    0,    0,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   13,   13,   13,
       13,   49,    0,    0,    0,    0,   25,   25,    0,   25,

       25,   22,   22,    0,   22,   22,   13,   13,    0,   30,
        0,    0,   25,   25,    0,   25,   22,   22,    0,   22,
       13,    0,   33,   25,   25,   22,   22,   13,    0,   25,
       22,   13,    0,   25,   22,   13,    0,   25,   22,   13,
       36,   25,   22,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    7,    8,    1,    1,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,    1,    1,
        1,    1,    1,    1,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       20,   27,   28,   29,   30,   20,   31,   20,   20,   20,
        1,    1,    1,    1,   20,    1,   32,   20,   20,   33,

       34,   35,   20,   36,   37,   20,   20,   38,   20,   20,
       39,   40,   20,   41,   42,   43,   44,   45,   20,   20,
       20,   20,   46,    1,   47,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[48] =
    {   0,
        1,    2,    3,    4,    2,    1,    5,    6,    6,    1,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    1,    1
    } ;

static yyconst flex_int16_t yy_base[763] =
    {   0,
        0,   46,   54,   59,   51,   63,   46,   67,  110,  156,
      202,  248,  294,  340,   73,   92, 1884, 1885,   77, 1885,
     1880, 1885, 1873, 1863, 1865, 1857, 1849,   84,   62,   57,
     1850, 1854,   72, 1864, 1859, 1839,  385,    0, 1885,  148,
     1828, 1830,   30,   49, 1824, 1885, 1885, 1866,  160, 1885,
        0, 1885, 1865,  164,    0, 1843,  145, 1819, 1885, 1862,
       62, 1817, 1860, 1885, 1859,  170, 1885, 1858,  176,  180,
      255,  259,  263,  347,  351,  364,  360,  356,  392,  397,
      186,  274,  401,  278,  405,  415,  432,  437,  441,  445,
      449,    0,  453, 1885,  457, 1885, 1851, 1841, 1843, 1835,

     1827,  176,  175,   78, 1828, 1832,  153, 1842, 1837, 1817,
      463,  248,    0,  245, 1806, 1808,  239,  243, 1802,  467,
     1885, 1844,    0, 1837, 1827, 1829, 1821, 1813,  268,  332,
      165, 1814, 1818,  329, 1828, 1823, 1803,  482,  368, 1792,
     1794,  331,  366,  264,  486, 1885, 1831, 1885,  379, 1885,
     1821, 1815, 1799, 1813, 1805, 1804, 1789, 1787, 1781, 1783,
     1783, 1770, 1775, 1778, 1753, 1770, 1760, 1757, 1740,    0,
        0, 1885, 1720, 1686,  379, 1680,    0,  395, 1693, 1690,
     1712,  406, 1683, 1677, 1885, 1885, 1885, 1716,  470,    0,
     1885, 1713,  477, 1687, 1676,  362, 1639, 1631, 1885,  386,

     1623,  491, 1665, 1885, 1885,  495,  499, 1885,  503,  509,
      513,  517,  521,  525,  529,  539,  543,  547,  551,  555,
      561,  571,  579,  584,  588,  593,  597,  602,  606,  611,
      615,  619,  623,  631,  637,  641,  646,  504,  653, 1885,
      657, 1885,  661,  567,  662,  589,  663,  667,  647,  669,
      675,  530,  681,  685,  687,  694,  693,  695,  707,  706,
      708,    0,  712,  724,  716,  725,  726,  730,  731,  736,
      624,  742, 1885, 1661, 1885,    0, 1645, 1629, 1609, 1622,
     1613, 1602, 1584, 1574, 1555, 1540, 1536, 1528, 1533, 1539,
     1512, 1526, 1517, 1511, 1491,    0,  535, 1483, 1463, 1474,

      421, 1438, 1429,  737,  747,  752, 1885, 1460, 1435, 1426,
     1433, 1423, 1430, 1425, 1412, 1411, 1400, 1398, 1395, 1375,
     1367, 1356, 1339, 1332, 1333, 1317,  758,  760, 1300, 1304,
     1289, 1283, 1295,  765,  771,  775, 1885,  779,  784,  788,
      792,  796,  806,  812,  821,  825,  829,  833,  844,  850,
      856,  860,  864,  869,  873,  877,  885,  889,  893,  897,
      902,  780,  838,  898,  906,  907,  797,  865,  908,  912,
      916,  923,  924,  928,  940,  941,  942,  947,  948,  954,
      955,  959,  965,  960,  967,  972,  977,  976,  978,  984,
     1281, 1275, 1281, 1270, 1281, 1273, 1260, 1259, 1248, 1257,

     1255, 1245, 1243, 1234, 1217, 1211, 1221, 1201,  988,  990,
     1190, 1198, 1169, 1155, 1175, 1160, 1148, 1147, 1119, 1121,
     1112, 1115, 1119, 1111, 1089, 1088, 1096, 1086, 1064, 1078,
     1066, 1039,  998, 1885,  992, 1028, 1029, 1035, 1002, 1049,
     1006, 1885, 1011, 1885, 1015, 1022, 1027, 1037, 1041, 1052,
     1057, 1061, 1067, 1076, 1085, 1090, 1094, 1099, 1103, 1114,
     1118, 1047, 1123, 1129, 1133, 1137, 1141, 1145, 1020, 1032,
     1149, 1150, 1077, 1157, 1156, 1095, 1161, 1162, 1168, 1163,
     1180, 1181, 1187, 1188, 1151, 1197, 1198, 1202, 1203, 1207,
     1209, 1208, 1031, 1017, 1002, 1011,  983,  987,  974,  981,

      975,  974,  945,  924,  923,  916,  891,  906,  897,  852,
      841,  851, 1213,  868,  847,  846, 1885,  841,  840,  831,
      812, 1885, 1885,  803,  799,  814,  797,  799, 1885,  775,
      757, 1885,  758,  755, 1215,  729,  745, 1217, 1221, 1225,
     1232, 1242, 1253, 1260, 1264, 1269, 1273, 1277, 1281, 1285,
     1292, 1297, 1307, 1311, 1315, 1319, 1323, 1327, 1331, 1337,
     1238, 1298, 1341, 1062, 1342, 1352, 1353, 1343, 1332, 1359,
     1363, 1364, 1369, 1373, 1371, 1380, 1382, 1384, 1386, 1392,
     1394, 1396, 1398,  751,  754,  748,  730,  724,  712,  693,
      674,  672,  683,  669,  675,  652,  641,  611,  608,  621,

     1885, 1885, 1885, 1885, 1885,  620,  612,  608, 1885,  599,
     1885,  593,  544,  545,  534, 1885,    0, 1400, 1404, 1410,
     1414, 1419, 1425, 1429, 1433, 1443, 1447, 1452, 1456, 1460,
     1464, 1469, 1473, 1477, 1478, 1415, 1482, 1484, 1488, 1489,
     1490, 1494, 1496, 1500, 1506, 1507, 1508, 1512, 1517, 1518,
     1522,  558,  557,  540,  536,  527,  527,  481,  482,  467,
     1885, 1885, 1885, 1885,  492, 1885,  490, 1523,  458, 1527,
     1531, 1535, 1539, 1543, 1552, 1558, 1563, 1568, 1544, 1569,
     1573, 1574, 1575, 1579, 1581, 1585, 1586,  442,  430, 1590,
      398, 1885,  391, 1591,  372, 1592, 1596, 1601, 1606, 1610,

     1614, 1602, 1620, 1619, 1621, 1625,  383, 1627,  378, 1885,
     1637,  362, 1641, 1645, 1653, 1657, 1646, 1639, 1661, 1667,
      358,  332, 1885, 1672, 1677, 1682, 1683,  308,  301, 1687,
     1688,  249,  236, 1692, 1693,  215,  167, 1700, 1704,  160,
     1885, 1713, 1706, 1885, 1731, 1737, 1743, 1749, 1755, 1761,
     1767, 1773, 1779, 1785, 1791, 1797, 1803, 1809,  102, 1815,
     1821, 1827
    } ;

static yyconst flex_int16_t yy_def[763] =
    {   0,
      744,    1,  745,  746,  747,  747,  748,  748,  744,    9,
      744,   11,  744,   13,  749,  749,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  750,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  751,  744,
      752,  744,  744,  751,  752,  752,  752,  753,  744,  744,
      753,  753,  754,  744,  744,  755,  744,  744,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  756,  755,  755,  755,  755,  755,  755,
      755,  757,  744,  744,  744,  744,  757,  757,  757,  757,

      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
       37,  758,  757,  757,  757,  757,  757,  757,  757,  744,
      744,  744,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,   37,  759,  759,
      759,  759,  759,  760,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,   37,
      750,  744,  744,  744,  744,  744,  750,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  752,
      744,  744,  744,  752,  752,  752,  753,  753,  744,  753,

      753,  753,  754,  744,  744,  755,  755,  744,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  756,  756,  755,
      755,  755,  755,  755,  755,  755,  755,  761,  744,  744,
      744,  744,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  111,  762,  761,  761,  761,  761,  761,  761,  761,
      761,  744,  744,  744,  744,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  138,  759,  759,  759,  759,

      759,  759,  759,  760,  760,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  752,  753,  753,  753,  744,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  762,  761,  761,  761,  761,  761,  761,  761,  761,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,

      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  752,
      753,  744,  753,  744,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  759,  759,  759,  759,  759,  759,  759,  759,

      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  752,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  744,

      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  752,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  759,  759,  759,
      759,  744,  744,  744,  744,  744,  755,  755,  755,  755,

      755,  761,  761,  761,  761,  761,  759,  759,  744,  744,
      744,  744,  755,  755,  755,  755,  761,  761,  761,  761,
      759,  744,  744,  755,  755,  761,  761,  759,  744,  755,
      761,  759,  744,  755,  761,  759,  744,  755,  761,  759,
      744,  755,  761,    0,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744
    } ;

static yyconst flex_int16_t yy_nxt[1933] =
    {   0,
       18,   19,   20,   21,   19,   18,   22,   18,   23,   18,
       18,   18,   24,   25,   18,   26,   18,   18,   27,   18,
       28,   18,   29,   30,   31,   32,   18,   33,   34,   18,
       35,   18,   36,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   37,   64,   65,
       37,   38,  181,   59,   60,   39,   47,   48,   49,   50,
       46,   52,   53,   54,   55,   59,   60,  161,   40,   64,
       65,  182,  159,   56,  145,  146,  147,  145,  149,  148,
      183,  149,  184,   41,  162,   42,  160,   43,  253,  165,
       44,   45,   61,  145,  146,  147,  145,   62,  148,  156,

       57,  166,  157,  200,   61,  254,  158,  276,  201,   62,
       66,   19,   67,   68,   19,   66,   69,   66,   70,   66,
       66,   66,   71,   72,   66,   73,   66,   66,   74,   66,
       75,   66,   76,   77,   78,   79,   66,   80,   81,   66,
       82,   66,   83,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   37,  178,  195,
       37,   84,  186,  188,  189,   85,  191,  192,  193,  741,
      257,  207,  160,  207,  207,  287,  741,  207,   86,  207,
      207,  207,  258,  207,  207,  251,  196,  207,  209,  207,
      207,  248,  288,   87,  249,   88,  225,   89,  250,  252,

       90,   91,   92,   93,   94,   95,   93,   92,   96,   92,
       97,   92,   92,   92,   98,   99,   92,  100,   92,   92,
      101,   92,  102,   92,  103,  104,  105,  106,   92,  107,
      108,   92,  109,   92,  110,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,  111,
      740,  177,  111,  112,  177,  264,  207,  113,  207,  207,
      207,  267,  207,  207,  207,  305,  207,  207,  305,  252,
      114,  737,  210,  211,  269,  207,  270,  207,  207,  229,
      268,  229,  229,  282,  212,  115,  283,  116,  226,  117,
      284,  736,  118,  119,   18,  120,  121,  122,  120,   18,

       22,  123,  124,   18,  123,  123,  125,  126,  123,  127,
      123,  123,  128,  123,  129,  123,  130,  131,  132,  133,
      123,  134,  135,  123,  136,  123,  137,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,   18,
       18,  138,  285,  733,  138,   38,  291,  732,  207,   39,
      207,  207,  207,  300,  207,  207,  286,  207,  292,  207,
      207,  207,  139,  207,  207,  207,  214,  207,  207,  215,
      219,  729,  301,  216,  217,  213,  195,  140,  297,  141,
      149,  142,  221,  149,  143,   45,  170,  220,  218,  170,
      171,  728,  286,  207,  172,  207,  207,  302,  207,  303,

      207,  207,  207,  196,  207,  207,  207,  723,  207,  207,
      183,  722,  184,  222,  223,  721,  207,  710,  207,  207,
      327,  316,  173,  709,  174,  230,  224,  200,  181,  175,
      176,  708,  201,  207,  227,  207,  207,  707,  207,  218,
      207,  207,  207,  300,  207,  207,  207,  182,  207,  207,
      207,  692,  207,  207,  239,  240,  241,  239,  241,  242,
      241,  241,  301,  233,  262,  240,  241,  262,  272,  273,
      274,  272,  186,  188,  189,  231,  235,  232,  236,  191,
      192,  193,  234,  296,  273,  274,  296,  306,  307,  308,
      306,  696,  336,  337,  237,  336,  207,  693,  207,  207,

      207,  692,  207,  207,  207,  238,  207,  207,  238,  691,
      207,  209,  207,  207,  207,  690,  207,  207,  207,  338,
      207,  207,  207,  689,  207,  207,  207,  340,  207,  207,
      207,  238,  207,  207,  238,  341,  666,  334,  339,  342,
      207,  688,  207,  207,  207,  664,  207,  207,  207,  663,
      207,  207,  207,  372,  207,  207,  207,  343,  207,  207,
      409,  398,  207,  344,  207,  207,  662,  661,  238,  345,
      346,  238,  207,  347,  207,  207,  669,  364,  668,  349,
      207,  350,  207,  207,  348,  207,  667,  207,  207,  207,
      238,  207,  207,  238,  207,  352,  207,  207,  207,  366,

      207,  207,  666,  229,  353,  229,  229,  229,  351,  229,
      229,  354,  207,  665,  207,  207,  207,  664,  207,  207,
      207,  663,  207,  207,  207,  238,  207,  207,  238,  662,
      661,  355,  207,  359,  207,  207,  356,  345,  207,  660,
      207,  207,  207,  659,  207,  207,  357,  207,  238,  207,
      207,  238,  358,  233,  239,  240,  241,  239,  241,  240,
      241,  241,  238,  238,  238,  238,  238,  238,  238,  363,
      238,  238,  234,  238,  360,  369,  238,  367,  658,  238,
      657,  368,  238,  361,  611,  238,  238,  365,  238,  238,
      656,  238,  609,  370,  238,  238,  238,  238,  238,  238,

      655,  371,  654,  373,  376,  375,  378,  238,  238,  238,
      238,  238,  238,  263,  374,  177,  263,  238,  177,  653,
      238,  605,  377,  379,  380,  238,  238,  238,  238,  238,
      238,  238,  238,  604,  238,  238,  386,  238,  305,  603,
      238,  305,  381,  272,  273,  274,  272,  384,  305,  383,
      371,  305,  387,  306,  307,  308,  306,  602,  385,  433,
      434,  435,  433,  601,  435,  652,  441,  442,  389,  441,
      617,  388,  443,  444,  616,  443,  336,  337,  390,  336,
      207,  238,  207,  207,  238,  207,  615,  207,  207,  207,
      614,  207,  207,  207,  613,  207,  207,  207,  238,  207,

      207,  238,  445,  612,  447,  436,  449,  207,  611,  207,
      207,  334,  446,  207,  448,  207,  207,  334,  610,  472,
      450,  198,  207,  609,  207,  207,  207,  608,  207,  207,
      207,  607,  207,  207,  207,  451,  207,  207,  606,  238,
      605,  452,  238,  454,  455,  207,  363,  207,  207,  604,
      603,  207,  453,  207,  207,  602,  601,  207,  456,  207,
      207,  207,  457,  207,  207,  207,  238,  207,  207,  238,
      207,  458,  207,  207,  207,  473,  207,  207,  463,  434,
      207,  463,  600,  599,  598,  461,  464,  459,  207,  464,
      207,  460,  207,  207,  207,  597,  207,  207,  207,  238,

      207,  207,  238,  207,  462,  207,  207,  238,  238,  238,
      238,  238,  238,  238,  596,  529,  238,  238,  356,  595,
      238,  469,  474,  471,  238,  238,  466,  238,  238,  238,
      465,  594,  238,  467,  470,  475,  476,  593,  478,  479,
      468,  238,  238,  238,  238,  238,  238,  592,  238,  238,
      477,  238,  238,  481,  480,  238,  238,  482,  238,  238,
      263,  488,  177,  263,  488,  177,  487,  434,  238,  487,
      485,  238,  591,  238,  483,  484,  238,  238,  238,  238,
      238,  238,  238,  523,  522,  238,  486,  386,  238,  433,
      434,  435,  433,  435,  435,  590,  435,  383,  387,  433,

      434,  589,  433,  535,  490,  489,  535,  441,  442,  588,
      441,  587,  443,  444,  491,  443,  207,  388,  207,  207,
      517,  238,  492,  207,  238,  207,  207,  538,  207,  586,
      207,  207,  561,  238,  585,  436,  238,  436,  207,  539,
      207,  207,  207,  584,  207,  207,  541,  536,  207,  562,
      207,  207,  198,  207,  540,  207,  207,  198,  207,  537,
      207,  207,  207,  238,  207,  207,  238,  534,  207,  542,
      207,  207,  533,  532,  543,  545,  546,  207,  238,  207,
      207,  238,  531,  530,  544,  547,  207,  529,  207,  207,
      555,  207,  528,  207,  207,  207,  238,  207,  207,  238,

      207,  527,  207,  207,  207,  565,  207,  207,  550,  568,
      526,  525,  548,  549,  551,  207,  524,  207,  207,  207,
      523,  207,  207,  553,  463,  434,  207,  463,  522,  521,
      464,  552,  207,  464,  207,  554,  207,  207,  207,  520,
      207,  207,  207,  519,  207,  207,  559,  518,  207,  559,
      238,  238,  238,  238,  238,  238,  517,  238,  238,  564,
      238,  238,  238,  238,  238,  238,  238,  238,  577,  238,
      569,  570,  238,  558,  465,  516,  563,  515,  556,  566,
      557,  238,  238,  567,  238,  238,  572,  514,  238,  238,
      560,  238,  238,  513,  573,  571,  574,  576,  238,  487,

      434,  238,  487,  488,  238,  512,  488,  238,  238,  582,
      238,  238,  582,  238,  535,  575,  535,  535,  207,  535,
      207,  207,  207,  409,  207,  207,  207,  511,  207,  207,
      619,  618,  510,  207,  620,  207,  207,  509,  508,  238,
      578,  581,  238,  207,  507,  207,  207,  489,  579,  506,
      580,  621,  635,  583,  207,  505,  207,  207,  536,  504,
      536,  207,  622,  207,  207,  207,  503,  207,  207,  623,
      207,  502,  207,  207,  207,  501,  207,  207,  207,  500,
      207,  207,  207,  499,  207,  207,  207,  498,  207,  207,
      624,  497,  496,  207,  627,  207,  207,  495,  207,  238,

      207,  207,  238,  494,  493,  625,  629,  636,  207,  626,
      207,  207,  207,  628,  207,  207,  207,  440,  207,  207,
      207,  439,  207,  207,  207,  438,  207,  207,  207,  327,
      207,  207,  559,  238,  207,  559,  238,  437,  207,  630,
      207,  207,  238,  238,  238,  238,  238,  238,  432,  431,
      637,  638,  631,  238,  238,  632,  238,  238,  633,  430,
      238,  639,  640,  238,  238,  238,  429,  238,  238,  641,
      238,  428,  238,  238,  238,  238,  560,  238,  644,  427,
      646,  238,  634,  238,  238,  238,  238,  238,  238,  426,
      238,  642,  643,  238,  645,  238,  238,  582,  238,  238,

      582,  207,  238,  207,  207,  207,  425,  207,  207,  670,
      647,  207,  424,  207,  207,  207,  238,  207,  207,  238,
      207,  648,  207,  207,  649,  650,  207,  423,  207,  207,
      207,  422,  207,  207,  207,  421,  207,  207,  671,  420,
      419,  583,  672,  651,  207,  418,  207,  207,  207,  417,
      207,  207,  673,  207,  416,  207,  207,  207,  415,  207,
      207,  207,  307,  207,  207,  207,  674,  207,  207,  675,
      207,  414,  207,  207,  207,  413,  207,  207,  207,  238,
      207,  207,  238,  238,  412,  238,  238,  679,  238,  238,
      238,  238,  238,  238,  238,  238,  411,  238,  238,  680,

      238,  238,  677,  681,  238,  682,  676,  238,  238,  238,
      238,  238,  238,  238,  410,  678,  238,  684,  238,  238,
      683,  238,  238,  238,  694,  408,  238,  694,  207,  407,
      207,  207,  207,  406,  207,  207,  207,  405,  207,  207,
      207,  404,  207,  207,  207,  238,  207,  207,  238,  403,
      686,  402,  697,  207,  685,  207,  207,  401,  400,  207,
      687,  207,  207,  399,  699,  698,  207,  699,  695,  207,
      238,  207,  207,  238,  238,  238,  238,  238,  238,  238,
      238,  398,  238,  238,  702,  238,  704,  238,  703,  704,
      238,  694,  694,  711,  694,  694,  711,  207,  397,  207,

      207,  701,  207,  238,  207,  207,  238,  699,  700,  207,
      699,  207,  396,  207,  207,  715,  395,  207,  715,  706,
      704,  238,  238,  704,  238,  238,  719,  394,  711,  719,
      705,  711,  393,  713,  392,  695,  695,  712,  711,  391,
      238,  711,  207,  238,  207,  207,  207,  238,  207,  207,
      238,  700,  717,  277,  715,  714,  207,  715,  207,  716,
      207,  207,  719,  273,  705,  719,  718,  204,  238,  335,
      720,  238,  712,  207,  724,  207,  207,  334,  207,  726,
      207,  207,  712,  238,  238,  198,  238,  238,  207,  238,
      207,  207,  238,  207,  238,  207,  207,  238,  716,  194,

      333,  207,  725,  207,  207,  238,  720,  238,  238,  742,
      238,  730,  727,  743,  207,  191,  207,  207,  186,  332,
      331,  731,  330,  329,  328,  185,  180,  738,  739,  734,
      735,   46,   46,   46,   46,   46,   46,   51,   51,   51,
       51,   51,   51,   58,   58,   58,   58,   58,   58,   63,
       63,   63,   63,   63,   63,  144,  144,  144,  144,  144,
      144,  177,  177,  179,  177,  177,  177,  187,  187,  187,
      187,  187,  187,  190,  326,  325,  324,  190,  190,  197,
      197,  323,  322,  197,  197,  203,  203,  203,  321,  203,
      203,  206,  206,  320,  206,  206,  206,  228,  228,  319,

      228,  228,  228,  238,  238,  318,  317,  316,  238,  263,
      263,  315,  263,  263,  263,  304,  304,  314,  313,  312,
      304,  362,  362,  311,  310,  309,  362,  382,  382,  151,
      382,  382,  382,  307,  299,  298,  295,  294,  293,  290,
      289,  281,  280,  279,  278,  277,  275,  271,  266,  265,
      261,  260,  259,  256,  255,  247,  246,  245,  244,  243,
      208,  205,  204,  202,  199,  198,  194,  191,  186,  185,
      180,  179,  169,  168,  167,  164,  163,  155,  154,  153,
      152,  151,  150,  744,   17,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,

      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744
    } ;

static yyconst flex_int16_t yy_chk[1933] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    7,    7,
        2,    2,   43,    5,    5,    2,    3,    3,    3,    3,
        4,    4,    4,    4,    4,    6,    6,   30,    2,    8,
        8,   43,   29,    4,   15,   15,   15,   15,   19,   15,
       44,   19,   44,    2,   30,    2,   29,    2,  104,   33,
        2,    2,    5,   16,   16,   16,   16,    5,   16,   28,

        4,   33,   28,   61,    6,  104,   28,  759,   61,    6,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,   40,   57,
       10,   10,   49,   49,   49,   10,   54,   54,   54,  740,
      107,   66,   40,   66,   66,  131,  737,   69,   10,   69,
       69,   70,  107,   70,   70,  103,   57,   81,   70,   81,
       81,  102,  131,   10,  102,   10,   81,   10,  102,  103,

       10,   10,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   12,
      736,  112,   12,   12,  112,  114,   71,   12,   71,   71,
       72,  117,   72,   72,   73,  144,   73,   73,  144,  114,
       12,  733,   71,   72,  118,   82,  118,   82,   82,   84,
      117,   84,   84,  129,   73,   12,  129,   12,   82,   12,
      129,  732,   12,   12,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   14,  130,  729,   14,   14,  134,  728,   74,   14,
       74,   74,   75,  142,   75,   75,  130,   78,  134,   78,
       78,   77,   14,   77,   77,   76,   75,   76,   76,   75,
       77,  722,  142,   75,   76,   74,  196,   14,  139,   14,
      149,   14,   78,  149,   14,   14,   37,   77,   76,   37,
       37,  721,  139,   79,   37,   79,   79,  143,   80,  143,

       80,   80,   83,  196,   83,   83,   85,  712,   85,   85,
      175,  709,  175,   79,   80,  707,   86,  695,   86,   86,
      178,  178,   37,  693,   37,   86,   80,  200,  182,   37,
       37,  691,  200,   87,   83,   87,   87,  689,   88,   86,
       88,   88,   89,  301,   89,   89,   90,  182,   90,   90,
       91,  688,   91,   91,   93,   93,   93,   93,   95,   95,
       95,   95,  301,   89,  111,  111,  111,  111,  120,  120,
      120,  120,  189,  189,  189,   87,   90,   88,   90,  193,
      193,  193,   89,  138,  138,  138,  138,  145,  145,  145,
      145,  669,  202,  202,   91,  202,  206,  667,  206,  206,

      207,  665,  207,  207,  209,  238,  209,  209,  238,  660,
      210,  209,  210,  210,  211,  659,  211,  211,  212,  210,
      212,  212,  213,  658,  213,  213,  214,  212,  214,  214,
      215,  252,  215,  215,  252,  213,  657,  202,  211,  214,
      216,  656,  216,  216,  217,  655,  217,  217,  218,  654,
      218,  218,  219,  252,  219,  219,  220,  215,  220,  220,
      297,  297,  221,  216,  221,  221,  653,  652,  244,  217,
      218,  244,  222,  219,  222,  222,  615,  244,  614,  221,
      223,  222,  223,  223,  220,  224,  613,  224,  224,  225,
      246,  225,  225,  246,  226,  224,  226,  226,  227,  246,

      227,  227,  612,  228,  225,  228,  228,  229,  223,  229,
      229,  226,  230,  610,  230,  230,  231,  608,  231,  231,
      232,  607,  232,  232,  233,  271,  233,  233,  271,  606,
      600,  227,  234,  233,  234,  234,  230,  230,  235,  599,
      235,  235,  236,  598,  236,  236,  231,  237,  249,  237,
      237,  249,  232,  234,  239,  239,  239,  239,  241,  241,
      241,  241,  243,  245,  247,  243,  245,  247,  248,  243,
      250,  248,  234,  250,  235,  249,  251,  247,  597,  251,
      596,  248,  253,  236,  595,  253,  254,  245,  255,  254,
      594,  255,  593,  250,  257,  256,  258,  257,  256,  258,

      592,  251,  591,  253,  256,  255,  258,  260,  259,  261,
      260,  259,  261,  263,  254,  263,  263,  265,  263,  590,
      265,  589,  257,  259,  260,  264,  266,  267,  264,  266,
      267,  268,  269,  588,  268,  269,  267,  270,  304,  587,
      270,  304,  261,  272,  272,  272,  272,  265,  305,  264,
      264,  305,  268,  306,  306,  306,  306,  586,  266,  327,
      327,  328,  327,  585,  328,  584,  334,  334,  269,  334,
      537,  268,  335,  335,  536,  335,  336,  336,  270,  336,
      338,  362,  338,  338,  362,  339,  534,  339,  339,  340,
      533,  340,  340,  341,  531,  341,  341,  342,  367,  342,

      342,  367,  338,  530,  340,  328,  342,  343,  528,  343,
      343,  334,  339,  344,  341,  344,  344,  335,  527,  367,
      343,  336,  345,  526,  345,  345,  346,  525,  346,  346,
      347,  524,  347,  347,  348,  344,  348,  348,  521,  363,
      520,  345,  363,  347,  348,  349,  363,  349,  349,  519,
      518,  350,  346,  350,  350,  516,  515,  351,  349,  351,
      351,  352,  350,  352,  352,  353,  368,  353,  353,  368,
      354,  351,  354,  354,  355,  368,  355,  355,  356,  356,
      356,  356,  514,  512,  511,  354,  357,  352,  357,  357,
      358,  353,  358,  358,  359,  510,  359,  359,  360,  364,

      360,  360,  364,  361,  355,  361,  361,  365,  366,  369,
      365,  366,  369,  370,  509,  508,  370,  371,  359,  507,
      371,  364,  369,  366,  372,  373,  358,  372,  373,  374,
      357,  506,  374,  360,  365,  370,  371,  505,  373,  374,
      361,  375,  376,  377,  375,  376,  377,  504,  378,  379,
      372,  378,  379,  376,  375,  380,  381,  377,  380,  381,
      382,  384,  382,  382,  384,  382,  383,  383,  385,  383,
      380,  385,  503,  386,  378,  379,  386,  388,  387,  389,
      388,  387,  389,  502,  501,  390,  381,  387,  390,  409,
      409,  410,  409,  435,  410,  500,  435,  386,  388,  433,

      433,  499,  433,  439,  385,  384,  439,  441,  441,  498,
      441,  497,  443,  443,  389,  443,  445,  388,  445,  445,
      496,  469,  390,  446,  469,  446,  446,  445,  447,  495,
      447,  447,  469,  470,  494,  410,  470,  435,  448,  446,
      448,  448,  449,  493,  449,  449,  448,  439,  462,  470,
      462,  462,  441,  450,  447,  450,  450,  443,  451,  440,
      451,  451,  452,  564,  452,  452,  564,  438,  453,  449,
      453,  453,  437,  436,  450,  452,  453,  454,  473,  454,
      454,  473,  432,  431,  451,  454,  455,  430,  455,  455,
      462,  456,  429,  456,  456,  457,  476,  457,  457,  476,

      458,  428,  458,  458,  459,  473,  459,  459,  457,  476,
      427,  426,  455,  456,  458,  460,  425,  460,  460,  461,
      424,  461,  461,  460,  463,  463,  463,  463,  423,  422,
      464,  459,  464,  464,  465,  461,  465,  465,  466,  421,
      466,  466,  467,  420,  467,  467,  468,  419,  468,  468,
      471,  472,  485,  471,  472,  485,  418,  475,  474,  472,
      475,  474,  477,  478,  480,  477,  478,  480,  485,  479,
      477,  478,  479,  467,  464,  417,  471,  416,  465,  474,
      466,  481,  482,  475,  481,  482,  480,  415,  483,  484,
      468,  483,  484,  414,  481,  479,  482,  484,  486,  487,

      487,  486,  487,  488,  489,  413,  488,  489,  490,  492,
      491,  490,  492,  491,  513,  483,  535,  513,  538,  535,
      538,  538,  539,  412,  539,  539,  540,  411,  540,  540,
      539,  538,  408,  541,  540,  541,  541,  407,  406,  561,
      486,  491,  561,  542,  405,  542,  542,  488,  489,  404,
      490,  542,  561,  492,  543,  403,  543,  543,  513,  402,
      535,  544,  543,  544,  544,  545,  401,  545,  545,  544,
      546,  400,  546,  546,  547,  399,  547,  547,  548,  398,
      548,  548,  549,  397,  549,  549,  550,  396,  550,  550,
      545,  395,  394,  551,  550,  551,  551,  393,  552,  562,

      552,  552,  562,  392,  391,  548,  552,  562,  553,  549,
      553,  553,  554,  551,  554,  554,  555,  333,  555,  555,
      556,  332,  556,  556,  557,  331,  557,  557,  558,  330,
      558,  558,  559,  569,  559,  559,  569,  329,  560,  554,
      560,  560,  563,  565,  568,  563,  565,  568,  326,  325,
      563,  565,  555,  566,  567,  557,  566,  567,  558,  324,
      570,  566,  567,  570,  571,  572,  323,  571,  572,  568,
      573,  322,  575,  573,  574,  575,  559,  574,  573,  321,
      575,  576,  560,  577,  576,  578,  577,  579,  578,  320,
      579,  571,  572,  580,  574,  581,  580,  582,  581,  583,

      582,  618,  583,  618,  618,  619,  319,  619,  619,  618,
      577,  620,  318,  620,  620,  621,  636,  621,  621,  636,
      622,  578,  622,  622,  580,  581,  623,  317,  623,  623,
      624,  316,  624,  624,  625,  315,  625,  625,  624,  314,
      313,  582,  625,  583,  626,  312,  626,  626,  627,  311,
      627,  627,  626,  628,  310,  628,  628,  629,  309,  629,
      629,  630,  308,  630,  630,  631,  628,  631,  631,  630,
      632,  303,  632,  632,  633,  302,  633,  633,  634,  635,
      634,  634,  635,  637,  300,  638,  637,  635,  638,  639,
      640,  641,  639,  640,  641,  642,  299,  643,  642,  641,

      643,  644,  632,  642,  644,  643,  631,  645,  646,  647,
      645,  646,  647,  648,  298,  633,  648,  647,  649,  650,
      645,  649,  650,  651,  668,  295,  651,  668,  670,  294,
      670,  670,  671,  293,  671,  671,  672,  292,  672,  672,
      673,  291,  673,  673,  674,  679,  674,  674,  679,  290,
      649,  289,  674,  675,  648,  675,  675,  288,  287,  676,
      650,  676,  676,  286,  677,  676,  677,  677,  668,  678,
      680,  678,  678,  680,  681,  682,  683,  681,  682,  683,
      684,  285,  685,  684,  683,  685,  686,  687,  685,  686,
      687,  690,  694,  696,  690,  694,  696,  697,  284,  697,

      697,  678,  698,  702,  698,  698,  702,  699,  677,  699,
      699,  700,  283,  700,  700,  701,  282,  701,  701,  687,
      704,  703,  705,  704,  703,  705,  706,  281,  708,  706,
      686,  708,  280,  698,  279,  690,  694,  696,  711,  278,
      718,  711,  713,  718,  713,  713,  714,  717,  714,  714,
      717,  699,  703,  277,  715,  700,  715,  715,  716,  701,
      716,  716,  719,  274,  704,  719,  705,  203,  720,  201,
      706,  720,  708,  724,  713,  724,  724,  198,  725,  717,
      725,  725,  711,  726,  727,  197,  726,  727,  730,  731,
      730,  730,  731,  734,  735,  734,  734,  735,  715,  195,

      194,  738,  716,  738,  738,  739,  719,  743,  739,  738,
      743,  724,  720,  739,  742,  192,  742,  742,  188,  184,
      183,  726,  181,  180,  179,  176,  174,  734,  735,  730,
      731,  745,  745,  745,  745,  745,  745,  746,  746,  746,
      746,  746,  746,  747,  747,  747,  747,  747,  747,  748,
      748,  748,  748,  748,  748,  749,  749,  749,  749,  749,
      749,  750,  750,  173,  750,  750,  750,  751,  751,  751,
      751,  751,  751,  752,  169,  168,  167,  752,  752,  753,
      753,  166,  165,  753,  753,  754,  754,  754,  164,  754,
      754,  755,  755,  163,  755,  755,  755,  756,  756,  162,

      756,  756,  756,  757,  757,  161,  160,  159,  757,  758,
      758,  158,  758,  758,  758,  760,  760,  157,  156,  155,
      760,  761,  761,  154,  153,  152,  761,  762,  762,  151,
      762,  762,  762,  147,  141,  140,  137,  136,  135,  133,
      132,  128,  127,  126,  125,  124,  122,  119,  116,  115,
      110,  109,  108,  106,  105,  101,  100,   99,   98,   97,
       68,   65,   63,   62,   60,   58,   56,   53,   48,   45,
       42,   41,   36,   35,   34,   32,   31,   27,   26,   25,
       24,   23,   21,   17,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,

      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[59] =
    {   0,
0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 
    1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#line 2 "levcomp.lpp"

// levcomp.lpp:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
// 
// Based loosely on NetHack's lev_comp.l

#include "AppHdr.h"
#include "mapdef.h"
#include "levcomp.tab.h"
#include <cstring>
#include <queue>

static bool alloced = false;

std::queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(100);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

static void settext(bool trim_right = false, int strip_trailing = 0)
{
    clean();
    char *newstring = NULL;
    if ((yylval.text = newstring = strdup(yytext)))
    {
        alloced = true;

        char *s = NULL;
        if (trim_right)
        {
            s = newstring + strlen(newstring) - 1;
            while (isspace(*s) && s >= newstring)
                *s-- = 0;
        }
        if (strip_trailing)
        {
            if (!s)
                s = newstring + strlen(newstring) - 1;
            while (s >= newstring && --strip_trailing >= 0)
                *s-- = 0;
        }
    }
}








#line 1222 "levcomp.lex.cc"

#define INITIAL 0
#define MAPDEF 1
#define LUA 2
#define LUA_ONELINER 3
#define ARGUMENT 4
#define MNAME 5
#define KEYWORDS 6
#define ITEM_LIST 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 82 "levcomp.lpp"


#line 1388 "levcomp.lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 745 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 744 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 84 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 86 "levcomp.lpp"
{
                        settext();
                        return MAP_LINE;
                    }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 91 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 92 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 93 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 95 "levcomp.lpp"
;
	YY_BREAK
case 7:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 97 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 8:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 98 "levcomp.lpp"
{
                            settext(true, 2);
                            BEGIN(INITIAL);
                            return LUA_LINE;
                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 103 "levcomp.lpp"
{
                            settext();
                            return LUA_LINE;
                        }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 107 "levcomp.lpp"
;
	YY_BREAK
case 11:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 109 "levcomp.lpp"
{
                            settext();
                            return LUA_LINE;
                        }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 113 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 115 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 120 "levcomp.lpp"
;
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 121 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 123 "levcomp.lpp"
{ 
                        settext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 128 "levcomp.lpp"
{
                        settext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 133 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 134 "levcomp.lpp"
;
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 135 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 137 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 139 "levcomp.lpp"
{ 
                        settext();
                        return MONSTER_NAME; 
                    }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 144 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 145 "levcomp.lpp"
;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 147 "levcomp.lpp"
{ 
                        BEGIN(INITIAL);
                        settext();
                        return STRING; 
                    }
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 153 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 155 "levcomp.lpp"
;
	YY_BREAK
case 28:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 157 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 159 "levcomp.lpp"
{ BEGIN(LUA_ONELINER); return MAIN; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 161 "levcomp.lpp"
{ BEGIN(LUA); return PRELUDE; }      
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 162 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 163 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 164 "levcomp.lpp"
{ BEGIN(LUA); return VALIDATE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 165 "levcomp.lpp"
{ BEGIN(LUA); return VETO; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 168 "levcomp.lpp"
{ BEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 169 "levcomp.lpp"
{ BEGIN(ARGUMENT); return DEFAULT_DEPTH; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 170 "levcomp.lpp"
{ BEGIN(ARGUMENT); return DEPTH; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 171 "levcomp.lpp"
{ BEGIN(ARGUMENT); return ORIENT; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 172 "levcomp.lpp"
{ BEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 173 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 174 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 175 "levcomp.lpp"
{ BEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 176 "levcomp.lpp"
{ BEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 177 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return SUBST; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 178 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return NSUBST; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 179 "levcomp.lpp"
{ BEGIN(MNAME); return MONS; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 180 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 181 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return MARKER; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 182 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return SHUFFLE; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 184 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KFEAT; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 185 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KITEM; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 186 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KMONS; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 188 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 190 "levcomp.lpp"
{
                        clean();
                        yylval.i = atoi(yytext);
                        return INTEGER;
                    }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 196 "levcomp.lpp"
;
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 197 "levcomp.lpp"
;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 198 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 200 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 1822 "levcomp.lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MAPDEF):
case YY_STATE_EOF(LUA):
case YY_STATE_EOF(LUA_ONELINER):
case YY_STATE_EOF(ARGUMENT):
case YY_STATE_EOF(MNAME):
case YY_STATE_EOF(KEYWORDS):
case YY_STATE_EOF(ITEM_LIST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 745 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 745 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 744);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 200 "levcomp.lpp"



int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}

