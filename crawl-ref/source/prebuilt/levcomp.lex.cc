#line 2 "levcomp.lex.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvs/root/flex/flex/skel.c,v 1.2 2004/05/07 00:28:17 jkh Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 80
#define YY_END_OF_BUFFER 81
static yyconst short int yy_acclist[2253] =
    {   0,
       81,   79,   80,   70,   79,   80,   71,   80,   79,   80,
       77,   79,   80,   74,   79,   80,   72,   79,   80,   73,
       79,   80,   76,   79,   80,   68,   79,   80,   67,   79,
       80,   69,   79,   80,   75,   79,   80,   79,   80,   79,
       80,   79,   80,   79,   80,   79,   80,   79,   80,   79,
       80,   79,   80,   79,   80,   79,   80,   79,   80,   79,
       80,   79,   80,   79,   80,   79,   80,   79,   80,   79,
       80,   79,   80,   79,   80,   79,   80,   79,   80,   79,
       80,   79,   80,   70,   79,   80,   21,   79,   80,   79,
       80,   79,   80,   80,    6,   80,   80,   80,    4,   80,

        2,   80,    3,    6,   80,   80,   80,    2,    4,   80,
        2,   80,    2,   80,   79,   80,   20,   71,   80,   79,
       80,   77,   79,   80,   74,   79,   80,   72,   79,   80,
       73,   79,   80,   76,   79,   80,   68,   79,   80,   67,
       79,   80,   69,   79,   80,   75,   79,   80,   79,   80,
       79,   80,   79,   80,   79,   80,   79,   80,   79,   80,
       79,   80,   79,   80,   79,   80,   79,   80,   79,   80,
       79,   80,   79,   80,   79,   80,   79,   80,   79,   80,
       79,   80,   79,   80,   79,   80,   79,   80,   79,   80,
       79,   80,   79,   80,   21,   79,   80,   79,   80,   79,

       80,   79,   80,   18,   70,   79,   80,   15,   71,   80,
       18,   79,   80,   77,   79,   80,   74,   79,   80,   72,
       79,   80,   73,   79,   80,   76,   79,   80,   17,   68,
       79,   80,   67,   79,   80,   69,   79,   80,   75,   79,
       80,   79,   80,   79,   80,   79,   80,   79,   80,   79,
       80,   79,   80,   79,   80,   79,   80,   79,   80,   79,
       80,   79,   80,   79,   80,   79,   80,   79,   80,   79,
       80,   79,   80,   79,   80,   79,   80,   79,   80,   79,
       80,   79,   80,   79,   80,   79,   80,   18,   70,   79,
       80,   21,   79,   80,   79,   80,   79,   80,    8,   70,

       79,   80,    9,   71,   80,   79,   80,    7,   67,   79,
       80,    7,   69,   79,   80,    7,   79,   80,    7,   79,
       80,    7,   79,   80,    7,   79,   80,    7,   79,   80,
        7,   79,   80,    7,   79,   80,    7,   79,   80,    7,
       79,   80,    7,   79,   80,    7,   79,   80,    7,   79,
       80,    7,   79,   80,    7,   79,   80,    7,   79,   80,
        7,   79,   80,    7,   79,   80,    7,   79,   80,    7,
       79,   80,    7,   79,   80,    7,   79,   80,    7,   79,
       80,    7,   79,   80,    8,   70,   79,   80,    7,   79,
       80,    7,   79,   80,   11,   80,   13,   80,   14,   80,

       80,   12,   80,   70,   71,   69,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   70,   21,   21,   78,
       78,   78,    6,    5,    2,    3,    6,    2,    2,    2,
       19,   20,   71,   19,   69,   19,   78,   19,   78,   19,
       78,   19,   78,   19,   78,   19,   78,   19,   78,   19,
       78,   19,   78,   19,   78,   19,   78,   19,   78,   19,
       78,   19,   78,   19,   78,   19,   78,   19,   78,   19,
       78,   19,   78,   19,   78,   19,   78,   19,   78,   19,

       78,   19,   78,   19,   78,   19,   78,   19,   78,   19,
       78,   19,   78,   19,   78,   19,   21,   21,   19,   78,
       19,   78,   19,   78,   18,   70,   15,   18,   15,   71,
       69,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   18,   70,   21,   78,   78,   78,    8,   70,    9,
        9,   71,    7,    7,   69,    7,   78,    7,   78,    7,
       78,    7,   78,    7,   78,    7,   78,    7,   78,    7,
       78,    7,   78,    7,   78,    7,   78,    7,   78,    7,

       78,    7,   78,    7,   78,    7,   78,    7,   78,    7,
       78,    7,   78,    7,   78,    7,   78,    7,   78,    7,
       78,    7,   78,    7,   78,    7,   78,    7,   78,    7,
       78,    7,   78,    7,   78,    8,   70,    7,   78,    7,
       78,    7,   78,   10,   13,   14,   78,   78,   78,   78,
       78,   46,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   22,   78,    2,   19,   78,   19,   78,   19,
       78,   19,   78,   19,   78,   19,   46,   78,   19,   78,

       19,   78,   19,   78,   19,   78,   19,   78,   19,   78,
       19,   78,   19,   78,   19,   78,   19,   78,   19,   78,
       19,   78,   19,   78,   19,   78,   19,   78,   19,   78,
       19,   78,   19,   78,   19,   78,   19,   78,   19,   78,
       19,   78,   19,   78,   19,   78,   19,   78,   19,   78,
       19,   78,   19,   78,   19,   78,   19,   22,   78,   16,
       16,   69,   16,   78,   16,   78,   16,   78,   16,   78,
       16,   78,   16,   78,   16,   46,   78,   16,   78,   16,
       78,   16,   78,   16,   78,   16,   78,   16,   78,   16,
       78,   16,   78,   16,   78,   16,   78,   16,   78,   16,

       78,   16,   78,   16,   78,   16,   78,   16,   78,   16,
       78,   16,   78,   16,   78,   16,   78,   16,   78,   16,
       78,   16,   78,   16,   78,   16,   78,   16,   78,   16,
       78,   16,   78,   16,   78,   16,   21,   16,   22,   78,
       16,   78,   16,   78,   16,   78,    7,   78,    7,   78,
        7,   78,    7,   78,    7,   78,    7,   46,   78,    7,
       78,    7,   78,    7,   78,    7,   78,    7,   78,    7,
       78,    7,   78,    7,   78,    7,   78,    7,   78,    7,
       78,    7,   78,    7,   78,    7,   78,    7,   78,    7,
       78,    7,   78,    7,   78,    7,   78,    7,   78,    7,

       78,    7,   78,    7,   78,    7,   78,    7,   78,    7,
       78,    7,   78,    7,   78,    7,   78,    7,   22,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   60,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   61,   78,    2,
       19,   78,   19,   78,   19,   78,   19,   78,   19,   78,
       19,   78,   19,   78,   19,   78,   19,   78,   19,   78,
       19,   78,   19,   78,   19,   78,   19,   78,   19,   78,
       19,   78,   19,   78,   19,   78,   19,   78,   19,   78,

       19,   78,   19,   78,   19,   78,   19,   78,   19,   78,
       19,   78,   19,   78,   19,   60,   78,   19,   78,   19,
       78,   19,   78,   19,   78,   19,   78,   19,   78,   19,
       78,   19,   78,   19,   61,   78,   16,   78,   16,   78,
       16,   78,   16,   78,   16,   78,   16,   78,   16,   78,
       16,   78,   16,   78,   16,   78,   16,   78,   16,   78,
       16,   78,   16,   78,   16,   78,   16,   78,   16,   78,
       16,   78,   16,   78,   16,   78,   16,   78,   16,   78,
       16,   78,   16,   78,   16,   78,   16,   78,   16,   78,
       16,   60,   78,   16,   78,   16,   78,   16,   78,   16,

       78,   16,   78,   16,   78,   16,   78,   16,   78,   16,
       61,   78,    7,   78,    7,   78,    7,   78,    7,   78,
        7,   78,    7,   78,    7,   78,    7,   78,    7,   78,
        7,   78,    7,   78,    7,   78,    7,   78,    7,   78,
        7,   78,    7,   78,    7,   78,    7,   78,    7,   78,
        7,   78,    7,   78,    7,   78,    7,   78,    7,   78,
        7,   78,    7,   78,    7,   78,    7,   60,   78,    7,
       78,    7,   78,    7,   78,    7,   78,    7,   78,    7,
       78,    7,   78,    7,   78,    7,   61,   78,   78,   78,
       78,   78,   40,   78,   78,   78,   78,   78,   33,   78,

       78,   78,   45,   78,   32,   78,   23,   78,   78,   78,
       78,   78,   78,   78,   78,   30,   78,   78,   66,   78,
       78,   78,   78,   58,   78,   78,   59,   78,    2,   19,
       78,   19,   78,   19,   78,   19,   78,   19,   40,   19,
       78,   19,   78,   19,   78,   19,   78,   19,   78,   19,
       33,   19,   78,   19,   78,   19,   78,   19,   45,   78,
       19,   32,   19,   78,   19,   23,   19,   78,   19,   78,
       19,   78,   19,   78,   19,   78,   19,   78,   19,   78,
       19,   78,   19,   30,   19,   78,   19,   78,   19,   66,
       78,   19,   78,   19,   78,   19,   78,   19,   58,   78,

       19,   78,   19,   59,   78,   16,   78,   16,   78,   16,
       78,   16,   78,   16,   40,   16,   78,   16,   78,   16,
       78,   16,   78,   16,   78,   16,   33,   16,   78,   16,
       78,   16,   78,   16,   45,   78,   16,   32,   16,   78,
       16,   23,   16,   78,   16,   78,   16,   78,   16,   78,
       16,   78,   16,   78,   16,   78,   16,   78,   16,   30,
       16,   78,   16,   78,   16,   66,   78,   16,   78,   16,
       78,   16,   78,   16,   58,   78,   16,   78,   16,   59,
       78,    7,   78,    7,   78,    7,   78,    7,   78,    7,
       78,    7,   78,    7,   78,    7,   78,    7,   78,    7,

       78,    7,   78,    7,   78,    7,   45,   78,    7,   78,
        7,   78,    7,   78,    7,   78,    7,   78,    7,   78,
        7,   78,    7,   78,    7,   78,    7,   78,    7,   78,
        7,   66,   78,    7,   78,    7,   78,    7,   78,    7,
       58,   78,    7,   78,    7,   59,   78,   78,   78,   78,
       25,   78,   78,   78,   29,   78,   35,   36,   37,   78,
       78,   27,   78,   78,   78,   78,   78,   31,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,    1,    2,
       19,   78,   19,   78,   19,   78,   19,   25,   19,   78,
       19,   78,   19,   78,   19,   29,   19,   78,   19,   35,

       19,   36,   19,   37,   19,   78,   19,   78,   19,   27,
       19,   78,   19,   78,   19,   78,   19,   78,   19,   78,
       19,   31,   19,   78,   19,   78,   19,   78,   19,   78,
       19,   78,   19,   78,   19,   78,   19,   78,   19,   78,
       19,   78,   16,   78,   16,   78,   16,   78,   16,   25,
       16,   78,   16,   78,   16,   78,   16,   29,   16,   78,
       16,   35,   16,   36,   16,   37,   16,   78,   16,   78,
       16,   27,   16,   78,   16,   78,   16,   78,   16,   78,
       16,   78,   16,   31,   16,   78,   16,   78,   16,   78,
       16,   78,   16,   78,   16,   78,   16,   78,   16,   78,

       16,   78,   16,   78,    7,   78,    7,   78,    7,   78,
        7,   78,    7,   78,    7,   78,    7,   78,    7,   78,
        7,   78,    7,   78,    7,   78,    7,   78,    7,   78,
        7,   78,    7,   78,    7,   78,    7,   78,    7,   78,
        7,   78,    7,   78,    7,   78,    7,   78,    7,   78,
        7,   78,   41,   78,   28,   39,   78,   78,   78,   78,
       78,   78,   26,   78,   47,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   19,   41,
       19,   78,   19,   28,   19,   39,   78,   19,   78,   19,
       78,   19,   78,   19,   78,   19,   78,   19,   26,   19,

       78,   19,   47,   19,   78,   19,   78,   19,   78,   19,
       78,   19,   78,   19,   78,   19,   78,   19,   78,   19,
       78,   19,   78,   19,   78,   19,   78,   19,   78,   16,
       41,   16,   78,   16,   28,   16,   39,   78,   16,   78,
       16,   78,   16,   78,   16,   78,   16,   78,   16,   26,
       16,   78,   16,   47,   16,   78,   16,   78,   16,   78,
       16,   78,   16,   78,   16,   78,   16,   78,   16,   78,
       16,   78,   16,   78,   16,   78,   16,   78,   16,   78,
        7,   78,    7,   39,   78,    7,   78,    7,   78,    7,
       78,    7,   78,    7,   78,    7,   78,    7,   78,    7,

       78,    7,   78,    7,   78,    7,   78,    7,   78,    7,
       78,    7,   78,    7,   78,    7,   78,    7,   78,    7,
       78,    7,   78,   78,   78,   78,   78,   78,   51,   78,
       78,   78,   78,   34,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   19,   78,   19,   78,   19,   78,   19,
       78,   19,   78,   19,   51,   78,   19,   78,   19,   78,
       19,   78,   19,   34,   19,   19,   78,   19,   78,   19,
       78,   19,   78,   19,   78,   19,   78,   19,   78,   19,
       78,   19,   78,   16,   78,   16,   78,   16,   78,   16,
       78,   16,   78,   16,   51,   78,   16,   78,   16,   78,

       16,   78,   16,   34,   16,   16,   78,   16,   78,   16,
       78,   16,   78,   16,   78,   16,   78,   16,   78,   16,
       78,   16,   78,    7,   78,    7,   78,    7,   78,    7,
       78,    7,   78,    7,   51,   78,    7,   78,    7,   78,
        7,   78,    7,    7,   78,    7,   78,    7,   78,    7,
       78,    7,   78,    7,   78,    7,   78,    7,   78,    7,
       78,   78,   78,   78,   50,   78,   78,   78,   78,   57,
       78,   78,   56,   78,   78,   62,   78,   63,   78,   78,
       64,   78,   65,   78,   19,   78,   19,   78,   19,   78,
       19,   50,   19,   78,   19,   78,   19,   78,   19,   78,

       19,   19,   57,   78,   19,   78,   19,   56,   78,   19,
       78,   19,   62,   78,   19,   63,   78,   19,   78,   19,
       64,   78,   19,   65,   78,   16,   78,   16,   78,   16,
       78,   16,   50,   16,   78,   16,   78,   16,   78,   16,
       78,   16,   16,   57,   78,   16,   78,   16,   56,   78,
       16,   78,   16,   62,   78,   16,   63,   78,   16,   78,
       16,   64,   78,   16,   65,   78,    7,   78,    7,   78,
        7,   78,    7,   78,    7,   78,    7,   78,    7,   78,
        7,    7,   57,   78,    7,   78,    7,   56,   78,    7,
       78,    7,   62,   78,    7,   63,   78,    7,   78,    7,

       64,   78,    7,   65,   78,   38,   78,   49,   78,   78,
       78,   78,   54,   78,   55,   78,   53,   78,   19,   38,
       19,   78,   19,   49,   19,   78,   19,   78,   19,   78,
       19,   78,   19,   19,   54,   78,   19,   55,   78,   19,
       53,   78,   16,   38,   16,   78,   16,   49,   16,   78,
       16,   78,   16,   78,   16,   78,   16,   16,   54,   78,
       16,   55,   78,   16,   53,   78,    7,   78,    7,   78,
        7,   78,    7,   78,    7,   78,    7,    7,   54,   78,
        7,   55,   78,    7,   53,   78,   52,   78,   78,   48,
       78,   42,   19,   52,   78,   19,   78,   19,   48,   19,

       78,   19,   42,   19,   16,   52,   78,   16,   78,   16,
       48,   16,   78,   16,   42,   16,    7,   52,   78,    7,
       78,    7,   78,    7,   78,   44,   19,   78,   19,   44,
       19,   16,   78,   16,   44,   16,    7,   78,    7,   43,
       19,   43,   19,   16,   43,   16,    7,   24,   19,   24,
       16,   24
    } ;

static yyconst short int yy_accept[1247] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    4,    7,    9,   11,   14,   17,
       20,   23,   26,   29,   32,   35,   38,   40,   42,   44,
       46,   48,   50,   52,   54,   56,   58,   60,   62,   64,
       66,   68,   70,   72,   74,   76,   78,   80,   82,   84,
       87,   90,   92,   94,   95,   97,   98,   99,  101,  103,
      106,  107,  108,  111,  113,  115,  117,  120,  122,  125,
      128,  131,  134,  137,  140,  143,  146,  149,  151,  153,
      155,  157,  159,  161,  163,  165,  167,  169,  171,  173,
      175,  177,  179,  181,  183,  185,  187,  189,  191,  193,

      195,  198,  200,  202,  204,  208,  211,  214,  217,  220,
      223,  226,  229,  233,  236,  239,  242,  244,  246,  248,
      250,  252,  254,  256,  258,  260,  262,  264,  266,  268,
      270,  272,  274,  276,  278,  280,  282,  284,  286,  288,
      292,  295,  297,  299,  303,  306,  308,  312,  316,  319,
      322,  325,  328,  331,  334,  337,  340,  343,  346,  349,
      352,  355,  358,  361,  364,  367,  370,  373,  376,  379,
      382,  385,  389,  392,  395,  397,  399,  401,  402,  404,
      405,  406,  407,  408,  409,  410,  411,  412,  413,  414,
      415,  416,  417,  418,  419,  420,  421,  422,  423,  424,

      425,  426,  427,  428,  429,  430,  431,  432,  433,  434,
      435,  436,  437,  438,  439,  440,  441,  442,  443,  444,
      445,  445,  445,  446,  448,  448,  448,  449,  450,  451,
      452,  452,  454,  456,  458,  460,  462,  464,  466,  468,
      470,  472,  474,  476,  478,  480,  482,  484,  486,  488,
      490,  492,  494,  496,  498,  500,  502,  504,  506,  508,
      510,  512,  514,  516,  518,  519,  521,  523,  525,  525,
      527,  528,  529,  531,  532,  533,  534,  535,  536,  537,
      538,  539,  540,  541,  542,  543,  544,  545,  546,  547,
      548,  549,  550,  551,  552,  553,  554,  555,  556,  557,

      558,  559,  560,  561,  562,  564,  565,  566,  567,  568,
      570,  571,  571,  573,  574,  576,  578,  580,  582,  584,
      586,  588,  590,  592,  594,  596,  598,  600,  602,  604,
      606,  608,  610,  612,  614,  616,  618,  620,  622,  624,
      626,  628,  630,  632,  634,  636,  638,  640,  642,  644,
      645,  645,  646,  647,  647,  648,  649,  650,  651,  652,
      654,  655,  656,  657,  658,  659,  660,  661,  662,  663,
      664,  665,  666,  667,  668,  669,  670,  671,  672,  673,
      674,  675,  676,  677,  678,  679,  680,  681,  682,  683,
      685,  686,  688,  690,  692,  694,  696,  699,  701,  703,

      705,  707,  709,  711,  713,  715,  717,  719,  721,  723,
      725,  727,  729,  731,  733,  735,  737,  739,  741,  743,
      745,  747,  749,  751,  753,  755,  757,  760,  761,  763,
      765,  767,  769,  771,  773,  775,  778,  780,  782,  784,
      786,  788,  790,  792,  794,  796,  798,  800,  802,  804,
      806,  808,  810,  812,  814,  816,  818,  820,  822,  824,
      826,  828,  830,  832,  834,  836,  838,  841,  843,  845,
      847,  849,  851,  853,  855,  857,  860,  862,  864,  866,
      868,  870,  872,  874,  876,  878,  880,  882,  884,  886,
      888,  890,  892,  894,  896,  898,  900,  902,  904,  906,

      908,  910,  912,  914,  916,  918,  921,  922,  923,  924,
      925,  926,  927,  928,  929,  930,  931,  932,  933,  934,
      935,  936,  937,  938,  939,  940,  941,  942,  943,  944,
      945,  946,  947,  948,  950,  951,  952,  953,  954,  955,
      956,  957,  958,  960,  961,  963,  965,  967,  969,  971,
      973,  975,  977,  979,  981,  983,  985,  987,  989,  991,
      993,  995,  997,  999, 1001, 1003, 1005, 1007, 1009, 1011,
     1013, 1015, 1018, 1020, 1022, 1024, 1026, 1028, 1030, 1032,
     1034, 1037, 1039, 1041, 1043, 1045, 1047, 1049, 1051, 1053,
     1055, 1057, 1059, 1061, 1063, 1065, 1067, 1069, 1071, 1073,

     1075, 1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091, 1094,
     1096, 1098, 1100, 1102, 1104, 1106, 1108, 1110, 1113, 1115,
     1117, 1119, 1121, 1123, 1125, 1127, 1129, 1131, 1133, 1135,
     1137, 1139, 1141, 1143, 1145, 1147, 1149, 1151, 1153, 1155,
     1157, 1159, 1161, 1163, 1165, 1167, 1170, 1172, 1174, 1176,
     1178, 1180, 1182, 1184, 1186, 1189, 1190, 1191, 1192, 1193,
     1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203,
     1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214,
     1215, 1216, 1217, 1218, 1219, 1221, 1222, 1223, 1224, 1226,
     1227, 1229, 1230, 1232, 1234, 1236, 1238, 1240, 1242, 1244,

     1246, 1248, 1250, 1252, 1254, 1256, 1258, 1261, 1263, 1265,
     1267, 1269, 1271, 1273, 1275, 1277, 1279, 1281, 1283, 1285,
     1287, 1289, 1292, 1294, 1296, 1298, 1301, 1303, 1306, 1308,
     1310, 1312, 1314, 1316, 1318, 1320, 1322, 1324, 1326, 1328,
     1330, 1332, 1334, 1337, 1339, 1341, 1343, 1345, 1347, 1349,
     1351, 1353, 1355, 1357, 1359, 1361, 1363, 1365, 1368, 1370,
     1372, 1374, 1377, 1379, 1382, 1384, 1386, 1388, 1390, 1392,
     1394, 1396, 1398, 1400, 1402, 1404, 1406, 1409, 1411, 1413,
     1415, 1417, 1419, 1421, 1423, 1425, 1427, 1429, 1431, 1434,
     1436, 1438, 1440, 1443, 1445, 1448, 1449, 1450, 1451, 1452,

     1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462,
     1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472,
     1473, 1474, 1475, 1476, 1477, 1478, 1479, 1481, 1483, 1485,
     1487, 1489, 1491, 1493, 1495, 1497, 1499, 1501, 1503, 1505,
     1507, 1509, 1511, 1513, 1515, 1517, 1519, 1521, 1523, 1525,
     1527, 1529, 1531, 1533, 1535, 1537, 1539, 1541, 1543, 1545,
     1547, 1549, 1551, 1553, 1555, 1557, 1559, 1561, 1563, 1565,
     1567, 1569, 1571, 1573, 1575, 1577, 1579, 1581, 1583, 1585,
     1587, 1589, 1591, 1593, 1595, 1597, 1599, 1601, 1603, 1605,
     1607, 1609, 1611, 1613, 1615, 1617, 1619, 1621, 1623, 1625,

     1627, 1629, 1631, 1633, 1635, 1637, 1639, 1641, 1643, 1645,
     1647, 1649, 1651, 1653, 1654, 1655, 1656, 1658, 1659, 1660,
     1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670,
     1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1681,
     1683, 1685, 1688, 1690, 1692, 1694, 1696, 1698, 1700, 1702,
     1704, 1706, 1708, 1710, 1712, 1714, 1716, 1718, 1720, 1722,
     1724, 1726, 1728, 1730, 1732, 1734, 1736, 1739, 1741, 1743,
     1745, 1747, 1749, 1751, 1753, 1755, 1757, 1759, 1761, 1763,
     1765, 1767, 1769, 1771, 1773, 1775, 1777, 1779, 1781, 1783,
     1786, 1788, 1790, 1792, 1794, 1796, 1798, 1800, 1802, 1804,

     1806, 1808, 1810, 1812, 1814, 1816, 1818, 1820, 1822, 1824,
     1825, 1826, 1827, 1828, 1829, 1831, 1832, 1833, 1834, 1835,
     1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844,
     1846, 1848, 1850, 1852, 1854, 1857, 1859, 1861, 1863, 1865,
     1866, 1868, 1870, 1872, 1874, 1876, 1878, 1880, 1882, 1884,
     1886, 1888, 1890, 1892, 1894, 1897, 1899, 1901, 1903, 1905,
     1906, 1908, 1910, 1912, 1914, 1916, 1918, 1920, 1922, 1924,
     1926, 1928, 1930, 1932, 1934, 1937, 1939, 1941, 1943, 1944,
     1946, 1948, 1950, 1952, 1954, 1956, 1958, 1960, 1962, 1963,
     1964, 1965, 1966, 1967, 1968, 1969, 1970, 1970, 1972, 1973,

     1975, 1976, 1978, 1980, 1981, 1983, 1985, 1987, 1989, 1991,
     1993, 1995, 1997, 1999, 2001, 2002, 2005, 2007, 2010, 2012,
     2015, 2018, 2020, 2023, 2026, 2028, 2030, 2032, 2034, 2036,
     2038, 2040, 2042, 2043, 2046, 2048, 2051, 2053, 2056, 2059,
     2061, 2064, 2067, 2069, 2071, 2073, 2075, 2077, 2079, 2081,
     2082, 2085, 2087, 2090, 2092, 2095, 2098, 2100, 2103, 2106,
     2107, 2108, 2109, 2110, 2111, 2112, 2113, 2113, 2115, 2117,
     2119, 2121, 2123, 2125, 2127, 2129, 2131, 2133, 2134, 2137,
     2140, 2143, 2145, 2147, 2149, 2151, 2153, 2155, 2157, 2158,
     2161, 2164, 2167, 2169, 2171, 2173, 2175, 2177, 2178, 2181,

     2184, 2187, 2189, 2190, 2191, 2192, 2193, 2193, 2196, 2198,
     2200, 2202, 2204, 2205, 2208, 2210, 2212, 2214, 2216, 2217,
     2220, 2222, 2224, 2225, 2226, 2227, 2227, 2229, 2231, 2232,
     2234, 2236, 2237, 2239, 2240, 2241, 2241, 2243, 2244, 2246,
     2247, 2248, 2249, 2251, 2253, 2253
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    1,    1,    1,    9,
       10,   11,    1,   12,   13,    1,    1,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,    1,    1,
        1,    1,    1,    1,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       25,   32,   33,   34,   35,   36,   25,   37,   38,   25,
        1,    1,    1,    1,   39,    1,   40,   25,   41,   42,

       43,   44,   25,   45,   46,   25,   25,   47,   48,   49,
       50,   51,   25,   52,   53,   54,   55,   56,   57,   25,
       25,   25,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[58] =
    {   0,
        1,    2,    3,    4,    2,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    1,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7
    } ;

static yyconst short int yy_base[1265] =
    {   0,
        0,   56,   62,   69,  122,  178,  231,  287,  340,  396,
       76,   88, 2558, 2559,   57, 2559, 2554, 2559, 2559, 2559,
     2559, 2559, 2559, 2559, 2542, 2559,    0, 2523, 2531, 2533,
       31, 2525, 2517,   73, 2530, 2519, 2532, 2515,   59, 2516,
       40, 2529, 2501,   36, 2496, 2492, 2501, 2490, 2496,   94,
        0,   53,   54, 2559, 2559, 2535,  107, 2559,    0, 2559,
     2534,  110,    0, 2507,  161,  101, 2559, 2532,  114,  180,
      185,  189,  193,  197,  203,  207,  211,  449,  464,   85,
      168,  188,  191,  190,  269,  172,  196,  187, 2502,  271,
      197,  273,  278,  259,  272,  277,  268,  274,  279,  284,

      315,  306,  375,    0,  328, 2559,  406,    0,    0,    0,
        0,    0, 2559,    0, 2519,    0,  496,  511,  302,  303,
      383,  373,  294,  395,  382,  307,  390, 2500,  402,  401,
      409,  405,  403,  446,  416,  367,  386,  435,  404,  479,
      476,  478,  495,  487, 2559, 2528,    0, 2516, 2516,  501,
      429,  480,  502,  183,  512,  516,  515,  517,  427,  519,
      525,  528,  536,  541,  521,  523,  529,  537,  542,  543,
      547,  565,  549,  553,  572,  581, 2559, 2525, 2559,  573,
     2559, 2513,    0, 2510, 2509,  567,  561, 2500,  575, 2503,
     2502, 2487, 2490, 2483, 2489, 2489, 2492, 2499, 2490, 2497,

      571, 2477, 2494, 2488, 2465, 2455, 2466, 2456,  555, 2456,
     2449, 2450,  594,    0,    0, 2471, 2485,  564, 2559, 2559,
     2497,  605,    0, 2559, 2496,  608, 2479, 2468,  577,  614,
      618, 2559,  622, 2464,  599,  605,  607,  610,  601,  616,
      615,  621,  611,  619,  618,  623,  628,  633,  642,  635,
      645,  646,  631,  651,  582,  637,  638,  630,  640,  641,
      643,   66,  647,  680,  684,  663,  671,  669,  694,  702,
     2559,  706, 2559,  710,  724,  739, 2479,  735,  702,  703,
      686,  697,  722,  727,  698,  737,  741,  743,  748, 2478,
      751, 2477,  744,  742,  762,  423,  747,  749,  682,  753,

      760,  764,  765,  766,  781,  788,  778, 2476,  779,  812,
     2559, 2488, 2559,    0, 2476, 2476,  785,  792,  797,  808,
      798,  810,  784,  811,  812,  820,  793,  822,  821,  823,
      825,  824,  839,  826,  830,  840,  774,  832,  841,  845,
      846,  848,  849,  847,  850,  864,  851,  857,  861,  873,
      875,  888, 2559, 2485, 2458, 2457, 2469, 2450, 2465, 2454,
     2449, 2446, 2457, 2448, 2449, 2460, 2455, 2445, 2453, 2439,
     2451, 2450, 2451, 2439, 2432, 2440, 2431, 2443, 2430, 2429,
     2421, 2406, 2409, 2418,  843, 2403, 2414, 2401, 2400,    0,
     2425,  852,  872,  881,  851,  887,  878, 2420,  875,  886,

      885,  884,  895,  900,  892,  902,  893,  903,  908,  911,
      901,  904,  905,  910,  917,  913,  915,  839,  909,  918,
      919,  920,  921,  922,  923,  924, 2419,  955,  956, 2434,
      950,  951, 2433,  953,  955,  946,  965,  966,  967,  968,
      974, 2432,  972,  970,  975,  977,  985,  987,  978,  988,
      990,  992,  993,  995,  996,  997,  998,  969,  999, 1003,
     1005, 1004, 1006, 1008, 1010, 1029, 2431, 1016, 2430, 1012,
     1022, 1023, 1026, 1032, 1041, 1040, 1024, 1033, 1047, 1042,
     1050, 1057, 1061, 1058, 1062, 1063, 1064, 1066, 1067, 1070,
     1075, 1076, 1077, 1079, 1080, 1081, 1078, 1082, 1084, 1085,

     1088, 1091, 1090, 1092, 1093, 2432, 2426, 2425, 2407, 2418,
     2425, 2409, 2400, 2398, 2403, 2403, 2419, 2399, 2404, 2398,
     2403, 1092, 2414, 2399, 2407, 2402, 2398, 2385, 2384, 2401,
     2387, 2405, 2364,    0, 2370, 2363, 2368, 2365, 2366, 2368,
     2369, 2366,    0, 2394, 1090, 1091, 1080, 1096, 1105, 1097,
     1092, 1099, 1084, 2377, 1120, 1107, 1121, 1110, 1123, 1133,
     1136, 1125, 1138, 1132, 1134, 1130, 1139, 1142, 1141, 1144,
     1128, 2376, 1140, 1145, 1147, 1148, 1149, 1155, 1150, 1157,
     2375, 1168, 1174, 1169, 1178, 1190, 1180, 1175, 1187, 1191,
     1193, 1196, 1198, 1192, 1200, 1201, 1203, 1206, 1207, 1211,

     1214, 1213, 1218, 1219, 1223, 1225, 1227, 1199, 2390, 1229,
     1230, 1231, 1232, 1233, 1235, 1240, 1244, 2389, 1237, 1248,
     1239, 1240, 1249, 1255, 1252, 1254, 1258, 1256, 1257, 1260,
     1273, 1262, 1265, 1283, 1284, 1274, 1287, 1289, 1291, 1292,
     1293, 1295, 1296, 1297, 1298, 2391, 1301, 1302, 1306, 1307,
     1310, 1314, 1308, 1315, 2390, 2379, 2381, 2373, 2384, 2559,
     2369, 2358, 2368, 2380, 2355, 2559, 2378, 2377, 2376,    0,
     2559, 2370, 2559, 2355, 2373, 2351, 2352, 2367, 2365, 2356,
     2367, 2559, 2334, 2329,    0, 2333, 2324, 2331, 1279, 2328,
     1281, 2344, 1302, 1309, 1308, 1311, 1340, 1318, 1307, 1305,

     1333, 1323, 1359, 1337, 1351, 1352, 2342, 1366, 1353, 1370,
     1344, 1362, 1350, 1347, 1369, 1361, 1363, 1373, 1387, 1364,
     1365, 2341, 1366, 1367, 1368, 1370, 1371, 1372, 1394, 1402,
     1393, 1391, 1421, 1408, 1392, 1412, 1417, 1409, 1433, 1426,
     1428, 1430, 2356, 1434, 1414, 1445, 1433, 1436, 1437, 1438,
     1439, 1440, 1442, 1445, 1460, 1447, 1448, 2355, 1450, 1452,
     1454, 1455, 1459, 1458, 1463, 1464, 1465, 1466, 1474, 1469,
     1467, 1470, 1475, 1476, 1489, 1496, 2357, 1477, 1492, 1503,
     1497, 1500, 1504, 1506, 1508, 1514, 1507, 1480, 2356, 1510,
     1511, 1515, 1517, 1519, 1523, 1522, 2353, 2333, 2559, 2333,

     2337, 2331, 2559, 2345, 2559, 2559, 2559, 2330, 2346, 2559,
     2344, 2344, 2328, 2337, 2336, 2559, 2301, 2314, 2301, 2312,
     2299, 2310, 2306, 2298, 2307, 2303,    0, 1523, 1525, 1511,
     1542, 1516, 1530, 1518, 1566, 1521, 1571, 1577, 1581, 2313,
     1537, 1585, 1556, 1562, 1561, 1564, 1572, 1593, 1546, 1567,
     1569, 1570, 1571, 1573, 1574, 1576, 1579, 1577, 1599, 1548,
     1596, 1620, 1600, 1608, 1611, 1626, 1616, 1633, 1635, 1637,
     1613, 1631, 1646, 2328, 1634, 1625, 1636, 1637, 1656, 1627,
     1638, 1643, 1644, 1646, 1647, 1648, 1649, 1650, 1651, 1655,
     1656, 1659, 1663, 1660, 1664, 1662, 1669, 1670, 1673, 1687,

     1679, 1690, 1691, 1666, 1692, 1693, 1694, 1695, 1699, 1700,
     1701, 1702, 1703, 2559, 2323, 2559,    0, 2308, 2308, 2318,
     2309, 2305, 2559, 2302, 2559, 2309, 2304, 2319, 2320, 2279,
     2279, 2276, 2277, 2275, 2274, 2277, 2272, 2271, 1717, 1697,
     1721, 2291, 1696, 1703, 1705, 1701, 1708, 1748, 1722, 1754,
     1717, 1729, 1723, 1735, 1730, 1732, 1731, 1734, 1736, 1737,
     1733, 1738, 1739, 1770, 1757, 1774, 2306, 1762, 1764, 1702,
     1758, 1765, 1797, 1771, 1798, 1777, 1778, 1792, 1797, 1779,
     1785, 1789, 1795, 1796, 1798, 1799, 1800, 1801, 1805, 2308,
     1806, 1808, 1807, 1809, 1811, 1810, 1815, 1821, 1818, 2307,

     1813, 1817, 1814, 1822, 1823, 1825, 1833, 1837, 1842, 2298,
     2298, 2295, 2301, 2288,    0, 2287, 2283, 2278, 2559, 2269,
     2257, 2259, 2265, 2257, 2252, 2251, 2258, 2249, 2248, 1835,
     1838, 1839, 1845, 1830, 2269, 1832, 1833, 1841, 1879, 1883,
     1840, 1847, 1848, 1854, 1857, 1860, 1862, 1864, 1866, 1884,
     1883, 1885, 1894, 1886, 2284, 1890, 1896, 1899, 1914, 1919,
     1906, 1907, 1911, 1912, 1913, 1914, 1918, 1915, 1916, 1922,
     1924, 1923, 1925, 1926, 2286, 1928, 1933, 1937, 2256, 1929,
     1934, 1935, 1936, 1938, 1939, 1943, 1945, 1947, 2282, 2264,
     2280, 2559, 2264, 2259, 2253, 2260, 2239,    0, 2229,    0,

     2224,    0,    0, 2234,    0,    0, 1951, 2242, 1958, 1970,
     1947, 1953, 1956, 1971, 1993, 2237, 1944, 2236, 1948, 2235,
     2224, 1970, 2219, 2218, 1989, 1949, 1991, 2007, 1992, 1994,
     1997, 1998, 2013, 2233, 2000, 2228, 2001, 2227, 2226, 2003,
     2219, 2212, 2010, 2007, 2011, 2016, 2014, 2020, 2017, 2178,
     2202, 2018, 2201, 2021, 2200, 2187, 2022, 2162, 2161, 2559,
     2140, 2559, 2136, 2155, 2137, 2153, 2116,    0,    0,    0,
     2045, 2005, 2055, 2010, 2026, 2133, 2036, 2060, 2132, 2131,
     2130, 2064, 2038, 2070, 2045, 2061, 2051, 2063, 2079, 2145,
     2143, 2142, 2061, 2069, 2072, 2073, 2075, 2102, 2135, 2126,

     2121,    0, 2083, 2559, 2028, 2559, 1505, 1244, 1089, 2087,
     2078, 2093, 2097, 1028, 2080, 2098, 2091, 2111, 2112,  775,
     2095, 2105,  666,  619, 2559,  454, 2094, 2117, 2127, 2108,
     2123, 2131, 2122,  368, 2559,  298, 2136, 2140, 2141, 2145,
      215, 2559, 2152, 2147, 2559, 2176, 2183, 2190,  113, 2197,
     2204, 2211, 2218, 2225, 2232, 2239, 2246, 2253, 2255, 2257,
     2264, 2271, 2278, 2285
    } ;

static yyconst short int yy_def[1265] =
    {   0,
     1245,    1, 1246, 1247, 1245,    5, 1245,    7, 1245,    9,
     1248, 1248, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,
     1245, 1245, 1245, 1245, 1245, 1245, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1245,
     1250, 1249, 1249, 1245, 1245, 1245, 1251, 1245, 1252, 1245,
     1245, 1251, 1252, 1252, 1252, 1253, 1245, 1245, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1254, 1254,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

     1255,   79,   79, 1256, 1245, 1245, 1245, 1256, 1256, 1256,
     1256, 1256, 1245, 1256, 1256, 1256, 1257, 1257,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118, 1245,
     1258,  118,  118, 1245, 1245, 1245, 1259, 1259, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1245, 1260, 1260, 1261, 1245, 1245, 1245, 1245, 1245,
     1245, 1245, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,

     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1245, 1250, 1250, 1249, 1249, 1249, 1245, 1245,
     1245, 1245, 1252, 1245, 1245, 1245, 1252, 1252, 1252, 1253,
     1253, 1245, 1253,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79, 1255, 1255,   79,   79,   79, 1262, 1245,
     1245, 1245, 1245, 1262, 1263, 1263,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,

      276,  276,  276,  276, 1245, 1264,  276,  276,  276, 1245,
     1245, 1245, 1245, 1259, 1259, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1245, 1260, 1260, 1260, 1261,
     1261, 1245, 1245, 1245, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1252,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79, 1262, 1262,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276, 1264,  276,  276,  276,  276,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,

     1260, 1260, 1260, 1260, 1260, 1260, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1252,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,

      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1249, 1249, 1249, 1249, 1245,
     1249, 1249, 1249, 1249, 1249, 1245, 1249, 1249, 1249, 1249,
     1245, 1249, 1245, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1245, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1252,   79,   79,   79,   79, 1253,   79,   79,   79,

       79,   79, 1253,   79,   79,   79,   79, 1253,   79, 1253,
       79,   79,   79,   79,   79,   79,   79,   79, 1253,   79,
       79,   79,   79,   79,   79,   79,   79,   79,  276,  276,
      276,  276, 1262,  276,  276,  276,  276,  276, 1262,  276,
      276,  276,  276, 1262,  276, 1262,  276,  276,  276,  276,
      276,  276,  276,  276, 1262,  276,  276,  276,  276,  276,
      276,  276,  276,  276, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1249, 1249, 1249, 1245, 1249,

     1249, 1249, 1245, 1249, 1245, 1245, 1245, 1249, 1249, 1245,
     1249, 1249, 1249, 1249, 1249, 1245, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1252,   79,   79,   79,
     1253,   79,   79,   79, 1253,   79, 1253, 1253, 1253,   79,
       79, 1253,   79,   79,   79,   79,   79, 1253,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,  276,  276,
      276, 1262,  276,  276,  276, 1262,  276, 1262, 1262, 1262,
      276,  276, 1262,  276,  276,  276,  276,  276, 1262,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,

     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1245, 1249, 1245, 1249, 1249, 1249, 1249,
     1249, 1249, 1245, 1249, 1245, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1253,   79,
     1253,   79,   79,   79,   79,   79,   79, 1253,   79, 1253,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79, 1262,  276, 1262,  276,  276,  276,  276,
      276,  276, 1262,  276, 1262,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,

     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1245, 1245,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,   79,
       79,   79,   79,   79,   79,   79,   79,   79, 1253, 1253,
       79,   79,   79,   79,   79,   79,   79,   79,   79,  276,
      276,  276,  276,  276,  276,  276,  276,  276, 1262, 1262,
      276,  276,  276,  276,  276,  276,  276,  276,  276, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1259, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1249, 1249,
     1249, 1245, 1249, 1249, 1249, 1249, 1245, 1249, 1249, 1249,

     1249, 1249, 1249, 1249, 1249, 1249,   79,   79,   79, 1253,
       79,   79,   79,   79, 1253,   79,   79,   79,   79,   79,
       79,   79,   79,   79,  276,  276,  276, 1262,  276,  276,
      276,  276, 1262,  276,  276,  276,  276,  276,  276,  276,
      276,  276, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1259,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1245,
     1249, 1245, 1249, 1249, 1249, 1249, 1245, 1249, 1249, 1249,
     1253,   79, 1253,   79,   79,   79,   79, 1253,   79,   79,
       79, 1262,  276, 1262,  276,  276,  276,  276, 1262,  276,
      276,  276, 1260, 1260, 1260, 1260, 1260, 1259, 1260, 1260,

     1260, 1249, 1249, 1245, 1249, 1245, 1245,   79,   79, 1253,
       79, 1253, 1253,  276,  276, 1262,  276, 1262, 1262, 1260,
     1260, 1260, 1259, 1249, 1245, 1245,   79, 1253, 1253,  276,
     1262, 1262, 1260, 1259, 1245, 1245, 1253, 1253, 1262, 1262,
     1259, 1245, 1253, 1262,    0, 1245, 1245, 1245, 1245, 1245,
     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,
     1245, 1245, 1245, 1245
    } ;

static yyconst short int yy_nxt[2617] =
    {   0,
       14,   15,   16,   17,   15,   18,   19,   14,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   27,   27,   33,   27,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   27,   27,   27,   27,   27,   27,
       27,   43,   44,   45,   27,   27,   27,   27,   46,   27,
       47,   27,   48,   27,   27,   27,   49,   50,  180,  187,
       50,  180,  202,   51,   55,   56,   57,  188,  216,   58,
       54,   60,   61,   62,  203,  206,   63,  176,  177,  178,
      176,  217,  195,   52,  207,  198,  199,  179,   64,  176,
      177,  178,  176,  191,  200,  213,  192,  234,  213,  179,

      193,  214,  231,  211,  231,  231,  218,  236,   53,  219,
      221,  222,  224,  225,  226,  231,  234,  231,  231,  183,
      425,   65,   66,   15,   67,   68,   15,   69,   70,   66,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
       81,   82,   83,   78,   78,   84,   78,   85,   86,   87,
       88,   89,   90,   91,   92,   93,   78,   78,   78,   78,
       78,   78,   78,   94,   95,   96,   78,   78,   78,   78,
       97,   78,   98,   78,   99,   78,   78,   78,  100,   50,
      228,  231,   50,  231,  231,  101,  231,  237,  231,  231,
      231,  245,  231,  231,  231,  314,  231,  231,  231,  234,

      231,  231,  247,  234,  231,  102,  231,  231,  231,  322,
      231,  231,  231,  229,  231,  231,  238,  240,  234,  234,
      233,  234,  234,  241,  239,  246,  252,  234,  234, 1242,
      103,  104,  105,  106,  107,  105,  108,  109,  104,  110,
      111,  112,  113,  114,  115,  116,  117,  118,  119,  120,
      121,  122,  117,  117,  123,  117,  124,  125,  126,  127,
      128,  129,  130,  131,  132,  117,  117,  117,  117,  117,
      117,  117,  133,  134,  135,  117,  117,  117,  117,  136,
      117,  137,  117,  138,  117,  117,  117,  139,  140,  242,
      234,  140,  243,  255,  141,  253,  244,  249,  250,  234,

      234,  256,  234,  234,  234,  234,  251,  254,  234,  234,
      234,  257, 1242,  261,  142,  234,  265,  260,  265,  265,
      258,  266,  278,  259,  277,  275,  263,  282,  262,  270,
      271,  272,  270,  275,  275,  246,  287,  234,  275,  143,
       14,  144,  145,  146,  144,   18,   19,   14,   20,   21,
       22,   23,  147,  148,   26,  149,  150,  151,  152,  153,
      154,  149,  149,  155,  149,  156,  157,  158,  159,  160,
      161,  162,  163,  164,  149,  149,  149,  149,  149,  149,
      149,  165,  166,  167,  149,  149,  149,  149,  168,  149,
      169,  149,  170,  149,  149,  149,  171,  172,  275,  281,

      172,  286,  267,   51,  275,  288,  234,  272,  273,  272,
      272,  279, 1241,  275,  275,  283,  301,  275,  284,  280,
      296,  275,  285,  173,  262,  302,  275,  268,  290,  291,
      293,  294,  275,  275,  275,  275,  275,  292,  430,  314,
      275,  314,  329,  295,  456,  297,  304,  275,  174,  230,
      231,  318,  231,  231,  230,  230,  230,  230,  230,  230,
      230,  230,  300,  230,  230,  231,  275,  231,  231,  230,
      230,  230,  230,  230,  230,  230,  230,  275,  230,  215,
      305,  271,  272,  305,  303,  298,  214,  215,  310,  311,
      312,  310,  314,  307,  299,  235,  269,  269, 1236,  319,

      269,  269,  269,  269,  269,  269,  269,  287,  269,  275,
      269,  269,  269,  314,  314,  269,  269,  269,  269,  269,
      269,  269,  308,  269,  314,  269,  275,  314,  314,  314,
      320,  314,  317,  314,  327,  314,  324,  314,  321,  325,
      314,  314,  276,  326,  303,  323,  328,  309,  314,  314,
      330,  331,  332,  314,  314,  314,  337,  334,  335,  314,
      333,  314,  339,  338,  347,  314,  346,  311,  312,  346,
      336,  340,  214,  351,  180,  341,  351,  180,  328,  360,
      348,  343,  352,  353,  354,  352,  342,  357,  376,  345,
      363,  217,  344,  385,  361,  213,  228,  358,  213,  359,

      377,  214,  344,  417,  364,  349,  386,  219,  221,  222,
      224,  225,  226,  234,  392,  231,  218,  231,  231,  231,
      393,  231,  231,  231,  399,  231,  231,  394,  397,  229,
      234,  400,  234, 1235,  402,  233,  234,  395,  234,  396,
      403,  234,  234,  398,  404,  401,  234,  234,  405,  234,
      234,  407,  234,  406,  234,  408,  409,  410,  411,  234,
      412,  234,  234,  413,  234,  415,  234,  416,  234,  234,
      420,  234,  234,  234,  234,  414,  234,  234,  234,  422,
      418,  265,  234,  265,  265,  265,  266,  265,  265,  421,
      419,  424,  423,  427,  234,  269,  267,  430,  269,  426,

      234,  439,  234,  270,  271,  272,  270,  272,  271,  272,
      272,  269,  430,  430,  269,  440,  441,  430,  430, 1234,
      436,  268,  459,  429,  428,  269,  438,  444,  269,  428,
      428,  428,  428,  428,  428,  437,  428,  430,  428,  428,
      269,  442,  430,  269,  428,  428,  428,  428,  428,  428,
      430,  428,  430,  428,  431,  433,  430,  430,  430,  430,
      443,  452,  430,  430,  430,  434,  430,  435,  430,  446,
      447,  448,  445,  453,  450,  430,  454,  430,  455,  430,
      430,  430,  305,  271,  272,  305,  314,  314,  214,  306,
      457,  215,  306,  430,  430,  496,  314,  314,  461,  215,

      471,  458,  460,  481,  314,  314,  469,  472,  467,  314,
      314,  462,  463,  310,  311,  312,  310,  473,  465,  464,
      314,  478,  314,  314,  314,  479,  476,  474,  485,  475,
      482,  470,  314,  314,  314,  314,  314,  314,  314,  480,
      489,  477,  314,  492,  314,  483,  488,  490,  487,  484,
      486,  314,  314,  314,  491,  493,  495,  314,  314,  314,
      314,  314,  314,  314,  494,  346,  311,  312,  346,  314,
      234,  214,  347,  314,  351,  497,  351,  351,  571,  351,
      545,  506,  234,  234,  548,  499,  501,  537,  348,  352,
      353,  354,  352,  498,  538,  500,  547,  503,  539,  502,

      546,  504,  505,  234,  549,  550,  234,  553,  552,  234,
      556,  555,  234,  349,  554,  234,  234,  234,  234,  557,
      558,  559,  561,  234,  234,  560,  234,  562,  563,  564,
      566,  234,  234,  234,  234,  234,  234,  568,  565,  234,
      234,  234,  234,  567,  234,  569,  234,  570,  234,  234,
      234,  234,  234,  234,  234,  234,  269,  269,  574,  269,
      269,  430,  572,  579,  575,  430,  430,  573,  430,  429,
      430,  576,  586,  587,  578,  577,  580,  581,  582,  583,
      430,  430,  430,  430,  430,  430,  585,  430,  590,  430,
      430,  594,  430,  430,  596,  600,  588,  591,  595,  589,

      430,  592,  430,  430,  598,  430,  599,  430,  430,  597,
      430,  430,  430,  430,  430,  605,  601,  603,  430,  430,
      430,  430,  609,  430,  602,  430,  604,  430,  606,  607,
      306,  430,  215,  306,  314,  314,  314,  608,  314,  469,
      215,  621,  611,  430,  314,  314,  467,  616,  610,  612,
      619,  620,  314,  314,  314,  625,  613,  615,  623,  314,
      614,  617,  314,  618,  470,  622,  626,  624,  627,  314,
      314,  628,  630,  314,  314,  314,  314,  629,  314,  314,
      631,  633,  314,  635,  637,  636,  632,  314,  314,  314,
      314,  314,  314,  314,  314,  634,  314,  314,  638,  642,

      314,  640,  314,  314,  314,  314,  671,  693,  694,  639,
      641,  234,  643,  644,  695,  234,  701,  645,  696,  697,
     1227,  234,  234,  234,  648,  672,  698,  234,  234,  699,
      234,  653,  649,  647,  703,  646,  234,  700,  234,  650,
      704,  234,  706,  651,  652,  654,  655,  708,  705,  707,
      710,  234,  234,  711,  234,  713,  234,  712,  719,  234,
      714,  234,  717,  234,  234,  234,  709,  234,  715,  234,
      234,  234,  234,  234,  718,  234,  234,  716,  234,  234,
      234,  234,  720,  430,  430,  729,  234,  721,  234,  430,
      430,  730,  727,  430,  723,  430,  725,  724,  722,  726,

      732,  728,  430,  731,  733,  430,  430,  430,  430,  734,
      739,  430,  735,  430,  430,  430,  430,  744,  430,  741,
      746,  430,  430,  737,  738,  736,  430,  743,  430,  430,
      748,  740,  742,  430,  430,  747,  745,  749,  430,  750,
      430,  755,  430,  753,  430,  430,  430,  430,  430,  314,
      430,  314,  314,  756,  765,  430,  751,  752,  754,  430,
      314,  314,  768,  660,  314,  766,  314,  314,  314,  314,
      314,  666,  314,  767,  314,  234,  757,  314,  759,  762,
      761,  760,  763,  758,  769,  314,  314,  773,  764,  770,
      772,  777,  771,  774,  776,  314,  314,  671,  673,  314,

      775,  314,  779,  314,  314,  314,  780,  314,  314,  314,
      314,  682,  781,  314,  314,  785,  778,  782,  314,  314,
      314,  822,  314,  825,  828,  831,  314,  314,  829,  786,
      783,  784,  834,  234,  830,  823,  234,  826,  234,  234,
      234,  231,  234,  231,  231,  833,  832,  835,  788,  234,
      794,  837,  787,  790,  234,  789,  791,  792,  793,  795,
      231,  836,  231,  231,  234,  838,  839,  231,  234,  231,
      231,  231,  840,  231,  231,  234,  842,  841,  234,  846,
      844,  234,  234,  234,  234,  843,  845,  848,  231,  847,
      231,  231,  234,  234,  234,  234,  234,  234,  234,  234,

      234,  234,  234,  234,  234,  862,  430,  430,  430,  430,
      849,  851,  854,  853,  857,  850,  859,  430,  856,  861,
      852,  860,  269,  430,  430,  269,  855,  430,  858,  430,
      864,  866,  430,  871,  269,  269,  863,  269,  269,  865,
      868,  430,  869,  430,  870,  430,  269,  867,  430,  269,
      873,  430,  430,  430,  430,  430,  876,  430,  877,  879,
      430,  269,  430,  430,  269,  430,  872,  430,  878,  430,
      430,  875,  874,  430,  430,  314,  314,  314,  314,  314,
      799,  314,  314,  891,  803,  890,  314,  314,  314,  314,
      805,  892,  314,  880,  895,  882,  897,  885,  881,  884,

      888,  314,  893,  806,  314,  883,  887,  894,  314,  314,
      807,  886,  314,  896,  889,  314,  314,  810,  314,  314,
      314,  901,  314,  314,  902,  898,  314,  314,  816,  314,
      905,  314,  899,  900,  903,  314,  914,  939,  946,  941,
      915,  940,  234,  231,  942,  231,  231,  234,  943,  234,
      945,  948,  234,  904,  234,  906,  234,  944, 1226,  909,
      908,  234,  966,  430,  907,  912,  911,  231,  234,  231,
      231,  949,  231,  910,  231,  231,  950,  234,  231,  913,
      231,  231,  231,  952,  231,  231,  231,  234,  231,  231,
      951,  953,  234,  234,  231,  234,  231,  231,  234,  954,

      234,  234,  234,  234,  234,  234,  955,  234,  234,  957,
      234,  430,  959,  964,  430,  430,  960,  965,  962,  963,
      956,  269,  958,  430,  269,  961,  430,  269,  430,  967,
      269,  430,  968,  971,  269,  969,  269,  269,  269,  269,
      430,  269,  430,  970,  972,  973,  430,  269,  975,  430,
      269,  430,  430,  430,  976,  977,  978,  269,  430,  430,
      269,  430,  430,  430,  430,  430,  430,  314,  314,  914,
      916,  314,  314,  989,  314,  314,  314,  980,  314,  994,
      979,  314,  314,  982,  923,  314,  984,  992,  996,  987,
      985,  314,  990,  988,  981,  991,  993,  983,  986,  314,

      995,  925,  314,  314,  314,  314,  314,  314,  997,  998,
      999,  314,  314,  314,  314,  314, 1030,  430,  231, 1000,
      231,  231,  231, 1053,  231,  231, 1033,  234,  234, 1031,
     1034, 1001,  234, 1003,  234, 1032,  234, 1039, 1005,  234,
     1035, 1008, 1006, 1037, 1002, 1009, 1004, 1040,  234,  231,
     1007,  231,  231,  234,  234,  231, 1036,  231,  231, 1038,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  269,  430,  430,  269,  269, 1050,  430,  269,  430,
      430, 1047, 1041, 1042, 1043, 1044,  430, 1054, 1045, 1046,
     1048, 1049,  430,  430,  430, 1051, 1052, 1055,  269,  269,

      430,  269,  269, 1057,  430, 1056, 1059,  430, 1058, 1060,
      430,  430,  430,  430,  430,  430,  430,  314,  314,  314,
      314,  314,  314,  314, 1070,  314,  314,  314, 1073,  314,
      314, 1061, 1019,  314,  314,  314, 1062,  314, 1074, 1071,
     1072, 1077, 1063, 1075, 1076,  314, 1064, 1067, 1065,  314,
     1066, 1078, 1068, 1069,  314, 1107, 1111, 1108, 1112, 1110,
     1109,  234, 1113,  234,  234, 1080,  234, 1082, 1081,  234,
      234,  234,  234, 1083, 1114, 1084,  234, 1085,  234,  234,
      231, 1086,  231,  231,  231,  234,  231,  231,  234, 1087,
     1118,  234, 1116,  234, 1088,  234, 1117,  234,  430,  430,

      430,  430, 1126, 1119, 1125,  430, 1127, 1122, 1128,  430,
     1120,  430, 1129, 1121,  430,  269, 1130, 1123,  269, 1124,
      269,  430,  430,  269, 1115, 1131,  430,  430,  430,  430,
      430,  430, 1132,  430,  314,  314,  314,  314,  314, 1092,
      314,  314, 1143, 1144, 1145,  314,  314,  314,  314,  314,
      314,  314, 1146, 1136, 1147,  314, 1135,  314, 1134,  314,
     1133, 1137, 1148, 1140,  430, 1171, 1138, 1139, 1141, 1142,
     1149,  231, 1173,  231,  231,  234, 1174, 1153,  234,  234,
     1183, 1151,  234, 1152,  234, 1154, 1175,  234, 1157,  234,
     1176, 1155, 1156, 1177,  231, 1179,  231,  231, 1158, 1180,

     1159,  234,  234, 1182,  430, 1184,  430,  430,  269,  430,
     1181,  269,  430,  430,  269,  430,  430,  269,  430,  314,
     1188, 1185,  314,  314, 1160, 1162,  314, 1186,  314,  314,
      314, 1187,  314,  314,  314, 1178,  234, 1208, 1193, 1197,
     1210,  234, 1225, 1192, 1209, 1194,  231, 1195,  231,  231,
     1212, 1190, 1191,  430, 1196, 1189,  231,  234,  231,  231,
      430,  231, 1201,  231,  231,  269,  430,  234,  269, 1199,
     1214,  269, 1200,  314,  269, 1216,  430, 1218,  430, 1215,
      269,  314, 1217,  269,  314,  314, 1204,  314,  231, 1206,
      231,  231, 1228, 1220,  231,  430,  231,  231,  231,  269,

      231,  231,  269, 1221, 1222, 1231,  430,  314, 1237,  234,
     1213, 1230,  269,  269, 1224,  269,  269,  314,  231, 1225,
      231,  231, 1239,  430,  269,  234, 1233,  269,  231, 1219,
      231,  231,  269,  314,  314,  269, 1235,  231,  314,  231,
      231,  231,  269,  231,  231,  269,  269,  314,  269,  269,
     1229,  269, 1223,  231, 1243,  231,  231,  430,  430, 1244,
      430,  234,  234,  234, 1211, 1232, 1207, 1206, 1205, 1204,
     1203, 1238, 1202,  314,  314, 1240,   54,   54,   54,   54,
       54,   54,   54,   59,   59,   59,   59,   59,   59,   59,
      175,  175,  175,  175,  175,  175,  175,  215,  215,  314,

      215,  215,  215,  215,  220,  220,  220,  220,  220,  220,
      220,  223,  314,  314,  314,  223,  223,  223,  230,  230,
     1198,  230,  230,  230,  230,  234,  234,  430,  234,  234,
      234,  234,  264,  264,  430,  264,  264,  264,  264,  269,
      269,  430,  430,  430,  269,  269,  275,  275,  430,  234,
      234,  275,  275,  306,  306,  234,  306,  306,  306,  306,
      314,  314,  316,  316,  350,  350,  234,  234,  234,  350,
      350,  428,  428, 1172, 1170, 1169,  428,  428,  430,  430,
     1168, 1167, 1166,  430,  430,  466,  466, 1165,  466,  466,
      466,  466, 1164, 1163, 1162, 1161, 1160, 1150,  314,  430,

      234, 1106, 1105, 1104, 1103, 1102, 1101, 1100, 1099, 1098,
     1097, 1096, 1095, 1094, 1093, 1092, 1091, 1090, 1089, 1079,
      314,  430,  234, 1029, 1028, 1027, 1026, 1025, 1024, 1023,
     1022, 1021, 1020, 1019, 1018, 1017, 1016, 1015, 1014, 1013,
     1012, 1011, 1010,  974,  947,  938,  937,  936,  935,  934,
      933,  932,  931,  930,  929,  928,  927,  926,  925,  924,
      923,  922,  921,  920,  919,  918,  917,  916,  314,  314,
      430,  430,  234,  234,  827,  824,  821,  820,  819,  818,
      817,  816,  815,  814,  813,  812,  811,  810,  809,  808,
      807,  806,  805,  804,  803,  802,  801,  800,  799,  798,

      797,  796,  314,  314,  430,  430,  234,  234,  702,  692,
      691,  690,  689,  688,  687,  686,  685,  684,  683,  682,
      681,  680,  679,  678,  677,  676,  675,  674,  673,  670,
      669,  668,  667,  666,  665,  664,  663,  662,  661,  660,
      659,  658,  657,  656,  314,  468,  430,  593,  584,  430,
      234,  551,  544,  543,  542,  541,  540,  536,  535,  534,
      533,  532,  531,  530,  529,  528,  527,  526,  525,  524,
      523,  522,  521,  520,  519,  518,  517,  516,  515,  514,
      513,  512,  511,  510,  509,  508,  507,  353,  314,  315,
      311,  468,  451,  449,  432,  234,  227,  391,  224,  219,

      216,  390,  389,  388,  387,  384,  383,  382,  381,  380,
      379,  378,  375,  374,  373,  372,  371,  370,  369,  368,
      367,  366,  365,  362,  356,  355,  182,  353,  314,  315,
      313,  289,  274,  248,  232,  227,  224,  219,  212,  211,
      210,  209,  208,  205,  204,  201,  197,  196,  195,  194,
      190,  189,  186,  185,  184,  182,  181, 1245,   13, 1245,
     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,
     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,
     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,
     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,

     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,
     1245, 1245, 1245, 1245, 1245, 1245
    } ;

static yyconst short int yy_chk[2617] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,   15,   31,
        2,   15,   41,    2,    3,    3,    3,   31,   52,    3,
        4,    4,    4,    4,   41,   44,    4,   11,   11,   11,
       11,   53,   52,    2,   44,   39,   39,   11,    4,   12,
       12,   12,   12,   34,   39,   50,   34,  262,   50,   12,

       34,   50,   66,   53,   66,   66,   53,   80,    2,   57,
       57,   57,   62,   62,   62,   69,   80,   69,   69, 1249,
      262,    4,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    6,
       65,   70,    6,   70,   70,    6,   71,   81,   71,   71,
       72,   86,   72,   72,   73,  154,   73,   73,   74,   81,

       74,   74,   88,   86,   75,    6,   75,   75,   76,  154,
       76,   76,   77,   65,   77,   77,   82,   83,   88,   82,
       76,   84,   83,   84,   82,   87,   91,   87,   91, 1241,
        6,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    8,   85,
       94,    8,   85,   93,    8,   92,   85,   90,   90,   97,

       85,   94,   90,   95,   92,   98,   90,   92,   96,   93,
       99,   95, 1236,   98,    8,  100,  101,   97,  101,  101,
       95,  102,  120,   96,  119,  123,  100,  123,   99,  105,
      105,  105,  105,  119,  120,  102,  126,  102,  126,    8,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,  136,  122,

       10,  125,  103,   10,  122,  127,  103,  107,  107,  107,
      107,  121, 1234,  125,  121,  124,  136,  137,  124,  121,
      132,  127,  124,   10,  103,  137,  124,  103,  129,  129,
      130,  131,  130,  129,  133,  139,  132,  129,  296,  159,
      131,  151,  159,  131,  296,  133,  139,  135,   10,   78,
       78,  151,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,  135,   78,   79,   79,  138,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,  134,   79,  141,
      140,  140,  140,  140,  138,  134,  140,  141,  144,  144,
      144,  144,  152,  142,  134,   79,  117,  117, 1226,  152,

      117,  117,  117,  117,  117,  117,  117,  142,  117,  142,
      117,  118,  118,  150,  153,  118,  118,  118,  118,  118,
      118,  118,  143,  118,  155,  118,  143,  157,  156,  158,
      153,  160,  150,  165,  157,  166,  156,  161,  153,  156,
      162,  167,  118,  156,  143,  155,  158,  143,  163,  168,
      160,  161,  161,  164,  169,  170,  164,  162,  163,  171,
      161,  173,  166,  165,  173,  174,  172,  172,  172,  172,
      163,  166,  172,  175,  180,  167,  175,  180,  173,  187,
      174,  169,  176,  176,  176,  176,  168,  186,  201,  171,
      189,  218,  170,  209,  187,  213,  229,  186,  213,  186,

      201,  213,  174,  255,  189,  174,  209,  222,  222,  222,
      226,  226,  226,  255,  235,  230,  218,  230,  230,  231,
      236,  231,  231,  233,  239,  233,  233,  237,  238,  229,
      235,  240,  239, 1224,  241,  233,  236,  237,  237,  237,
      242,  238,  243,  238,  243,  240,  241,  240,  244,  245,
      244,  246,  242,  245,  246,  247,  248,  249,  250,  247,
      251,  258,  253,  252,  248,  253,  250,  254,  256,  257,
      258,  259,  260,  249,  261,  252,  251,  252,  263,  260,
      256,  264,  254,  264,  264,  265,  267,  265,  265,  259,
      257,  261,  260,  266,  266,  269,  268,  299,  269,  263,

      268,  281,  267,  270,  270,  270,  270,  272,  272,  272,
      272,  274,  282,  285,  274,  281,  282,  279,  280, 1223,
      279,  268,  299,  274,  275,  275,  280,  285,  275,  275,
      275,  275,  275,  275,  275,  279,  275,  283,  275,  276,
      276,  283,  284,  276,  276,  276,  276,  276,  276,  276,
      278,  276,  286,  276,  276,  278,  287,  294,  288,  293,
      284,  293,  297,  289,  298,  278,  291,  278,  300,  287,
      288,  289,  286,  293,  291,  301,  294,  295,  295,  302,
      303,  304,  305,  305,  305,  305,  337, 1220,  305,  306,
      297,  306,  306,  307,  309,  337,  323,  317,  301,  306,

      317,  298,  300,  323,  318,  327,  309,  318,  307,  319,
      321,  301,  302,  310,  310,  310,  310,  319,  304,  303,
      320,  321,  322,  324,  325,  322,  320,  319,  327,  319,
      324,  309,  326,  329,  328,  330,  332,  331,  334,  322,
      331,  320,  335,  334,  338,  325,  330,  332,  329,  326,
      328,  333,  336,  339,  333,  334,  336,  340,  341,  344,
      342,  343,  345,  347,  335,  346,  346,  346,  346,  348,
      418,  346,  348,  349,  350,  338,  351,  350,  418,  351,
      392,  347,  395,  392,  395,  340,  342,  385,  349,  352,
      352,  352,  352,  339,  385,  341,  394,  343,  385,  342,

      393,  344,  345,  393,  396,  397,  399,  400,  399,  397,
      403,  402,  394,  349,  401,  402,  401,  400,  396,  404,
      405,  406,  408,  405,  407,  407,  403,  409,  410,  411,
      413,  404,  411,  406,  408,  412,  413,  415,  412,  409,
      419,  414,  410,  414,  416,  416,  417,  417,  415,  420,
      421,  422,  423,  424,  425,  426,  428,  429,  421,  428,
      429,  436,  419,  424,  422,  431,  432,  420,  434,  429,
      435,  422,  435,  436,  423,  422,  425,  426,  431,  432,
      437,  438,  439,  440,  458,  444,  434,  443,  439,  441,
      445,  443,  446,  449,  445,  449,  437,  440,  444,  438,

      447,  441,  448,  450,  447,  451,  448,  452,  453,  446,
      454,  455,  456,  457,  459,  454,  450,  452,  460,  462,
      461,  463,  458,  464,  451,  465,  453,  470,  455,  456,
      466,  468,  466,  466,  471,  472,  477,  457,  473,  470,
      466,  473,  460, 1214,  474,  478,  468,  463,  459,  461,
      471,  472,  476,  475,  480,  477,  461,  462,  475,  479,
      461,  464,  481,  465,  470,  474,  478,  476,  479,  482,
      484,  480,  482,  483,  485,  486,  487,  481,  488,  489,
      483,  485,  490,  487,  489,  488,  484,  491,  492,  493,
      497,  494,  495,  496,  498,  486,  499,  500,  490,  494,

      501,  492,  503,  502,  504,  505,  522,  545,  546,  491,
      493,  547,  495,  496,  547,  553,  553,  497,  548,  549,
     1209,  545,  546,  551,  500,  522,  550,  548,  550,  551,
      552,  503,  501,  499,  555,  498,  549,  552,  556,  501,
      556,  558,  558,  501,  502,  504,  505,  560,  557,  559,
      561,  555,  557,  562,  559,  564,  562,  563,  570,  571,
      565,  566,  568,  564,  560,  565,  560,  561,  566,  563,
      567,  573,  569,  568,  569,  570,  574,  567,  575,  576,
      577,  579,  571,  582,  584,  582,  578,  573,  580,  583,
      588,  583,  579,  585,  575,  587,  577,  576,  574,  578,

      585,  580,  589,  584,  586,  586,  590,  594,  591,  587,
      592,  592,  588,  593,  608,  595,  596,  597,  597,  594,
      598,  598,  599,  590,  591,  589,  600,  596,  602,  601,
      600,  593,  595,  603,  604,  599,  597,  601,  605,  602,
      606,  607,  607,  605,  610,  611,  612,  613,  614,  619,
      615,  621,  622,  608,  619,  616,  603,  604,  606,  617,
      620,  623,  622,  623,  625,  620,  626,  624,  628,  629,
      627,  629,  630,  621,  632, 1208,  610,  633,  612,  615,
      614,  613,  616,  611,  624,  631,  636,  628,  617,  625,
      627,  633,  626,  630,  632,  634,  635,  634,  635,  637,

      631,  638,  636,  639,  640,  641,  637,  642,  643,  644,
      645,  644,  638,  647,  648,  642,  634,  639,  649,  650,
      653,  689,  651,  691,  693,  696,  652,  654,  694,  643,
      640,  641,  700,  693,  695,  689,  700,  691,  699,  695,
      694,  697,  696,  697,  697,  699,  698,  701,  647,  698,
      653,  704,  645,  649,  702,  648,  650,  651,  652,  654,
      703,  702,  703,  703,  701,  705,  706,  708,  704,  708,
      708,  710,  709,  710,  710,  711,  712,  711,  714,  716,
      714,  713,  705,  706,  709,  713,  715,  718,  719,  717,
      719,  719,  716,  712,  717,  720,  721,  723,  724,  725,

      715,  726,  727,  728,  718,  732,  732,  735,  731,  729,
      720,  723,  726,  725,  728,  721,  729,  730,  727,  731,
      724,  730,  733,  734,  738,  733,  726,  736,  728,  745,
      735,  737,  737,  745,  739,  744,  734,  739,  744,  736,
      740,  740,  741,  741,  742,  742,  746,  738,  747,  746,
      748,  748,  749,  750,  751,  752,  751,  753,  752,  754,
      754,  755,  756,  757,  755,  759,  747,  760,  753,  761,
      762,  750,  749,  764,  763,  765,  766,  767,  768,  771,
      768,  770,  772,  766,  772,  765,  769,  773,  774,  778,
      774,  767,  788,  756,  771,  759,  778,  762,  757,  761,

      764,  775,  769,  775,  779,  760,  763,  770,  776,  781,
      776,  762,  782,  773,  764,  780,  783,  780,  784,  787,
      785,  783,  790,  791,  784,  779,  786,  792,  786,  793,
      788,  794,  781,  782,  785,  795,  796,  828,  836,  829,
      796,  828,  830,  831,  830,  831,  831,  832,  832,  834,
      834,  841,  836,  787,  828,  790,  829,  833, 1207,  793,
      792,  833,  860,  860,  791,  795,  794,  835,  841,  835,
      835,  843,  837,  793,  837,  837,  844,  849,  838,  795,
      838,  838,  839,  846,  839,  839,  842,  843,  842,  842,
      845,  847,  845,  844,  848,  846,  848,  848,  850,  849,

      851,  852,  853,  847,  854,  855,  850,  856,  858,  852,
      857,  861,  854,  859,  859,  863,  855,  859,  857,  858,
      851,  862,  853,  864,  862,  856,  865,  866,  871,  861,
      866,  867,  863,  867,  868,  864,  869,  868,  870,  869,
      876,  870,  880,  865,  871,  872,  872,  873,  875,  875,
      873,  877,  878,  881,  876,  877,  878,  879,  882,  883,
      879,  884,  885,  886,  887,  888,  889,  890,  891,  890,
      891,  892,  894,  890,  896,  893,  895,  881,  904,  896,
      880,  897,  898,  883,  898,  899,  885,  894,  899,  888,
      886,  901,  892,  889,  882,  893,  895,  884,  887,  900,

      897,  900,  902,  903,  905,  906,  907,  908,  901,  902,
      903,  909,  910,  911,  912,  913,  940,  970,  939,  904,
      939,  939,  941,  970,  941,  941,  945,  943,  940,  943,
      946,  905,  946,  907,  944,  944,  945,  953,  909,  947,
      947,  912,  910,  951,  906,  913,  908,  954,  951,  948,
      911,  948,  948,  949,  953,  950,  949,  950,  950,  952,
      952,  955,  957,  956,  961,  958,  954,  959,  960,  962,
      963,  964,  965,  971,  964,  966,  965,  968,  966,  969,
      972,  961,  955,  956,  957,  958,  974,  971,  959,  960,
      962,  963,  976,  977,  980,  968,  969,  972,  973,  975,

      981,  973,  975,  976,  982,  974,  978,  978,  977,  979,
      983,  984,  979,  985,  986,  987,  988,  989,  991,  993,
      992,  994,  996,  995,  989, 1001, 1003,  997,  993, 1002,
      999,  980,  999,  998, 1004, 1005,  981, 1006,  994,  991,
      992,  997,  982,  995,  996, 1007,  983,  986,  984, 1008,
      985,  998,  987,  988, 1009, 1030, 1034, 1031, 1036, 1033,
     1032, 1034, 1037, 1036, 1037, 1001, 1030, 1003, 1002, 1031,
     1032, 1041, 1038, 1004, 1038, 1005, 1033, 1006, 1042, 1043,
     1039, 1007, 1039, 1039, 1040, 1044, 1040, 1040, 1045, 1008,
     1043, 1046, 1041, 1047, 1009, 1048, 1042, 1049, 1051, 1050,

     1052, 1054, 1051, 1044, 1050, 1056, 1052, 1047, 1053, 1053,
     1045, 1057, 1054, 1046, 1058, 1059, 1056, 1048, 1059, 1049,
     1060, 1061, 1062, 1060, 1040, 1057, 1063, 1064, 1065, 1066,
     1068, 1069, 1058, 1067, 1070, 1072, 1071, 1073, 1074, 1073,
     1076, 1080, 1070, 1071, 1072, 1077, 1081, 1082, 1083, 1078,
     1084, 1085, 1074, 1063, 1076, 1086, 1062, 1087, 1061, 1088,
     1060, 1064, 1077, 1067, 1126, 1107, 1065, 1066, 1068, 1069,
     1078, 1110, 1109, 1110, 1110, 1117, 1111, 1082, 1111, 1119,
     1126, 1080, 1107, 1081, 1112, 1083, 1112, 1113, 1086, 1109,
     1113, 1084, 1085, 1114, 1115, 1117, 1115, 1115, 1087, 1119,

     1088, 1122, 1114, 1125, 1125, 1127, 1127, 1129, 1128, 1130,
     1122, 1128, 1131, 1132, 1133, 1135, 1137, 1133, 1140, 1144,
     1132, 1129, 1143, 1145, 1143, 1145, 1147, 1130, 1146, 1149,
     1152, 1131, 1148, 1154, 1157, 1115, 1172, 1172, 1144, 1149,
     1175, 1174, 1205, 1140, 1174, 1146, 1171, 1147, 1171, 1171,
     1177, 1135, 1137, 1183, 1148, 1133, 1173, 1175, 1173, 1173,
     1185, 1178, 1157, 1178, 1178, 1182, 1187, 1177, 1182, 1152,
     1183, 1184, 1154, 1193, 1184, 1186, 1186, 1188, 1188, 1185,
     1189, 1194, 1187, 1189, 1195, 1196, 1195, 1197, 1210, 1197,
     1210, 1210, 1211, 1193, 1212, 1215, 1212, 1212, 1213, 1216,

     1213, 1213, 1216, 1194, 1196, 1217, 1217, 1221, 1227, 1211,
     1178, 1215, 1218, 1219, 1203, 1218, 1219, 1222, 1228, 1222,
     1228, 1228, 1230, 1230, 1231, 1227, 1221, 1231, 1229, 1189,
     1229, 1229, 1232, 1201, 1233, 1232, 1233, 1237, 1200, 1237,
     1237, 1238, 1239, 1238, 1238, 1239, 1240, 1199, 1244, 1240,
     1213, 1244, 1198, 1243, 1238, 1243, 1243, 1192, 1191, 1240,
     1190, 1181, 1180, 1179, 1176, 1219, 1167, 1166, 1165, 1164,
     1163, 1229, 1161, 1159, 1158, 1232, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1250, 1250, 1156,

     1250, 1250, 1250, 1250, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1252, 1155, 1153, 1151, 1252, 1252, 1252, 1253, 1253,
     1150, 1253, 1253, 1253, 1253, 1254, 1254, 1142, 1254, 1254,
     1254, 1254, 1255, 1255, 1141, 1255, 1255, 1255, 1255, 1256,
     1256, 1139, 1138, 1136, 1256, 1256, 1257, 1257, 1134, 1124,
     1123, 1257, 1257, 1258, 1258, 1121, 1258, 1258, 1258, 1258,
     1259, 1259, 1260, 1260, 1261, 1261, 1120, 1118, 1116, 1261,
     1261, 1262, 1262, 1108, 1104, 1101, 1262, 1262, 1263, 1263,
     1099, 1097, 1096, 1263, 1263, 1264, 1264, 1095, 1264, 1264,
     1264, 1264, 1094, 1093, 1091, 1090, 1089, 1079, 1075, 1055,

     1035, 1029, 1028, 1027, 1026, 1025, 1024, 1023, 1022, 1021,
     1020, 1018, 1017, 1016, 1014, 1013, 1012, 1011, 1010, 1000,
      990,  967,  942,  938,  937,  936,  935,  934,  933,  932,
      931,  930,  929,  928,  927,  926,  924,  922,  921,  920,
      919,  918,  915,  874,  840,  826,  825,  824,  823,  822,
      821,  820,  819,  818,  817,  815,  814,  813,  812,  811,
      809,  808,  804,  802,  801,  800,  798,  797,  789,  777,
      758,  743,  722,  707,  692,  690,  688,  687,  686,  684,
      683,  681,  680,  679,  678,  677,  676,  675,  674,  672,
      669,  668,  667,  665,  664,  663,  662,  661,  659,  658,

      657,  656,  655,  646,  618,  609,  581,  572,  554,  544,
      542,  541,  540,  539,  538,  537,  536,  535,  533,  532,
      531,  530,  529,  528,  527,  526,  525,  524,  523,  521,
      520,  519,  518,  517,  516,  515,  514,  513,  512,  511,
      510,  509,  508,  507,  506,  469,  467,  442,  433,  430,
      427,  398,  391,  389,  388,  387,  386,  384,  383,  382,
      381,  380,  379,  378,  377,  376,  375,  374,  373,  372,
      371,  370,  369,  368,  367,  366,  365,  364,  363,  362,
      361,  360,  359,  358,  357,  356,  355,  354,  316,  315,
      312,  308,  292,  290,  277,  234,  228,  227,  225,  221,

      217,  216,  212,  211,  210,  208,  207,  206,  205,  204,
      203,  202,  200,  199,  198,  197,  196,  195,  194,  193,
      192,  191,  190,  188,  185,  184,  182,  178,  149,  148,
      146,  128,  115,   89,   68,   64,   61,   56,   49,   48,
       47,   46,   45,   43,   42,   40,   38,   37,   36,   35,
       33,   32,   30,   29,   28,   25,   17,   13, 1245, 1245,
     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,
     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,
     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,
     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,

     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,
     1245, 1245, 1245, 1245, 1245, 1245
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#define INITIAL 0
#line 2 "levcomp.lpp"

// levcomp.lpp:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
// 
// Based loosely on NetHack's lev_comp.l

#include "AppHdr.h"
#include "mapdef.h"
#include "levcomp.tab.h"
#include <cstring>
#include <queue>

static bool alloced = false;

std::queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(100);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

static void settext()
{
    clean();
    if ((yylval.text = strdup(yytext)))
        alloced = true;
}

#define MAPDEF 1

#define ARGUMENT 2

#define MNAME 3

#define KEYWORDS 4

#define ITEM_LIST 5

#define YY_NEVER_INTERACTIVE 1
#line 1673 "levcomp.lex.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 62 "levcomp.lpp"


#line 1830 "levcomp.lex.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1246 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2559 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 64 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 66 "levcomp.lpp"
{
                        settext();
                        return MAP_LINE;
                    }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 71 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 72 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 73 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 75 "levcomp.lpp"
;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 77 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 82 "levcomp.lpp"
;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 83 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 85 "levcomp.lpp"
{ 
                        settext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 90 "levcomp.lpp"
{
                        settext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 95 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 96 "levcomp.lpp"
;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 97 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 99 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 101 "levcomp.lpp"
{ 
                        settext();
                        return MONSTER_NAME; 
                    }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 106 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 107 "levcomp.lpp"
;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 109 "levcomp.lpp"
{ 
                        BEGIN(INITIAL);
                        settext();
                        return STRING; 
                    }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 115 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 117 "levcomp.lpp"
;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 119 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 122 "levcomp.lpp"
{ BEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 123 "levcomp.lpp"
return DEFAULT_DEPTH;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 124 "levcomp.lpp"
return DEPTH;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 125 "levcomp.lpp"
return ORIENT;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 126 "levcomp.lpp"
{ BEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 127 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 128 "levcomp.lpp"
return FLAGS;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 129 "levcomp.lpp"
{ BEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 130 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return SUBST; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 131 "levcomp.lpp"
{ BEGIN(MNAME); return MONS; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 132 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 133 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return SHUFFLE; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 135 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KFEAT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 136 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KITEM; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 137 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KMONS; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 139 "levcomp.lpp"
return BRANCH;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 140 "levcomp.lpp"
return DEFAULT;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 141 "levcomp.lpp"
return DESC;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 142 "levcomp.lpp"
return BRANCH;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 143 "levcomp.lpp"
return ROOT_DEPTH;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 144 "levcomp.lpp"
return FLOOR_COLOUR;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 145 "levcomp.lpp"
return ROCK_COLOUR;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 147 "levcomp.lpp"
return LEVEL;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 148 "levcomp.lpp"
return END;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 149 "levcomp.lpp"
return PVAULT;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 150 "levcomp.lpp"
return PMINIVAULT;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 152 "levcomp.lpp"
{ BEGIN(ARGUMENT); return ENTRY_MSG; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 153 "levcomp.lpp"
{ BEGIN(ARGUMENT); return EXIT_MSG; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 155 "levcomp.lpp"
return MONSTERS;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 156 "levcomp.lpp"
return ENDMONSTERS;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 159 "levcomp.lpp"
return PANDEMONIC;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 160 "levcomp.lpp"
return NO_HMIRROR;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 161 "levcomp.lpp"
return NO_VMIRROR;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 162 "levcomp.lpp"
return NO_ROTATE;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 164 "levcomp.lpp"
return ENCOMPASS;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 165 "levcomp.lpp"
return NORTH;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 166 "levcomp.lpp"
return SOUTH;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 167 "levcomp.lpp"
return EAST;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 168 "levcomp.lpp"
return WEST;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 169 "levcomp.lpp"
return NORTHEAST;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 170 "levcomp.lpp"
return NORTHWEST;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 171 "levcomp.lpp"
return SOUTHEAST;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 172 "levcomp.lpp"
return SOUTHWEST;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 173 "levcomp.lpp"
return FLOAT;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 175 "levcomp.lpp"
return DASH;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 176 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 178 "levcomp.lpp"
{
                        clean();
                        yylval.i = atoi(yytext);
                        return INTEGER;
                    }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 184 "levcomp.lpp"
;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 185 "levcomp.lpp"
;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 187 "levcomp.lpp"
return OPAREN;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 188 "levcomp.lpp"
return CPAREN;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 190 "levcomp.lpp"
return QUOTE;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 192 "levcomp.lpp"
return COLON;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 193 "levcomp.lpp"
return STAR;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 194 "levcomp.lpp"
return NOT;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 196 "levcomp.lpp"
{
                        settext();
                        return IDENTIFIER;
                    }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 201 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 203 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 2348 "levcomp.lex.cc"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(MAPDEF):
			case YY_STATE_EOF(ARGUMENT):
			case YY_STATE_EOF(MNAME):
			case YY_STATE_EOF(KEYWORDS):
			case YY_STATE_EOF(ITEM_LIST):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1246 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1246 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1245);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');
	if ( yy_current_buffer->yy_at_bol )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 203 "levcomp.lpp"


int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}
