#line 2 "levcomp.lex.cc"

#line 4 "levcomp.lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 61
#define YY_END_OF_BUFFER 62
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[779] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   62,   60,
       58,   59,   60,   56,   57,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   58,   29,
       31,   60,   60,   60,   60,   60,   60,   61,    6,   61,
       61,    4,    2,    3,   61,    2,    2,    2,    2,    9,
       10,   61,    9,    9,   61,   12,   61,   60,   26,   60,
       56,   57,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   29,   31,   60,   60,   60,
       60,   60,   60,   60,   24,   21,   24,   23,   57,   60,

       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   24,   29,   31,   60,   60,   60,   60,   60,
       60,   14,   15,   60,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   14,
       13,   13,   13,   13,   13,   17,   19,   20,   61,   18,
       61,   61,   58,   59,   57,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   58,   29,   31,    0,    0,    0,    0,
       29,    0,    0,    0,    0,    0,    0,    0,   34,    6,
        5,    0,    0,    2,    3,    2,    0,    2,    2,    2,

        2,    9,    9,   10,    9,    9,    9,    0,   11,   12,
       25,    0,   26,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   29,   25,   25,   25,   25,   25,   25,
       25,   25,    0,   24,   21,   24,   21,   57,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   24,   29,    0,    0,
        0,    0,    0,    0,    0,   34,   14,   15,    0,   15,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       14,   13,   13,   13,   13,   13,   13,   13,   16,    0,
       19,   20,    0,    0,   28,    0,    0,   27,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    2,    9,    9,    9,    7,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,

       22,   22,   22,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   30,    0,
        0,    0,    0,    0,    2,    9,    8,    9,    7,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,    0,    0,
       25,   25,   25,   25,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,

       22,   22,   22,    0,    0,   22,   22,   22,   22,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,    0,    0,    0,   50,    0,    0,    0,    0,   49,
       37,    0,    0,    0,    0,    0,   46,    0,    0,    0,
       33,    0,    0,    0,    0,    2,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,    0,   25,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,

       22,   22,    0,   22,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,    0,   39,   45,   53,   54,   55,    0,    0,    0,
       41,    0,   47,    0,    0,    0,    0,    0,   36,    1,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   43,   51,   48,   40,
        0,   44,    0,    0,    0,    0,    1,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   13,   13,   13,
       13,   13,   52,   42,    0,    0,    0,    0,   25,   25,
       25,    0,   25,   25,   22,   22,   22,    0,   22,   22,
       13,   13,    0,   32,    0,    0,   25,   25,    0,   25,
       22,   22,    0,   22,   13,    0,   35,   25,   25,   22,
       22,   13,    0,   25,   22,   13,    0,   25,   22,   13,
        0,   25,   22,   13,   38,   25,   22,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    7,    8,    1,    1,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,    1,    1,
        1,    1,    1,    1,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       20,   27,   28,   29,   30,   20,   31,   20,   20,   20,
        1,   32,    1,    1,   20,    1,   33,   20,   20,   34,

       35,   36,   20,   37,   38,   20,   20,   39,   20,   20,
       40,   41,   20,   42,   43,   44,   45,   46,   20,   20,
       20,   20,   47,    1,   48,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[49] =
    {   0,
        1,    2,    3,    4,    1,    1,    5,    6,    6,    1,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    1,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    1,    1
    } ;

static yyconst flex_int16_t yy_base[803] =
    {   0,
        0,   34,   80,   85,   89,   91,    7,   14,  138,  172,
      219,  253,  301,  348,   94,  100,  103,  106, 2030, 2031,
       10, 2031, 2026, 2031, 2019, 2009, 2011, 2003, 1995,   92,
       99,  101, 1996, 2000,    2, 2010, 2005, 1984,  394,    0,
     2031,  102, 1973, 1975,   93,   84, 1969, 2031, 2031, 2012,
      117, 2031,    0, 2031, 2011,  357,    0, 1989,  103, 1964,
     2031, 2008,   82, 1962, 2006, 2031, 2005,  151, 2031, 2004,
      166,  225,  361,  365,  370,  379,  401,  405,  410,  421,
      427,  432,  440,  450,  454,  247,  459,  465,  469,  473,
      477,  483,  489,    0,  493, 2031,  499, 2031, 1997, 1987,

     1989, 1981, 1973,  374,  133,  103, 1974, 1978,  130, 1988,
     1983, 1962,  503,   23,    0,  214, 1951, 1953,  333,  322,
     1947,  507, 2031, 1990,    0, 1983, 1973, 1975, 1967, 1959,
      503,  353,  122, 1960, 1964,  355, 1974, 1966, 1942,  525,
      357, 1931, 1933,  375,  353,  121,  529, 2031, 1962, 2031,
      425,  481,  417, 2031, 1955, 1952, 1931, 1942, 1937, 1936,
     1916, 1914, 1907, 1904, 1904, 1886, 1896, 1903, 1873, 1830,
     1824,  424, 1804,    0,    0, 2031, 1794, 1796,  378, 1789,
        0,  210, 1802, 1797, 1815,  404, 1781, 1771, 2031, 2031,
     2031, 1811,  520,    0, 2031,    0, 1797,  534, 1774, 1763,

      502, 1738, 1719, 2031,  198, 1709,  538, 1742, 2031, 2031,
      542,  546, 2031,  550,  556,  561,  566,  570,  574,  578,
      586,  590,  594,  598,  604,  608,  618,  626,  631,  635,
      640,  644,  649,  653,  659,  663,  667,  671,  685,  679,
      689,  693,  551,  701, 2031,  707, 2031,  711,  614,  579,
      636,  599,  712,  672,  717,  719,  721,  727,  729,  733,
      738,  734,  739,  751,  752,  753,    0,  758,  764,  765,
      770,  771,  776,  775,  781,  782,  790, 2031, 1741, 2031,
        0, 1731, 1728, 1707, 1714, 1706, 1702, 1675, 1678, 1663,
     1660, 1649, 1634, 1632, 1638, 1611, 1625, 1616,  766, 1593,

        0,  325, 1592, 1584, 1589,  437, 1554, 1548,  795,  799,
      804, 2031, 1578,  436, 2031,  808,  813, 2031, 1548, 1538,
     1546, 1531, 1539, 1531, 1517, 1513, 1498, 1507, 1506, 1498,
     1492, 1484, 1461, 1449, 1456, 1454, 1432,  818,  822, 1420,
     1421, 1399, 1391, 1389,  826,  830,  834, 2031,  839,  844,
      848,  852,  856,  866,  875,  881,  885,  889,  893,  904,
      910,  916,  920,  924,  929,  934,  938,  951,  955,  959,
      963,  968,  972,  857,  898,  925,  964,  973,  939,  977,
      979,  981,  990,  994,  995, 1002, 1011, 1015, 1013, 1019,
     1025, 1029, 1030, 1031, 1035, 1046, 1036, 1050, 1052, 1054,

     1056, 1058, 1064, 1384, 1375, 1383, 1364, 1375, 1365, 1351,
     1353, 1342, 1351, 1350, 1343, 1341, 1333, 1317, 1313, 1322,
     1320, 1286, 1065, 1069, 1279, 1287, 1270, 1264, 1272, 1253,
     1236, 1244, 1216, 1211, 1202, 1210, 1211, 1207, 1172, 1167,
     1171, 1163, 1149, 1163, 1141, 1128, 1107, 1070, 2031, 1075,
     1093, 1094, 1100, 1079, 1104, 1083, 2031, 1088, 2031, 1090,
     1096, 1104, 1108, 1115, 1119, 1123, 1133, 1145, 1152, 1141,
     1156, 1161, 1166, 1170, 1179, 1183, 1188, 1192, 1200, 1204,
     1210, 1214, 1218, 1222, 1128, 1193, 1205, 1226, 1100, 1227,
     1233, 1162, 1237, 1238, 1239, 1244, 1251, 1258, 1253, 1260,

     1270, 1271, 1275, 1276, 1281, 1282, 1287, 1288, 1289, 1098,
     1089, 1069, 1077, 1053, 1053, 1034, 1035, 1035, 1034,  997,
      999, 1004,  993,  979,  993,  983,  966,  942,  940,  946,
     1293,  943,  941,  940, 2031,  935,  927,  925,  890, 2031,
     2031,  887,  882,  900,  879,  886, 2031,  863,  865,  845,
     2031,  842,  839, 1295,  819,  838, 1297, 1301, 1305, 1312,
     1321, 1333, 1342, 1346, 1351, 1355, 1359, 1363, 1367, 1374,
     1379, 1389, 1393, 1397, 1401, 1405, 1409, 1413, 1419, 1423,
     1319, 1380, 1424, 1325, 1428, 1434, 1440, 1414, 1430, 1446,
     1447, 1451, 1452, 1453, 1458, 1459, 1467, 1469, 1476, 1477,

     1482, 1481, 1483, 1488,  840,  841,  837,  832,  828,  824,
      803,  797,  793,  807,  790,  793,  773,  773,  740,  727,
      715,  737, 2031, 2031, 2031, 2031, 2031,  727,  720,  715,
     2031,  700, 2031,  697,  685,  655,  657,  644, 2031,  674,
     1493, 1497, 1502, 1506, 1515, 1519, 1523, 1527, 1534, 1538,
     1543, 1547, 1551, 1555, 1560, 1564, 1569, 1573, 1574, 1489,
     1507, 1578, 1580, 1584, 1585, 1586, 1592, 1596, 1601, 1603,
     1605, 1607, 1609, 1615, 1616, 1621,  668,  660,  656,  650,
      635,  622,  611,  580,  580,  553, 2031, 2031, 2031, 2031,
      583, 2031,  563,  561, 1622,  529,  557, 1626, 1630, 1634,

     1638, 1642, 1652, 1657, 1666, 1661, 1671, 1643, 1653, 1675,
     1676, 1677, 1681, 1683, 1687, 1689, 1694,  547,  539,  534,
     1695,  500, 2031, 2031,  487, 1696,  452, 1700, 1705, 1709,
     1714, 1718, 1722, 1726, 1710, 1730, 1732, 1736, 1744, 1748,
      458, 1749,  437, 2031, 1750,  419, 1754, 1758, 1766, 1770,
     1759, 1774, 1775, 1776,  418,  361, 2031, 1780, 1788, 1796,
     1797,  360,  333, 1801, 1802,  187,  128, 1806, 1807,  112,
       23, 1814, 1823,   12, 2031, 1825, 1829, 2031, 1846, 1852,
     1858, 1864, 1870, 1876, 1882, 1888, 1894, 1900, 1906, 1912,
     1918, 1924, 1930, 1936, 1942, 1948, 1954,    0, 1960, 1966,

     1972, 1978
    } ;

static yyconst flex_int16_t yy_def[803] =
    {   0,
      779,  778,  780,  781,  782,  782,  783,  783,  784,  778,
      785,  778,  778,   13,  786,  786,  787,  787,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  788,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      789,  778,  790,  778,  778,  791,  790,  790,  790,  792,
      778,  778,  792,  792,  793,  778,  778,  794,  778,  778,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  795,  794,  794,  794,  794,
      794,  794,  794,  796,  778,  778,  778,  778,  796,  796,

      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,   39,  797,  796,  796,  796,  796,  796,  796,
      796,  778,  778,  778,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,   39,
      798,  798,  798,  798,  798,  799,  778,  778,  778,  778,
      800,  800,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,   39,  788,  778,  778,  778,  778,  778,
      788,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  790,  778,  790,  778,  790,  790,  790,

      790,  792,  792,  778,  792,  792,  792,  793,  778,  778,
      794,  794,  778,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  795,  795,  794,  794,  794,  794,  794,  794,
      794,  794,  801,  778,  778,  778,  778,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  113,  802,  801,  801,
      801,  801,  801,  801,  801,  801,  778,  778,  778,  778,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,

      140,  798,  798,  798,  798,  798,  798,  798,  799,  799,
      778,  778,  778,  800,  778,  800,  800,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  790,  792,  792,  792,  778,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  801,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  802,  801,  801,  801,  801,  801,

      801,  801,  801,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  790,  792,  778,  792,  778,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,

      801,  801,  801,  801,  801,  801,  801,  801,  801,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  790,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,

      801,  801,  801,  801,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  790,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  790,  794,  794,  794,

      794,  794,  794,  794,  794,  794,  794,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  798,  798,  798,
      798,  798,  778,  778,  778,  778,  778,  778,  794,  794,
      794,  794,  794,  794,  801,  801,  801,  801,  801,  801,
      798,  798,  778,  778,  778,  778,  794,  794,  794,  794,
      801,  801,  801,  801,  798,  778,  778,  794,  794,  801,
      801,  798,  778,  794,  801,  798,  778,  794,  801,  798,
      778,  794,  801,  798,  778,  794,  801,    0,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,

      778,  778
    } ;

static yyconst flex_int16_t yy_nxt[2080] =
    {   0,
      778,   21,   22,   23,   21,  281,   24,  778,   25,   66,
       67,  153,   26,   27,  153,   28,   66,   67,   29,  169,
       30,  775,   31,   32,   33,   34,  181,   35,   36,  181,
       37,  170,  775,   38,   20,   39,   22,   23,   39,   40,
       24,   20,   25,   41,   20,   20,   26,   27,   20,   28,
       20,   20,   29,   20,   30,   20,   42,   32,   33,   34,
       20,   35,   36,   20,   37,   20,   20,   38,   20,   20,
       20,   20,   43,   20,   44,   20,   45,   20,   20,   46,
       47,   20,   49,   50,   51,   52,   48,   54,   55,   56,
       57,   61,   62,   61,   62,  147,  148,  149,  147,   58,

      150,  147,  148,  149,  147,   48,  150,  160,   48,  163,
      161,  165,  182,  258,  162,  185,  187,  200,  188,  190,
      192,  193,  310,  164,  205,  310,  164,   59,  166,  206,
      259,   63,  292,   63,  152,  186,   64,  152,   64,   21,
       69,   70,   21,  256,   71,  201,   72,  262,  774,  293,
       73,   74,  212,   75,  212,  212,   76,  257,   77,  263,
       78,   79,   80,   81,  771,   82,   83,  212,   84,  212,
      212,   85,   68,   39,   69,   70,   39,   86,   71,   68,
       72,   87,   68,   68,   73,   74,   68,   75,   68,   68,
       76,   68,   77,   68,   88,   79,   80,   81,   68,   82,

       83,   68,   84,   68,   68,   85,   68,   68,   68,   68,
       89,   68,   90,   68,   91,   68,   68,   92,   93,   68,
       95,   96,   97,   95,  269,   98,  212,   99,  212,  212,
      770,  100,  101,  214,  102,  338,  326,  103,  257,  104,
      205,  105,  106,  107,  108,  206,  109,  110,  234,  111,
      234,  234,  112,   94,  113,   96,   97,  113,  114,   98,
       94,   99,  115,   94,   94,  100,  101,   94,  102,   94,
       94,  103,   94,  104,   94,  116,  106,  107,  108,   94,
      109,  110,   94,  111,   94,   94,  112,   94,   94,   94,
       94,  117,   94,  118,   94,  119,   94,   94,  120,  121,

       94,   20,  122,  123,  124,  122,   20,   24,  125,  126,
       20,  125,  125,  127,  128,  125,  129,  125,  125,  130,
      125,  131,  125,  132,  133,  134,  135,  125,  136,  137,
      125,  138,   20,  125,  139,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,   20,   20,  140,
      423,  411,  140,   40,  274,  272,  275,   41,  191,  195,
      197,  198,  212,  290,  212,  212,  212,  302,  212,  212,
      141,  212,  296,  212,  212,  273,  767,  291,  215,  216,
      212,  291,  212,  212,  297,  307,  142,  308,  143,  253,
      144,  217,  254,  145,   47,  174,  255,  305,  174,  175,

      766,  763,  212,  176,  212,  212,  212,  218,  212,  212,
      187,  212,  188,  212,  212,  222,  219,  306,  153,  220,
      224,  153,  212,  221,  212,  212,  185,  315,  212,  223,
      212,  212,  177,  212,  178,  212,  212,  225,  315,  179,
      180,  212,  335,  212,  212,  336,  186,  226,  227,  228,
      230,  212,  762,  212,  212,  212,  316,  212,  212,  305,
      212,  229,  212,  212,  231,  757,  212,  316,  212,  212,
      212,  756,  212,  212,  212,  235,  212,  212,  212,  306,
      212,  212,  317,  318,  212,  317,  212,  212,  232,  223,
      212,  755,  212,  212,  244,  245,  246,  244,  744,  238,

      246,  247,  246,  246,  267,  245,  246,  267,  277,  278,
      279,  277,  316,  236,  237,  240,  200,  241,  287,  239,
      743,  288,  190,  192,  193,  289,  301,  278,  279,  301,
      311,  312,  313,  311,  742,  242,  195,  197,  198,  347,
      348,  741,  347,  212,  201,  212,  212,  212,  724,  212,
      212,  212,  243,  212,  212,  243,  723,  212,  214,  212,
      212,  697,  212,  728,  212,  212,  349,  212,  725,  212,
      212,  212,  724,  212,  212,  212,  351,  212,  212,  212,
      243,  212,  212,  243,  352,  345,  350,  212,  353,  212,
      212,  212,  723,  212,  212,  212,  722,  212,  212,  212,

      243,  212,  212,  243,  377,  212,  354,  212,  212,  212,
      355,  212,  212,  379,  721,  243,  356,  357,  243,  212,
      358,  212,  212,  720,  376,  719,  360,  212,  361,  212,
      212,  692,  212,  359,  212,  212,  212,  243,  212,  212,
      243,  212,  363,  212,  212,  212,  378,  212,  212,  718,
      234,  364,  234,  234,  234,  362,  234,  234,  365,  690,
      212,  366,  212,  212,  212,  689,  212,  212,  212,  688,
      212,  212,  212,  243,  212,  212,  243,  687,  697,  367,
      212,  371,  212,  212,  368,  356,  212,  696,  212,  212,
      212,  695,  212,  212,  212,  369,  212,  212,  694,  693,

      381,  370,  244,  245,  246,  244,  692,  238,  246,  245,
      246,  246,  243,  243,  691,  243,  243,  372,  243,  375,
      243,  243,  243,  243,  690,  243,  380,  239,  243,  689,
      243,  243,  373,  243,  243,  243,  688,  243,  243,  243,
      243,  382,  243,  243,  384,  383,  687,  686,  388,  385,
      390,  387,  243,  243,  243,  243,  243,  243,  386,  268,
      685,  181,  268,  389,  181,  243,  243,  391,  243,  243,
      392,  243,  243,  393,  243,  243,  243,  243,  684,  243,
      243,  399,  243,  243,  420,  243,  243,  421,  394,  396,
      383,  277,  278,  279,  277,  683,  310,  397,  400,  310,

      310,  682,  633,  310,  398,  311,  312,  313,  311,  317,
      318,  681,  317,  402,  317,  318,  631,  317,  401,  448,
      449,  680,  448,  450,  403,  679,  450,  456,  457,  678,
      456,  458,  459,  627,  458,  347,  348,  626,  347,  316,
      212,  625,  212,  212,  316,  212,  624,  212,  212,  212,
      623,  212,  212,  212,  677,  212,  212,  212,  243,  212,
      212,  243,  460,  640,  462,  639,  464,  212,  451,  212,
      212,  638,  461,  345,  463,  637,  212,  345,  212,  212,
      465,  203,  212,  636,  212,  212,  212,  635,  212,  212,
      212,  634,  212,  212,  212,  633,  212,  212,  466,  243,

      632,  467,  243,  469,  470,  212,  375,  212,  212,  631,
      630,  212,  468,  212,  212,  629,  628,  212,  471,  212,
      212,  212,  472,  212,  212,  212,  243,  212,  212,  243,
      212,  473,  212,  212,  627,  212,  626,  212,  212,  212,
      243,  212,  212,  243,  625,  476,  477,  474,  485,  624,
      623,  475,  479,  449,  212,  479,  480,  622,  212,  480,
      212,  488,  212,  212,  212,  243,  212,  212,  243,  212,
      478,  212,  212,  212,  243,  212,  212,  243,  243,  621,
      243,  243,  243,  243,  620,  243,  619,  489,  368,  487,
      618,  243,  486,  490,  243,  243,  243,  482,  243,  243,

      617,  481,  547,  243,  491,  483,  243,  616,  615,  494,
      492,  484,  243,  495,  243,  243,  243,  243,  614,  243,
      243,  493,  613,  243,  612,  496,  243,  497,  498,  243,
      243,  243,  243,  243,  243,  243,  268,  505,  181,  268,
      505,  181,  502,  541,  540,  501,  499,  504,  449,  611,
      504,  243,  500,  243,  243,  243,  243,  243,  243,  243,
      243,  610,  243,  503,  399,  243,  448,  449,  243,  448,
      450,  448,  449,  450,  448,  609,  450,  396,  400,  450,
      554,  608,  506,  554,  456,  457,  535,  456,  507,  458,
      459,  212,  458,  212,  212,  508,  607,  212,  401,  212,

      212,  243,  557,  509,  243,  212,  606,  212,  212,  212,
      605,  212,  212,  558,  556,  451,  212,  560,  212,  212,
      212,  451,  212,  212,  212,  555,  212,  212,  585,  243,
      203,  559,  243,  553,  212,  203,  212,  212,  552,  551,
      581,  562,  212,  561,  212,  212,  212,  564,  212,  212,
      563,  550,  549,  212,  565,  212,  212,  212,  548,  212,
      212,  566,  212,  243,  212,  212,  243,  212,  567,  212,
      212,  212,  547,  212,  212,  569,  588,  546,  545,  568,
      212,  570,  212,  212,  212,  544,  212,  212,  572,  212,
      543,  212,  212,  212,  243,  212,  212,  243,  571,  542,

      573,  479,  449,  212,  479,  480,  243,  212,  480,  243,
      582,  212,  574,  212,  212,  212,  541,  212,  212,  212,
      540,  212,  212,  579,  539,  212,  579,  243,  243,  538,
      243,  243,  583,  537,  243,  584,  575,  243,  243,  243,
      243,  243,  243,  243,  536,  243,  589,  590,  243,  586,
      481,  578,  243,  535,  243,  243,  576,  243,  577,  243,
      587,  243,  243,  534,  243,  593,  591,  592,  580,  596,
      533,  243,  243,  594,  243,  243,  243,  504,  449,  243,
      504,  595,  505,  243,  532,  505,  243,  597,  243,  243,
      603,  243,  243,  603,  554,  598,  554,  554,  212,  554,

      212,  212,  212,  531,  212,  212,  212,  530,  212,  212,
      642,  641,  423,  212,  643,  212,  212,  529,  528,  599,
      243,  602,  212,  243,  212,  212,  243,  506,  600,  243,
      644,  601,  527,  659,  212,  604,  212,  212,  526,  555,
      525,  555,  645,  212,  524,  212,  212,  212,  523,  212,
      212,  646,  212,  522,  212,  212,  212,  521,  212,  212,
      212,  520,  212,  212,  212,  519,  212,  212,  212,  518,
      212,  212,  647,  517,  516,  212,  650,  212,  212,  515,
      212,  243,  212,  212,  243,  514,  513,  648,  652,  660,
      212,  649,  212,  212,  212,  651,  212,  212,  212,  512,

      212,  212,  212,  511,  212,  212,  212,  510,  212,  212,
      212,  455,  212,  212,  212,  243,  212,  212,  243,  654,
      579,  653,  212,  579,  212,  243,  212,  212,  243,  243,
      454,  243,  243,  661,  243,  243,  453,  662,  243,  655,
      665,  243,  656,  663,  243,  657,  338,  243,  243,  664,
      243,  243,  243,  243,  243,  243,  243,  243,  452,  243,
      243,  668,  243,  243,  447,  580,  446,  670,  243,  658,
      243,  243,  445,  243,  669,  666,  444,  243,  243,  667,
      243,  243,  243,  243,  603,  243,  243,  603,  443,  243,
      243,  672,  243,  243,  212,  671,  212,  212,  212,  442,

      212,  212,  698,  212,  441,  212,  212,  212,  243,  212,
      212,  243,  440,  675,  673,  674,  212,  439,  212,  212,
      212,  438,  212,  212,  212,  437,  212,  212,  212,  604,
      212,  212,  699,  436,  676,  212,  700,  212,  212,  212,
      435,  212,  212,  701,  212,  434,  212,  212,  212,  433,
      212,  212,  212,  432,  212,  212,  212,  702,  212,  212,
      703,  212,  431,  212,  212,  212,  430,  212,  212,  704,
      212,  429,  212,  212,  212,  243,  212,  212,  243,  243,
      312,  243,  243,  708,  243,  243,  243,  243,  243,  243,
      243,  428,  427,  243,  709,  710,  243,  243,  706,  426,

      243,  711,  243,  705,  243,  243,  243,  243,  243,  243,
      243,  243,  707,  243,  713,  712,  243,  243,  425,  243,
      243,  714,  243,  726,  424,  243,  726,  212,  422,  212,
      212,  212,  419,  212,  212,  212,  418,  212,  212,  212,
      417,  212,  212,  212,  243,  212,  212,  243,  416,  716,
      415,  729,  715,  212,  243,  212,  212,  243,  212,  717,
      212,  212,  732,  414,  212,  732,  730,  212,  727,  212,
      212,  413,  212,  731,  212,  212,  243,  243,  243,  243,
      243,  243,  243,  412,  243,  243,  735,  243,  243,  411,
      738,  243,  736,  738,  737,  243,  726,  726,  243,  726,

      726,  745,  410,  409,  745,  734,  212,  733,  212,  212,
      212,  243,  212,  212,  243,  212,  408,  212,  212,  732,
      407,  212,  732,  212,  406,  212,  212,  749,  740,  212,
      749,  243,  405,  243,  243,  739,  243,  738,  404,  282,
      738,  727,  727,  278,  209,  243,  746,  747,  243,  753,
      745,  745,  753,  745,  745,  212,  346,  212,  212,  212,
      243,  212,  212,  243,  733,  751,  345,  749,  748,  212,
      749,  212,  750,  212,  212,  243,  753,  243,  243,  753,
      243,  212,  739,  212,  212,  203,  199,  344,  758,  212,
      752,  212,  212,  760,  754,  746,  746,  243,  243,  195,

      243,  243,  212,  243,  212,  212,  243,  212,  243,  212,
      212,  243,  750,  190,  343,  212,  759,  212,  212,  342,
      764,  754,  761,  776,  243,  341,  212,  243,  212,  212,
      243,  340,  777,  243,  339,  189,  765,  184,  183,  337,
      334,  333,  772,  773,  768,  769,   20,   20,   20,   20,
       20,   20,   48,   48,   48,   48,   48,   48,   53,   53,
       53,   53,   53,   53,   60,   60,   60,   60,   60,   60,
       65,   65,   65,   65,   65,   65,   68,   68,   68,   68,
       68,   68,   94,   94,   94,   94,   94,   94,  146,  146,
      146,  146,  146,  146,  151,  151,  151,  151,  151,  151,

      181,  181,  332,  181,  181,  181,  191,  191,  191,  191,
      191,  191,  194,  331,  330,  329,  194,  194,  196,  196,
      196,  196,  196,  196,  202,  202,  328,  327,  202,  202,
      208,  208,  208,  326,  208,  208,  211,  211,  325,  211,
      211,  211,  233,  233,  324,  233,  233,  233,  243,  243,
      323,  322,  321,  243,  268,  268,  320,  268,  268,  268,
      309,  309,  319,  155,  312,  309,  314,  314,  314,  314,
      314,  314,  374,  374,  304,  303,  300,  374,  395,  395,
      299,  395,  395,  395,  298,  295,  294,  286,  285,  284,
      283,  282,  280,  276,  271,  270,  266,  265,  264,  261,

      260,  252,  251,  250,  249,  248,  213,  210,  209,  207,
      204,  203,  199,  195,  190,  189,  184,  183,  173,  172,
      171,  168,  167,  159,  158,  157,  156,  155,  154,  778,
       19,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778
    } ;

static yyconst flex_int16_t yy_chk[2080] =
    {   0,
        0,    1,    1,    1,    1,  798,    1,    0,    1,    7,
        7,   21,    1,    1,   21,    1,    8,    8,    1,   35,
        1,  774,    1,    1,    1,    1,  114,    1,    1,  114,
        1,   35,  771,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    3,    3,    3,    3,    4,    4,    4,    4,
        4,    5,    5,    6,    6,   15,   15,   15,   15,    4,

       15,   16,   16,   16,   16,   17,   16,   30,   18,   31,
       30,   32,   42,  106,   30,   45,   46,   59,   46,   51,
       51,   51,  146,   31,   63,  146,   42,    4,   32,   63,
      106,    5,  133,    6,   17,   45,    5,   18,    6,    9,
        9,    9,    9,  105,    9,   59,    9,  109,  770,  133,
        9,    9,   68,    9,   68,   68,    9,  105,    9,  109,
        9,    9,    9,    9,  767,    9,    9,   71,    9,   71,
       71,    9,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,

       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       11,   11,   11,   11,  116,   11,   72,   11,   72,   72,
      766,   11,   11,   72,   11,  182,  182,   11,  116,   11,
      205,   11,   11,   11,   11,  205,   11,   11,   86,   11,
       86,   86,   11,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,

       12,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   14,
      302,  302,   14,   14,  120,  119,  120,   14,   56,   56,
       56,   56,   73,  132,   73,   73,   74,  141,   74,   74,
       14,   75,  136,   75,   75,  119,  763,  132,   73,   74,
       76,  141,   76,   76,  136,  145,   14,  145,   14,  104,
       14,   75,  104,   14,   14,   39,  104,  144,   39,   39,

      762,  756,   77,   39,   77,   77,   78,   76,   78,   78,
      179,   79,  179,   79,   79,   78,   77,  144,  153,   77,
       79,  153,   80,   77,   80,   80,  186,  151,   81,   78,
       81,   81,   39,   82,   39,   82,   82,   79,  314,   39,
       39,   83,  172,   83,   83,  172,  186,   80,   81,   82,
       83,   84,  755,   84,   84,   85,  151,   85,   85,  306,
       87,   82,   87,   87,   84,  746,   88,  314,   88,   88,
       89,  743,   89,   89,   90,   88,   90,   90,   91,  306,
       91,   91,  152,  152,   92,  152,   92,   92,   85,   88,
       93,  741,   93,   93,   95,   95,   95,   95,  727,   91,

       97,   97,   97,   97,  113,  113,  113,  113,  122,  122,
      122,  122,  152,   89,   90,   92,  201,   92,  131,   91,
      725,  131,  193,  193,  193,  131,  140,  140,  140,  140,
      147,  147,  147,  147,  722,   93,  198,  198,  198,  207,
      207,  720,  207,  211,  201,  211,  211,  212,  719,  212,
      212,  214,  243,  214,  214,  243,  718,  215,  214,  215,
      215,  697,  216,  696,  216,  216,  215,  217,  694,  217,
      217,  218,  693,  218,  218,  219,  217,  219,  219,  220,
      250,  220,  220,  250,  218,  207,  216,  221,  219,  221,
      221,  222,  691,  222,  222,  223,  686,  223,  223,  224,

      252,  224,  224,  252,  250,  225,  220,  225,  225,  226,
      221,  226,  226,  252,  685,  249,  222,  223,  249,  227,
      224,  227,  227,  684,  249,  683,  226,  228,  227,  228,
      228,  682,  229,  225,  229,  229,  230,  251,  230,  230,
      251,  231,  229,  231,  231,  232,  251,  232,  232,  681,
      233,  230,  233,  233,  234,  228,  234,  234,  231,  680,
      235,  231,  235,  235,  236,  679,  236,  236,  237,  678,
      237,  237,  238,  254,  238,  238,  254,  677,  640,  232,
      240,  238,  240,  240,  235,  235,  239,  638,  239,  239,
      241,  637,  241,  241,  242,  236,  242,  242,  636,  635,

      254,  237,  244,  244,  244,  244,  634,  239,  246,  246,
      246,  246,  248,  253,  632,  248,  253,  240,  255,  248,
      256,  255,  257,  256,  630,  257,  253,  239,  258,  629,
      259,  258,  241,  259,  260,  262,  628,  260,  262,  261,
      263,  255,  261,  263,  257,  256,  622,  621,  261,  258,
      263,  260,  264,  265,  266,  264,  265,  266,  259,  268,
      620,  268,  268,  262,  268,  269,  270,  264,  269,  270,
      265,  271,  272,  265,  271,  272,  274,  273,  619,  274,
      273,  272,  275,  276,  299,  275,  276,  299,  266,  269,
      269,  277,  277,  277,  277,  618,  309,  270,  273,  309,

      310,  617,  616,  310,  271,  311,  311,  311,  311,  316,
      316,  615,  316,  274,  317,  317,  614,  317,  273,  338,
      338,  613,  338,  339,  275,  612,  339,  345,  345,  611,
      345,  346,  346,  610,  346,  347,  347,  609,  347,  316,
      349,  608,  349,  349,  317,  350,  607,  350,  350,  351,
      606,  351,  351,  352,  605,  352,  352,  353,  374,  353,
      353,  374,  349,  556,  351,  555,  353,  354,  339,  354,
      354,  553,  350,  345,  352,  552,  355,  346,  355,  355,
      354,  347,  356,  550,  356,  356,  357,  549,  357,  357,
      358,  548,  358,  358,  359,  546,  359,  359,  355,  375,

      545,  356,  375,  358,  359,  360,  375,  360,  360,  544,
      543,  361,  357,  361,  361,  542,  539,  362,  360,  362,
      362,  363,  361,  363,  363,  364,  376,  364,  364,  376,
      365,  362,  365,  365,  538,  366,  537,  366,  366,  367,
      379,  367,  367,  379,  536,  365,  366,  363,  376,  534,
      533,  364,  368,  368,  368,  368,  369,  532,  369,  369,
      370,  379,  370,  370,  371,  377,  371,  371,  377,  372,
      367,  372,  372,  373,  378,  373,  373,  378,  380,  530,
      381,  380,  382,  381,  529,  382,  528,  380,  371,  378,
      527,  383,  377,  381,  383,  384,  385,  370,  384,  385,

      526,  369,  525,  386,  382,  372,  386,  524,  523,  385,
      383,  373,  387,  386,  389,  387,  388,  389,  522,  388,
      390,  384,  521,  390,  520,  387,  391,  388,  389,  391,
      392,  393,  394,  392,  393,  394,  395,  397,  395,  395,
      397,  395,  393,  519,  518,  392,  390,  396,  396,  517,
      396,  398,  391,  399,  398,  400,  399,  401,  400,  402,
      401,  516,  402,  394,  400,  403,  423,  423,  403,  423,
      424,  448,  448,  424,  448,  515,  450,  399,  401,  450,
      454,  514,  397,  454,  456,  456,  513,  456,  398,  458,
      458,  460,  458,  460,  460,  402,  512,  461,  401,  461,

      461,  489,  460,  403,  489,  462,  511,  462,  462,  463,
      510,  463,  463,  461,  455,  424,  464,  463,  464,  464,
      465,  450,  465,  465,  466,  454,  466,  466,  489,  485,
      456,  462,  485,  453,  467,  458,  467,  467,  452,  451,
      485,  465,  470,  464,  470,  470,  468,  467,  468,  468,
      466,  447,  446,  469,  468,  469,  469,  471,  445,  471,
      471,  469,  472,  492,  472,  472,  492,  473,  470,  473,
      473,  474,  444,  474,  474,  472,  492,  443,  442,  471,
      475,  473,  475,  475,  476,  441,  476,  476,  475,  477,
      440,  477,  477,  478,  486,  478,  478,  486,  474,  439,

      476,  479,  479,  479,  479,  480,  487,  480,  480,  487,
      486,  481,  477,  481,  481,  482,  438,  482,  482,  483,
      437,  483,  483,  484,  436,  484,  484,  488,  490,  435,
      488,  490,  487,  434,  491,  488,  478,  491,  493,  494,
      495,  493,  494,  495,  433,  496,  493,  494,  496,  490,
      480,  483,  497,  432,  499,  497,  481,  499,  482,  498,
      491,  500,  498,  431,  500,  497,  495,  496,  484,  500,
      430,  501,  502,  498,  501,  502,  503,  504,  504,  503,
      504,  499,  505,  506,  429,  505,  506,  501,  507,  508,
      509,  507,  508,  509,  531,  502,  554,  531,  557,  554,

      557,  557,  558,  428,  558,  558,  559,  427,  559,  559,
      558,  557,  426,  560,  559,  560,  560,  425,  422,  503,
      581,  508,  561,  581,  561,  561,  584,  505,  506,  584,
      561,  507,  421,  581,  562,  509,  562,  562,  420,  531,
      419,  554,  562,  563,  418,  563,  563,  564,  417,  564,
      564,  563,  565,  416,  565,  565,  566,  415,  566,  566,
      567,  414,  567,  567,  568,  413,  568,  568,  569,  412,
      569,  569,  564,  411,  410,  570,  569,  570,  570,  409,
      571,  582,  571,  571,  582,  408,  407,  567,  571,  582,
      572,  568,  572,  572,  573,  570,  573,  573,  574,  406,

      574,  574,  575,  405,  575,  575,  576,  404,  576,  576,
      577,  344,  577,  577,  578,  588,  578,  578,  588,  574,
      579,  573,  579,  579,  580,  583,  580,  580,  583,  585,
      343,  589,  585,  583,  589,  586,  342,  585,  586,  575,
      588,  587,  577,  586,  587,  578,  341,  590,  591,  587,
      590,  591,  592,  593,  594,  592,  593,  594,  340,  595,
      596,  593,  595,  596,  337,  579,  336,  595,  597,  580,
      598,  597,  335,  598,  594,  591,  334,  599,  600,  592,
      599,  600,  602,  601,  603,  602,  601,  603,  333,  604,
      660,  598,  604,  660,  641,  597,  641,  641,  642,  332,

      642,  642,  641,  643,  331,  643,  643,  644,  661,  644,
      644,  661,  330,  602,  599,  601,  645,  329,  645,  645,
      646,  328,  646,  646,  647,  327,  647,  647,  648,  603,
      648,  648,  647,  326,  604,  649,  648,  649,  649,  650,
      325,  650,  650,  649,  651,  324,  651,  651,  652,  323,
      652,  652,  653,  322,  653,  653,  654,  651,  654,  654,
      653,  655,  321,  655,  655,  656,  320,  656,  656,  654,
      657,  319,  657,  657,  658,  659,  658,  658,  659,  662,
      313,  663,  662,  659,  663,  664,  665,  666,  664,  665,
      666,  308,  307,  667,  665,  666,  667,  668,  656,  305,

      668,  667,  669,  655,  670,  669,  671,  670,  672,  671,
      673,  672,  657,  673,  671,  669,  674,  675,  304,  674,
      675,  672,  676,  695,  303,  676,  695,  698,  300,  698,
      698,  699,  298,  699,  699,  700,  297,  700,  700,  701,
      296,  701,  701,  702,  708,  702,  702,  708,  295,  674,
      294,  702,  673,  703,  709,  703,  703,  709,  704,  675,
      704,  704,  706,  293,  706,  706,  704,  705,  695,  705,
      705,  292,  707,  705,  707,  707,  710,  711,  712,  710,
      711,  712,  713,  291,  714,  713,  712,  714,  715,  290,
      716,  715,  714,  716,  715,  717,  721,  726,  717,  721,

      726,  728,  289,  288,  728,  707,  729,  706,  729,  729,
      730,  735,  730,  730,  735,  731,  287,  731,  731,  732,
      286,  732,  732,  733,  285,  733,  733,  734,  717,  734,
      734,  736,  284,  737,  736,  716,  737,  738,  283,  282,
      738,  721,  726,  279,  208,  739,  728,  731,  739,  740,
      742,  745,  740,  742,  745,  747,  206,  747,  747,  748,
      751,  748,  748,  751,  732,  737,  203,  749,  733,  749,
      749,  750,  734,  750,  750,  752,  753,  754,  752,  753,
      754,  758,  738,  758,  758,  202,  200,  199,  747,  759,
      739,  759,  759,  751,  740,  742,  745,  760,  761,  197,

      760,  761,  764,  765,  764,  764,  765,  768,  769,  768,
      768,  769,  749,  192,  188,  772,  750,  772,  772,  187,
      758,  753,  754,  772,  773,  185,  776,  773,  776,  776,
      777,  184,  773,  777,  183,  180,  760,  178,  177,  173,
      171,  170,  768,  769,  764,  765,  779,  779,  779,  779,
      779,  779,  780,  780,  780,  780,  780,  780,  781,  781,
      781,  781,  781,  781,  782,  782,  782,  782,  782,  782,
      783,  783,  783,  783,  783,  783,  784,  784,  784,  784,
      784,  784,  785,  785,  785,  785,  785,  785,  786,  786,
      786,  786,  786,  786,  787,  787,  787,  787,  787,  787,

      788,  788,  169,  788,  788,  788,  789,  789,  789,  789,
      789,  789,  790,  168,  167,  166,  790,  790,  791,  791,
      791,  791,  791,  791,  792,  792,  165,  164,  792,  792,
      793,  793,  793,  163,  793,  793,  794,  794,  162,  794,
      794,  794,  795,  795,  161,  795,  795,  795,  796,  796,
      160,  159,  158,  796,  797,  797,  157,  797,  797,  797,
      799,  799,  156,  155,  149,  799,  800,  800,  800,  800,
      800,  800,  801,  801,  143,  142,  139,  801,  802,  802,
      138,  802,  802,  802,  137,  135,  134,  130,  129,  128,
      127,  126,  124,  121,  118,  117,  112,  111,  110,  108,

      107,  103,  102,  101,  100,   99,   70,   67,   65,   64,
       62,   60,   58,   55,   50,   47,   44,   43,   38,   37,
       36,   34,   33,   29,   28,   27,   26,   25,   23,   19,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[62] =
    {   0,
0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 
    1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
    0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#line 2 "levcomp.lpp"

// levcomp.lpp:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
// 
// Based loosely on NetHack's lev_comp.l

#include "AppHdr.h"
#include "mapdef.h"
#include "levcomp.tab.h"
#include <cstring>
#include <queue>

static bool alloced = false;

std::queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(100);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

static char *copy_text(bool trim_right, int strip_trailing)
{
    char *newstring = NULL;
    if ((yylval.text = newstring = strdup(yytext)))
    {
        alloced = true;
        char *s = NULL;
        if (trim_right)
        {
            s = newstring + strlen(newstring) - 1;
            while (isspace(*s) && s >= newstring)
                *s-- = 0;
        }
        if (strip_trailing)
        {
            if (!s)
                s = newstring + strlen(newstring) - 1;
            while (s >= newstring && --strip_trailing >= 0)
                *s-- = 0;
        }
    }
    return (newstring);
}

static void settext(bool trim_right = false, int strip_trailing = 0)
{
    clean();
    char *newstring = copy_text(trim_right, strip_trailing);
    yylval.text = newstring;
}









#line 1273 "levcomp.lex.cc"

#define INITIAL 0
#define MAPDEF 1
#define LUA 2
#define LUA_ONELINER 3
#define ARGUMENT 4
#define MNAME 5
#define KEYWORDS 6
#define ITEM_LIST 7
#define TOEOL 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 89 "levcomp.lpp"


#line 1440 "levcomp.lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 779 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 778 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 91 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 93 "levcomp.lpp"
{
                        settext(true);
                        return MAP_LINE;
                    }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 98 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 99 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 100 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 102 "levcomp.lpp"
;
	YY_BREAK
case 7:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 104 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 8:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 105 "levcomp.lpp"
{
                            settext(true, 2);
                            BEGIN(INITIAL);
                            return LUA_LINE;
                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 110 "levcomp.lpp"
{
                            settext();
                            return LUA_LINE;
                        }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 114 "levcomp.lpp"
;
	YY_BREAK
case 11:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 116 "levcomp.lpp"
{
                            settext();
                            return LUA_LINE;
                        }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 120 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 122 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 127 "levcomp.lpp"
;
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 128 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 130 "levcomp.lpp"
{ 
                        settext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 135 "levcomp.lpp"
{
                        settext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 140 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 141 "levcomp.lpp"
;
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 142 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 144 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 146 "levcomp.lpp"
{ 
                        settext();
                        return MONSTER_NAME; 
                    }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 151 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 152 "levcomp.lpp"
;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 154 "levcomp.lpp"
{ 
                        BEGIN(INITIAL);
                        settext();
                        return STRING; 
                    }
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 160 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 27:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 162 "levcomp.lpp"
{
                        settext(true, 1);
                        return STRING;
                    }
	YY_BREAK
case 28:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 167 "levcomp.lpp"
{
                        BEGIN(INITIAL);
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 173 "levcomp.lpp"
;
	YY_BREAK
case 30:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 175 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 177 "levcomp.lpp"
{ BEGIN(LUA_ONELINER); return MAIN; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 179 "levcomp.lpp"
{ BEGIN(LUA); return PRELUDE; }      
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 180 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 181 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 182 "levcomp.lpp"
{ BEGIN(LUA); return VALIDATE; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 183 "levcomp.lpp"
{ BEGIN(LUA); return VETO; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 186 "levcomp.lpp"
{ BEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 187 "levcomp.lpp"
{ BEGIN(ARGUMENT); return DEFAULT_DEPTH; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 188 "levcomp.lpp"
{ BEGIN(ARGUMENT); return DEPTH; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 189 "levcomp.lpp"
{ BEGIN(ARGUMENT); return ORIENT; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 190 "levcomp.lpp"
{ BEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 191 "levcomp.lpp"
{ BEGIN(ARGUMENT); return WELCOME; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 192 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 193 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 194 "levcomp.lpp"
{ BEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 195 "levcomp.lpp"
{ BEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 196 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return SUBST; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 197 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return NSUBST; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 198 "levcomp.lpp"
{ BEGIN(MNAME); return MONS; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 199 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 200 "levcomp.lpp"
{ BEGIN(TOEOL); return MARKER; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 201 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return SHUFFLE; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 203 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KFEAT; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 204 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KITEM; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 205 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KMONS; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 207 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 209 "levcomp.lpp"
{
                        clean();
                        yylval.i = atoi(yytext);
                        return INTEGER;
                    }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 215 "levcomp.lpp"
;
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 216 "levcomp.lpp"
;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 217 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 219 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 1902 "levcomp.lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MAPDEF):
case YY_STATE_EOF(LUA):
case YY_STATE_EOF(LUA_ONELINER):
case YY_STATE_EOF(ARGUMENT):
case YY_STATE_EOF(MNAME):
case YY_STATE_EOF(KEYWORDS):
case YY_STATE_EOF(ITEM_LIST):
case YY_STATE_EOF(TOEOL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 779 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 779 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 778);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 219 "levcomp.lpp"



int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}

