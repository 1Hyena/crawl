#line 2 "levcomp.lex.cc"

#line 4 "levcomp.lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 60
#define YY_END_OF_BUFFER 61
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[756] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   61,   59,
       57,   58,   59,   55,   56,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   57,   29,
       31,   59,   59,   59,   59,   59,   59,   60,    6,   60,
       60,    4,    2,    3,   60,    2,    2,    2,    2,    9,
       10,   60,    9,    9,   60,   12,   60,   59,   26,   59,
       55,   56,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   29,   31,   59,   59,   59,
       59,   59,   59,   59,   24,   21,   24,   23,   56,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   24,   29,   31,   59,   59,   59,   59,   59,
       59,   14,   15,   59,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   14,
       13,   13,   13,   13,   13,   17,   19,   20,   60,   18,
       60,   60,   57,   58,   56,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   57,   29,   31,    0,    0,    0,    0,
       29,    0,    0,    0,    0,    0,    0,    0,   34,    6,
        5,    0,    0,    2,    3,    2,    0,    2,    2,    2,

        2,    9,    9,   10,    9,    9,    9,    0,   11,   12,
       25,    0,   26,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   29,   25,   25,   25,   25,   25,   25,
       25,   25,    0,   24,   21,   24,   21,   56,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   24,   29,    0,    0,
        0,    0,    0,    0,    0,   34,   14,   15,    0,   15,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       14,   13,   13,   13,   13,   13,   13,   13,   16,    0,
       19,   20,    0,    0,   28,    0,    0,   27,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    2,    9,    9,    9,    7,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   30,    0,    0,    0,    0,    0,    2,
        9,    8,    9,    7,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,    0,    0,   25,   25,   25,   25,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,    0,    0,   22,   22,

       22,   22,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,    0,    0,    0,   49,    0,    0,    0,
        0,   48,   37,    0,    0,    0,    0,    0,   45,    0,
        0,   33,    0,    0,    0,    0,    2,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,    0,   25,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,    0,   22,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,    0,
       39,   44,   52,   53,   54,    0,    0,    0,   41,    0,
       46,    0,    0,    0,    0,   36,    1,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       42,   50,   47,   40,    0,   43,    0,    0,    0,    1,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   13,   13,

       13,   13,   51,    0,    0,    0,    0,   25,   25,    0,
       25,   25,   22,   22,    0,   22,   22,   13,   13,    0,
       32,    0,    0,   25,   25,    0,   25,   22,   22,    0,
       22,   13,    0,   35,   25,   25,   22,   22,   13,    0,
       25,   22,   13,    0,   25,   22,   13,    0,   25,   22,
       13,   38,   25,   22,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    7,    8,    1,    1,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,    1,    1,
        1,    1,    1,    1,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       20,   27,   28,   29,   30,   20,   31,   20,   20,   20,
        1,   32,    1,    1,   20,    1,   33,   20,   20,   34,

       35,   36,   20,   37,   38,   20,   20,   39,   20,   20,
       40,   41,   20,   42,   43,   44,   45,   46,   20,   20,
       20,   20,   47,    1,   48,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[49] =
    {   0,
        1,    2,    3,    4,    1,    1,    5,    6,    6,    1,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    1,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    1,    1
    } ;

static yyconst flex_int16_t yy_base[780] =
    {   0,
        0,   34,   80,   85,   89,   91,    7,   14,  138,  172,
      219,  253,  301,  348,   94,  100,  103,  106, 1976, 1977,
       10, 1977, 1972, 1977, 1965, 1955, 1957, 1949, 1941,   92,
       99,  101, 1942, 1946,    2, 1956, 1951, 1930,  394,    0,
     1977,  102, 1919, 1921,   93,   84, 1915, 1977, 1977, 1958,
      117, 1977,    0, 1977, 1957,  357,    0, 1935,  103, 1910,
     1977, 1954,   82, 1908, 1952, 1977, 1951,  151, 1977, 1950,
      166,  225,  361,  365,  370,  379,  401,  405,  410,  421,
      427,  432,  440,  450,  454,  247,  459,  465,  469,  473,
      477,  483,  489,    0,  493, 1977,  499, 1977, 1943, 1933,

     1935, 1927, 1919,  374,  133,  103, 1920, 1924,  130, 1934,
     1929, 1908,  503,   23,    0,  214, 1897, 1899,  333,  322,
     1893,  507, 1977, 1936,    0, 1929, 1919, 1921, 1913, 1905,
      503,  353,  122, 1906, 1910,  355, 1920, 1915, 1894,  525,
      357, 1883, 1885,  375,  353,  121,  529, 1977, 1923, 1977,
      425,  481,  417, 1977, 1916, 1913, 1894, 1905, 1900, 1899,
     1875, 1878, 1875, 1872, 1869, 1861, 1871, 1873, 1848, 1861,
     1850, 1847, 1819,    0,    0, 1977, 1809, 1811,  378, 1795,
        0,  210, 1750, 1747, 1770,  404, 1741, 1733, 1977, 1977,
     1977, 1773,  520,    0, 1977,    0, 1772,  534, 1760, 1749,

      502, 1724, 1723, 1977,  198, 1722,  538, 1764, 1977, 1977,
      542,  546, 1977,  550,  556,  561,  566,  570,  574,  578,
      586,  590,  594,  598,  604,  608,  618,  626,  631,  635,
      640,  644,  649,  653,  658,  662,  666,  670,  674,  684,
      688,  694,  441,  700, 1977,  704, 1977,  709,  551,  579,
      614,  599,  710,  636,  708,  689,  645,  717,  719,  724,
      725,  726,  732,  733,  740,  746,    0,  750,  758,  756,
      760,  762,  764,  766,  770,  772,  776, 1977, 1763, 1977,
        0, 1745, 1732, 1709, 1715, 1707, 1705, 1687, 1676, 1670,
     1669, 1663, 1654, 1661, 1645, 1620, 1602, 1592, 1589, 1566,

        0,  325, 1567, 1557, 1577,  437, 1545, 1536,  781,  786,
      794, 1977, 1573,  436, 1977,  798,  806, 1977, 1535, 1524,
     1530, 1523, 1521, 1513, 1495, 1494, 1483, 1490, 1492, 1485,
     1481, 1473, 1436, 1430, 1435, 1408,  810,  788, 1390, 1397,
     1362, 1359, 1365,  814,  818,  822, 1977,  824,  829,  835,
      840,  845,  849,  855,  863,  867,  871,  876,  885,  889,
      894,  899,  903,  907,  911,  915,  921,  928,  932,  936,
      941,  841,  945,  937,  946,  880,  947,  872,  951,  955,
      957,  967,  971,  975,  983,  987,  988,  989,  994, 1001,
     1000, 1005, 1011, 1006, 1018, 1019, 1023, 1024, 1025, 1030,

     1356, 1347, 1355, 1345, 1344, 1339, 1324, 1322, 1314, 1323,
     1322, 1315, 1313, 1306, 1289, 1281, 1286, 1265, 1034, 1036,
     1258, 1259, 1246, 1239, 1262, 1253, 1239, 1239, 1218, 1214,
     1207, 1213, 1210, 1204, 1182, 1181, 1189, 1179, 1162, 1170,
     1157, 1121, 1041, 1977, 1046, 1115, 1112, 1122, 1047, 1140,
     1053, 1977, 1057, 1977, 1064, 1069, 1074, 1080, 1084, 1093,
     1102, 1106, 1110, 1121, 1130, 1135, 1139, 1144, 1148, 1159,
     1163, 1168, 1180, 1174, 1184, 1188, 1192, 1196, 1059, 1169,
     1094, 1197, 1098, 1201, 1206, 1140, 1207, 1213, 1214, 1220,
     1225, 1131, 1227, 1236, 1234, 1243, 1248, 1252, 1253, 1257,

     1258, 1259, 1125, 1111, 1100, 1114, 1090, 1095, 1089, 1094,
     1082, 1081, 1053, 1056, 1060, 1049, 1025, 1040, 1024,  995,
      986,  985, 1263, 1000,  991,  987, 1977,  974,  973,  972,
      944, 1977, 1977,  936,  935,  953,  933,  925, 1977,  900,
      889, 1977,  888,  888, 1264,  867,  880, 1268, 1272, 1276,
     1285, 1291, 1303, 1310, 1314, 1319, 1323, 1327, 1331, 1335,
     1342, 1347, 1357, 1361, 1365, 1369, 1373, 1377, 1381, 1387,
     1289, 1348, 1391, 1382, 1392, 1393, 1403, 1404, 1409, 1410,
     1414, 1415, 1416, 1420, 1422, 1428, 1433, 1434, 1435, 1443,
     1445, 1444, 1449,  877,  851,  845,  831,  826,  822,  795,

      789,  781,  796,  782,  792,  765,  753,  742,  737,  743,
     1977, 1977, 1977, 1977, 1977,  737,  736,  731, 1977,  724,
     1977,  710,  656,  652,  639, 1977,  677, 1451, 1455, 1461,
     1465, 1470, 1477, 1482, 1493, 1497, 1504, 1508, 1512, 1516,
     1520, 1525, 1529, 1533, 1466, 1478, 1483, 1488, 1534, 1538,
     1539, 1540, 1546, 1550, 1552, 1556, 1560, 1561, 1566, 1567,
     1572,  667,  663,  651,  622,  611,  614,  571,  562,  549,
     1977, 1977, 1977, 1977,  563, 1977,  561, 1573,  529,  552,
     1577, 1581, 1585, 1589, 1593, 1602, 1608, 1613, 1617, 1594,
     1621, 1622, 1623, 1627, 1628, 1633, 1629, 1634,  539,  534,

     1638,  500, 1977,  487, 1640,  452, 1642, 1644, 1649, 1653,
     1657, 1661, 1662, 1668, 1666, 1670, 1672,  458, 1676,  437,
     1977, 1677,  419, 1686, 1690, 1694, 1701, 1705, 1707, 1709,
     1713,  418,  361, 1977, 1723, 1727, 1728, 1732,  360,  333,
     1734, 1740,  187,  128, 1742, 1748,  112,   23, 1747, 1753,
       12, 1977, 1757, 1763, 1977, 1785, 1791, 1797, 1803, 1809,
     1815, 1821, 1827, 1833, 1839, 1845, 1851, 1857, 1863, 1869,
     1875, 1881, 1887, 1893,    0, 1899, 1905, 1911, 1917
    } ;

static yyconst flex_int16_t yy_def[780] =
    {   0,
      756,  755,  757,  758,  759,  759,  760,  760,  761,  755,
      762,  755,  755,   13,  763,  763,  764,  764,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  765,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      766,  755,  767,  755,  755,  768,  767,  767,  767,  769,
      755,  755,  769,  769,  770,  755,  755,  771,  755,  755,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  772,  771,  771,  771,  771,
      771,  771,  771,  773,  755,  755,  755,  755,  773,  773,

      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,   39,  774,  773,  773,  773,  773,  773,  773,
      773,  755,  755,  755,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,   39,
      775,  775,  775,  775,  775,  776,  755,  755,  755,  755,
      777,  777,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,   39,  765,  755,  755,  755,  755,  755,
      765,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  767,  755,  767,  755,  767,  767,  767,

      767,  769,  769,  755,  769,  769,  769,  770,  755,  755,
      771,  771,  755,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  772,  772,  771,  771,  771,  771,  771,  771,
      771,  771,  778,  755,  755,  755,  755,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  113,  779,  778,  778,
      778,  778,  778,  778,  778,  778,  755,  755,  755,  755,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,

      140,  775,  775,  775,  775,  775,  775,  775,  776,  776,
      755,  755,  755,  777,  755,  777,  777,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  767,  769,  769,  769,  755,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  779,  778,  778,  778,  778,  778,  778,  778,  778,

      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  767,
      769,  755,  769,  755,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,

      778,  778,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  767,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  775,  775,  775,  775,  775,  775,  775,

      775,  775,  775,  775,  775,  775,  775,  775,  775,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  767,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  767,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  775,  775,

      775,  775,  755,  755,  755,  755,  755,  771,  771,  771,
      771,  771,  778,  778,  778,  778,  778,  775,  775,  755,
      755,  755,  755,  771,  771,  771,  771,  778,  778,  778,
      778,  775,  755,  755,  771,  771,  778,  778,  775,  755,
      771,  778,  775,  755,  771,  778,  775,  755,  771,  778,
      775,  755,  771,  778,    0,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755
    } ;

static yyconst flex_int16_t yy_nxt[2026] =
    {   0,
      755,   21,   22,   23,   21,  281,   24,  755,   25,   66,
       67,  153,   26,   27,  153,   28,   66,   67,   29,  169,
       30,  752,   31,   32,   33,   34,  181,   35,   36,  181,
       37,  170,  752,   38,   20,   39,   22,   23,   39,   40,
       24,   20,   25,   41,   20,   20,   26,   27,   20,   28,
       20,   20,   29,   20,   30,   20,   42,   32,   33,   34,
       20,   35,   36,   20,   37,   20,   20,   38,   20,   20,
       20,   20,   43,   20,   44,   20,   45,   20,   20,   46,
       47,   20,   49,   50,   51,   52,   48,   54,   55,   56,
       57,   61,   62,   61,   62,  147,  148,  149,  147,   58,

      150,  147,  148,  149,  147,   48,  150,  160,   48,  163,
      161,  165,  182,  258,  162,  185,  187,  200,  188,  190,
      192,  193,  310,  164,  205,  310,  164,   59,  166,  206,
      259,   63,  292,   63,  152,  186,   64,  152,   64,   21,
       69,   70,   21,  256,   71,  201,   72,  262,  751,  293,
       73,   74,  212,   75,  212,  212,   76,  257,   77,  263,
       78,   79,   80,   81,  748,   82,   83,  212,   84,  212,
      212,   85,   68,   39,   69,   70,   39,   86,   71,   68,
       72,   87,   68,   68,   73,   74,   68,   75,   68,   68,
       76,   68,   77,   68,   88,   79,   80,   81,   68,   82,

       83,   68,   84,   68,   68,   85,   68,   68,   68,   68,
       89,   68,   90,   68,   91,   68,   68,   92,   93,   68,
       95,   96,   97,   95,  269,   98,  212,   99,  212,  212,
      747,  100,  101,  214,  102,  337,  326,  103,  257,  104,
      205,  105,  106,  107,  108,  206,  109,  110,  234,  111,
      234,  234,  112,   94,  113,   96,   97,  113,  114,   98,
       94,   99,  115,   94,   94,  100,  101,   94,  102,   94,
       94,  103,   94,  104,   94,  116,  106,  107,  108,   94,
      109,  110,   94,  111,   94,   94,  112,   94,   94,   94,
       94,  117,   94,  118,   94,  119,   94,   94,  120,  121,

       94,   20,  122,  123,  124,  122,   20,   24,  125,  126,
       20,  125,  125,  127,  128,  125,  129,  125,  125,  130,
      125,  131,  125,  132,  133,  134,  135,  125,  136,  137,
      125,  138,   20,  125,  139,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,   20,   20,  140,
      419,  408,  140,   40,  274,  272,  275,   41,  191,  195,
      197,  198,  212,  290,  212,  212,  212,  302,  212,  212,
      141,  212,  296,  212,  212,  273,  744,  291,  215,  216,
      212,  291,  212,  212,  297,  307,  142,  308,  143,  253,
      144,  217,  254,  145,   47,  174,  255,  305,  174,  175,

      743,  740,  212,  176,  212,  212,  212,  218,  212,  212,
      187,  212,  188,  212,  212,  222,  219,  306,  153,  220,
      224,  153,  212,  221,  212,  212,  185,  315,  212,  223,
      212,  212,  177,  212,  178,  212,  212,  225,  315,  179,
      180,  212,  243,  212,  212,  243,  186,  226,  227,  228,
      230,  212,  739,  212,  212,  212,  316,  212,  212,  305,
      212,  229,  212,  212,  231,  734,  212,  316,  212,  212,
      212,  733,  212,  212,  212,  235,  212,  212,  212,  306,
      212,  212,  317,  318,  212,  317,  212,  212,  232,  223,
      212,  732,  212,  212,  244,  245,  246,  244,  721,  238,

      246,  247,  246,  246,  267,  245,  246,  267,  277,  278,
      279,  277,  316,  236,  237,  240,  200,  241,  287,  239,
      720,  288,  190,  192,  193,  289,  301,  278,  279,  301,
      311,  312,  313,  311,  719,  242,  195,  197,  198,  346,
      347,  718,  346,  212,  201,  212,  212,  212,  703,  212,
      212,  212,  243,  212,  212,  243,  680,  212,  214,  212,
      212,  374,  212,  707,  212,  212,  348,  212,  704,  212,
      212,  212,  703,  212,  212,  212,  350,  212,  212,  212,
      243,  212,  212,  243,  351,  344,  349,  212,  352,  212,
      212,  212,  702,  212,  212,  212,  701,  212,  212,  212,

      243,  212,  212,  243,  375,  212,  353,  212,  212,  212,
      354,  212,  212,  377,  700,  243,  355,  356,  243,  212,
      357,  212,  212,  676,  376,  699,  359,  212,  360,  212,
      212,  674,  212,  358,  212,  212,  212,  243,  212,  212,
      243,  212,  362,  212,  212,  212,  243,  212,  212,  243,
      234,  363,  234,  234,  234,  361,  234,  234,  364,  212,
      673,  212,  212,  212,  379,  212,  212,  212,  382,  212,
      212,  212,  672,  212,  212,  212,  671,  212,  212,  365,
      369,  680,  679,  366,  355,  212,  678,  212,  212,  212,
      243,  212,  212,  243,  367,  212,  238,  212,  212,  677,

      368,  244,  245,  246,  244,  246,  245,  246,  246,  243,
      243,  243,  243,  243,  243,  381,  239,  373,  243,  676,
      243,  243,  370,  243,  378,  243,  243,  243,  243,  243,
      243,  371,  380,  243,  243,  386,  243,  243,  675,  383,
      674,  243,  385,  388,  243,  673,  672,  243,  384,  389,
      243,  268,  671,  181,  268,  387,  181,  243,  390,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  670,
      243,  243,  396,  243,  243,  669,  243,  277,  278,  279,
      277,  391,  310,  393,  381,  310,  397,  310,  394,  445,
      310,  668,  445,  667,  395,  311,  312,  313,  311,  317,

      318,  621,  317,  666,  399,  619,  398,  317,  318,  665,
      317,  443,  444,  400,  443,  451,  452,  664,  451,  453,
      454,  663,  453,  346,  347,  212,  346,  212,  212,  316,
      212,  615,  212,  212,  446,  614,  212,  316,  212,  212,
      613,  212,  243,  212,  212,  243,  212,  455,  212,  212,
      212,  457,  212,  212,  612,  459,  212,  456,  212,  212,
      611,  344,  458,  460,  212,  344,  212,  212,  212,  203,
      212,  212,  212,  243,  212,  212,  243,  212,  461,  212,
      212,  243,  483,  462,  243,  464,  212,  465,  212,  212,
      212,  662,  212,  212,  463,  212,  481,  212,  212,  466,

      212,  467,  212,  212,  212,  627,  212,  212,  212,  468,
      212,  212,  212,  626,  212,  212,  473,  444,  212,  473,
      625,  624,  474,  471,  212,  474,  469,  623,  622,  212,
      470,  212,  212,  212,  621,  212,  212,  212,  243,  212,
      212,  243,  212,  472,  212,  212,  243,  243,  243,  243,
      243,  243,  243,  373,  620,  243,  243,  366,  243,  243,
      479,  243,  619,  618,  617,  484,  476,  475,  243,  482,
      616,  243,  243,  477,  480,  243,  243,  486,  485,  243,
      478,  615,  614,  613,  243,  488,  489,  243,  243,  243,
      243,  243,  243,  243,  487,  243,  612,  490,  243,  491,

      611,  243,  243,  492,  243,  243,  268,  498,  181,  268,
      498,  181,  497,  444,  610,  497,  493,  495,  609,  243,
      243,  494,  243,  243,  243,  243,  243,  243,  243,  243,
      608,  243,  496,  396,  243,  443,  444,  445,  443,  607,
      445,  606,  443,  444,  393,  443,  397,  445,  545,  539,
      445,  545,  499,  605,  451,  452,  500,  451,  453,  454,
      243,  453,  501,  243,  604,  212,  398,  212,  212,  502,
      212,  571,  212,  212,  603,  212,  548,  212,  212,  602,
      601,  212,  446,  212,  212,  212,  549,  212,  212,  551,
      533,  532,  446,  546,  212,  243,  212,  212,  243,  243,

      203,  550,  243,  212,  203,  212,  212,  212,  600,  212,
      212,  212,  552,  212,  212,  553,  599,  598,  597,  556,
      555,  573,  212,  527,  212,  212,  575,  596,  595,  554,
      557,  212,  243,  212,  212,  243,  212,  594,  212,  212,
      212,  243,  212,  212,  243,  212,  584,  212,  212,  212,
      547,  212,  212,  560,  578,  544,  543,  558,  559,  561,
      212,  542,  212,  212,  212,  541,  212,  212,  563,  212,
      243,  212,  212,  243,  540,  474,  562,  212,  474,  539,
      564,  473,  444,  212,  473,  212,  572,  212,  212,  212,
      538,  212,  212,  212,  537,  212,  212,  569,  243,  212,

      569,  243,  243,  536,  535,  243,  574,  243,  243,  534,
      243,  243,  565,  533,  243,  243,  579,  243,  243,  532,
      475,  243,  580,  576,  243,  568,  243,  531,  243,  243,
      566,  243,  567,  577,  530,  243,  529,  243,  243,  583,
      243,  581,  570,  582,  243,  586,  528,  243,  527,  497,
      444,  587,  497,  498,  243,  585,  498,  243,  243,  243,
      592,  243,  243,  592,  545,  545,  526,  545,  545,  212,
      525,  212,  212,  212,  524,  212,  212,  212,  523,  212,
      212,  629,  628,  522,  419,  630,  212,  588,  212,  212,
      243,  591,  212,  243,  212,  212,  521,  520,  499,  589,

      631,  590,  519,  645,  212,  593,  212,  212,  518,  546,
      546,  212,  632,  212,  212,  212,  517,  212,  212,  633,
      212,  516,  212,  212,  212,  515,  212,  212,  212,  514,
      212,  212,  212,  513,  212,  212,  212,  512,  212,  212,
      634,  511,  510,  212,  637,  212,  212,  509,  212,  243,
      212,  212,  243,  508,  507,  635,  639,  646,  212,  636,
      212,  212,  212,  638,  212,  212,  212,  506,  212,  212,
      212,  505,  212,  212,  212,  504,  212,  212,  212,  503,
      212,  212,  569,  243,  212,  569,  243,  450,  212,  640,
      212,  212,  243,  243,  243,  243,  243,  243,  449,  448,

      647,  648,  649,  641,  243,  243,  642,  243,  243,  643,
      243,  243,  650,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  337,  243,  243,  654,  243,  570,  447,  243,
      651,  656,  243,  644,  243,  243,  243,  243,  243,  243,
      442,  655,  652,  653,  243,  592,  243,  243,  592,  243,
      243,  441,  212,  243,  212,  212,  212,  440,  212,  212,
      681,  657,  212,  439,  212,  212,  212,  243,  212,  212,
      243,  212,  658,  212,  212,  690,  659,  660,  212,  243,
      212,  212,  243,  212,  243,  212,  212,  243,  438,  243,
      593,  682,  243,  437,  212,  661,  212,  212,  212,  436,

      212,  212,  683,  435,  434,  212,  684,  212,  212,  212,
      433,  212,  212,  212,  432,  212,  212,  212,  431,  212,
      212,  212,  685,  212,  212,  686,  212,  430,  212,  212,
      212,  429,  212,  212,  212,  243,  212,  212,  243,  243,
      243,  243,  243,  243,  243,  428,  427,  243,  691,  692,
      243,  243,  426,  243,  243,  693,  243,  243,  425,  688,
      243,  243,  243,  687,  243,  243,  694,  243,  243,  695,
      243,  243,  689,  243,  705,  312,  243,  705,  212,  424,
      212,  212,  212,  423,  212,  212,  212,  422,  212,  212,
      212,  421,  212,  212,  212,  243,  212,  212,  243,  420,

      697,  418,  708,  212,  696,  212,  212,  417,  416,  212,
      698,  212,  212,  415,  710,  709,  212,  710,  212,  706,
      212,  212,  243,  243,  243,  243,  243,  243,  243,  243,
      715,  243,  243,  715,  243,  243,  713,  243,  243,  705,
      714,  705,  705,  722,  705,  212,  722,  212,  212,  414,
      212,  712,  212,  212,  710,  413,  212,  710,  212,  711,
      212,  212,  726,  243,  212,  726,  243,  715,  717,  243,
      715,  243,  243,  730,  243,  716,  730,  722,  722,  412,
      722,  722,  724,  411,  706,  410,  706,  212,  723,  212,
      212,  212,  409,  212,  212,  726,  408,  212,  726,  711,

      407,  728,  212,  725,  212,  212,  243,  727,  243,  243,
      730,  243,  716,  730,  243,  406,  729,  243,  731,  405,
      735,  404,  723,  723,  212,  403,  212,  212,  212,  243,
      212,  212,  243,  243,  402,  212,  243,  212,  212,  737,
      727,  243,  401,  212,  243,  212,  212,  736,  212,  243,
      212,  212,  243,  282,  243,  731,  753,  243,  212,  738,
      212,  212,  754,  741,  243,  278,  209,  243,  742,  345,
      344,  203,  199,  343,  195,  190,  342,  745,  749,  341,
      340,  339,  338,  746,  750,   20,   20,   20,   20,   20,
       20,   48,   48,   48,   48,   48,   48,   53,   53,   53,

       53,   53,   53,   60,   60,   60,   60,   60,   60,   65,
       65,   65,   65,   65,   65,   68,   68,   68,   68,   68,
       68,   94,   94,   94,   94,   94,   94,  146,  146,  146,
      146,  146,  146,  151,  151,  151,  151,  151,  151,  181,
      181,  189,  181,  181,  181,  191,  191,  191,  191,  191,
      191,  194,  184,  183,  336,  194,  194,  196,  196,  196,
      196,  196,  196,  202,  202,  335,  334,  202,  202,  208,
      208,  208,  333,  208,  208,  211,  211,  332,  211,  211,
      211,  233,  233,  331,  233,  233,  233,  243,  243,  330,
      329,  328,  243,  268,  268,  327,  268,  268,  268,  309,

      309,  326,  325,  324,  309,  314,  314,  314,  314,  314,
      314,  372,  372,  323,  322,  321,  372,  392,  392,  320,
      392,  392,  392,  319,  155,  312,  304,  303,  300,  299,
      298,  295,  294,  286,  285,  284,  283,  282,  280,  276,
      271,  270,  266,  265,  264,  261,  260,  252,  251,  250,
      249,  248,  213,  210,  209,  207,  204,  203,  199,  195,
      190,  189,  184,  183,  173,  172,  171,  168,  167,  159,
      158,  157,  156,  155,  154,  755,   19,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,

      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755
    } ;

static yyconst flex_int16_t yy_chk[2026] =
    {   0,
        0,    1,    1,    1,    1,  775,    1,    0,    1,    7,
        7,   21,    1,    1,   21,    1,    8,    8,    1,   35,
        1,  751,    1,    1,    1,    1,  114,    1,    1,  114,
        1,   35,  748,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    3,    3,    3,    3,    4,    4,    4,    4,
        4,    5,    5,    6,    6,   15,   15,   15,   15,    4,

       15,   16,   16,   16,   16,   17,   16,   30,   18,   31,
       30,   32,   42,  106,   30,   45,   46,   59,   46,   51,
       51,   51,  146,   31,   63,  146,   42,    4,   32,   63,
      106,    5,  133,    6,   17,   45,    5,   18,    6,    9,
        9,    9,    9,  105,    9,   59,    9,  109,  747,  133,
        9,    9,   68,    9,   68,   68,    9,  105,    9,  109,
        9,    9,    9,    9,  744,    9,    9,   71,    9,   71,
       71,    9,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,

       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       11,   11,   11,   11,  116,   11,   72,   11,   72,   72,
      743,   11,   11,   72,   11,  182,  182,   11,  116,   11,
      205,   11,   11,   11,   11,  205,   11,   11,   86,   11,
       86,   86,   11,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,

       12,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   14,
      302,  302,   14,   14,  120,  119,  120,   14,   56,   56,
       56,   56,   73,  132,   73,   73,   74,  141,   74,   74,
       14,   75,  136,   75,   75,  119,  740,  132,   73,   74,
       76,  141,   76,   76,  136,  145,   14,  145,   14,  104,
       14,   75,  104,   14,   14,   39,  104,  144,   39,   39,

      739,  733,   77,   39,   77,   77,   78,   76,   78,   78,
      179,   79,  179,   79,   79,   78,   77,  144,  153,   77,
       79,  153,   80,   77,   80,   80,  186,  151,   81,   78,
       81,   81,   39,   82,   39,   82,   82,   79,  314,   39,
       39,   83,  243,   83,   83,  243,  186,   80,   81,   82,
       83,   84,  732,   84,   84,   85,  151,   85,   85,  306,
       87,   82,   87,   87,   84,  723,   88,  314,   88,   88,
       89,  720,   89,   89,   90,   88,   90,   90,   91,  306,
       91,   91,  152,  152,   92,  152,   92,   92,   85,   88,
       93,  718,   93,   93,   95,   95,   95,   95,  706,   91,

       97,   97,   97,   97,  113,  113,  113,  113,  122,  122,
      122,  122,  152,   89,   90,   92,  201,   92,  131,   91,
      704,  131,  193,  193,  193,  131,  140,  140,  140,  140,
      147,  147,  147,  147,  702,   93,  198,  198,  198,  207,
      207,  700,  207,  211,  201,  211,  211,  212,  699,  212,
      212,  214,  249,  214,  214,  249,  680,  215,  214,  215,
      215,  249,  216,  679,  216,  216,  215,  217,  677,  217,
      217,  218,  675,  218,  218,  219,  217,  219,  219,  220,
      250,  220,  220,  250,  218,  207,  216,  221,  219,  221,
      221,  222,  670,  222,  222,  223,  669,  223,  223,  224,

      252,  224,  224,  252,  250,  225,  220,  225,  225,  226,
      221,  226,  226,  252,  668,  251,  222,  223,  251,  227,
      224,  227,  227,  667,  251,  666,  226,  228,  227,  228,
      228,  665,  229,  225,  229,  229,  230,  254,  230,  230,
      254,  231,  229,  231,  231,  232,  257,  232,  232,  257,
      233,  230,  233,  233,  234,  228,  234,  234,  231,  235,
      664,  235,  235,  236,  254,  236,  236,  237,  257,  237,
      237,  238,  663,  238,  238,  239,  662,  239,  239,  232,
      238,  627,  625,  235,  235,  240,  624,  240,  240,  241,
      256,  241,  241,  256,  236,  242,  239,  242,  242,  623,

      237,  244,  244,  244,  244,  246,  246,  246,  246,  255,
      248,  253,  255,  248,  253,  256,  239,  248,  258,  622,
      259,  258,  240,  259,  253,  260,  261,  262,  260,  261,
      262,  241,  255,  263,  264,  261,  263,  264,  620,  258,
      618,  265,  260,  263,  265,  617,  616,  266,  259,  264,
      266,  268,  610,  268,  268,  262,  268,  270,  265,  269,
      270,  271,  269,  272,  271,  273,  272,  274,  273,  609,
      274,  275,  272,  276,  275,  608,  276,  277,  277,  277,
      277,  266,  309,  269,  269,  309,  273,  310,  270,  338,
      310,  607,  338,  606,  271,  311,  311,  311,  311,  316,

      316,  605,  316,  604,  274,  603,  273,  317,  317,  602,
      317,  337,  337,  275,  337,  344,  344,  601,  344,  345,
      345,  600,  345,  346,  346,  348,  346,  348,  348,  316,
      349,  599,  349,  349,  338,  598,  350,  317,  350,  350,
      597,  351,  372,  351,  351,  372,  352,  348,  352,  352,
      353,  350,  353,  353,  596,  352,  354,  349,  354,  354,
      595,  344,  351,  353,  355,  345,  355,  355,  356,  346,
      356,  356,  357,  378,  357,  357,  378,  358,  354,  358,
      358,  376,  378,  355,  376,  357,  359,  358,  359,  359,
      360,  594,  360,  360,  356,  361,  376,  361,  361,  359,

      362,  360,  362,  362,  363,  547,  363,  363,  364,  361,
      364,  364,  365,  546,  365,  365,  366,  366,  366,  366,
      544,  543,  367,  364,  367,  367,  362,  541,  540,  368,
      363,  368,  368,  369,  538,  369,  369,  370,  374,  370,
      370,  374,  371,  365,  371,  371,  373,  375,  377,  373,
      375,  377,  379,  373,  537,  379,  380,  369,  381,  380,
      374,  381,  536,  535,  534,  379,  368,  367,  382,  377,
      531,  382,  383,  370,  375,  383,  384,  381,  380,  384,
      371,  530,  529,  528,  385,  383,  384,  385,  386,  387,
      388,  386,  387,  388,  382,  389,  526,  385,  389,  386,

      525,  391,  390,  387,  391,  390,  392,  394,  392,  392,
      394,  392,  393,  393,  524,  393,  388,  390,  522,  395,
      396,  389,  395,  396,  397,  398,  399,  397,  398,  399,
      521,  400,  391,  397,  400,  419,  419,  420,  419,  520,
      420,  519,  443,  443,  396,  443,  398,  445,  449,  518,
      445,  449,  394,  517,  451,  451,  395,  451,  453,  453,
      479,  453,  399,  479,  516,  455,  398,  455,  455,  400,
      456,  479,  456,  456,  515,  457,  455,  457,  457,  514,
      513,  458,  420,  458,  458,  459,  456,  459,  459,  458,
      512,  511,  445,  449,  460,  481,  460,  460,  481,  483,

      451,  457,  483,  461,  453,  461,  461,  462,  510,  462,
      462,  463,  459,  463,  463,  460,  509,  508,  507,  463,
      462,  481,  464,  506,  464,  464,  483,  505,  504,  461,
      464,  465,  492,  465,  465,  492,  466,  503,  466,  466,
      467,  486,  467,  467,  486,  468,  492,  468,  468,  469,
      450,  469,  469,  467,  486,  448,  447,  465,  466,  468,
      470,  446,  470,  470,  471,  442,  471,  471,  470,  472,
      480,  472,  472,  480,  441,  474,  469,  474,  474,  440,
      471,  473,  473,  473,  473,  475,  480,  475,  475,  476,
      439,  476,  476,  477,  438,  477,  477,  478,  482,  478,

      478,  482,  484,  437,  436,  484,  482,  485,  487,  435,
      485,  487,  472,  434,  488,  489,  487,  488,  489,  433,
      474,  490,  488,  484,  490,  477,  491,  432,  493,  491,
      475,  493,  476,  485,  431,  495,  430,  494,  495,  491,
      494,  489,  478,  490,  496,  494,  429,  496,  428,  497,
      497,  495,  497,  498,  499,  493,  498,  499,  500,  501,
      502,  500,  501,  502,  523,  545,  427,  523,  545,  548,
      426,  548,  548,  549,  425,  549,  549,  550,  424,  550,
      550,  549,  548,  423,  422,  550,  551,  496,  551,  551,
      571,  501,  552,  571,  552,  552,  421,  418,  498,  499,

      552,  500,  417,  571,  553,  502,  553,  553,  416,  523,
      545,  554,  553,  554,  554,  555,  415,  555,  555,  554,
      556,  414,  556,  556,  557,  413,  557,  557,  558,  412,
      558,  558,  559,  411,  559,  559,  560,  410,  560,  560,
      555,  409,  408,  561,  560,  561,  561,  407,  562,  572,
      562,  562,  572,  406,  405,  558,  562,  572,  563,  559,
      563,  563,  564,  561,  564,  564,  565,  404,  565,  565,
      566,  403,  566,  566,  567,  402,  567,  567,  568,  401,
      568,  568,  569,  574,  569,  569,  574,  343,  570,  564,
      570,  570,  573,  575,  576,  573,  575,  576,  342,  341,

      573,  575,  576,  565,  577,  578,  567,  577,  578,  568,
      579,  580,  577,  579,  580,  581,  582,  583,  581,  582,
      583,  584,  340,  585,  584,  583,  585,  569,  339,  586,
      578,  585,  586,  570,  587,  588,  589,  587,  588,  589,
      336,  584,  581,  582,  590,  592,  591,  590,  592,  591,
      593,  335,  628,  593,  628,  628,  629,  334,  629,  629,
      628,  587,  630,  333,  630,  630,  631,  645,  631,  631,
      645,  632,  588,  632,  632,  645,  590,  591,  633,  646,
      633,  633,  646,  634,  647,  634,  634,  647,  332,  648,
      592,  634,  648,  331,  635,  593,  635,  635,  636,  330,

      636,  636,  635,  329,  328,  637,  636,  637,  637,  638,
      327,  638,  638,  639,  326,  639,  639,  640,  325,  640,
      640,  641,  638,  641,  641,  640,  642,  324,  642,  642,
      643,  323,  643,  643,  644,  649,  644,  644,  649,  650,
      651,  652,  650,  651,  652,  322,  321,  653,  651,  652,
      653,  654,  320,  655,  654,  653,  655,  656,  319,  642,
      656,  657,  658,  641,  657,  658,  655,  659,  660,  657,
      659,  660,  643,  661,  678,  313,  661,  678,  681,  308,
      681,  681,  682,  307,  682,  682,  683,  305,  683,  683,
      684,  304,  684,  684,  685,  690,  685,  685,  690,  303,

      659,  300,  685,  686,  658,  686,  686,  299,  298,  687,
      660,  687,  687,  297,  688,  687,  688,  688,  689,  678,
      689,  689,  691,  692,  693,  691,  692,  693,  694,  695,
      697,  694,  695,  697,  696,  698,  694,  696,  698,  701,
      696,  705,  701,  707,  705,  708,  707,  708,  708,  296,
      709,  689,  709,  709,  710,  295,  710,  710,  711,  688,
      711,  711,  712,  713,  712,  712,  713,  715,  698,  714,
      715,  716,  714,  717,  716,  697,  717,  719,  722,  294,
      719,  722,  709,  293,  701,  292,  705,  724,  707,  724,
      724,  725,  291,  725,  725,  726,  290,  726,  726,  710,

      289,  714,  727,  711,  727,  727,  728,  712,  729,  728,
      730,  729,  715,  730,  731,  288,  716,  731,  717,  287,
      724,  286,  719,  722,  735,  285,  735,  735,  736,  737,
      736,  736,  737,  738,  284,  741,  738,  741,  741,  728,
      726,  742,  283,  745,  742,  745,  745,  727,  749,  746,
      749,  749,  746,  282,  750,  730,  749,  750,  753,  731,
      753,  753,  750,  735,  754,  279,  208,  754,  737,  206,
      203,  202,  200,  199,  197,  192,  188,  741,  745,  187,
      185,  184,  183,  742,  746,  756,  756,  756,  756,  756,
      756,  757,  757,  757,  757,  757,  757,  758,  758,  758,

      758,  758,  758,  759,  759,  759,  759,  759,  759,  760,
      760,  760,  760,  760,  760,  761,  761,  761,  761,  761,
      761,  762,  762,  762,  762,  762,  762,  763,  763,  763,
      763,  763,  763,  764,  764,  764,  764,  764,  764,  765,
      765,  180,  765,  765,  765,  766,  766,  766,  766,  766,
      766,  767,  178,  177,  173,  767,  767,  768,  768,  768,
      768,  768,  768,  769,  769,  172,  171,  769,  769,  770,
      770,  770,  170,  770,  770,  771,  771,  169,  771,  771,
      771,  772,  772,  168,  772,  772,  772,  773,  773,  167,
      166,  165,  773,  774,  774,  164,  774,  774,  774,  776,

      776,  163,  162,  161,  776,  777,  777,  777,  777,  777,
      777,  778,  778,  160,  159,  158,  778,  779,  779,  157,
      779,  779,  779,  156,  155,  149,  143,  142,  139,  138,
      137,  135,  134,  130,  129,  128,  127,  126,  124,  121,
      118,  117,  112,  111,  110,  108,  107,  103,  102,  101,
      100,   99,   70,   67,   65,   64,   62,   60,   58,   55,
       50,   47,   44,   43,   38,   37,   36,   34,   33,   29,
       28,   27,   26,   25,   23,   19,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,

      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[61] =
    {   0,
0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 
    1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#line 2 "levcomp.lpp"

// levcomp.lpp:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
// 
// Based loosely on NetHack's lev_comp.l

#include "AppHdr.h"
#include "mapdef.h"
#include "levcomp.tab.h"
#include <cstring>
#include <queue>

static bool alloced = false;

std::queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(100);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

static char *copy_text(bool trim_right, int strip_trailing)
{
    char *newstring = NULL;
    if ((yylval.text = newstring = strdup(yytext)))
    {
        alloced = true;
        char *s = NULL;
        if (trim_right)
        {
            s = newstring + strlen(newstring) - 1;
            while (isspace(*s) && s >= newstring)
                *s-- = 0;
        }
        if (strip_trailing)
        {
            if (!s)
                s = newstring + strlen(newstring) - 1;
            while (s >= newstring && --strip_trailing >= 0)
                *s-- = 0;
        }
    }
    return (newstring);
}

static void settext(bool trim_right = false, int strip_trailing = 0)
{
    clean();
    char *newstring = copy_text(trim_right, strip_trailing);
    yylval.text = newstring;
}









#line 1253 "levcomp.lex.cc"

#define INITIAL 0
#define MAPDEF 1
#define LUA 2
#define LUA_ONELINER 3
#define ARGUMENT 4
#define MNAME 5
#define KEYWORDS 6
#define ITEM_LIST 7
#define TOEOL 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 89 "levcomp.lpp"


#line 1420 "levcomp.lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 756 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 755 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 91 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 93 "levcomp.lpp"
{
                        settext(true);
                        return MAP_LINE;
                    }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 98 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 99 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 100 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 102 "levcomp.lpp"
;
	YY_BREAK
case 7:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 104 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 8:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 105 "levcomp.lpp"
{
                            settext(true, 2);
                            BEGIN(INITIAL);
                            return LUA_LINE;
                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 110 "levcomp.lpp"
{
                            settext();
                            return LUA_LINE;
                        }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 114 "levcomp.lpp"
;
	YY_BREAK
case 11:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 116 "levcomp.lpp"
{
                            settext();
                            return LUA_LINE;
                        }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 120 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 122 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 127 "levcomp.lpp"
;
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 128 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 130 "levcomp.lpp"
{ 
                        settext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 135 "levcomp.lpp"
{
                        settext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 140 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 141 "levcomp.lpp"
;
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 142 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 144 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 146 "levcomp.lpp"
{ 
                        settext();
                        return MONSTER_NAME; 
                    }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 151 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 152 "levcomp.lpp"
;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 154 "levcomp.lpp"
{ 
                        BEGIN(INITIAL);
                        settext();
                        return STRING; 
                    }
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 160 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 27:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 162 "levcomp.lpp"
{
                        settext(true, 1);
                        return STRING;
                    }
	YY_BREAK
case 28:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 167 "levcomp.lpp"
{
                        BEGIN(INITIAL);
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 173 "levcomp.lpp"
;
	YY_BREAK
case 30:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 175 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 177 "levcomp.lpp"
{ BEGIN(LUA_ONELINER); return MAIN; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 179 "levcomp.lpp"
{ BEGIN(LUA); return PRELUDE; }      
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 180 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 181 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 182 "levcomp.lpp"
{ BEGIN(LUA); return VALIDATE; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 183 "levcomp.lpp"
{ BEGIN(LUA); return VETO; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 186 "levcomp.lpp"
{ BEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 187 "levcomp.lpp"
{ BEGIN(ARGUMENT); return DEFAULT_DEPTH; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 188 "levcomp.lpp"
{ BEGIN(ARGUMENT); return DEPTH; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 189 "levcomp.lpp"
{ BEGIN(ARGUMENT); return ORIENT; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 190 "levcomp.lpp"
{ BEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 191 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 192 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 193 "levcomp.lpp"
{ BEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 194 "levcomp.lpp"
{ BEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 195 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return SUBST; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 196 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return NSUBST; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 197 "levcomp.lpp"
{ BEGIN(MNAME); return MONS; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 198 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 199 "levcomp.lpp"
{ BEGIN(TOEOL); return MARKER; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 200 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return SHUFFLE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 202 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KFEAT; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 203 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KITEM; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 204 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KMONS; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 206 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 208 "levcomp.lpp"
{
                        clean();
                        yylval.i = atoi(yytext);
                        return INTEGER;
                    }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 214 "levcomp.lpp"
;
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 215 "levcomp.lpp"
;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 216 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 218 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 1877 "levcomp.lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MAPDEF):
case YY_STATE_EOF(LUA):
case YY_STATE_EOF(LUA_ONELINER):
case YY_STATE_EOF(ARGUMENT):
case YY_STATE_EOF(MNAME):
case YY_STATE_EOF(KEYWORDS):
case YY_STATE_EOF(ITEM_LIST):
case YY_STATE_EOF(TOEOL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 756 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 756 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 755);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 218 "levcomp.lpp"



int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}

