#line 2 "levcomp.lex.cc"

#line 4 "levcomp.lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 34
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 * Given that the standard has decreed that size_t exists since 1989,
 * I guess we can afford to depend on it. Manoj.
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 73
#define YY_END_OF_BUFFER 74
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[964] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   74,   72,   69,   70,
       71,   67,   68,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   69,
       34,   36,   72,   72,   72,   72,   72,   72,   73,    6,
       73,   73,    4,    2,    3,   73,    2,    2,    2,    2,
        9,   10,   73,    9,    9,   73,   12,   73,   32,   69,
       33,   71,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   69,   32,   32,   32,   32,   32,   32,   32,   32,

       72,   28,   23,   28,   27,   68,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   28,   34,   36,   72,   72,   72,   72,
       72,   72,   15,   16,   71,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   72,   13,   15,   13,   13,   13,   13,   13,
       73,   21,   22,   73,   20,   73,   69,   70,   68,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   69,   34,   36,    0,    0,    0,    0,   34,    0,

        0,    0,    0,    0,    0,    0,   39,    6,    5,    0,
        0,    2,    3,    2,    0,    2,    2,    2,    2,    9,
        9,   10,    9,    9,    9,    0,   11,    0,   12,   31,
        0,   31,   69,   33,    0,    0,   33,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,    0,
       30,   31,   69,   31,   34,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   26,    0,   26,   28,   23,   28,
        0,   23,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,    0,   25,    0,   26,   28,   26,
       34,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       15,   16,    0,    0,    0,   16,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,    0,
       14,   13,   15,   13,   13,   13,   13,   13,   13,   13,
       19,    0,   19,   21,   22,    0,    0,    0,    0,   18,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    2,    9,    9,    9,    7,    0,    0,   29,
        0,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   34,   31,   31,   31,
       31,   31,   31,    0,   24,    0,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   34,   34,   26,   26,   26,   26,   26,   26,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
        0,   17,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   35,
        0,    0,    0,    0,    0,    2,    9,    8,    0,    9,
        7,    0,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,    0,    0,   31,
       31,   31,   31,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,    0,    0,
       26,   26,   26,   26,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,    0,    0,    0,    0,    0,    0,   60,    0,
        0,    0,    0,    0,    0,   59,   42,    0,    0,    0,
        0,    0,    0,   51,    0,    0,    0,   38,    0,    0,
        0,    0,    2,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,    0,   31,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,    0,   26,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,    0,    0,    0,   44,
       50,    0,   63,   64,   66,   65,    0,    0,    0,    0,
       46,    0,    0,   54,    0,    0,    0,    0,    0,   41,
        1,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   53,   48,   56,    0,   52,   61,
       55,   45,    0,    0,   49,    0,    0,    0,    0,    1,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       13,   13,   13,   13,   13,   13,   13,    0,   58,   62,

       47,    0,    0,    0,    0,   31,   31,   31,   31,   31,
        0,   31,   31,   26,   26,   26,   26,   26,    0,   26,
       26,   13,   13,   13,   57,    0,   37,    0,    0,   31,
       31,   31,    0,   31,   26,   26,   26,    0,   26,   13,
        0,   40,   31,   31,   26,   26,   13,    0,   31,   26,
       13,    0,   31,   26,   13,    0,   31,   26,   13,   43,
       31,   26,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    7,    8,    1,    1,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,    1,    1,
        1,    1,    1,    1,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       20,   27,   28,   29,   30,   20,   31,   20,   20,   20,
        1,   32,    1,    1,   20,    1,   33,   20,   20,   34,

       35,   36,   20,   37,   38,   20,   20,   39,   20,   20,
       40,   41,   20,   42,   43,   44,   45,   46,   20,   20,
       20,   20,   47,    1,   48,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[49] =
    {   0,
        1,    2,    3,    4,    1,    1,    5,    6,    6,    1,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    1,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    1,    1
    } ;

static yyconst flex_int16_t yy_base[981] =
    {   0,
        0,   47,   55,   60,   52,   64,   47,   68,  112,  159,
      206,  253,  300,  347,   74,  169, 1868, 3229,   78, 3229,
     1859, 3229, 1852, 1841,   64, 1837, 1826, 1811,   68, 1808,
       74,   81, 1796, 1800, 1783,   78, 1796, 1791, 1756,  393,
        0, 3229,   86, 1745, 1747,   31,   69, 1739, 3229, 3229,
     1782,  163, 3229,    0, 3229, 1781,  175,    0, 1757,   58,
     1732, 3229, 1776,   62, 1725,  159, 3229, 1769,  263,  357,
     3229,  364,  369,  373,  404,  379,  410,  419,  414,  433,
      443,  453,  458,  466,  472,  477,  487,  495,  506,  510,
      518,  526,  530,  535,  541,  552,  559,  566,  570,  574,

      255,  578, 3229,  583, 3229,  590,  259,  448,  602,  591,
      606,  614,  623,  638,  639,  353,  640,  622,  646,  654,
      664,  678,  655,  689,  693,  656,  697,  672,  701,  707,
      709,  713,  732, 3229,  744,    0, 1761, 1740,  163, 1733,
     1720, 1711,  167, 1720,  159,  164, 1707, 1710, 1701,  167,
     1710, 1699,  191, 1673,  749,  178, 1660, 1655,  239,  236,
      726,  763, 3229,  767, 3229,  775,  268, 3229, 1684, 1663,
     1668, 1652, 1646,  255, 1655, 1650, 1634,  261, 1631, 1622,
     1619, 1602, 1593, 1598, 1604, 1596, 1578, 1594, 1588,  255,
     1564,    0,    0, 3229, 1550, 1552,  246, 1540,    0,  257,

     1553, 1543, 1554,  255, 1525, 1519, 3229, 3229, 3229, 1551,
      285,    0, 3229,    0, 1550,  360, 1533, 1521,  336, 1492,
     1487, 3229,  156, 1482,  424,  388, 3229, 1523, 3229,  757,
      780,  788,  798, 3229,  806,  811, 3229,  817,  823,  829,
      837,  792,  842,  858,  866,  846,  875,  880,  887,  891,
      899,  904,  916,  922,  936,  940,  948,  954,  959,  971,
     3229,  980,    0,  985,  990,  994, 1002, 1006, 1016, 1031,
     1039, 1045, 1051, 1055,  911,  923, 1062, 1070, 3229, 1076,
     1086, 3229, 1000, 1091, 1095, 1096, 1105, 1109, 1022, 1107,
     1114, 1119, 1127, 1131, 1133, 1143, 1148, 1150, 1159, 1166,

     1171, 1172, 1183, 1187, 1191, 3229, 1208, 1185,    0, 1220,
     1224, 1230, 1234, 1236, 1238, 1240, 1242, 1244, 1248, 1252,
     1284, 3229, 1291, 1295, 1273, 3229,    0, 1515, 1499, 1506,
     1489, 1476,  406, 1482, 1480, 1464,  419, 1466, 1452, 1448,
     1446, 1429, 1436, 1440, 1437, 1419, 1431, 1424,  388, 1299,
     3229, 1404,    0,  457, 1406, 1401, 1419,  333, 1383, 1374,
     1277, 1305, 1309, 1315, 3229, 1322, 1326, 1330, 1340, 3229,
     1346, 1406, 1386, 1383, 1378, 1389, 1378, 1372, 1380, 1374,
     1343, 1337, 1349, 1338, 1325, 1337, 1334, 1325, 1326, 1317,
     1320, 1305, 1294, 1304, 1302, 1275, 1353,  852, 1267, 1265,

     1252, 1241, 1248, 1361, 1365, 1371, 3229, 1375, 1379, 3229,
     1383, 1388, 1392, 1396, 1400, 1410, 1421, 1429, 1433, 1443,
     1452, 1458, 1462, 1466, 1472, 1481, 1487, 1501, 1505, 1510,
     1518, 1523, 1534, 1539, 1544, 1556, 1565, 1570, 1575, 1579,
     1588, 1594, 1599, 1625, 3229, 1631, 1580, 1614, 1476, 1608,
     1639, 1527, 1619, 1643, 1645, 1650, 1656, 1657, 1662, 1664,
     1671, 1679, 1685, 1693, 1697, 1699, 1705, 1707, 1711, 1717,
     1718, 1750, 1742, 1756, 1736, 1760, 1761, 1762, 1769, 1256,
     1240, 1238, 1230, 1241, 1230, 1225, 1219, 1205, 1190, 1192,
     1203, 1187, 1179, 1190, 1190, 1184, 1184, 1165, 1167, 1153,

     1144, 1150, 1149, 1127, 1773,  892, 1117, 1128, 1109, 1102,
     1793, 3229, 1800, 1123, 1113, 1095, 1099, 1087, 1078, 1094,
     1070, 1069, 1065, 1057, 1059, 1055, 1059, 1058, 1024, 1022,
     1030, 1027, 1015, 1001, 1015, 1005,  994,  970, 1808, 3229,
     1056,  967,  968,  967, 1722,  989, 1812, 3229, 1816, 1824,
     3229, 1828, 1832, 1837, 1841, 1849, 1854, 1861, 1873, 1885,
     1890, 1894, 1899, 1904, 1914, 1928, 1935, 1945, 1939, 1949,
     1953, 1970, 1974, 1978, 1987, 1991, 1995, 2009, 2013, 2020,
     2024, 2029, 2033, 2034, 1842, 2041, 2052, 2053, 2045, 2073,
     2057, 2074, 2086, 2085, 2091, 2096, 2090, 2110, 2097, 2114,

     2119, 2128, 2134, 2130, 2135, 2147, 2151, 2142, 2166, 2152,
     2153, 2159, 2173, 2184,  976,  975,  953,  961,  949,  942,
      957,  937,  942,  941,  929,  934,  932,  936,  927,  904,
      906,  914,  904,  895,  881,  895,  870,  862,  838,  831,
      838, 1833,  838,  850,  837,  848,  846,  839, 3229,  833,
      827,  826,  825,  804,  802, 3229, 3229,  794,  788,  796,
      780,  782,  788, 3229,  759,  764,  747, 3229,  749,  742,
     1895,  727,  747, 2190, 2204, 2208, 2219, 2223, 2237, 2241,
     2252, 2256, 2266, 2270, 2277, 2281, 2285, 2289, 2295, 2299,
     2310, 2314, 2321, 2328, 2332, 2343, 2347, 2352, 2357, 2361,

     2369, 2376, 2381, 2392, 2188, 2232, 2394, 2401, 2385, 2212,
     2405, 2417, 2429, 2430, 2416, 2436, 2290, 2440, 2441, 2445,
     2449, 2450, 2462, 2455, 2451, 2464, 2474, 2483, 2484, 2493,
     2497, 2499, 2503,  735,  742,  729,  745,  730,  725,  722,
      717,  716,  714,  695,  693,  690,  687,  703,  682,  683,
      691,  660,  662,  645,  641,  640,  658,  643,  642, 3229,
     3229,  611, 3229, 3229, 3229, 3229,  622,  621,  619,  616,
     3229,  598,  603, 3229,  604,  597,  556,  559,  546, 3229,
      572, 2507, 2516, 2532, 2536, 2547, 2551, 2555, 2561, 2565,
     2569, 2576, 2580, 2590, 2594, 2601, 2605, 2609, 2613, 2626,

     2638, 2630, 2644, 2650, 2655, 2659, 2661, 2663, 2556, 2570,
     2673, 2618, 2675, 2679, 2681, 2687, 2694, 2698, 2704, 2683,
     2715, 2716, 2720, 2722, 2736, 2737, 2738, 2744, 2748,  559,
      555,  550,  534,  545,  541,  539,  538,  525,  529,  531,
      521,  489,  491,  481, 3229, 3229, 3229,  502, 3229, 3229,
     3229, 3229,  508,  506, 3229,  497,  495, 1905,  466,  491,
     2753, 2757, 2761, 2770, 2782, 2792, 2796, 2801, 2805, 2815,
     2825, 2830, 2834, 2839, 2844, 2821, 2849, 2850, 2856, 2858,
     2862, 2863, 2867, 2875, 2882, 2868, 2891, 2900, 2901, 2907,
      473,  478,  477,  457,  453, 1918,  419,  423, 3229, 3229,

     3229,  388, 1923,  366, 1954, 2911, 2915, 2920, 2924, 2932,
     2936, 2949, 2953, 2957, 2944, 2958, 2967, 2969, 2973, 2975,
     2977,  392,  366, 1985, 3229,  352, 3229, 2002,  325, 2982,
     2993, 2989, 3006, 3011, 3024, 3025, 3029, 3030, 3031,  319,
      309, 3229, 3035, 3040, 3047, 3049,  256,  249, 3064, 3068,
      241,  219, 3078, 3069,  154,  177, 3082, 3088,   88, 3229,
     3100, 3089, 3229, 3132, 3138, 3144, 3150, 3156, 3162, 3168,
     3174, 3180, 3186, 3192, 3198, 3204, 3210, 3216,   63, 3222
    } ;

static yyconst flex_int16_t yy_def[981] =
    {   0,
      963,    1,  964,  965,  966,  966,  967,  967,  963,    9,
      963,   11,  963,   13,  968,  968,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      969,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  970,  963,  971,  963,  963,  972,  971,  971,  971,
      973,  963,  963,  973,  973,  974,  963,  963,  975,  963,
      963,  963,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,   40,  976,  975,  975,  975,  975,  975,  975,  975,

      977,  963,  963,  963,  963,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  977,   40,  978,  977,  977,  977,  977,  977,
      977,  977,  963,  963,  963,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  963,  979,   40,  979,  979,  979,  979,  979,
      980,  963,  963,  963,  963,  980,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,   40,  969,  963,  963,  963,  963,  963,  969,  963,

      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  971,  963,  971,  963,  971,  971,  971,  971,  973,
      973,  963,  973,  973,  973,  974,  963,  963,  963,  975,
      975,  975,  963,  963,  963,  963,  963,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      963,  975,   92,  976,  976,  976,  975,  975,  975,  975,
      975,  975,  975,  975,  977,  977,  977,  963,  963,  963,
      963,  963,  977,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  977,  977,  977,  977,

      977,  977,  977,  977,  977,  963,  963,  977,  124,  978,
      978,  978,  977,  977,  977,  977,  977,  977,  977,  977,
      963,  963,  963,  963,  963,  963,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  963,
      963,  979,  155,  979,  979,  979,  979,  979,  979,  979,
      980,  980,  980,  963,  963,  963,  963,  963,  980,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,

      963,  963,  971,  973,  973,  973,  963,  963,  975,  963,
      963,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  976,  975,  975,  975,
      975,  975,  975,  977,  963,  963,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  977,  977,  977,  977,
      977,  978,  969,  977,  977,  977,  977,  977,  977,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,

      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      980,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  971,  973,  963,  963,  973,
      963,  963,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  977,  977,  977,  977,

      977,  977,  977,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  971,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,

      975,  975,  975,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  977,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      971,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,

      975,  975,  975,  975,  975,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  977,  977,  977,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  971,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  977,  977,  977,  977,
      979,  979,  979,  979,  979,  979,  979,  963,  963,  963,

      963,  963,  963,  963,  963,  975,  975,  975,  975,  975,
      975,  975,  975,  977,  977,  977,  977,  977,  977,  977,
      977,  979,  979,  979,  963,  963,  963,  963,  963,  975,
      975,  975,  975,  975,  977,  977,  977,  977,  977,  979,
      963,  963,  975,  975,  977,  977,  979,  963,  975,  977,
      979,  963,  975,  977,  979,  963,  975,  977,  979,  963,
      975,  977,    0,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963
    } ;

static yyconst flex_int16_t yy_nxt[3278] =
    {   0,
       18,   19,   20,   21,   19,   18,   22,   18,   23,   18,
       18,   24,   25,   26,   18,   27,   18,   18,   28,   18,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   18,
       38,   18,   18,   39,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   40,   67,
       68,   40,   41,  203,   62,   63,   42,   50,   51,   52,
       53,   49,   55,   56,   57,   58,   62,   63,  327,   43,
       67,   68,  218,  204,   59,  162,  163,  164,  162,  167,
      165,  171,  167,  176,  180,   44,  177,   45,  172,   46,
      178,  182,   47,   48,   64,  187,  200,  960,  181,   65,

      219,  205,   60,  206,  223,  166,   64,  188,  183,  224,
      181,   65,   69,   70,   71,   72,   70,   69,   73,   69,
       74,   69,   69,   75,   76,   77,   69,   78,   69,   69,
       79,   69,   80,   81,   82,   83,   84,   85,   86,   87,
       88,   69,   89,   90,   69,   91,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       92,  227,  228,   92,   93,  208,  210,  211,   94,  339,
      162,  163,  164,  162,  341,  165,  209,  213,  215,  216,
      330,   95,  335,  340,  346,  336,  960,  331,  354,  337,
      959,  342,  350,  351,  350,  350,  347,   96,  223,   97,

      166,   98,  340,  224,   99,  100,  101,  102,  103,  104,
      102,  101,  105,  101,  106,  101,  101,  107,  108,  109,
      101,  110,  101,  101,  111,  101,  112,  113,  114,  115,
      116,  117,  118,  119,  120,  101,  121,  122,  101,  123,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  124,  956,  276,  124,  125,  276,
      276,  357,  126,  276,  231,  376,  231,  231,  359,  167,
      360,  381,  167,  394,  284,  127,  395,  203,  205,  377,
      206,  358,  397,  384,  955,  382,  277,  208,  210,  211,
      277,  128,  952,  129,  232,  130,  951,  204,  131,  132,

       18,  133,  134,  135,  133,   18,   22,  136,  137,   18,
      136,  138,  139,  140,  136,  141,  136,  136,  142,  136,
      143,  144,  145,  146,  147,  148,  149,  150,  151,  136,
      152,  153,  136,  154,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,   18,   18,  155,  948,
      218,  155,   41,  947,  276,  357,   42,  276,  233,  234,
      235,  233,  213,  215,  216,  235,  237,  235,  235,  156,
      231,  942,  231,  231,  231,  358,  231,  231,  219,  298,
      231,  238,  231,  231,  277,  157,  941,  158,  236,  159,
      227,  228,  160,   48,  192,  236,  240,  192,  193,  940,

      232,  925,  194,  241,  232,  231,  502,  231,  231,  503,
      232,  231,  927,  231,  231,  231,  484,  231,  231,  239,
      231,  926,  231,  231,  242,  406,  407,  408,  406,  489,
      485,  195,  925,  196,  231,  232,  231,  231,  197,  198,
      243,  232,  244,  490,  231,  232,  231,  231,  245,  276,
      232,  246,  276,  924,  231,  247,  231,  231,  248,  231,
      923,  231,  231,  249,  232,  285,  901,  231,  251,  231,
      231,  404,  286,  231,  232,  231,  231,  250,  231,  277,
      231,  231,  505,  492,  232,  252,  900,  899,  231,  232,
      231,  231,  253,  254,  922,  860,  231,  232,  231,  231,

      905,  255,  902,  232,  256,  258,  901,  231,  232,  231,
      231,  260,  261,  260,  260,  900,  257,  899,  232,  231,
      259,  231,  231,  898,  897,  896,  232,  263,  234,  235,
      263,  265,  895,  265,  265,  894,  231,  232,  231,  231,
      855,  232,  231,  893,  231,  231,  892,  852,  851,  232,
      850,  267,  262,  231,  849,  231,  231,  236,  891,  847,
      231,  266,  231,  231,  846,  250,  232,  231,  845,  231,
      231,  231,  232,  231,  231,  231,  860,  231,  231,  278,
      279,  280,  278,  232,  280,  282,  280,  280,  270,  859,
      232,  276,  276,  858,  276,  276,  268,  232,  283,  857,

      269,  232,  272,  276,  273,  232,  276,  276,  271,  281,
      276,  856,  288,  855,  281,  276,  287,  854,  276,  853,
      274,  277,  277,  276,  276,  852,  276,  276,  851,  290,
      850,  849,  291,  277,  289,  848,  292,  277,  293,  276,
      276,  276,  276,  276,  276,  277,  300,  276,  294,  296,
      276,  847,  846,  277,  277,  276,  276,  276,  276,  276,
      276,  299,  295,  301,  303,  276,  297,  845,  276,  277,
      277,  277,  844,  276,  843,  302,  276,  277,  304,  305,
      306,  307,  305,  842,  841,  277,  277,  277,  840,  308,
      309,  279,  280,  309,  311,  277,  199,  311,  276,  199,

      774,  276,  276,  277,  839,  276,  838,  313,  276,  277,
      276,  276,  771,  276,  276,  837,  314,  276,  836,  835,
      281,  295,  834,  766,  312,  765,  764,  362,  277,  316,
      362,  763,  277,  321,  322,  323,  321,  833,  277,  761,
      277,  318,  315,  319,  277,  325,  326,  325,  325,  317,
      353,  322,  323,  353,  760,  832,  831,  363,  231,  320,
      231,  231,  830,  324,  364,  365,  366,  364,  368,  365,
      368,  368,  781,  780,  779,  324,  369,  370,  371,  369,
      324,  231,  778,  231,  231,  777,  776,  775,  232,  409,
      410,  409,  409,  231,  367,  231,  231,  774,  367,  233,

      234,  235,  233,  773,  772,  771,  363,  235,  234,  235,
      235,  232,  411,  261,  411,  411,  770,  415,  231,  232,
      231,  231,  769,  232,  231,  238,  231,  231,  768,  236,
      231,  767,  231,  231,  766,  765,  764,  236,  231,  413,
      231,  231,  763,  231,  412,  231,  231,  231,  232,  231,
      231,  762,  416,  541,  232,  761,  541,  760,  414,  231,
      232,  231,  231,  759,  758,  757,  417,  231,  232,  231,
      231,  756,  418,  232,  420,  755,  231,  232,  231,  231,
      419,  231,  754,  231,  231,  421,  753,  752,  231,  232,
      231,  231,  231,  541,  231,  231,  541,  232,  542,  422,

      231,  423,  231,  231,  664,  231,  232,  231,  231,  751,
      750,  232,  276,  424,  425,  276,  749,  231,  232,  231,
      231,  426,  232,  231,  276,  231,  231,  276,  748,  747,
      232,  746,  429,  427,  428,  232,  657,  231,  542,  231,
      231,  231,  277,  231,  231,  656,  745,  232,  430,  231,
      744,  231,  231,  232,  277,  231,  743,  231,  231,  432,
      231,  742,  231,  231,  741,  740,  649,  232,  739,  431,
      433,  232,  260,  261,  260,  260,  738,  434,  737,  232,
      435,  231,  736,  231,  231,  232,  265,  735,  265,  265,
      232,  265,  734,  265,  265,  437,  410,  437,  437,  673,

      670,  276,  232,  231,  276,  231,  231,  231,  283,  231,
      231,  232,  669,  668,  667,  436,  266,  231,  666,  231,
      231,  266,  665,  276,  664,  266,  276,  438,  424,  663,
      662,  277,  231,  232,  231,  231,  453,  232,  439,  661,
      231,  441,  231,  231,  660,  659,  231,  232,  231,  231,
      440,  658,  231,  277,  231,  231,  231,  541,  231,  231,
      541,  270,  232,  444,  445,  446,  444,  657,  656,  655,
      232,  278,  279,  280,  278,  654,  232,  280,  279,  280,
      280,  271,  232,  442,  653,  652,  232,  307,  306,  307,
      307,  651,  276,  277,  443,  276,  276,  276,  650,  276,

      276,  281,  542,  649,  648,  448,  276,  281,  276,  276,
      276,  276,  447,  276,  647,  276,  646,  449,  276,  451,
      276,  454,  277,  276,  645,  644,  277,  277,  276,  456,
      450,  276,  276,  452,  276,  276,  277,  276,  277,  643,
      277,  642,  455,  457,  276,  277,  641,  276,  458,  276,
      277,  276,  276,  505,  276,  640,  460,  459,  277,  639,
      276,  638,  277,  276,  277,  461,  637,  276,  463,  464,
      276,  636,  276,  276,  277,  276,  276,  462,  465,  277,
      635,  277,  634,  467,  276,  633,  276,  276,  276,  276,
      277,  276,  305,  306,  307,  305,  632,  277,  631,  468,

      466,  630,  277,  277,  629,  469,  628,  627,  470,  307,
      306,  307,  307,  626,  277,  625,  277,  624,  277,  623,
      471,  311,  277,  199,  311,  311,  199,  199,  311,  622,
      199,  472,  445,  473,  472,  276,  199,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  621,  276,  276,
      477,  312,  276,  276,  620,  312,  276,  619,  618,  474,
      459,  312,  617,  616,  316,  277,  615,  277,  475,  277,
      546,  277,  476,  277,  325,  277,  325,  325,  362,  277,
      545,  362,  478,  277,  317,  321,  322,  323,  321,  544,
      397,  479,  325,  322,  325,  325,  350,  351,  350,  350,

      350,  351,  350,  350,  324,  543,  362,  538,  363,  362,
      511,  512,  513,  511,  537,  324,  364,  365,  366,  364,
      536,  535,  324,  368,  365,  368,  368,  371,  370,  371,
      371,  368,  534,  368,  368,  533,  363,  532,  531,  530,
      363,  369,  370,  371,  369,  529,  367,  371,  370,  371,
      371,  528,  527,  367,  539,  540,  539,  539,  526,  525,
      524,  367,  547,  548,  549,  547,  550,  551,  552,  550,
      523,  363,  406,  407,  408,  406,  408,  407,  408,  408,
      409,  410,  409,  409,  411,  261,  411,  411,  522,  231,
      521,  231,  231,  231,  520,  231,  231,  231,  553,  231,

      231,  231,  519,  231,  231,  518,  517,  516,  404,  515,
      232,  231,  404,  231,  231,  554,  514,  510,  221,  232,
      555,  509,  231,  232,  231,  231,  557,  232,  556,  508,
      231,  232,  231,  231,  231,  507,  231,  231,  506,  504,
      501,  232,  500,  560,  231,  558,  231,  231,  499,  498,
      497,  559,  232,  231,  496,  231,  231,  561,  495,  231,
      232,  231,  231,  231,  232,  231,  231,  231,  494,  231,
      231,  493,  564,  231,  232,  231,  231,  276,  492,  562,
      276,  563,  231,  232,  231,  231,  565,  491,  231,  232,
      231,  231,  488,  232,  487,  567,  486,  232,  568,  566,

      586,  483,  231,  232,  231,  231,  231,  277,  231,  231,
      482,  231,  232,  231,  231,  569,  481,  570,  232,  231,
      480,  231,  231,  328,  231,  227,  231,  231,  276,  405,
      571,  276,  232,  572,  404,  231,  232,  231,  231,  221,
      231,  232,  231,  231,  217,  231,  403,  231,  231,  232,
      573,  589,  213,  208,  232,  575,  576,  231,  277,  231,
      231,  574,  402,  401,  400,  232,  437,  410,  437,  437,
      232,  578,  540,  578,  578,  232,  579,  399,  231,  579,
      231,  276,  231,  231,  276,  398,  207,  232,  577,  231,
      584,  231,  231,  202,  201,  231,  266,  231,  231,  396,

      231,  232,  231,  231,  393,  392,  232,  391,  390,  276,
      232,  277,  276,  438,  389,  276,  388,  581,  276,  232,
      276,  580,  387,  276,  386,  232,  444,  445,  446,  444,
      232,  582,  446,  445,  446,  446,  587,  585,  583,  277,
      276,  590,  385,  276,  276,  277,  276,  276,  384,  276,
      277,  276,  383,  591,  276,  588,  277,  276,  276,  592,
      276,  276,  380,  276,  379,  276,  276,  595,  276,  378,
      277,  375,  276,  374,  277,  276,  277,  593,  373,  594,
      276,  277,  596,  276,  372,  598,  276,  277,  277,  276,
      599,  597,  169,  277,  276,  277,  356,  276,  276,  600,

      276,  276,  277,  276,  355,  601,  276,  352,  276,  276,
      277,  276,  276,  349,  603,  276,  277,  602,  276,  276,
      348,  276,  276,  671,  277,  345,  671,  606,  277,  607,
      277,  344,  604,  343,  605,  338,  277,  610,  277,  334,
      610,  333,  277,  473,  445,  473,  473,  332,  277,  277,
      608,  472,  445,  473,  472,  329,  199,  609,  540,  539,
      609,  276,  276,  276,  276,  276,  276,  277,  672,  328,
      276,  229,  225,  276,  539,  540,  539,  539,  222,  221,
      217,  312,  611,  213,  208,  207,  474,  277,  202,  201,
      191,  277,  277,  277,  511,  512,  513,  511,  612,  613,

      277,  513,  512,  513,  513,  190,  189,  186,  614,  539,
      540,  539,  539,  547,  548,  549,  547,  549,  548,  549,
      549,  185,  184,  179,  363,  550,  551,  552,  550,  552,
      551,  552,  552,  231,  671,  231,  231,  671,  231,  175,
      231,  231,  231,  276,  231,  231,  276,  174,  674,  675,
      231,  173,  231,  231,  705,  231,  170,  231,  231,  221,
      169,  168,  231,  232,  231,  231,  677,  963,  232,  963,
      676,  221,  232,  277,  231,  963,  231,  231,  963,  672,
      232,  678,  680,  963,  963,  232,  231,  679,  231,  231,
      963,  231,  232,  231,  231,  231,  671,  231,  231,  671,

      231,  963,  231,  231,  232,  231,  903,  231,  231,  903,
      963,  963,  682,  681,  683,  231,  232,  231,  231,  903,
      685,  232,  903,  963,  903,  232,  684,  903,  686,  231,
      232,  231,  231,  963,  963,  232,  231,  687,  231,  231,
      231,  672,  231,  231,  688,  232,  231,  963,  231,  231,
      231,  904,  231,  231,  231,  928,  231,  231,  928,  232,
      963,  963,  690,  691,  904,  692,  232,  963,  963,  904,
      232,  231,  689,  231,  231,  231,  232,  231,  231,  231,
      232,  231,  231,  963,  232,  693,  928,  695,  231,  928,
      231,  231,  231,  963,  231,  231,  231,  963,  231,  231,

      929,  232,  694,  928,  696,  232,  928,  963,  963,  232,
      578,  540,  578,  578,  579,  697,  231,  579,  232,  963,
      963,  231,  232,  231,  231,  231,  232,  231,  231,  963,
      231,  929,  231,  231,  702,  276,  231,  702,  276,  698,
      232,  963,  276,  963,  232,  276,  276,  963,  929,  276,
      704,  232,  963,  276,  276,  232,  276,  276,  276,  580,
      232,  276,  701,  963,  232,  277,  699,  963,  700,  707,
      706,  709,  277,  963,  276,  276,  277,  276,  276,  703,
      708,  963,  710,  277,  277,  711,  276,  276,  277,  276,
      276,  276,  276,  963,  276,  276,  712,  276,  276,  717,

      276,  276,  963,  963,  277,  277,  713,  715,  963,  963,
      716,  276,  714,  963,  276,  276,  277,  277,  276,  718,
      276,  277,  277,  276,  719,  963,  963,  277,  277,  276,
      963,  276,  276,  721,  276,  276,  276,  720,  276,  276,
      722,  277,  963,  276,  725,  277,  276,  963,  276,  723,
      277,  276,  276,  610,  276,  276,  610,  276,  724,  277,
      276,  277,  963,  276,  726,  277,  277,  609,  540,  539,
      609,  963,  963,  277,  276,  727,  963,  276,  277,  963,
      963,  963,  277,  277,  277,  732,  728,  963,  732,  276,
      277,  231,  276,  231,  231,  963,  963,  277,  611,  729,

      963,  963,  807,  730,  277,  231,  731,  231,  231,  231,
      963,  231,  231,  276,  963,  277,  276,  782,  783,  277,
      231,  232,  231,  231,  231,  963,  231,  231,  785,  963,
      733,  963,  786,  276,  784,  232,  276,  963,  231,  232,
      231,  231,  231,  277,  231,  231,  963,  963,  963,  787,
      232,  963,  963,  231,  232,  231,  231,  231,  808,  231,
      231,  788,  963,  277,  963,  789,  963,  231,  232,  231,
      231,  231,  232,  231,  231,  790,  963,  963,  231,  791,
      231,  231,  231,  232,  231,  231,  231,  232,  231,  231,
      231,  276,  231,  231,  276,  963,  231,  232,  231,  231,

      231,  232,  231,  231,  792,  963,  963,  793,  232,  963,
      963,  231,  232,  231,  231,  231,  232,  231,  231,  796,
      232,  277,  231,  794,  231,  231,  232,  795,  963,  231,
      232,  231,  231,  231,  963,  231,  231,  799,  797,  963,
      963,  232,  798,  963,  231,  232,  231,  231,  231,  963,
      231,  231,  232,  231,  963,  231,  231,  963,  231,  232,
      231,  231,  231,  232,  231,  231,  963,  963,  963,  801,
      231,  800,  231,  231,  232,  963,  963,  702,  232,  231,
      702,  963,  231,  232,  231,  231,  276,  963,  232,  276,
      802,  963,  232,  276,  803,  276,  276,  811,  276,  963,

      232,  804,  276,  809,  963,  276,  276,  232,  963,  276,
      810,  963,  232,  963,  812,  963,  277,  276,  276,  806,
      276,  276,  703,  277,  963,  277,  813,  805,  963,  963,
      276,  276,  277,  276,  276,  963,  277,  276,  814,  815,
      276,  276,  276,  816,  276,  276,  276,  277,  277,  276,
      276,  276,  276,  276,  276,  276,  276,  963,  820,  276,
      277,  277,  817,  276,  823,  276,  276,  277,  276,  818,
      963,  277,  277,  819,  821,  276,  277,  963,  276,  963,
      277,  277,  277,  822,  276,  276,  277,  276,  276,  963,
      963,  963,  824,  277,  276,  277,  825,  276,  276,  963,

      732,  276,  963,  732,  276,  277,  963,  276,  231,  963,
      231,  231,  963,  963,  277,  277,  861,  231,  963,  231,
      231,  826,  963,  963,  277,  862,  827,  963,  277,  828,
      277,  963,  963,  231,  277,  231,  231,  231,  232,  231,
      231,  863,  963,  963,  963,  733,  963,  232,  231,  829,
      231,  231,  231,  963,  231,  231,  231,  276,  231,  231,
      276,  963,  231,  232,  231,  231,  231,  232,  231,  231,
      231,  276,  231,  231,  276,  864,  963,  231,  232,  231,
      231,  231,  232,  231,  231,  865,  232,  277,  963,  866,
      963,  231,  232,  231,  231,  231,  232,  231,  231,  867,

      232,  277,  231,  868,  231,  231,  231,  232,  231,  231,
      231,  232,  231,  231,  231,  963,  231,  231,  963,  276,
      963,  232,  276,  870,  963,  232,  869,  231,  963,  231,
      231,  231,  232,  231,  231,  871,  232,  963,  963,  231,
      232,  231,  231,  963,  232,  231,  963,  231,  231,  277,
      963,  231,  872,  231,  231,  963,  231,  232,  231,  231,
      276,  232,  276,  276,  276,  276,  963,  276,  876,  232,
      877,  963,  878,  873,  276,  232,  276,  276,  874,  276,
      276,  232,  276,  276,  276,  276,  232,  276,  276,  963,
      277,  276,  277,  875,  277,  276,  880,  879,  276,  276,

      963,  963,  276,  881,  277,  276,  277,  882,  276,  963,
      277,  963,  277,  883,  277,  963,  276,  276,  277,  276,
      276,  276,  963,  276,  276,  277,  276,  963,  963,  277,
      885,  886,  963,  963,  963,  277,  884,  276,  276,  276,
      276,  276,  276,  963,  963,  276,  277,  277,  276,  276,
      887,  277,  276,  277,  231,  963,  231,  231,  231,  963,
      231,  231,  231,  963,  231,  231,  963,  277,  277,  277,
      963,  231,  889,  231,  231,  277,  963,  963,  963,  277,
      888,  963,  963,  231,  232,  231,  231,  890,  232,  963,
      963,  906,  232,  231,  963,  231,  231,  231,  963,  231,

      231,  232,  231,  963,  231,  231,  231,  963,  231,  231,
      963,  963,  963,  232,  907,  963,  231,  963,  231,  231,
      963,  963,  276,  232,  908,  276,  231,  232,  231,  231,
      963,  231,  232,  231,  231,  231,  232,  231,  231,  909,
      911,  910,  231,  911,  963,  231,  232,  231,  231,  963,
      276,  276,  277,  276,  276,  963,  232,  276,  963,  276,
      276,  232,  276,  276,  276,  232,  276,  276,  276,  276,
      232,  276,  276,  963,  963,  232,  276,  914,  913,  276,
      277,  277,  963,  276,  915,  912,  276,  277,  963,  277,
      963,  916,  276,  277,  277,  276,  963,  963,  277,  277,

      917,  276,  919,  963,  276,  919,  277,  918,  276,  963,
      963,  276,  231,  277,  231,  231,  231,  963,  231,  231,
      930,  231,  277,  231,  231,  231,  963,  231,  231,  963,
      963,  277,  277,  231,  963,  231,  231,  911,  277,  231,
      911,  921,  232,  963,  963,  276,  232,  920,  276,  963,
      231,  232,  231,  231,  933,  232,  231,  933,  276,  276,
      963,  276,  276,  232,  963,  931,  935,  232,  276,  963,
      276,  276,  963,  276,  919,  277,  276,  919,  938,  276,
      232,  938,  912,  231,  232,  231,  231,  963,  277,  277,
      231,  963,  231,  231,  231,  932,  231,  231,  277,  934,

      277,  963,  936,  963,  277,  963,  277,  933,  277,  231,
      933,  963,  231,  232,  231,  231,  963,  963,  963,  920,
      232,  937,  963,  939,  232,  276,  276,  943,  276,  276,
      276,  938,  276,  276,  938,  276,  231,  232,  231,  231,
      963,  231,  232,  231,  231,  963,  963,  963,  276,  963,
      276,  276,  934,  276,  963,  277,  277,  944,  963,  945,
      277,  277,  277,  963,  963,  231,  232,  231,  231,  276,
      276,  232,  276,  276,  963,  949,  939,  946,  277,  231,
      277,  231,  231,  231,  963,  231,  231,  950,  963,  276,
      276,  961,  276,  276,  963,  232,  963,  962,  963,  277,

      277,  231,  963,  231,  231,  958,  963,  953,  963,  232,
      963,  954,  963,  232,  957,  963,  963,  963,  963,  277,
      277,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  232,   49,   49,   49,   49,   49,   49,   54,   54,
       54,   54,   54,   54,   61,   61,   61,   61,   61,   61,
       66,   66,   66,   66,   66,   66,  161,  161,  161,  161,
      161,  161,  199,  199,  963,  199,  199,  199,  209,  209,
      209,  209,  209,  209,  212,  963,  963,  963,  212,  212,
      214,  214,  214,  214,  214,  214,  220,  220,  963,  963,
      220,  220,  226,  226,  226,  226,  226,  226,  230,  230,

      963,  230,  230,  230,  264,  264,  963,  264,  264,  264,
      275,  275,  963,  963,  963,  275,  310,  310,  963,  310,
      310,  310,  361,  361,  963,  963,  963,  361,   17,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963
    } ;

static yyconst flex_int16_t yy_chk[3278] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    7,
        7,    2,    2,   46,    5,    5,    2,    3,    3,    3,
        3,    4,    4,    4,    4,    4,    6,    6,  979,    2,
        8,    8,   60,   46,    4,   15,   15,   15,   15,   19,
       15,   25,   19,   29,   31,    2,   29,    2,   25,    2,
       29,   32,    2,    2,    5,   36,   43,  959,   31,    5,

       60,   47,    4,   47,   64,   15,    6,   36,   32,   64,
       43,    6,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
       10,   66,   66,   10,   10,   52,   52,   52,   10,  145,
       16,   16,   16,   16,  146,   16,   57,   57,   57,   57,
      139,   10,  143,  145,  150,  143,  956,  139,  156,  143,
      955,  146,  153,  153,  153,  153,  150,   10,  223,   10,

       16,   10,  156,  223,   10,   10,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   12,  952,  101,   12,   12,  101,
      107,  159,   12,  107,   69,  174,   69,   69,  160,  167,
      160,  178,  167,  190,  107,   12,  190,  204,  197,  174,
      197,  159,  200,  200,  951,  178,  101,  211,  211,  211,
      107,   12,  948,   12,   69,   12,  947,  204,   12,   12,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   14,  941,
      219,   14,   14,  940,  116,  358,   14,  116,   70,   70,
       70,   70,  216,  216,  216,   72,   72,   72,   72,   14,
       73,  929,   73,   73,   74,  358,   74,   74,  219,  116,
       76,   74,   76,   76,  116,   14,  926,   14,   70,   14,
      226,  226,   14,   14,   40,   72,   76,   40,   40,  923,

       73,  922,   40,   76,   74,   75,  349,   75,   75,  349,
       76,   77,  904,   77,   77,   79,  333,   79,   79,   75,
       78,  902,   78,   78,   77,  225,  225,  225,  225,  337,
      333,   40,  898,   40,   80,   75,   80,   80,   40,   40,
       78,   77,   79,  337,   81,   79,   81,   81,   80,  108,
       78,   80,  108,  897,   82,   80,   82,   82,   81,   83,
      895,   83,   83,   82,   80,  108,  894,   84,   83,   84,
       84,  225,  108,   85,   81,   85,   85,   82,   86,  108,
       86,   86,  354,  354,   82,   83,  893,  892,   87,   83,
       87,   87,   84,   85,  891,  860,   88,   84,   88,   88,

      859,   86,  857,   85,   87,   88,  856,   89,   86,   89,
       89,   90,   90,   90,   90,  854,   87,  853,   87,   91,
       89,   91,   91,  848,  844,  843,   88,   92,   92,   92,
       92,   93,  842,   93,   93,  841,   94,   89,   94,   94,
      840,   90,   95,  839,   95,   95,  838,  837,  836,   91,
      835,   95,   91,   96,  834,   96,   96,   92,  833,  832,
       97,   93,   97,   97,  831,   95,   94,   98,  830,   98,
       98,   99,   95,   99,   99,  100,  781,  100,  100,  102,
      102,  102,  102,   96,  104,  104,  104,  104,   98,  779,
       97,  106,  110,  778,  106,  110,   96,   98,  106,  777,

       97,   99,   99,  109,   99,  100,  109,  111,   98,  102,
      111,  776,  110,  775,  104,  112,  109,  773,  112,  772,
      100,  106,  110,  118,  113,  770,  118,  113,  769,  112,
      768,  767,  112,  109,  111,  762,  112,  111,  113,  114,
      115,  117,  114,  115,  117,  112,  118,  119,  114,  115,
      119,  759,  758,  118,  113,  120,  123,  126,  120,  123,
      126,  117,  114,  119,  120,  121,  115,  757,  121,  114,
      115,  117,  756,  128,  755,  119,  128,  119,  121,  122,
      122,  122,  122,  754,  753,  120,  123,  126,  752,  123,
      124,  124,  124,  124,  125,  121,  125,  125,  127,  125,

      751,  127,  129,  128,  750,  129,  749,  127,  130,  122,
      131,  130,  748,  131,  132,  747,  128,  132,  746,  745,
      124,  127,  744,  743,  125,  742,  741,  161,  127,  130,
      161,  740,  129,  133,  133,  133,  133,  739,  130,  738,
      131,  131,  129,  131,  132,  135,  135,  135,  135,  130,
      155,  155,  155,  155,  737,  736,  735,  161,  230,  132,
      230,  230,  734,  133,  162,  162,  162,  162,  164,  164,
      164,  164,  673,  672,  670,  135,  166,  166,  166,  166,
      155,  231,  669,  231,  231,  667,  666,  665,  230,  232,
      232,  232,  232,  242,  162,  242,  242,  663,  164,  233,

      233,  233,  233,  662,  661,  660,  166,  235,  235,  235,
      235,  231,  236,  236,  236,  236,  659,  242,  238,  232,
      238,  238,  658,  242,  239,  238,  239,  239,  655,  233,
      240,  654,  240,  240,  653,  652,  651,  235,  241,  240,
      241,  241,  650,  243,  239,  243,  243,  246,  238,  246,
      246,  648,  243,  398,  239,  647,  398,  646,  241,  244,
      240,  244,  244,  645,  644,  643,  243,  245,  241,  245,
      245,  641,  244,  243,  246,  640,  247,  246,  247,  247,
      245,  248,  639,  248,  248,  247,  638,  637,  249,  244,
      249,  249,  250,  506,  250,  250,  506,  245,  398,  247,

      251,  248,  251,  251,  636,  252,  247,  252,  252,  635,
      634,  248,  275,  249,  250,  275,  633,  253,  249,  253,
      253,  251,  250,  254,  276,  254,  254,  276,  632,  631,
      251,  630,  254,  252,  253,  252,  629,  255,  506,  255,
      255,  256,  275,  256,  256,  628,  627,  253,  255,  257,
      626,  257,  257,  254,  276,  258,  625,  258,  258,  257,
      259,  624,  259,  259,  623,  622,  621,  255,  620,  256,
      258,  256,  260,  260,  260,  260,  619,  259,  618,  257,
      259,  262,  617,  262,  262,  258,  264,  616,  264,  264,
      259,  265,  615,  265,  265,  266,  266,  266,  266,  546,

      544,  283,  260,  267,  283,  267,  267,  268,  283,  268,
      268,  262,  543,  542,  538,  262,  264,  269,  537,  269,
      269,  265,  536,  289,  535,  266,  289,  267,  267,  534,
      533,  283,  270,  267,  270,  270,  289,  268,  268,  532,
      271,  270,  271,  271,  531,  530,  272,  269,  272,  272,
      269,  529,  273,  289,  273,  273,  274,  541,  274,  274,
      541,  271,  270,  277,  277,  277,  277,  528,  527,  526,
      271,  278,  278,  278,  278,  525,  272,  280,  280,  280,
      280,  271,  273,  272,  524,  523,  274,  281,  281,  281,
      281,  522,  284,  277,  273,  284,  285,  286,  521,  285,

      286,  278,  541,  520,  519,  285,  287,  280,  290,  287,
      288,  290,  284,  288,  518,  291,  517,  286,  291,  288,
      292,  290,  284,  292,  516,  515,  285,  286,  293,  292,
      287,  293,  294,  288,  295,  294,  287,  295,  290,  514,
      288,  510,  291,  292,  296,  291,  509,  296,  293,  297,
      292,  298,  297,  508,  298,  507,  295,  294,  293,  504,
      299,  503,  294,  299,  295,  296,  502,  300,  298,  299,
      300,  501,  301,  302,  296,  301,  302,  297,  300,  297,
      500,  298,  499,  302,  303,  498,  308,  303,  304,  308,
      299,  304,  305,  305,  305,  305,  497,  300,  496,  303,

      301,  495,  301,  302,  494,  304,  493,  492,  304,  307,
      307,  307,  307,  491,  303,  490,  308,  489,  304,  488,
      308,  310,  305,  310,  310,  311,  310,  311,  311,  487,
      311,  312,  312,  312,  312,  313,  312,  314,  313,  315,
      314,  316,  315,  317,  316,  318,  317,  486,  318,  319,
      316,  310,  319,  320,  485,  311,  320,  484,  483,  313,
      313,  312,  482,  481,  317,  313,  480,  314,  314,  315,
      403,  316,  315,  317,  325,  318,  325,  325,  361,  319,
      402,  361,  318,  320,  317,  321,  321,  321,  321,  401,
      400,  319,  323,  323,  323,  323,  324,  324,  324,  324,

      350,  350,  350,  350,  325,  399,  362,  396,  361,  362,
      363,  363,  363,  363,  395,  321,  364,  364,  364,  364,
      394,  393,  323,  366,  366,  366,  366,  367,  367,  367,
      367,  368,  392,  368,  368,  391,  362,  390,  389,  388,
      363,  369,  369,  369,  369,  387,  364,  371,  371,  371,
      371,  386,  385,  366,  397,  397,  397,  397,  384,  383,
      382,  368,  404,  404,  404,  404,  405,  405,  405,  405,
      381,  369,  406,  406,  406,  406,  408,  408,  408,  408,
      409,  409,  409,  409,  411,  411,  411,  411,  380,  412,
      379,  412,  412,  413,  378,  413,  413,  414,  412,  414,

      414,  415,  377,  415,  415,  376,  375,  374,  404,  373,
      409,  416,  405,  416,  416,  413,  372,  360,  406,  412,
      414,  359,  417,  413,  417,  417,  416,  414,  415,  357,
      418,  415,  418,  418,  419,  356,  419,  419,  355,  352,
      348,  416,  347,  419,  420,  417,  420,  420,  346,  345,
      344,  418,  417,  421,  343,  421,  421,  420,  342,  422,
      418,  422,  422,  423,  419,  423,  423,  424,  341,  424,
      424,  340,  423,  425,  420,  425,  425,  449,  339,  421,
      449,  422,  426,  421,  426,  426,  424,  338,  427,  422,
      427,  427,  336,  423,  335,  426,  334,  424,  427,  425,

      449,  332,  428,  425,  428,  428,  429,  449,  429,  429,
      331,  430,  426,  430,  430,  428,  330,  429,  427,  431,
      329,  431,  431,  328,  432,  228,  432,  432,  452,  224,
      430,  452,  428,  431,  221,  433,  429,  433,  433,  220,
      434,  430,  434,  434,  218,  435,  217,  435,  435,  431,
      432,  452,  215,  210,  432,  434,  435,  436,  452,  436,
      436,  433,  206,  205,  203,  433,  437,  437,  437,  437,
      434,  438,  438,  438,  438,  435,  439,  202,  439,  439,
      440,  447,  440,  440,  447,  201,  198,  436,  436,  441,
      447,  441,  441,  196,  195,  442,  437,  442,  442,  191,

      443,  438,  443,  443,  189,  188,  439,  187,  186,  450,
      440,  447,  450,  441,  185,  448,  184,  440,  448,  441,
      453,  439,  183,  453,  182,  442,  444,  444,  444,  444,
      443,  442,  446,  446,  446,  446,  450,  448,  443,  450,
      451,  453,  181,  451,  454,  448,  455,  454,  180,  455,
      453,  456,  179,  454,  456,  451,  444,  457,  458,  455,
      457,  458,  177,  459,  176,  460,  459,  458,  460,  175,
      451,  173,  461,  172,  454,  461,  455,  456,  171,  457,
      462,  456,  459,  462,  170,  461,  463,  457,  458,  463,
      462,  460,  169,  459,  464,  460,  158,  464,  465,  463,

      466,  465,  461,  466,  157,  464,  467,  154,  468,  467,
      462,  468,  469,  152,  466,  469,  463,  465,  470,  471,
      151,  470,  471,  545,  464,  149,  545,  469,  465,  470,
      466,  148,  467,  147,  468,  144,  467,  475,  468,  142,
      475,  141,  469,  473,  473,  473,  473,  140,  470,  471,
      471,  472,  472,  472,  472,  138,  472,  474,  474,  474,
      474,  476,  477,  478,  476,  477,  478,  475,  545,  137,
      479,   68,   65,  479,  505,  505,  505,  505,   63,   61,
       59,  472,  475,   56,   51,   48,  477,  474,   45,   44,
       39,  476,  477,  478,  511,  511,  511,  511,  476,  478,

      479,  513,  513,  513,  513,   38,   37,   35,  479,  539,
      539,  539,  539,  547,  547,  547,  547,  549,  549,  549,
      549,   34,   33,   30,  511,  550,  550,  550,  550,  552,
      552,  552,  552,  553,  642,  553,  553,  642,  554,   28,
      554,  554,  555,  585,  555,  555,  585,   27,  553,  554,
      556,   26,  556,  556,  585,  557,   24,  557,  557,  547,
       23,   21,  558,  553,  558,  558,  556,   17,  554,    0,
      555,  550,  555,  585,  559,    0,  559,  559,    0,  642,
      556,  557,  559,    0,    0,  557,  560,  558,  560,  560,
        0,  561,  558,  561,  561,  562,  671,  562,  562,  671,

      563,    0,  563,  563,  559,  564,  858,  564,  564,  858,
        0,    0,  561,  560,  562,  565,  560,  565,  565,  896,
      564,  561,  896,    0,  903,  562,  563,  903,  565,  566,
      563,  566,  566,    0,    0,  564,  567,  566,  567,  567,
      569,  671,  569,  569,  567,  565,  568,    0,  568,  568,
      570,  858,  570,  570,  571,  905,  571,  571,  905,  566,
        0,    0,  569,  570,  896,  571,  567,    0,    0,  903,
      569,  572,  568,  572,  572,  573,  568,  573,  573,  574,
      570,  574,  574,    0,  571,  572,  924,  574,  575,  924,
      575,  575,  576,    0,  576,  576,  577,    0,  577,  577,

      905,  572,  573,  928,  575,  573,  928,    0,    0,  574,
      578,  578,  578,  578,  579,  576,  579,  579,  575,    0,
        0,  580,  576,  580,  580,  581,  577,  581,  581,    0,
      582,  924,  582,  582,  583,  584,  583,  583,  584,  577,
      578,    0,  586,    0,  579,  586,  589,    0,  928,  589,
      584,  580,    0,  587,  588,  581,  587,  588,  591,  579,
      582,  591,  582,    0,  583,  584,  580,    0,  581,  587,
      586,  589,  586,    0,  590,  592,  589,  590,  592,  583,
      588,    0,  590,  587,  588,  591,  594,  593,  591,  594,
      593,  597,  595,    0,  597,  595,  592,  596,  599,  597,

      596,  599,    0,    0,  590,  592,  593,  595,    0,    0,
      596,  598,  594,    0,  598,  600,  594,  593,  600,  598,
      601,  597,  595,  601,  599,    0,    0,  596,  599,  602,
        0,  604,  602,  601,  604,  603,  605,  600,  603,  605,
      602,  598,    0,  608,  605,  600,  608,    0,  606,  603,
      601,  606,  607,  610,  611,  607,  610,  611,  604,  602,
      612,  604,    0,  612,  606,  603,  605,  609,  609,  609,
      609,    0,    0,  608,  613,  607,    0,  613,  606,    0,
        0,    0,  607,  610,  611,  614,  608,    0,  614,  705,
      612,  674,  705,  674,  674,    0,    0,  609,  610,  611,

        0,    0,  705,  612,  613,  675,  613,  675,  675,  676,
        0,  676,  676,  710,    0,  614,  710,  674,  675,  705,
      677,  674,  677,  677,  678,    0,  678,  678,  677,    0,
      614,    0,  678,  706,  676,  675,  706,    0,  679,  676,
      679,  679,  680,  710,  680,  680,    0,    0,    0,  679,
      677,    0,    0,  681,  678,  681,  681,  682,  706,  682,
      682,  681,    0,  706,    0,  682,    0,  683,  679,  683,
      683,  684,  680,  684,  684,  683,    0,    0,  685,  684,
      685,  685,  686,  681,  686,  686,  687,  682,  687,  687,
      688,  717,  688,  688,  717,    0,  689,  683,  689,  689,

      690,  684,  690,  690,  685,    0,    0,  686,  685,    0,
        0,  691,  686,  691,  691,  692,  687,  692,  692,  691,
      688,  717,  693,  689,  693,  693,  689,  690,    0,  694,
      690,  694,  694,  695,    0,  695,  695,  694,  692,    0,
        0,  691,  693,    0,  696,  692,  696,  696,  697,    0,
      697,  697,  693,  698,    0,  698,  698,    0,  699,  694,
      699,  699,  700,  695,  700,  700,    0,    0,    0,  697,
      701,  696,  701,  701,  696,    0,    0,  702,  697,  702,
      702,    0,  703,  698,  703,  703,  709,    0,  699,  709,
      698,    0,  700,  704,  700,  707,  704,  709,  707,    0,

      701,  701,  708,  707,    0,  708,  711,  702,    0,  711,
      708,    0,  703,    0,  711,    0,  709,  715,  712,  704,
      715,  712,  702,  704,    0,  707,  712,  703,    0,    0,
      713,  714,  708,  713,  714,    0,  711,  716,  713,  714,
      716,  718,  719,  715,  718,  719,  720,  715,  712,  720,
      721,  722,  725,  721,  722,  725,  724,    0,  721,  724,
      713,  714,  716,  723,  724,  726,  723,  716,  726,  719,
        0,  718,  719,  720,  722,  727,  720,    0,  727,    0,
      721,  722,  725,  723,  728,  729,  724,  728,  729,    0,
        0,    0,  726,  723,  730,  726,  727,  730,  731,    0,

      732,  731,    0,  732,  733,  727,    0,  733,  782,    0,
      782,  782,    0,    0,  728,  729,  782,  783,    0,  783,
      783,  728,    0,    0,  730,  783,  730,    0,  731,  731,
      732,    0,    0,  784,  733,  784,  784,  785,  782,  785,
      785,  784,    0,    0,    0,  732,    0,  783,  786,  733,
      786,  786,  787,    0,  787,  787,  788,  809,  788,  788,
      809,    0,  789,  784,  789,  789,  790,  785,  790,  790,
      791,  810,  791,  791,  810,  787,    0,  792,  786,  792,
      792,  793,  787,  793,  793,  792,  788,  809,    0,  793,
        0,  794,  789,  794,  794,  795,  790,  795,  795,  794,

      791,  810,  796,  795,  796,  796,  797,  792,  797,  797,
      798,  793,  798,  798,  799,    0,  799,  799,    0,  812,
        0,  794,  812,  798,    0,  795,  797,  800,    0,  800,
      800,  802,  796,  802,  802,  800,  797,    0,    0,  801,
      798,  801,  801,    0,  799,  803,    0,  803,  803,  812,
        0,  804,  801,  804,  804,    0,  805,  800,  805,  805,
      806,  802,  807,  806,  808,  807,    0,  808,  806,  801,
      807,    0,  808,  802,  811,  803,  813,  811,  803,  813,
      814,  804,  815,  814,  820,  815,  805,  820,  816,    0,
      806,  816,  807,  804,  808,  817,  816,  811,  817,  818,

        0,    0,  818,  817,  811,  819,  813,  818,  819,    0,
      814,    0,  815,  819,  820,    0,  821,  822,  816,  821,
      822,  823,    0,  824,  823,  817,  824,    0,    0,  818,
      822,  824,    0,    0,    0,  819,  821,  825,  826,  827,
      825,  826,  827,    0,    0,  828,  821,  822,  828,  829,
      825,  823,  829,  824,  861,    0,  861,  861,  862,    0,
      862,  862,  863,    0,  863,  863,    0,  825,  826,  827,
        0,  864,  827,  864,  864,  828,    0,    0,    0,  829,
      826,    0,    0,  865,  861,  865,  865,  828,  862,    0,
        0,  864,  863,  866,    0,  866,  866,  867,    0,  867,

      867,  864,  868,    0,  868,  868,  869,    0,  869,  869,
        0,    0,    0,  865,  869,    0,  870,    0,  870,  870,
        0,    0,  876,  866,  870,  876,  871,  867,  871,  871,
        0,  872,  868,  872,  872,  873,  869,  873,  873,  872,
      874,  873,  874,  874,    0,  875,  870,  875,  875,    0,
      877,  878,  876,  877,  878,    0,  871,  879,    0,  880,
      879,  872,  880,  881,  882,  873,  881,  882,  883,  886,
      874,  883,  886,    0,    0,  875,  884,  879,  875,  884,
      877,  878,    0,  885,  884,  874,  885,  879,    0,  880,
        0,  885,  887,  881,  882,  887,    0,    0,  883,  886,

      887,  888,  889,    0,  888,  889,  884,  888,  890,    0,
        0,  890,  906,  885,  906,  906,  907,    0,  907,  907,
      906,  908,  887,  908,  908,  909,    0,  909,  909,    0,
        0,  888,  889,  910,    0,  910,  910,  911,  890,  911,
      911,  890,  906,    0,    0,  915,  907,  889,  915,    0,
      912,  908,  912,  912,  913,  909,  913,  913,  914,  916,
        0,  914,  916,  910,    0,  910,  914,  911,  917,    0,
      918,  917,    0,  918,  919,  915,  920,  919,  921,  920,
      912,  921,  911,  930,  913,  930,  930,    0,  914,  916,
      932,    0,  932,  932,  931,  912,  931,  931,  917,  913,

      918,    0,  918,    0,  919,    0,  920,  933,  921,  933,
      933,    0,  934,  930,  934,  934,    0,    0,    0,  919,
      932,  920,    0,  921,  931,  935,  936,  931,  935,  936,
      937,  938,  939,  937,  938,  939,  943,  933,  943,  943,
        0,  944,  934,  944,  944,    0,    0,    0,  945,    0,
      946,  945,  933,  946,    0,  935,  936,  934,    0,  936,
      937,  938,  939,    0,    0,  949,  943,  949,  949,  950,
      954,  944,  950,  954,    0,  943,  938,  939,  945,  953,
      946,  953,  953,  957,    0,  957,  957,  945,    0,  958,
      962,  957,  958,  962,    0,  949,    0,  958,    0,  950,

      954,  961,    0,  961,  961,  954,    0,  949,    0,  953,
        0,  950,    0,  957,  953,    0,    0,    0,    0,  958,
      962,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  961,  964,  964,  964,  964,  964,  964,  965,  965,
      965,  965,  965,  965,  966,  966,  966,  966,  966,  966,
      967,  967,  967,  967,  967,  967,  968,  968,  968,  968,
      968,  968,  969,  969,    0,  969,  969,  969,  970,  970,
      970,  970,  970,  970,  971,    0,    0,    0,  971,  971,
      972,  972,  972,  972,  972,  972,  973,  973,    0,    0,
      973,  973,  974,  974,  974,  974,  974,  974,  975,  975,

        0,  975,  975,  975,  976,  976,    0,  976,  976,  976,
      977,  977,    0,    0,    0,  977,  978,  978,    0,  978,
      978,  978,  980,  980,    0,    0,    0,  980,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[74] =
    {   0,
0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 
    0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#line 2 "levcomp.lpp"

// levcomp.lpp:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
//
// Based loosely on NetHack's lev_comp.l

#include <algorithm>
#include <cstring>
#include <queue>
#include "AppHdr.h"
#include "mapdef.h"
#include "levcomp.tab.h"

static bool alloced = false;

std::queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(100);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

// Enter a new state, first clearing yylval of junk.
#define CBEGIN(x) do { BEGIN(x); clean(); } while (0)

static void post_proc_text(char *text, bool trim_right, int strip_trailing)
{
    char *s = NULL;
    if (trim_right)
    {
        s = text + strlen(text) - 1;
        while (s >= text && isspace(*s))
            *s-- = 0;
    }
    if (strip_trailing)
    {
        if (!s)
            s = text + strlen(text) - 1;
        while (s >= text && --strip_trailing >= 0)
            *s-- = 0;
    }
}

static char *copy_text(bool trim_right, int strip_trailing)
{
    char *newstring = NULL;
    if ((yylval.text = newstring = strdup(yytext)))
    {
        alloced = true;
        post_proc_text(newstring, trim_right, strip_trailing);
    }
    return (newstring);
}

static void settext(bool trim_right = false, int strip_trailing = 0)
{
    clean();
    char *newstring = copy_text(trim_right, strip_trailing);
    yylval.text = newstring;
}

static void str_check()
{
    if (!yylval.text)
    {
        char *buf = (char *) malloc(1);
        if (buf)
        {
            yylval.text = buf;
            *buf = 0;
            alloced = true;
        }
    }
}

static void cattext(bool trim_right = false, int strip_trailing = 0)
{
    if (!yylval.text)
        settext(trim_right, strip_trailing);
    else
    {
        bool was_alloced = alloced;
        char *newbuf = (char*) malloc(strlen(yylval.text) + strlen(yytext) + 1);
        if (!newbuf)
            end(1, "Out of memory");
        alloced = true;
        strcpy(newbuf, yylval.text);
        strcat(newbuf, yytext);
        post_proc_text(newbuf, trim_right, strip_trailing);
        if (was_alloced)
            free((void*) yylval.text);
        yylval.text = newbuf;
    }
}








#line 1639 "levcomp.lex.cc"

#define INITIAL 0
#define MAPDEF 1
#define LUA 2
#define LUA_ONELINER 3
#define ARGUMENT 4
#define MNAME 5
#define KEYWORDS 6
#define ITEM_LIST 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 132 "levcomp.lpp"


#line 1805 "levcomp.lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 964 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 963 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 134 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 136 "levcomp.lpp"
{
                        settext(true);
                        return MAP_LINE;
                    }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 141 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 142 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 143 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 145 "levcomp.lpp"
;
	YY_BREAK
case 7:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 147 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 8:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 148 "levcomp.lpp"
{
                            settext(true, 2);
                            BEGIN(INITIAL);
                            return LUA_LINE;
                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 153 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 157 "levcomp.lpp"
;
	YY_BREAK
case 11:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 159 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 163 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 165 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 170 "levcomp.lpp"
;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 171 "levcomp.lpp"
;
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 172 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 174 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 178 "levcomp.lpp"
;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 180 "levcomp.lpp"
{
                        cattext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 185 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 186 "levcomp.lpp"
;
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 187 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 189 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 191 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 195 "levcomp.lpp"
;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 197 "levcomp.lpp"
{
                        cattext();
                        return MONSTER_NAME;
                    }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 202 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 203 "levcomp.lpp"
;
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 205 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 209 "levcomp.lpp"
;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 211 "levcomp.lpp"
{
                        cattext();
                    }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 215 "levcomp.lpp"
cattext();
	YY_BREAK
case 33:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 217 "levcomp.lpp"
{ BEGIN(INITIAL); str_check(); return STRING; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 219 "levcomp.lpp"
;
	YY_BREAK
case 35:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 221 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 223 "levcomp.lpp"
{ BEGIN(LUA_ONELINER); return MAIN; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 225 "levcomp.lpp"
{ BEGIN(LUA); return PRELUDE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 226 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 227 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 228 "levcomp.lpp"
{ BEGIN(LUA); return VALIDATE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 229 "levcomp.lpp"
{ BEGIN(LUA); return VETO; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 232 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 233 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEFAULT_DEPTH; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 234 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEPTH; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 235 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return ORIENT; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 236 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 237 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return WELCOME; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 238 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 239 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 240 "levcomp.lpp"
{ CBEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 241 "levcomp.lpp"
{ CBEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 242 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLAGS; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 243 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return BFLAGS; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 244 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SUBST; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 245 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return NSUBST; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 246 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return COLOUR; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 247 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return FLOORCOL; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 248 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return ROCKCOL; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 249 "levcomp.lpp"
{ CBEGIN(MNAME); return MONS; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 250 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 251 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return MARKER; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 252 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SHUFFLE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 254 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KFEAT; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 255 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KITEM; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 256 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMONS; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 257 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMASK; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 259 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 261 "levcomp.lpp"
{
                        clean();
                        yylval.i = atoi(yytext);
                        return INTEGER;
                    }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 267 "levcomp.lpp"
;
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 268 "levcomp.lpp"
;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 269 "levcomp.lpp"
;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 270 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 272 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 2324 "levcomp.lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MAPDEF):
case YY_STATE_EOF(LUA):
case YY_STATE_EOF(LUA_ONELINER):
case YY_STATE_EOF(ARGUMENT):
case YY_STATE_EOF(MNAME):
case YY_STATE_EOF(KEYWORDS):
case YY_STATE_EOF(ITEM_LIST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 964 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 964 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 963);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 272 "levcomp.lpp"



int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}

