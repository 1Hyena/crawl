#line 2 "levcomp.lex.cc"

#line 4 "levcomp.lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 63
#define YY_END_OF_BUFFER 64
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[805] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   64,   62,
       60,   61,   62,   58,   59,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   60,   30,
       32,   62,   62,   62,   62,   62,   62,   63,    6,   63,
       63,    4,    2,    3,   63,    2,    2,    2,    2,    9,
       10,   63,    9,    9,   63,   12,   63,   62,   26,   62,
       58,   59,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   30,   32,   62,   62,   62,
       62,   62,   62,   62,   24,   21,   24,   23,   59,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   24,   30,   32,   62,   62,   62,   62,   62,
       62,   14,   15,   62,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   14,
       13,   13,   13,   13,   13,   17,   19,   20,   63,   18,
       63,   29,   63,   63,   60,   61,   59,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   60,   30,   32,    0,
        0,    0,    0,   30,    0,    0,    0,    0,    0,    0,
        0,   35,    6,    5,    0,    0,    2,    3,    2,    0,

        2,    2,    2,    2,    9,    9,   10,    9,    9,    9,
        0,   11,   12,   25,    0,   26,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   30,   25,   25,
       25,   25,   25,   25,   25,   25,    0,   24,   21,   24,
       21,   59,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   24,   30,    0,    0,    0,    0,    0,    0,    0,
       35,   14,   15,    0,   15,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   14,   13,   13,   13,
       13,   13,   13,   13,   16,    0,   19,   20,    0,    0,
       28,    0,   28,    0,   27,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    2,    9,    9,    9,    7,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,

       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       31,    0,    0,    0,    0,    0,    2,    9,    8,    9,
        7,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,    0,    0,   25,   25,   25,   25,   22,   22,   22,

       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,    0,    0,   22,
       22,   22,   22,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,    0,    0,    0,    0,
       52,    0,    0,    0,    0,   51,   38,    0,    0,    0,
        0,    0,   47,    0,    0,    0,   34,    0,    0,    0,
        0,    2,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,    0,   25,   22,   22,   22,

       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
        0,   22,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
        0,    0,   40,   46,   55,   56,   57,    0,    0,    0,
       42,    0,   48,    0,    0,    0,    0,    0,   37,    1,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   44,
       50,   53,   49,   41,    0,   45,    0,    0,    0,    0,
        1,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   13,   13,   13,   13,   13,   54,   43,
        0,    0,    0,    0,   25,   25,   25,    0,   25,   25,
       22,   22,   22,    0,   22,   22,   13,   13,    0,   33,
        0,    0,   25,   25,    0,   25,   22,   22,    0,   22,
       13,    0,   36,   25,   25,   22,   22,   13,    0,   25,
       22,   13,    0,   25,   22,   13,    0,   25,   22,   13,

       39,   25,   22,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    7,    8,    1,    1,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,    1,    1,
        1,    1,    1,    1,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       20,   27,   28,   29,   30,   20,   31,   20,   20,   20,
        1,   32,    1,    1,   20,    1,   33,   20,   20,   34,

       35,   36,   20,   37,   38,   20,   20,   39,   20,   20,
       40,   41,   20,   42,   43,   44,   45,   46,   20,   20,
       20,   20,   47,    1,   48,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[49] =
    {   0,
        1,    2,    3,    4,    1,    1,    5,    6,    6,    1,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    1,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    1,    1
    } ;

static yyconst flex_int16_t yy_base[829] =
    {   0,
        0,   34,   80,   85,   89,   91,    7,   14,  138,  172,
      219,  253,  301,  348,   94,  100,  106,  112, 2088, 2089,
       10, 2089, 2084, 2089, 2077,    2, 2070, 2062, 2054,   95,
       95,   97, 2055, 2059,   94, 2069, 2064, 2043,  394,    0,
     2089,  102, 2032, 2034,  103,   84, 2028, 2089, 2089, 2071,
      118, 2089,    0, 2089, 2070,  357,    0, 2048,  115, 2023,
     2089, 2067,   88, 2021, 2065, 2089, 2064,   28, 2089, 2063,
      151,  225,  361,  365,  370,  379,  401,  405,  410,  421,
      427,  432,  440,  450,  454,  166,  247,  459,  464,  469,
      473,  477,  481,    0,  488, 2089,  495, 2089, 2056,  221,

     2049, 2041, 2033,  374,  124,  122, 2034, 2038,  130, 2048,
     2043, 2022,  499,  348,    0,  353, 2011, 2013,  333,  378,
     2007,  503, 2089, 2050,    0, 2043,  421, 2036, 2028, 2020,
      498,  357,  374, 2021, 2025,  207, 2035, 2030, 2009,  520,
      432, 1998, 2000,  334,  480,  396,  527, 2089, 2038, 2089,
      415, 2089,  515,  531,  417, 2089, 2031, 2028, 2016, 2011,
     2025, 2020, 2019, 2004, 2007, 2004, 2006, 2006, 1998, 2008,
     2015, 1992, 2006, 2000,  516, 1980,    0,    0, 2089, 1961,
     1963,  504, 1957,    0,  401, 1965, 1959, 1982,  437, 1953,
     1942, 2089, 2089, 2089, 1977,  537,    0, 2089,    0, 1972,

      540, 1955, 1944,  452, 1909, 1908, 2089,  188, 1907,  546,
     1941, 2089, 2089,  548,  552, 2089,  556,  562,  566,  570,
      574,  578,  582,  587,  596,  600,  604,  608,  613,  618,
      628,  636,  640,  644,  649,  653,  658,  665,  670,  674,
      678,  682,  686,  696,  690,  700,  557,  712, 2089,  716,
     2089,  701,  624,  706,  720,  645,  609,  721,  722,  728,
      735,  736,  740,  742,  747,  753,  752,  763,  754,  765,
      771,    0,  776,  772,  783,  784,  789,  788,  790,  799,
      800,  810, 2089, 1881, 2089,    0, 1873, 1870, 1858, 1853,
     1865, 1859, 1851, 1833, 1836, 1833, 1830, 1817, 1802, 1809,

     1796, 1772, 1786, 1779,  784, 1750,    0,  461, 1749, 1745,
     1754,  503, 1722, 1713,  815,  816,  820, 2089, 1748,  587,
     2089,  825, 2089,  830, 2089, 1726, 1717, 1701, 1692, 1679,
     1680, 1675, 1654, 1653, 1642, 1651, 1650, 1640, 1636, 1616,
     1587, 1578, 1584, 1584, 1555,  834,  836, 1545, 1554, 1536,
     1533, 1546,  842,  846,  850, 2089,  854,  859,  863,  868,
      872,  877,  895,  899,  903,  907,  911,  915,  926,  932,
      938,  942,  946,  951,  956,  960,  973,  977,  981,  985,
      990,  994,  864,  884,  947,  998,  986,  916,  961,  927,
      999, 1003, 1004, 1005, 1011, 1017, 1016, 1030, 1034, 1035,

     1036, 1040, 1042, 1044, 1049, 1056,  920, 1060, 1064, 1065,
     1066, 1070, 1076, 1538, 1524, 1516, 1521, 1514, 1520, 1515,
     1505, 1504, 1486, 1494, 1491, 1487, 1488, 1470, 1445, 1444,
     1449, 1443, 1417, 1077, 1081, 1392, 1401, 1385, 1365, 1386,
     1364, 1375, 1361, 1375, 1352, 1354, 1345, 1353, 1354, 1349,
     1319, 1319, 1324, 1321, 1300, 1315, 1303, 1292, 1260, 1082,
     2089, 1086, 1240, 1240, 1247, 1090, 1265, 1091, 2089, 1095,
     2089, 1099, 1115, 1109, 1119, 1130, 1144, 1148, 1152, 1157,
     1164, 1173, 1177, 1182, 1186, 1191, 1195, 1206, 1210, 1215,
     1221, 1227, 1231, 1237, 1241, 1245, 1249, 1105, 1100, 1120,

     1139, 1153, 1232, 1250, 1216, 1187, 1254, 1255, 1265, 1266,
     1267, 1272, 1278, 1287, 1124, 1289, 1293, 1297, 1299, 1301,
     1306, 1307, 1308, 1262, 1233, 1244, 1230, 1238, 1209, 1204,
     1194, 1198, 1199, 1194, 1175, 1174, 1179, 1169, 1147, 1160,
     1147, 1139, 1115, 1106, 1102, 1313, 1116, 1088, 1096, 1064,
     2089, 1063, 1050, 1042, 1021, 2089, 2089, 1001,  988, 1002,
      980,  987, 2089,  951,  950,  933, 2089,  925,  924, 1314,
      892,  888, 1318, 1322, 1326, 1330, 1340, 1348, 1352, 1361,
     1365, 1370, 1374, 1378, 1382, 1386, 1393, 1398, 1408, 1412,
     1416, 1420, 1424, 1428, 1432, 1438, 1442, 1404, 1433, 1443,

     1447, 1399, 1453, 1459, 1465, 1449, 1466, 1472, 1476, 1477,
     1478, 1482, 1488, 1489, 1490, 1494, 1495, 1505, 1506, 1510,
     1511, 1516,  891,  875,  886,  881,  877,  870,  865,  844,
      831,  825,  840,  824,  832,  811,  811,  787,  776,  776,
      798,  787, 2089, 2089, 2089, 2089, 2089,  786,  769,  759,
     2089,  746, 2089,  740,  733,  699,  704,  688, 2089,  726,
     1518, 1522, 1531, 1537, 1542, 1546, 1550, 1555, 1562, 1566,
     1573, 1577, 1581, 1585, 1589, 1594, 1598, 1603, 1607, 1551,
     1608, 1612, 1614, 1618, 1619, 1620, 1624, 1625, 1626, 1635,
     1637, 1639, 1641, 1643, 1648, 1652, 1654, 1658,  702,  689,

      675,  671,  667,  658,  655,  649,  615,  601,  590, 2089,
     2089, 2089, 2089, 2089,  615, 2089,  597,  595, 1659,  564,
      590, 1663, 1667, 1671, 1675, 1679, 1684, 1691, 1695, 1699,
     1706, 1710, 1680, 1711, 1715, 1716, 1717, 1721, 1722, 1723,
     1727, 1732, 1734,  571,  567,  561, 1736,  520, 2089, 2089,
      493, 1738,  473, 1742, 1744, 1750, 1754, 1758, 1762, 1766,
     1770, 1771, 1772, 1776, 1782, 1788,  485, 1789,  459, 2089,
     1790,  429, 1795, 1799, 1806, 1810, 1814, 1815, 1816, 1820,
      437,  412, 2089, 1829, 1822, 1836, 1837,  347,  329, 1841,
     1842,  307,  204, 1846, 1850,  128,  119, 1854, 1863,   12,

     2089, 1867, 1873, 2089, 1887, 1893, 1899, 1905, 1911, 1917,
     1923, 1929, 1935, 1941, 1947, 1953, 1959, 1965, 1971, 1977,
     1983, 1989, 1995,    0, 2001, 2007, 2013, 2019
    } ;

static yyconst flex_int16_t yy_def[829] =
    {   0,
      805,  804,  806,  807,  808,  808,  809,  809,  810,  804,
      811,  804,  804,   13,  812,  812,  813,  813,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  814,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      815,  804,  816,  804,  804,  817,  816,  816,  816,  818,
      804,  804,  818,  818,  819,  804,  804,  820,  804,  804,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  821,  820,  820,  820,  820,
      820,  820,  820,  822,  804,  804,  804,  804,  822,  822,

      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,   39,  823,  822,  822,  822,  822,  822,  822,
      822,  804,  804,  804,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,   39,
      824,  824,  824,  824,  824,  825,  804,  804,  804,  804,
      826,  804,  826,  826,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,   39,  814,  804,  804,
      804,  804,  804,  814,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  816,  804,  816,  804,

      816,  816,  816,  816,  818,  818,  804,  818,  818,  818,
      819,  804,  804,  820,  820,  804,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  821,  821,  820,  820,
      820,  820,  820,  820,  820,  820,  827,  804,  804,  804,
      804,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  113,  828,  827,  827,  827,  827,  827,  827,  827,
      827,  804,  804,  804,  804,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,

      824,  824,  824,  824,  824,  824,  140,  824,  824,  824,
      824,  824,  824,  824,  825,  825,  804,  804,  804,  826,
      804,  826,  804,  826,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  816,  818,  818,  818,  804,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,

      827,  827,  827,  827,  828,  827,  827,  827,  827,  827,
      827,  827,  827,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  816,  818,  804,  818,
      804,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  827,  827,  827,

      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  816,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  827,  827,  827,

      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  816,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  824,  824,

      824,  824,  824,  824,  824,  824,  824,  824,  824,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      816,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  824,  824,  824,  824,  824,  804,  804,
      804,  804,  804,  804,  820,  820,  820,  820,  820,  820,
      827,  827,  827,  827,  827,  827,  824,  824,  804,  804,
      804,  804,  820,  820,  820,  820,  827,  827,  827,  827,
      824,  804,  804,  820,  820,  827,  827,  824,  804,  820,
      827,  824,  804,  820,  827,  824,  804,  820,  827,  824,

      804,  820,  827,    0,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804
    } ;

static yyconst flex_int16_t yy_nxt[2138] =
    {   0,
      804,   21,   22,   23,   21,  286,   24,  804,   25,   66,
       67,  155,   26,   27,  155,   28,   66,   67,   29,  158,
       30,  801,   31,   32,   33,   34,  159,   35,   36,  215,
       37,  215,  215,   38,   20,   39,   22,   23,   39,   40,
       24,   20,   25,   41,   20,   20,   26,   27,   20,   28,
       20,   20,   29,   20,   30,   20,   42,   32,   33,   34,
       20,   35,   36,   20,   37,   20,   20,   38,   20,   20,
       20,   20,   43,   20,   44,   20,   45,   20,   20,   46,
       47,   20,   49,   50,   51,   52,   48,   54,   55,   56,
       57,   61,   62,   61,   62,  147,  148,  149,  147,   58,

      150,  147,  148,  149,  147,  166,  150,  168,  152,  153,
      163,  172,  185,  164,  152,  153,  190,  165,  191,  167,
      193,  195,  196,  173,  169,  188,  167,   59,  801,  203,
      208,   63,  263,   63,  261,  209,   64,  154,   64,   21,
       69,   70,   21,  154,   71,  189,   72,  267,  262,  264,
       73,   74,  215,   75,  215,  215,   76,  204,   77,  268,
       78,   79,   80,   81,  800,   82,   83,  238,   84,  238,
      238,   85,   68,   39,   69,   70,   39,   86,   71,   68,
       72,   87,   68,   68,   73,   74,   68,   75,   68,   68,
       76,   68,   77,   68,   88,   79,   80,   81,   68,   82,

       83,   68,   84,   68,   68,   85,   68,   68,   68,   68,
       89,   68,   90,   68,   91,   68,   68,   92,   93,   68,
       95,   96,   97,   95,  302,   98,  215,   99,  215,  215,
      208,  100,  101,  217,  102,  209,  303,  103,  253,  104,
      797,  105,  106,  107,  108,  254,  109,  110,  215,  111,
      215,  215,  112,   94,  113,   96,   97,  113,  114,   98,
       94,   99,  115,   94,   94,  100,  101,   94,  102,   94,
       94,  103,   94,  104,   94,  116,  106,  107,  108,   94,
      109,  110,   94,  111,   94,   94,  112,   94,   94,   94,
       94,  117,   94,  118,   94,  119,   94,   94,  120,  121,

       94,   20,  122,  123,  124,  122,   20,   24,  125,  126,
       20,  125,  125,  127,  128,  125,  129,  125,  125,  130,
      125,  131,  125,  132,  133,  134,  135,  125,  136,  137,
      125,  138,   20,  125,  139,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,   20,   20,  140,
      796,  184,  140,   40,  184,  277,  311,   41,  194,  198,
      200,  201,  215,  274,  215,  215,  215,  296,  215,  215,
      141,  215,  793,  215,  215,  278,  312,  262,  218,  220,
      215,  297,  215,  215,  298,  219,  142,  792,  143,  258,
      144,  221,  259,  145,   47,  177,  260,  316,  177,  178,

      316,  299,  215,  179,  215,  215,  215,  222,  215,  215,
      279,  215,  280,  215,  215,  226,  223,  321,  155,  224,
      228,  155,  215,  225,  215,  215,  346,  334,  215,  227,
      215,  215,  180,  215,  181,  215,  215,  229,  288,  182,
      183,  215,  308,  215,  215,  289,  322,  230,  231,  232,
      234,  215,  789,  215,  215,  215,  297,  215,  215,  188,
      215,  233,  215,  215,  235,  215,  203,  215,  215,  239,
      215,  788,  215,  215,  215,  783,  215,  215,  215,  189,
      215,  215,  215,  227,  215,  215,  434,  422,  236,  248,
      249,  250,  248,  782,  204,  242,  250,  251,  250,  250,

      272,  249,  250,  272,  282,  283,  284,  282,  240,  244,
      241,  245,  313,  293,  314,  243,  294,  323,  781,  770,
      295,  307,  283,  284,  307,  311,  769,  246,  317,  318,
      319,  317,  324,  325,  343,  324,  190,  344,  191,  193,
      195,  196,  198,  200,  201,  312,  322,  355,  356,  215,
      355,  215,  215,  215,  768,  215,  215,  215,  247,  215,
      215,  247,  322,  215,  217,  215,  215,  215,  767,  215,
      215,  215,  357,  215,  215,  215,  750,  215,  215,  215,
      749,  215,  215,  215,  360,  215,  215,  358,  215,  321,
      215,  215,  361,  353,  721,  359,  362,  215,  754,  215,

      215,  215,  751,  215,  215,  215,  750,  215,  215,  215,
      247,  215,  215,  247,  215,  363,  215,  215,  322,  215,
      364,  215,  215,  389,  749,  247,  365,  366,  247,  215,
      367,  215,  215,  748,  385,  747,  369,  215,  370,  215,
      215,  215,  368,  215,  215,  215,  247,  215,  215,  247,
      215,  372,  215,  215,  215,  388,  215,  215,  746,  238,
      373,  238,  238,  745,  716,  371,  238,  374,  238,  238,
      375,  215,  744,  215,  215,  215,  714,  215,  215,  215,
      713,  215,  215,  215,  712,  215,  215,  215,  376,  215,
      215,  215,  380,  215,  215,  377,  365,  215,  711,  215,

      215,  215,  247,  215,  215,  247,  378,  247,  242,  384,
      247,  710,  379,  248,  249,  250,  248,  250,  249,  250,
      250,  247,  247,  247,  247,  247,  247,  386,  243,  247,
      721,  720,  247,  382,  381,  390,  247,  247,  719,  247,
      247,  247,  718,  247,  247,  387,  247,  717,  247,  716,
      391,  247,  392,  247,  247,  247,  247,  247,  247,  394,
      715,  393,  395,  398,  247,  397,  247,  247,  714,  247,
      401,  396,  247,  247,  400,  247,  247,  273,  713,  184,
      273,  399,  184,  402,  247,  247,  403,  247,  247,  247,
      247,  247,  247,  247,  247,  712,  711,  406,  393,  409,

      247,  247,  431,  247,  247,  432,  404,  710,  709,  708,
      410,  282,  283,  284,  282,  407,  316,  316,  408,  316,
      316,  317,  318,  319,  317,  707,  324,  325,  412,  324,
      411,  324,  325,  706,  324,  460,  461,  462,  460,  705,
      462,  653,  413,  468,  469,  704,  468,  470,  471,  651,
      470,  355,  356,  703,  355,  215,  322,  215,  215,  702,
      215,  322,  215,  215,  215,  247,  215,  215,  247,  215,
      701,  215,  215,  215,  647,  215,  215,  472,  215,  646,
      215,  215,  463,  473,  475,  247,  645,  477,  247,  353,
      644,  474,  384,  353,  476,  643,  215,  206,  215,  215,

      215,  700,  215,  215,  215,  699,  215,  215,  215,  478,
      215,  215,  215,  660,  215,  215,  215,  247,  215,  215,
      247,  519,  479,  480,  519,  482,  483,  215,  247,  215,
      215,  247,  501,  215,  481,  215,  215,  503,  659,  215,
      484,  215,  215,  215,  485,  215,  215,  215,  247,  215,
      215,  247,  215,  486,  215,  215,  658,  215,  657,  215,
      215,  215,  247,  215,  215,  247,  520,  489,  490,  487,
      498,  656,  655,  488,  492,  461,  215,  492,  493,  654,
      215,  493,  215,  502,  215,  215,  215,  247,  215,  215,
      247,  215,  491,  215,  215,  215,  653,  215,  215,  247,

      247,  652,  247,  247,  247,  247,  247,  247,  247,  247,
      377,  651,  247,  504,  500,  247,  650,  247,  247,  495,
      247,  247,  499,  494,  506,  508,  505,  496,  509,  649,
      510,  247,  507,  497,  247,  247,  247,  247,  247,  247,
      247,  247,  511,  247,  247,  247,  247,  648,  247,  512,
      273,  647,  184,  273,  516,  184,  515,  518,  461,  646,
      518,  247,  513,  514,  247,  247,  247,  247,  247,  247,
      247,  247,  645,  644,  247,  409,  517,  247,  460,  461,
      247,  460,  462,  460,  461,  462,  460,  462,  410,  406,
      462,  570,  468,  469,  570,  468,  470,  471,  521,  470,

      215,  247,  215,  215,  247,  643,  247,  522,  411,  247,
      215,  573,  215,  215,  642,  523,  215,  598,  215,  215,
      215,  247,  215,  215,  247,  247,  575,  463,  247,  599,
      641,  215,  463,  215,  215,  640,  571,  600,  206,  577,
      247,  615,  206,  247,  574,  215,  576,  215,  215,  215,
      639,  215,  215,  215,  247,  215,  215,  247,  215,  638,
      215,  215,  602,  637,  636,  215,  601,  215,  215,  563,
      579,  581,  578,  582,  215,  635,  215,  215,  215,  580,
      215,  215,  583,  215,  634,  215,  215,  215,  247,  215,
      215,  247,  215,  633,  215,  215,  215,  632,  215,  215,

      586,  606,  631,  557,  584,  585,  587,  215,  556,  215,
      215,  215,  630,  215,  215,  589,  215,  247,  215,  215,
      247,  629,  215,  588,  215,  215,  628,  590,  492,  461,
      215,  492,  493,  247,  215,  493,  247,  627,  215,  591,
      215,  215,  215,  605,  215,  215,  215,  551,  215,  215,
      596,  247,  215,  596,  247,  247,  247,  626,  247,  247,
      603,  625,  624,  607,  608,  592,  247,  247,  247,  247,
      247,  247,  604,  247,  623,  572,  247,  494,  595,  247,
      569,  611,  247,  593,  568,  594,  567,  612,  247,  610,
      247,  247,  609,  247,  247,  597,  614,  247,  518,  461,

      519,  518,  247,  519,  566,  247,  613,  247,  247,  621,
      247,  247,  621,  616,  570,  570,  565,  570,  570,  215,
      564,  215,  215,  215,  563,  215,  215,  215,  562,  215,
      215,  215,  661,  215,  215,  663,  561,  617,  560,  664,
      620,  215,  559,  215,  215,  520,  558,  618,  662,  215,
      619,  215,  215,  215,  622,  215,  215,  665,  557,  571,
      571,  666,  215,  556,  215,  215,  215,  555,  215,  215,
      667,  215,  554,  215,  215,  215,  553,  215,  215,  215,
      552,  215,  215,  215,  551,  215,  215,  215,  550,  215,
      215,  668,  549,  548,  215,  671,  215,  215,  547,  215,

      247,  215,  215,  247,  546,  247,  669,  673,  247,  215,
      670,  215,  215,  215,  672,  215,  215,  215,  680,  215,
      215,  215,  545,  215,  215,  215,  434,  215,  215,  215,
      544,  215,  215,  215,  247,  215,  215,  247,  675,  596,
      674,  215,  596,  215,  247,  215,  215,  247,  247,  543,
      247,  247,  682,  247,  247,  542,  683,  247,  676,  681,
      247,  677,  684,  247,  678,  541,  247,  247,  685,  247,
      247,  540,  539,  247,  686,  687,  247,  247,  247,  247,
      247,  247,  247,  247,  597,  538,  247,  690,  679,  247,
      247,  247,  247,  247,  247,  247,  247,  692,  247,  247,

      537,  536,  535,  691,  688,  689,  247,  247,  534,  247,
      247,  247,  621,  533,  247,  621,  694,  247,  693,  215,
      247,  215,  215,  215,  532,  215,  215,  722,  531,  530,
      529,  723,  215,  695,  215,  215,  528,  527,  215,  696,
      215,  215,  697,  215,  526,  215,  215,  215,  525,  215,
      215,  215,  247,  215,  215,  247,  215,  622,  215,  215,
      733,  524,  698,  215,  724,  215,  215,  215,  467,  215,
      215,  725,  466,  465,  215,  726,  215,  215,  215,  346,
      215,  215,  215,  464,  215,  215,  215,  459,  215,  215,
      215,  727,  215,  215,  728,  215,  458,  215,  215,  215,

      457,  215,  215,  729,  215,  456,  215,  215,  215,  247,
      215,  215,  247,  247,  455,  247,  247,  734,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  454,  731,  735,  736,  737,  247,  730,  247,  247,
      247,  247,  247,  247,  247,  247,  732,  247,  453,  247,
      739,  738,  247,  247,  452,  247,  247,  740,  247,  247,
      752,  451,  247,  752,  215,  450,  215,  215,  215,  449,
      215,  215,  215,  448,  215,  215,  215,  447,  215,  215,
      215,  247,  215,  215,  247,  215,  742,  215,  215,  446,
      445,  741,  215,  755,  215,  215,  215,  743,  215,  215,

      215,  444,  215,  215,  756,  753,  757,  758,  443,  215,
      758,  215,  247,  215,  215,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  442,
      761,  247,  762,  764,  763,  247,  764,  752,  247,  752,
      752,  441,  752,  771,  760,  215,  771,  215,  215,  440,
      318,  215,  759,  215,  215,  215,  439,  215,  215,  758,
      438,  215,  758,  215,  437,  215,  215,  775,  766,  215,
      775,  247,  247,  247,  247,  247,  247,  764,  765,  436,
      764,  435,  753,  247,  753,  433,  247,  773,  772,  779,
      771,  771,  779,  771,  771,  430,  215,  429,  215,  215,

      215,  428,  215,  215,  759,  777,  427,  775,  774,  215,
      775,  215,  776,  215,  215,  247,  247,  779,  247,  247,
      779,  247,  765,  215,  247,  215,  215,  426,  778,  784,
      215,  425,  215,  215,  780,  772,  772,  247,  247,  424,
      247,  247,  215,  247,  215,  215,  247,  215,  786,  215,
      215,  247,  776,  423,  247,  215,  785,  215,  215,  422,
      421,  420,  780,  802,  247,  419,  787,  247,  215,  790,
      215,  215,  803,  418,  247,  417,  791,  247,  416,  415,
      414,  287,  798,  283,  794,  795,  799,   20,   20,   20,
       20,   20,   20,   48,   48,   48,   48,   48,   48,   53,

       53,   53,   53,   53,   53,   60,   60,   60,   60,   60,
       60,   65,   65,   65,   65,   65,   65,   68,   68,   68,
       68,   68,   68,   94,   94,   94,   94,   94,   94,  146,
      146,  146,  146,  146,  146,  151,  151,  151,  151,  151,
      151,  184,  184,  212,  184,  184,  184,  194,  194,  194,
      194,  194,  194,  197,  354,  353,  206,  197,  197,  199,
      199,  199,  199,  199,  199,  205,  205,  202,  352,  205,
      205,  211,  211,  211,  198,  211,  211,  214,  214,  193,
      214,  214,  214,  237,  237,  351,  237,  237,  237,  247,
      247,  350,  349,  348,  247,  273,  273,  347,  273,  273,

      273,  315,  315,  192,  187,  186,  315,  320,  320,  320,
      320,  320,  320,  383,  383,  345,  342,  341,  383,  405,
      405,  340,  405,  405,  405,  339,  338,  337,  336,  335,
      334,  333,  332,  331,  330,  329,  328,  327,  326,  157,
      318,  310,  309,  306,  305,  304,  301,  300,  292,  291,
      290,  287,  285,  281,  276,  275,  271,  270,  269,  266,
      265,  257,  256,  255,  252,  216,  213,  212,  210,  207,
      206,  202,  198,  193,  192,  187,  186,  176,  175,  174,
      171,  170,  162,  161,  160,  157,  156,  804,   19,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,

      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804
    } ;

static yyconst flex_int16_t yy_chk[2138] =
    {   0,
        0,    1,    1,    1,    1,  824,    1,    0,    1,    7,
        7,   21,    1,    1,   21,    1,    8,    8,    1,   26,
        1,  800,    1,    1,    1,    1,   26,    1,    1,   68,
        1,   68,   68,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    3,    3,    3,    3,    4,    4,    4,    4,
        4,    5,    5,    6,    6,   15,   15,   15,   15,    4,

       15,   16,   16,   16,   16,   31,   16,   32,   17,   17,
       30,   35,   42,   30,   18,   18,   46,   30,   46,   31,
       51,   51,   51,   35,   32,   45,   42,    4,  797,   59,
       63,    5,  106,    6,  105,   63,    5,   17,    6,    9,
        9,    9,    9,   18,    9,   45,    9,  109,  105,  106,
        9,    9,   71,    9,   71,   71,    9,   59,    9,  109,
        9,    9,    9,    9,  796,    9,    9,   86,    9,   86,
       86,    9,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,

       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       11,   11,   11,   11,  136,   11,   72,   11,   72,   72,
      208,   11,   11,   72,   11,  208,  136,   11,  100,   11,
      793,   11,   11,   11,   11,  100,   11,   11,   87,   11,
       87,   87,   11,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,

       12,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   14,
      792,  114,   14,   14,  114,  119,  144,   14,   56,   56,
       56,   56,   73,  116,   73,   73,   74,  132,   74,   74,
       14,   75,  789,   75,   75,  119,  144,  116,   73,   74,
       76,  132,   76,   76,  133,   73,   14,  788,   14,  104,
       14,   75,  104,   14,   14,   39,  104,  146,   39,   39,

      146,  133,   77,   39,   77,   77,   78,   76,   78,   78,
      120,   79,  120,   79,   79,   78,   77,  151,  155,   77,
       79,  155,   80,   77,   80,   80,  185,  185,   81,   78,
       81,   81,   39,   82,   39,   82,   82,   79,  127,   39,
       39,   83,  141,   83,   83,  127,  151,   80,   81,   82,
       83,   84,  782,   84,   84,   85,  141,   85,   85,  189,
       88,   82,   88,   88,   84,   89,  204,   89,   89,   88,
       90,  781,   90,   90,   91,  772,   91,   91,   92,  189,
       92,   92,   93,   88,   93,   93,  308,  308,   85,   95,
       95,   95,   95,  769,  204,   91,   97,   97,   97,   97,

      113,  113,  113,  113,  122,  122,  122,  122,   89,   92,
       90,   92,  145,  131,  145,   91,  131,  153,  767,  753,
      131,  140,  140,  140,  140,  312,  751,   93,  147,  147,
      147,  147,  154,  154,  175,  154,  182,  175,  182,  196,
      196,  196,  201,  201,  201,  312,  153,  210,  210,  214,
      210,  214,  214,  215,  748,  215,  215,  217,  247,  217,
      217,  247,  154,  218,  217,  218,  218,  219,  746,  219,
      219,  220,  218,  220,  220,  221,  745,  221,  221,  222,
      744,  222,  222,  223,  221,  223,  223,  219,  224,  320,
      224,  224,  222,  210,  721,  220,  223,  225,  720,  225,

      225,  226,  718,  226,  226,  227,  717,  227,  227,  228,
      257,  228,  228,  257,  229,  224,  229,  229,  320,  230,
      225,  230,  230,  257,  715,  253,  226,  227,  253,  231,
      228,  231,  231,  709,  253,  708,  230,  232,  231,  232,
      232,  233,  229,  233,  233,  234,  256,  234,  234,  256,
      235,  233,  235,  235,  236,  256,  236,  236,  707,  237,
      234,  237,  237,  706,  705,  232,  238,  235,  238,  238,
      235,  239,  704,  239,  239,  240,  703,  240,  240,  241,
      702,  241,  241,  242,  701,  242,  242,  243,  236,  243,
      243,  245,  242,  245,  245,  239,  239,  244,  700,  244,

      244,  246,  252,  246,  246,  252,  240,  254,  243,  252,
      254,  699,  241,  248,  248,  248,  248,  250,  250,  250,
      250,  255,  258,  259,  255,  258,  259,  254,  243,  260,
      660,  658,  260,  245,  244,  258,  261,  262,  657,  261,
      262,  263,  656,  264,  263,  255,  264,  655,  265,  654,
      259,  265,  260,  267,  266,  269,  267,  266,  269,  262,
      652,  261,  263,  266,  268,  265,  270,  268,  650,  270,
      269,  264,  271,  274,  268,  271,  274,  273,  649,  273,
      273,  267,  273,  270,  275,  276,  270,  275,  276,  278,
      277,  279,  278,  277,  279,  648,  642,  274,  274,  277,

      280,  281,  305,  280,  281,  305,  271,  641,  640,  639,
      278,  282,  282,  282,  282,  275,  315,  316,  276,  315,
      316,  317,  317,  317,  317,  638,  322,  322,  279,  322,
      278,  324,  324,  637,  324,  346,  346,  347,  346,  636,
      347,  635,  280,  353,  353,  634,  353,  354,  354,  633,
      354,  355,  355,  632,  355,  357,  322,  357,  357,  631,
      358,  324,  358,  358,  359,  383,  359,  359,  383,  360,
      630,  360,  360,  361,  629,  361,  361,  357,  362,  628,
      362,  362,  347,  358,  360,  384,  627,  362,  384,  353,
      626,  359,  384,  354,  361,  625,  363,  355,  363,  363,

      364,  624,  364,  364,  365,  623,  365,  365,  366,  363,
      366,  366,  367,  572,  367,  367,  368,  388,  368,  368,
      388,  407,  364,  365,  407,  367,  368,  369,  390,  369,
      369,  390,  388,  370,  366,  370,  370,  390,  571,  371,
      369,  371,  371,  372,  370,  372,  372,  373,  385,  373,
      373,  385,  374,  371,  374,  374,  569,  375,  568,  375,
      375,  376,  389,  376,  376,  389,  407,  374,  375,  372,
      385,  566,  565,  373,  377,  377,  377,  377,  378,  564,
      378,  378,  379,  389,  379,  379,  380,  387,  380,  380,
      387,  381,  376,  381,  381,  382,  562,  382,  382,  386,

      391,  561,  386,  391,  392,  393,  394,  392,  393,  394,
      380,  560,  395,  391,  387,  395,  559,  397,  396,  379,
      397,  396,  386,  378,  393,  395,  392,  381,  396,  558,
      397,  398,  394,  382,  398,  399,  400,  401,  399,  400,
      401,  402,  398,  403,  402,  404,  403,  555,  404,  399,
      405,  554,  405,  405,  403,  405,  402,  406,  406,  553,
      406,  408,  400,  401,  408,  409,  410,  411,  409,  410,
      411,  412,  552,  550,  412,  410,  404,  413,  434,  434,
      413,  434,  435,  460,  460,  435,  460,  462,  411,  409,
      462,  466,  468,  468,  466,  468,  470,  470,  408,  470,

      472,  499,  472,  472,  499,  549,  498,  412,  411,  498,
      474,  472,  474,  474,  548,  413,  473,  498,  473,  473,
      475,  500,  475,  475,  500,  515,  474,  435,  515,  499,
      547,  476,  462,  476,  476,  545,  466,  500,  468,  476,
      501,  515,  470,  501,  473,  477,  475,  477,  477,  478,
      544,  478,  478,  479,  502,  479,  479,  502,  480,  543,
      480,  480,  502,  542,  541,  481,  501,  481,  481,  540,
      478,  480,  477,  481,  482,  539,  482,  482,  483,  479,
      483,  483,  482,  484,  538,  484,  484,  485,  506,  485,
      485,  506,  486,  537,  486,  486,  487,  536,  487,  487,

      485,  506,  535,  534,  483,  484,  486,  488,  533,  488,
      488,  489,  532,  489,  489,  488,  490,  505,  490,  490,
      505,  531,  491,  487,  491,  491,  530,  489,  492,  492,
      492,  492,  493,  503,  493,  493,  503,  529,  494,  490,
      494,  494,  495,  505,  495,  495,  496,  528,  496,  496,
      497,  504,  497,  497,  504,  507,  508,  527,  507,  508,
      503,  526,  525,  507,  508,  491,  509,  510,  511,  509,
      510,  511,  504,  512,  524,  467,  512,  493,  496,  513,
      465,  511,  513,  494,  464,  495,  463,  512,  514,  510,
      516,  514,  509,  516,  517,  497,  514,  517,  518,  518,

      519,  518,  520,  519,  459,  520,  513,  521,  522,  523,
      521,  522,  523,  516,  546,  570,  458,  546,  570,  573,
      457,  573,  573,  574,  456,  574,  574,  575,  455,  575,
      575,  576,  573,  576,  576,  575,  454,  517,  453,  576,
      522,  577,  452,  577,  577,  519,  451,  520,  574,  578,
      521,  578,  578,  579,  523,  579,  579,  578,  450,  546,
      570,  579,  580,  449,  580,  580,  581,  448,  581,  581,
      580,  582,  447,  582,  582,  583,  446,  583,  583,  584,
      445,  584,  584,  585,  444,  585,  585,  586,  443,  586,
      586,  581,  442,  441,  587,  586,  587,  587,  440,  588,

      602,  588,  588,  602,  439,  598,  584,  588,  598,  589,
      585,  589,  589,  590,  587,  590,  590,  591,  598,  591,
      591,  592,  438,  592,  592,  593,  437,  593,  593,  594,
      436,  594,  594,  595,  599,  595,  595,  599,  591,  596,
      590,  596,  596,  597,  600,  597,  597,  600,  601,  433,
      606,  601,  600,  606,  603,  432,  601,  603,  592,  599,
      604,  594,  603,  604,  595,  431,  605,  607,  604,  605,
      607,  430,  429,  608,  605,  606,  608,  609,  610,  611,
      609,  610,  611,  612,  596,  428,  612,  611,  597,  613,
      614,  615,  613,  614,  615,  616,  617,  613,  616,  617,

      427,  426,  425,  612,  609,  610,  618,  619,  424,  618,
      619,  620,  621,  423,  620,  621,  616,  622,  615,  661,
      622,  661,  661,  662,  422,  662,  662,  661,  421,  420,
      419,  662,  663,  617,  663,  663,  418,  417,  664,  619,
      664,  664,  620,  665,  416,  665,  665,  666,  415,  666,
      666,  667,  680,  667,  667,  680,  668,  621,  668,  668,
      680,  414,  622,  669,  668,  669,  669,  670,  352,  670,
      670,  669,  351,  350,  671,  670,  671,  671,  672,  349,
      672,  672,  673,  348,  673,  673,  674,  345,  674,  674,
      675,  672,  675,  675,  674,  676,  344,  676,  676,  677,

      343,  677,  677,  675,  678,  342,  678,  678,  679,  681,
      679,  679,  681,  682,  341,  683,  682,  681,  683,  684,
      685,  686,  684,  685,  686,  687,  688,  689,  687,  688,
      689,  340,  677,  687,  688,  689,  690,  676,  691,  690,
      692,  691,  693,  692,  694,  693,  678,  694,  339,  695,
      693,  691,  695,  696,  338,  697,  696,  694,  697,  698,
      719,  337,  698,  719,  722,  336,  722,  722,  723,  335,
      723,  723,  724,  334,  724,  724,  725,  333,  725,  725,
      726,  733,  726,  726,  733,  727,  696,  727,  727,  332,
      331,  695,  728,  727,  728,  728,  729,  697,  729,  729,

      730,  330,  730,  730,  729,  719,  730,  731,  329,  731,
      731,  732,  734,  732,  732,  734,  735,  736,  737,  735,
      736,  737,  738,  739,  740,  738,  739,  740,  741,  328,
      738,  741,  740,  742,  741,  743,  742,  747,  743,  752,
      747,  327,  752,  754,  732,  755,  754,  755,  755,  326,
      319,  756,  731,  756,  756,  757,  314,  757,  757,  758,
      313,  758,  758,  759,  311,  759,  759,  760,  743,  760,
      760,  761,  762,  763,  761,  762,  763,  764,  742,  310,
      764,  309,  747,  765,  752,  306,  765,  757,  754,  766,
      768,  771,  766,  768,  771,  304,  773,  303,  773,  773,

      774,  302,  774,  774,  758,  763,  301,  775,  759,  775,
      775,  776,  760,  776,  776,  777,  778,  779,  777,  778,
      779,  780,  764,  785,  780,  785,  785,  300,  765,  773,
      784,  299,  784,  784,  766,  768,  771,  786,  787,  298,
      786,  787,  790,  791,  790,  790,  791,  794,  777,  794,
      794,  795,  775,  297,  795,  798,  776,  798,  798,  296,
      295,  294,  779,  798,  799,  293,  780,  799,  802,  784,
      802,  802,  799,  292,  803,  291,  786,  803,  290,  289,
      288,  287,  794,  284,  790,  791,  795,  805,  805,  805,
      805,  805,  805,  806,  806,  806,  806,  806,  806,  807,

      807,  807,  807,  807,  807,  808,  808,  808,  808,  808,
      808,  809,  809,  809,  809,  809,  809,  810,  810,  810,
      810,  810,  810,  811,  811,  811,  811,  811,  811,  812,
      812,  812,  812,  812,  812,  813,  813,  813,  813,  813,
      813,  814,  814,  211,  814,  814,  814,  815,  815,  815,
      815,  815,  815,  816,  209,  206,  205,  816,  816,  817,
      817,  817,  817,  817,  817,  818,  818,  203,  202,  818,
      818,  819,  819,  819,  200,  819,  819,  820,  820,  195,
      820,  820,  820,  821,  821,  191,  821,  821,  821,  822,
      822,  190,  188,  187,  822,  823,  823,  186,  823,  823,

      823,  825,  825,  183,  181,  180,  825,  826,  826,  826,
      826,  826,  826,  827,  827,  176,  174,  173,  827,  828,
      828,  172,  828,  828,  828,  171,  170,  169,  168,  167,
      166,  165,  164,  163,  162,  161,  160,  159,  158,  157,
      149,  143,  142,  139,  138,  137,  135,  134,  130,  129,
      128,  126,  124,  121,  118,  117,  112,  111,  110,  108,
      107,  103,  102,  101,   99,   70,   67,   65,   64,   62,
       60,   58,   55,   50,   47,   44,   43,   38,   37,   36,
       34,   33,   29,   28,   27,   25,   23,   19,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,

      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[64] =
    {   0,
0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 
    1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#line 2 "levcomp.lpp"

// levcomp.lpp:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
// 
// Based loosely on NetHack's lev_comp.l

#include "AppHdr.h"
#include "mapdef.h"
#include "levcomp.tab.h"
#include <cstring>
#include <queue>

static bool alloced = false;

std::queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(100);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

static char *copy_text(bool trim_right, int strip_trailing)
{
    char *newstring = NULL;
    if ((yylval.text = newstring = strdup(yytext)))
    {
        alloced = true;
        char *s = NULL;
        if (trim_right)
        {
            s = newstring + strlen(newstring) - 1;
            while (isspace(*s) && s >= newstring)
                *s-- = 0;
        }
        if (strip_trailing)
        {
            if (!s)
                s = newstring + strlen(newstring) - 1;
            while (s >= newstring && --strip_trailing >= 0)
                *s-- = 0;
        }
    }
    return (newstring);
}

static void settext(bool trim_right = false, int strip_trailing = 0)
{
    clean();
    char *newstring = copy_text(trim_right, strip_trailing);
    yylval.text = newstring;
}









#line 1295 "levcomp.lex.cc"

#define INITIAL 0
#define MAPDEF 1
#define LUA 2
#define LUA_ONELINER 3
#define ARGUMENT 4
#define MNAME 5
#define KEYWORDS 6
#define ITEM_LIST 7
#define TOEOL 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 89 "levcomp.lpp"


#line 1462 "levcomp.lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 805 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 804 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 91 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 93 "levcomp.lpp"
{
                        settext(true);
                        return MAP_LINE;
                    }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 98 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 99 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 100 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 102 "levcomp.lpp"
;
	YY_BREAK
case 7:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 104 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 8:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 105 "levcomp.lpp"
{
                            settext(true, 2);
                            BEGIN(INITIAL);
                            return LUA_LINE;
                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 110 "levcomp.lpp"
{
                            settext();
                            return LUA_LINE;
                        }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 114 "levcomp.lpp"
;
	YY_BREAK
case 11:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 116 "levcomp.lpp"
{
                            settext();
                            return LUA_LINE;
                        }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 120 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 122 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 127 "levcomp.lpp"
;
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 128 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 130 "levcomp.lpp"
{ 
                        settext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 135 "levcomp.lpp"
{
                        settext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 140 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 141 "levcomp.lpp"
;
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 142 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 144 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 146 "levcomp.lpp"
{ 
                        settext();
                        return MONSTER_NAME; 
                    }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 151 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 152 "levcomp.lpp"
;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 154 "levcomp.lpp"
{ 
                        BEGIN(INITIAL);
                        settext();
                        return STRING; 
                    }
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 160 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 27:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 162 "levcomp.lpp"
{
                        settext(true, 1);
                        return STRING;
                    }
	YY_BREAK
case 28:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 167 "levcomp.lpp"
{
                        BEGIN(INITIAL);
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 172 "levcomp.lpp"
;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 174 "levcomp.lpp"
;
	YY_BREAK
case 31:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 176 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 178 "levcomp.lpp"
{ BEGIN(LUA_ONELINER); return MAIN; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 180 "levcomp.lpp"
{ BEGIN(LUA); return PRELUDE; }      
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 181 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 182 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 183 "levcomp.lpp"
{ BEGIN(LUA); return VALIDATE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 184 "levcomp.lpp"
{ BEGIN(LUA); return VETO; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 187 "levcomp.lpp"
{ BEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 188 "levcomp.lpp"
{ BEGIN(ARGUMENT); return DEFAULT_DEPTH; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 189 "levcomp.lpp"
{ BEGIN(ARGUMENT); return DEPTH; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 190 "levcomp.lpp"
{ BEGIN(ARGUMENT); return ORIENT; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 191 "levcomp.lpp"
{ BEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 192 "levcomp.lpp"
{ BEGIN(ARGUMENT); return WELCOME; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 193 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 194 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 195 "levcomp.lpp"
{ BEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 196 "levcomp.lpp"
{ BEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 197 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return SUBST; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 198 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return NSUBST; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 199 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return COLOUR; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 200 "levcomp.lpp"
{ BEGIN(MNAME); return MONS; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 201 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 202 "levcomp.lpp"
{ BEGIN(TOEOL); return MARKER; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 203 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return SHUFFLE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 205 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KFEAT; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 206 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KITEM; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 207 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KMONS; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 209 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 211 "levcomp.lpp"
{
                        clean();
                        yylval.i = atoi(yytext);
                        return INTEGER;
                    }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 217 "levcomp.lpp"
;
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 218 "levcomp.lpp"
;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 219 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 221 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 1935 "levcomp.lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MAPDEF):
case YY_STATE_EOF(LUA):
case YY_STATE_EOF(LUA_ONELINER):
case YY_STATE_EOF(ARGUMENT):
case YY_STATE_EOF(MNAME):
case YY_STATE_EOF(KEYWORDS):
case YY_STATE_EOF(ITEM_LIST):
case YY_STATE_EOF(TOEOL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 805 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 805 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 804);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 221 "levcomp.lpp"



int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}

