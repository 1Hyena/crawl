#line 2 "levcomp.lex.cc"

#line 4 "levcomp.lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 81
#define YY_END_OF_BUFFER 82
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1096] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   82,   80,   77,   78,
       79,   75,   80,   73,   76,   74,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   77,   34,   36,   80,   80,   80,   80,   80,
       80,   81,    6,   81,   81,    4,    2,    3,   81,    2,
        2,    2,    2,    9,   10,   81,    9,    9,   81,   12,
       81,   32,   77,   33,   79,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   77,   32,   32,

       32,   32,   32,   32,   32,   32,   80,   28,   23,   28,
       75,   80,   27,   76,   74,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   28,   34,   36,   80,   80,   80,   80,   80,
       80,   15,   16,   79,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   80,   13,   15,   13,   13,   13,   13,   13,
       81,   21,   22,   81,   20,   81,   77,   78,   76,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   77,   34,   36,    0,    0,    0,
        0,   34,    0,    0,    0,    0,    0,    0,    0,   39,
        6,    5,    0,    0,    2,    3,    2,    0,    2,    2,
        2,    2,    9,    9,   10,    9,    9,    9,    0,   11,
        0,   12,   31,    0,   31,   77,   33,    0,    0,   33,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,    0,   30,   31,   77,   31,
       34,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       26,    0,   26,   28,   23,   28,    0,   23,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,    0,   25,    0,   26,   28,   26,   34,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   15,
       16,    0,    0,    0,   16,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,    0,   14,   13,   15,   13,   13,   13,   13,   13,
       13,   13,   19,    0,   19,   21,   22,    0,    0,    0,
        0,   18,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    2,    9,    9,    9,
        7,    0,    0,   29,    0,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   34,   31,   31,   31,   31,   31,   31,    0,
       24,    0,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   34,

       34,   26,   26,   26,   26,   26,   26,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
        0,   17,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   35,    0,    0,    0,    0,    0,    2,
        9,    8,    0,    9,    7,    0,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,    0,    0,   31,   31,   31,
       31,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
        0,    0,   26,   26,   26,   26,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,    0,    0,
        0,    0,    0,    0,   64,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   63,   42,    0,    0,    0,    0,
        0,    0,    0,   51,    0,    0,    0,   38,    0,    0,
        0,    0,    2,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,    0,   31,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,    0,
       26,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,    0,    0,
        0,   44,   50,   61,   67,   68,   70,   69,   71,    0,
        0,    0,    0,    0,    0,    0,   46,   62,    0,   54,
        0,    0,    0,    0,    0,    0,   41,    1,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   53,   48,   56,   52,    0,    0,    0,
        0,   65,   55,   45,    0,    0,   49,    0,    0,    0,
        0,    1,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,    0,    0,
        0,    0,   66,    0,   47,    0,    0,    0,    0,   31,

       31,   31,   31,   31,   31,   31,   31,    0,   31,   31,
       26,   26,   26,   26,   26,   26,   26,   26,    0,   26,
       26,   13,   13,   13,   13,   13,   13,   13,    0,    0,
       58,    0,   72,    0,   37,    0,    0,   31,   31,   31,
       31,   31,   31,   31,    0,   31,   26,   26,   26,   26,
       26,   26,   26,    0,   26,   13,   13,   13,   13,   57,
        0,   60,    0,   40,   31,   31,   31,   31,   31,   26,
       26,   26,   26,   26,   13,   13,   59,    0,   31,   31,
       26,   26,   13,    0,   31,   26,   13,    0,   31,   26,
       13,   43,   31,   26,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    6,    1,    7,    1,    1,    1,
        1,    1,    8,    9,   10,    1,    1,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   12,    1,    1,
        1,    1,    1,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       22,   29,   30,   31,   32,   33,   34,   22,   22,   22,
        1,   35,    1,    1,   22,    1,   36,   22,   22,   37,

       38,   39,   22,   40,   41,   22,   22,   42,   22,   22,
       43,   44,   22,   45,   46,   47,   48,   49,   22,   22,
       22,   22,   50,    1,   51,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[52] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    1,    5,    6,
        6,    1,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    1,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    1,
        1
    } ;

static yyconst flex_int16_t yy_base[1113] =
    {   0,
        0,   50,   54,   61,   65,   67,   50,   69,  118,  168,
      218,  268,  318,  368,   77,  173, 2459, 3602,   72, 3602,
     2451, 3602, 2438, 3602, 2435, 3602, 2426,   56, 2418,   60,
     2403,   77,   72,   76,   74, 2398, 2398, 2377,   65, 2390,
     2385, 2360,  417,    0, 3602,  158, 2339, 2338,   63,   70,
     2324, 3602, 3602, 2361,  183, 3602,    0, 3602, 2353,  187,
        0, 2329,  155, 2301, 3602, 2344,   64, 2293,  180, 3602,
     2337,  273,  280, 3602,  373,  380,  385,  390,  395,  399,
      422,  433,  437,  445,  460,  494,  479,  498,  488,  502,
      522,  530,  534,  538,  543,  572,  548,  577,  554,  566,

      583,  588,  593,  600,  604,  609,  274,  617, 3602,  627,
      381,  589, 3602,  632,  386,  453,  443,  643,  645,  651,
      656,  661,  670,  687,  666,  683,  668,  704,  652,  706,
      710,  714,  723,  728,  729,  733,  738,  742,  746,  760,
      754,  780, 3602,  797, 2322, 2319,    0, 2302,  175, 2302,
      172, 2281,  179,  176,  186,  168, 2281, 2282, 2273,  266,
     2283, 2278,  285, 2256,  803,  268, 2238, 2238,   68,  173,
      774,  808, 3602,  814, 3602,  818,  289, 3602, 2269, 2254,
     2261, 2248, 2238, 2251, 2227, 2226, 2217, 2201,  279, 2201,
     2192, 2185, 2182, 2180, 2171, 2158, 2167, 2168, 2145, 2132,

     2139, 2129,  275, 2107,    0,    0, 3602, 2092, 2093,  264,
     2086,    0,  187, 2092, 2079, 2102,  356, 2069, 2061, 3602,
     3602, 3602, 2083,  300,    0, 3602,    0, 2079,  428, 2047,
     2032,  255, 2005, 1998, 3602,  265, 1997,  822,  368, 3602,
     2041, 3602,  826,  831,  837,  842, 3602,  852,  860, 3602,
      865,  877,  881,  886,  891,  900,  904,  913,  927,  918,
      932,  936,  950,  956,  964,  968,  973,  977,  984, 1002,
     1009, 1016, 1020, 1024, 1036, 1059, 3602, 1031,    0, 1045,
     1063, 1070, 1074, 1079, 1083, 1087, 1091, 1106, 1115, 1123,
      922,  941, 1128, 1140, 3602, 1149, 1162, 3602,  945, 1099,

      982, 1133, 1144, 1134, 1168, 1169, 1175, 1051, 1180, 1176,
     1185, 1186, 1193, 1192, 1194, 1212, 1221, 1228, 1229, 1230,
     1234, 1235, 1247, 1255, 3602, 1270, 1241,    0, 1279, 1287,
     1295, 1300, 1301, 1305, 1306, 1307, 1313, 1311, 1315, 1321,
     3602, 1357, 1361, 1347, 3602,    0, 2032, 2018, 2020, 2007,
     1998, 2012, 2000, 2001, 1992, 1977,  460, 1976, 1978, 1973,
     1970, 1964, 1961, 1952, 1961, 1956, 1943, 1928, 1940, 1928,
      422, 1365, 3602, 1899,    0,  423, 1899, 1893, 1917,  382,
     1883, 1877, 1342, 1352, 1369, 1376, 3602, 1381, 1386, 1391,
     1395, 3602, 1403, 1906, 1891, 1886, 1878, 1886, 1880, 1875,

     1870, 1856, 1842, 1833, 1822,  462, 1832, 1822, 1814, 1789,
     1790, 1782, 1778, 1767, 1770,  444, 1750, 1754, 1757, 1733,
     1410,  480, 1726, 1733, 1715, 1711, 1711, 1415, 1419, 1429,
     3602, 1433, 1437, 3602, 1441, 1446, 1423, 1450, 1458, 1463,
     1471, 1482, 1486, 1492, 1498, 1506, 1510, 1521, 1514, 1534,
     1538, 1542, 1548, 1559, 1570, 1576, 1584, 1588, 1594, 1608,
     1599, 1604, 1628, 1633, 1640, 1644, 1648, 1652, 1656, 1662,
     3602, 1667, 1582, 1672, 1620, 1657, 1676, 1680, 1698, 1700,
     1704, 1712, 1714, 1723, 1724, 1729, 1469, 1722, 1736, 1741,
     1743, 1760, 1761, 1765, 1772, 1779, 1784, 1777, 1785, 1813,

     1821, 1825, 1796, 1808, 1806, 1830, 1831, 1719, 1704, 1695,
     1689, 1699, 1688, 1685, 1695, 1684, 1666, 1668, 1662,  528,
     1669, 1657, 1643, 1634, 1627, 1611, 1611, 1596, 1598,  480,
     1577, 1578, 1576, 1546, 1835,  764, 1537, 1543, 1525, 1522,
     1849, 3602, 1853, 1541, 1543, 1523, 1534, 1521, 1518, 1519,
     1499, 1499, 1499, 1490, 1485, 1486, 1456, 1456, 1461, 1457,
     1452, 1431, 1431, 1430, 1412, 1392, 1378, 1390, 1390, 1381,
     1367, 1328, 1859, 3602,  995, 1325, 1297, 1302, 1451, 1325,
     1865, 3602, 1873, 1877, 3602, 1883, 1887, 1892, 1897, 1906,
     1910, 1916, 1932, 1944, 1948, 1953, 1957, 1961, 1966, 1976,

     1989, 1993, 2002, 2011, 2015, 2025, 2030, 2036, 2050, 2057,
     2062, 2068, 2074, 2079, 2085, 2096, 2091, 2100, 2108, 2114,
     2119, 1937, 1888, 2120, 2125, 2127, 2142, 2156, 2132, 2168,
     2034, 2169, 2137, 2072, 2173, 2174, 2178, 2180, 2182, 2184,
     2196, 2216, 2218, 2222, 2223, 2224, 2234, 2236, 2240, 2242,
     2258, 2247, 2263, 2268, 2274, 2279, 1315, 1318, 1299, 1307,
     1291, 1284, 1283, 1263, 1268, 1264, 1256, 1257, 1260, 1251,
     1254, 1250, 1254, 1249, 1225, 1227, 1234, 1228, 1220, 1194,
     1211, 1204, 1192, 1181, 1158, 1154, 1164, 1565, 1170, 1166,
     1147, 1149, 1148, 1147, 3602, 1144, 1143, 1128, 1117, 1112,

     1083, 1083,  282, 1078, 3602, 3602, 1075, 1068, 1085, 1078,
     1053, 1057, 1026, 3602, 1023, 1027, 1004, 3602, 1005, 1003,
     1792,  982, 1003, 2287, 2283, 2297, 2303, 2319, 2323, 2332,
     2337, 2341, 2357, 2361, 2366, 2375, 2346, 2380, 2384, 2389,
     2395, 2402, 2412, 2416, 2427, 2421, 2436, 2448, 2453, 2459,
     2464, 2468, 2472, 2477, 2482, 2491, 2496, 2500, 2504, 2407,
     2473, 2517, 2522, 2355, 2531, 2535, 2543, 2548, 2549, 2557,
     2562, 2567, 2566, 2523, 2571, 2572, 2583, 2584, 2588, 2603,
     2608, 2607, 2619, 2620, 2624, 2626, 2628, 2630, 2635, 2639,
     2643,  997, 1006,  987,  998,  990,  989,  984,  980,  978,

      952,  951,  921,  913,  490,  904,  897,  883,  899,  895,
      879,  887,  866,  866,  867,  847,  847,  844,  866,  863,
      862, 3602, 3602, 3602, 3602, 3602, 3602, 3602, 3602,  859,
      513,  841,  839,  847,  846,  840, 3602, 3602,  834, 3602,
      826,  836,  820,  787,  791,  756, 3602,  792, 2648, 2675,
     2680, 2671, 2686, 2692, 2696, 2700, 2707, 2712, 2718, 2724,
     2735, 2728, 2739, 2744, 2760, 2771, 2776, 2780, 2784, 2788,
     2792, 2798, 2803, 2820, 2824, 2830, 2835, 2756, 2839, 2840,
     2664, 2752, 2812, 2841, 2848, 2852, 2856, 2858, 2866, 2864,
     2879, 2883, 2884, 2895, 2900, 2906, 2908, 2915, 2919, 2920,

     2921, 2929, 2934, 2935, 2940, 2947,  782,  781,  779,  778,
      584,  761,  759,  766,  763,  762,  755,  746,  755,  744,
      710,  717,  707, 3602, 3602, 3602, 3602,  726,  729,  718,
      705, 3602, 3602, 3602,  709,  689, 3602,  698,  694, 1893,
      664,  693, 2955, 2961, 2972, 2981, 2987, 2996, 3000, 3004,
     3008, 3016, 3021, 3025, 3036, 3040, 3045, 3059, 3050, 3068,
     3031, 3057, 3063, 3072, 3074, 3076, 3081, 3086, 3082, 3088,
     3094, 3110, 3122, 3123, 3128, 3129, 3130, 3136,  667,  672,
      640,  631,  639,  618,  629,  623, 1972,  589,  602,  593,
      604,  586, 3602,  572, 3602,  535, 2200,  517, 2205, 3142,

     3146, 3150, 3171, 3182, 3187, 3191, 3196, 3200, 3205, 3209,
     3192, 3210, 3216, 3236, 3227, 3234, 3247, 3252, 3256, 3258,
     3262,  540,  539,  550,  532,  508,  480, 3218,  504,  492,
     3602,  482, 3602,  448, 3602, 3268,  429, 3272, 3281, 3276,
     3290, 3299, 3315, 3319, 3324, 3328, 3333, 3334, 3270, 3335,
     3308, 3344, 3350, 3355, 3356,  444,  427,  424,  375, 3602,
      399, 3602,  365, 3602, 3360, 3382, 3394, 3398, 3405, 3378,
     3399, 3387, 3410, 3414,  393,  354, 3602,  332, 3416, 3421,
     3422, 3426,  260,  231, 3434, 3430,  166,  167, 3448, 3470,
      105, 3602, 3442, 3453, 3602, 3505, 3511, 3517, 3523, 3529,

     3535, 3541, 3547, 3553, 3559, 3565, 3571, 3577, 3583, 3589,
       55, 3595
    } ;

static yyconst flex_int16_t yy_def[1113] =
    {   0,
     1095,    1, 1096, 1097, 1098, 1098, 1099, 1099, 1095,    9,
     1095,   11, 1095,   13, 1100, 1100, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1101, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1102, 1095, 1103, 1095, 1095, 1104,
     1103, 1103, 1103, 1105, 1095, 1095, 1105, 1105, 1106, 1095,
     1095, 1107, 1095, 1095, 1095, 1107, 1107, 1107, 1107, 1107,
     1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107,
     1107, 1107, 1107, 1107, 1107, 1107, 1107,   43, 1108, 1107,

     1107, 1107, 1107, 1107, 1107, 1107, 1109, 1095, 1095, 1095,
     1109, 1109, 1095, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109,   43, 1110, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1095, 1095, 1095, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1095, 1111,   43, 1111, 1111, 1111, 1111, 1111,
     1112, 1095, 1095, 1095, 1095, 1112, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,

     1095, 1095, 1095, 1095,   43, 1101, 1095, 1095, 1095, 1095,
     1095, 1101, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1103, 1095, 1103, 1095, 1103, 1103,
     1103, 1103, 1105, 1105, 1095, 1105, 1105, 1105, 1106, 1095,
     1095, 1095, 1107, 1107, 1107, 1095, 1095, 1095, 1095, 1095,
     1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107,
     1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107,
     1107, 1107, 1107, 1107, 1107, 1107, 1095, 1107,   98, 1108,
     1108, 1108, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107,
     1109, 1109, 1109, 1095, 1095, 1095, 1095, 1095, 1109, 1109,

     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1095, 1095, 1109,  133, 1110, 1110,
     1110, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1095,
     1095, 1095, 1095, 1095, 1095, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1095, 1095, 1111,  165, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1112, 1112, 1112, 1095, 1095, 1095, 1095, 1095,
     1112, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,

     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1103, 1105, 1105, 1105,
     1095, 1095, 1107, 1095, 1095, 1107, 1107, 1107, 1107, 1107,
     1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107,
     1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107,
     1107, 1107, 1108, 1107, 1107, 1107, 1107, 1107, 1107, 1109,
     1095, 1095, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1110,

     1101, 1109, 1109, 1109, 1109, 1109, 1109, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1112, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1103,
     1105, 1095, 1095, 1105, 1095, 1095, 1107, 1107, 1107, 1107,
     1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107,

     1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107,
     1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107,
     1107, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,

     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1103, 1107, 1107, 1107, 1107, 1107, 1107, 1107,
     1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107,
     1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107,
     1107, 1107, 1107, 1107, 1107, 1107, 1107, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,

     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1103, 1107, 1107,
     1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107,
     1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107,
     1107, 1107, 1107, 1107, 1107, 1107, 1107, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,

     1109, 1109, 1109, 1109, 1109, 1109, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1103, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107,
     1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1107,

     1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1107, 1107, 1107,
     1107, 1107, 1107, 1107, 1107, 1107, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1111, 1111, 1111, 1111, 1095,
     1095, 1095, 1095, 1095, 1107, 1107, 1107, 1107, 1107, 1109,
     1109, 1109, 1109, 1109, 1111, 1111, 1095, 1095, 1107, 1107,
     1109, 1109, 1111, 1095, 1107, 1109, 1111, 1095, 1107, 1109,
     1111, 1095, 1107, 1109,    0, 1095, 1095, 1095, 1095, 1095,

     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095
    } ;

static yyconst flex_int16_t yy_nxt[3654] =
    {   0,
       18,   19,   20,   21,   19,   18,   22,   23,   24,   23,
       25,   26,   18,   27,   28,   29,   18,   30,   18,   18,
       31,   18,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   18,   18,   41,   18,   18,   42,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   43,   70,   71,   43,   44,   53,   54,   55,   56,
      346,   45,   52,   58,   59,   60,   61,   65,   66,   65,
       66,   70,   71,  177,   46,  181,  177,   62,  172,  173,
      174,  172,  182,  184,  200,  175,  195,  216,  193,  191,
      185,   47,  379,   48,  187,   49,  201,  188,   50,   51,

      192,  189,  194,  196,  190,  218,   63,  219,  217,  236,
       67,  176,   67,  380,  237,   68, 1092,   68,   72,   73,
       74,   75,   73,   72,   76,   77,   78,   77,   79,   80,
       72,   81,   82,   83,   72,   84,   72,   72,   85,   72,
       86,   87,   88,   89,   90,   91,   92,   93,   94,   72,
       72,   95,   96,   72,   97,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   98,
      213,  231,   98,   99,  172,  173,  174,  172, 1092,  100,
      363,  175,  240,  241,  194,  221,  223,  224,  222,  226,
      228,  229,  101,  359,  349,  352,  355,  364,  361,  356,

      232,  350,  353,  357,  360, 1091,  358,  176,  381,  102,
      382,  103,  362,  104,  421,  408,  105,  106,  107,  108,
      109,  110,  108,  107,  111,  112,  113,  112,  114,  115,
      107,  116,  117,  118,  107,  119,  107,  107,  120,  107,
      121,  122,  123,  124,  125,  126,  127,  128,  129,  107,
      107,  130,  131,  107,  132,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  133,
     1088,  231,  133,  134,  244,  292,  244,  244,  292,  135,
      376,  246,  247,  248,  246,  368,  372,  373,  372,  372,
      177,  403,  136,  177,  362,  418,  832,  369,  419,  218,

      232,  219,  221,  223,  224,  404, 1087,  245,  293,  137,
      236,  138,  833,  139,  249,  237,  140,  141,   18,  142,
      143,  144,  142,   18,   22,   23,   24,  145,  146,   26,
      147,  148,  149,  150,  147,  151,  147,  147,  152,  147,
      153,  154,  155,  156,  157,  158,  159,  160,  161,  147,
      147,  162,  163,  147,  164,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,   18,   18,  165,
      240,  241,  165,   44,  248,  250,  248,  248, 1084,   45,
      216,  244,  292,  244,  244,  292,  244,  292,  244,  244,
      292,  244,  166,  244,  244,  251,  244, 1083,  244,  244,

      244,  217,  244,  244, 1077,  251,  379,  249, 1078,  167,
     1077,  168, 1076,  169,  245,  293,  170,   51,  205,  245,
      293,  205,  206,  244,  245,  244,  244,  380,  207,  245,
      226,  228,  229,  245,  244, 1062,  244,  244,  244,  252,
      244,  244,  532, 1075,  292,  533,  244,  292,  244,  244,
      535,  522,  253,  255,  292, 1060,  245,  292,  208,  254,
      209,  244,  301,  244,  244,  210,  211,  245,  256,  302,
      300,  245,  517,  567,  556,  257,  568,  293, 1064,  245,
      244,  575,  244,  244,  575, 1063,  518,  293,  557,  244,
      258,  244,  244, 1062,  245,  244,  263,  244,  244,  244,

      267,  244,  244,  244,  912,  244,  244,  264, 1061,  680,
      265,  259,  681,  245,  260, 1060, 1059,  268,  261, 1033,
      913,  262,  245,  244,  266,  244,  244,  928,  245,  576,
      269,  244,  245,  244,  244,  244,  245,  244,  244,  244,
      669,  244,  244,  929,  244,  270,  244,  244, 1058,  244,
      274,  244,  244,  272,  670,  281,  245,  281,  281,  275,
      271, 1031, 1057, 1056,  245,  273, 1035,  244,  245,  244,
      244, 1034,  245,  276,  277,  276,  276,  245,  279,  247,
      248,  279,  245, 1033,  244,  278,  244,  244,  282,  244,
      292,  244,  244,  292,  244,  283,  244,  244,  979,  299,

      245,  244, 1032,  244,  244,  244,  245,  244,  244,  266,
      244,  249,  244,  244,  980, 1031, 1030,  245,  294,  295,
      296,  294,  245,  293,  286, 1029, 1028,  245,  296,  298,
      296,  296, 1027,  292,  245,  284,  292,  285,  245,  288,
      995,  289,  299,  245,  292,  287,  292,  292, 1026,  292,
      993,  297,  292,  292, 1025,  292,  292,  292,  290,  303,
      292,  297,  292, 1024,  322,  292,  293,  292,  304,  292,
      292,  292,  292,  307,  292,  305,  308,  293,  311,  293,
      309,  306,  313,  310,  292,  293,  293,  292,  292,  312,
      293,  292, 1023, 1022,  317,  293,  314,  942,  319,  315,

      293,  999,  293,  996,  293,  292,  318,  292,  292,  995,
      292,  324,  325,  326,  324,  292,  316,  293,  292,  994,
      993,  293,  323,  320,  328,  295,  296,  328,  992,  330,
      292,  212,  330,  292,  292,  321,  212,  292,  293,  292,
      293,  991,  292,  292,  293,  332,  292,  292,  293,  990,
      292,  327,  989,  988,  987,  292,  986,  297,  292,  314,
      985,  292,  331,  293,  292,  575,  937,  293,  575,  984,
      335,  983,  293,  934,  933,  384,  293,  932,  384,  982,
      293,  340,  341,  342,  340,  333,  334,  981,  293,  927,
      926,  336,  925,  924,  293,  337,  942,  338,  344,  345,

      344,  344,  941,  339,  375,  341,  342,  375,  385,  386,
      387,  388,  386,  576,  343,  390,  387,  390,  390,  391,
      392,  393,  391,  430,  431,  432,  430,  244,  940,  244,
      244,  343,  244,  939,  244,  244,  938,  343,  433,  434,
      433,  433,  389,  246,  247,  248,  246,  937,  389,  936,
      935,  934,  385,  248,  247,  248,  248,  933,  932,  931,
      245,  435,  277,  435,  435,  245,  244,  930,  244,  244,
      927,  245,  428,  926,  925,  251,  249,  924,  244,  923,
      244,  244,  244,  922,  244,  244,  249,  244,  921,  244,
      244,  920,  244,  437,  244,  244,  919,  918,  840,  245,

      436,  244,  917,  244,  244,  244,  838,  244,  244,  438,
      837,  245,  440,  916,  244,  245,  244,  244,  439,  244,
      245,  244,  244,  292,  441,  245,  292,  915,  244,  442,
      244,  244,  914,  244,  245,  244,  244,  244,  245,  244,
      244,  911,  292,  443,  445,  292,  292,  245,  444,  292,
      910,  244,  245,  244,  244,  299,  293,  244,  446,  244,
      244,  245,  829,  828,  447,  244,  245,  244,  244,  244,
      245,  244,  244,  448,  244,  293,  244,  244,  244,  293,
      244,  244,  449,  292,  245,  244,  292,  244,  244,  827,
      245,  826,  450,  451,  474,  825,  575,  452,  245,  575,

      824,  823,  245,  244,  454,  244,  244,  245,  453,  822,
      244,  245,  244,  244,  455,  909,  293,  244,  245,  244,
      244,  244,  908,  244,  244,  244,  907,  244,  244,  456,
      848,  847,  244,  458,  244,  244,  245,  244,  846,  244,
      244,  845,  459,  245,  576,  844,  281,  457,  281,  281,
      245,  843,  292,  842,  245,  292,  460,  841,  245,  461,
      276,  277,  276,  276,  281,  245,  281,  281,  840,  462,
      245,  463,  434,  463,  463,  244,  839,  244,  244,  282,
      244,  481,  244,  244,  244,  293,  244,  244,  244,  838,
      244,  244,  244,  245,  244,  244,  837,  282,  836,  467,

      292,  464,  450,  292,  282,  835,  834,  244,  245,  244,
      244,  831,  830,  245,  465,  286,  244,  245,  244,  244,
      466,  245,  473,  829,  244,  245,  244,  244,  828,  470,
      471,  472,  470,  293,  292,  292,  287,  292,  292,  827,
      245,  294,  295,  296,  294,  292,  477,  468,  292,  245,
      296,  295,  296,  296,  826,  825,  475,  245,  824,  823,
      822,  469,  293,  326,  325,  326,  326,  293,  293,  292,
      292,  476,  292,  292,  297,  821,  292,  292,  293,  292,
      292,  292,  820,  297,  292,  479,  292,  292,  478,  292,
      292,  480,  482,  292,  292,  292,  292,  292,  292,  819,

      818,  817,  293,  293,  484,  816,  483,  815,  485,  293,
      293,  814,  486,  292,  293,  714,  292,  488,  489,  293,
      293,  487,  292,  813,  812,  292,  293,  293,  293,  292,
      292,  292,  292,  292,  292,  292,  292,  811,  292,  292,
      492,  491,  292,  490,  810,  292,  293,  495,  292,  493,
      809,  292,  808,  496,  807,  293,  324,  325,  326,  324,
      706,  494,  293,  293,  293,  705,  806,  497,  293,  293,
      498,  326,  325,  326,  326,  293,  805,  804,  803,  499,
      330,  293,  212,  330,  802,  801,  800,  212,  330,  293,
      212,  330,  799,  798,  695,  212,  500,  471,  501,  500,

      797,  292,  292,  212,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  331,  292,  292,  292,  292,  505,  292,
      796,  331,  340,  341,  342,  340,  795,  502,  487,  331,
      794,  335,  793,  792,  293,  293,  503,  723,  720,  293,
      293,  293,  504,  384,  719,  293,  384,  293,  344,  293,
      344,  344,  336,  384,  506,  343,  384,  507,  344,  341,
      344,  344,  372,  373,  372,  372,  372,  373,  372,  372,
      541,  542,  543,  541,  718,  717,  385,  386,  387,  388,
      386,  343,  390,  387,  390,  390,  385,  393,  392,  393,
      393,  343,  390,  716,  390,  390,  391,  392,  393,  391,

      715,  714,  713,  385,  393,  392,  393,  393,  712,  711,
      389,  573,  574,  573,  573,  389,  581,  582,  583,  581,
      584,  585,  586,  584,  244,  389,  244,  244,  710,  385,
      430,  431,  432,  430,  432,  431,  432,  432,  433,  434,
      433,  433,  435,  277,  435,  435,  709,  244,  588,  244,
      244,  244,  721,  244,  244,  721,  708,  245,  587,  244,
      707,  244,  244,  706,  244,  428,  244,  244,  705,  428,
      292,  245,  244,  292,  244,  244,  589,  704,  703,  234,
      245,  591,  702,  244,  245,  244,  244,  244,  590,  244,
      244,  637,  245,  244,  592,  244,  244,  245,  594,  244,

      722,  244,  244,  293,  701,  245,  593,  244,  595,  244,
      244,  244,  700,  244,  244,  244,  245,  244,  244,  699,
      245,  698,  244,  697,  244,  244,  245,  596,  601,  696,
      695,  597,  245,  599,  694,  244,  598,  244,  244,  244,
      245,  244,  244,  244,  245,  244,  244,  600,  245,  244,
      693,  244,  244,  692,  691,  245,  602,  690,  604,  689,
      244,  605,  244,  244,  688,  687,  721,  603,  245,  721,
      535,  244,  245,  244,  244,  606,  245,  244,  686,  244,
      244,  685,  245,  292,  607,  244,  292,  244,  244,  244,
      684,  244,  244,  245,  622,  244,  683,  244,  244,  608,

      244,  609,  244,  244,  245,  244,  682,  244,  244,  244,
      245,  244,  244,  614,  722,  679,  293,  610,  245,  678,
      611,  292,  245,  612,  292,  677,  613,  676,  245,  463,
      434,  463,  463,  245,  616,  574,  616,  616,  245,  615,
      675,  617,  245,  244,  617,  244,  624,  244,  244,  244,
      674,  244,  244,  244,  293,  244,  244,  244,  292,  244,
      244,  292,  282,  470,  471,  472,  470,  245,  472,  471,
      472,  472,  673,  292,  245,  464,  292,  292,  245,  672,
      292,  292,  245,  671,  292,  619,  245,  625,  668,  618,
      245,  293,  620,  667,  626,  666,  293,  623,  621,  292,

      665,  292,  292,  627,  292,  292,  293,  664,  292,  663,
      293,  662,  629,  292,  293,  292,  292,  661,  292,  660,
      630,  659,  628,  292,  292,  292,  292,  292,  292,  658,
      292,  657,  293,  292,  293,  580,  634,  292,  293,  632,
      292,  631,  292,  636,  292,  292,  293,  292,  293,  633,
      635,  638,  639,  579,  640,  578,  293,  293,  293,  641,
      421,  292,  292,  293,  292,  292,  292,  577,  572,  292,
      293,  571,  570,  292,  642,  293,  292,  293,  292,  569,
      292,  292,  644,  292,  643,  292,  292,  566,  292,  292,
      565,  649,  564,  721,  293,  293,  721,  652,  563,  293,

      652,  645,  648,  562,  646,  561,  293,  292,  647,  292,
      292,  293,  292,  293,  500,  471,  501,  500,  293,  293,
      650,  212,  501,  471,  501,  501,  651,  574,  573,  651,
      293,  292,  292,  502,  292,  292,  573,  574,  573,  573,
      293,  722,  293,  560,  559,  653,  558,  331,  555,  654,
      541,  542,  543,  541,  543,  542,  543,  543,  554,  293,
      573,  574,  573,  573,  293,  293,  581,  582,  583,  581,
      655,  553,  552,  656,  583,  582,  583,  583,  584,  585,
      586,  584,  551,  385,  586,  585,  586,  586,  244,  292,
      244,  244,  292,  244,  997,  244,  244,  997,  244,  550,

      244,  244,  759,  549,  548,  724,  725,  244,  547,  244,
      244,  244,  546,  244,  244,  234,  545,  244,  544,  244,
      244,  245,  293,  540,  539,  727,  245,  234,  726,  538,
      537,  245,  729,  244,  536,  244,  244,  534,  292,  728,
      245,  292,  998,  730,  245,  244,  531,  244,  244,  244,
      245,  244,  244,  530,  244,  758,  244,  244,  244,  529,
      244,  244,  244,  528,  244,  244,  245,  244,  527,  244,
      244,  293,  732,  997,  731,  733,  997,  244,  245,  244,
      244,  526,  245,  525,  736,  524,  734,  245,  735,  523,
      244,  245,  244,  244,  244,  245,  244,  244,  522,  521,

      245,  520,  737,  244,  519,  244,  244,  516,  515,  739,
      245,  738,  244,  740,  244,  244,  244,  514,  244,  244,
      513,  998,  741,  245,  512,  511,  244,  245,  244,  244,
      510,  244,  509,  244,  244,  292,  245,  244,  292,  244,
      244,  508,  347,  240,  742,  245,  744,  429,  428,  245,
      743,  244,  745,  244,  244,  234,  767,  230,  244,  245,
      244,  244,  427,  244,  245,  244,  244,  746,  293,  244,
      245,  244,  244,  292,  748,  244,  292,  244,  244,  749,
      244,  226,  244,  244,  245,  221,  244,  747,  244,  244,
      770,  245,  617,  750,  244,  617,  245,  616,  574,  616,

      616,  244,  245,  244,  244,  751,  293,  426,  245,  244,
      425,  244,  244,  245,  424,  244,  423,  244,  244,  245,
      756,  292,  244,  756,  292,  245,  292,  422,  292,  292,
      245,  292,  752,  292,  245,  220,  292,  215,  292,  214,
      618,  292,  245,  292,  761,  420,  292,  417,  245,  753,
      755,  760,  416,  245,  293,  754,  762,  292,  763,  293,
      292,  293,  765,  415,  769,  414,  293,  764,  757,  292,
      292,  293,  292,  292,  292,  292,  293,  292,  292,  292,
      413,  292,  292,  292,  292,  292,  292,  412,  292,  411,
      293,  774,  766,  775,  773,  410,  772,  292,  768,  771,

      292,  997,  293,  293,  997,  409, 1036,  293,  293, 1036,
      408,  407,  293,  776,  293,  406,  293,  292,  293,  292,
      292,  777,  292,  292,  292,  292,  292,  292,  292,  405,
      293,  402,  778,  401,  779,  292,  782,  292,  292,  780,
      292,  292,  400,  292,  292,  783,  292,  399,  652,  998,
      293,  652,  293,  781, 1037,  784,  293,  293,  293,  651,
      574,  573,  651,  398,  292,  397,  785,  292,  293,  292,
      293,  396,  292,  395,  293,  292,  293,  394,  292,  179,
      790,  293,  378,  790,  244,  377,  244,  244,  244,  786,
      244,  244,  293,  374,  371,  370,  653,  293,  244,  850,

      244,  244,  293,  367,  244,  366,  244,  244,  293,  365,
      789,  354,  787,  293,  852,  788,  849,  245,  351,  348,
      244,  245,  244,  244,  244,  851,  244,  244,  791,  347,
      853,  245,  347,  244,  854,  244,  244,  245,  244,  242,
      244,  244,  244,  238,  244,  244,  235,  244,  855,  244,
      244,  234,  856,  245,  230,  226,  292,  245,  244,  292,
      244,  244,  244,  221,  244,  244,  245,  244,  857,  244,
      244,  245,  858,  220,  861,  245,  244,  859,  244,  244,
      245,  244,  215,  244,  244,  244,  214,  244,  244,  293,
      244,  245,  244,  244,  862,  245,  244,  204,  244,  244,

      245,  203,  202,  244,  860,  244,  244,  199,  292,  245,
      863,  292,  864,  244,  245,  244,  244,  244,  245,  244,
      244,  198,  244,  245,  244,  244,  197,  867,  244,  245,
      244,  244,  865,  186,  183,  880,  245,  244,  868,  244,
      244,  293,  866,  180,  869,  179,  245,  870,  179,  244,
      245,  244,  244,  178,  244,  245,  244,  244, 1095, 1095,
      244,  245,  244,  244, 1095,  244, 1095,  244,  244,  244,
      245,  244,  244,  244,  292,  244,  244,  292,  244,  871,
      244,  244,  245,  244,  881,  244,  244,  245,  873,  872,
     1095, 1095,  756,  245,  244,  756, 1095,  244,  245,  244,

      244,  292,  245, 1095,  292,  292,  245,  293,  292,  874,
     1095,  245, 1095,  875, 1095, 1095,  245,  876,  292, 1095,
      879,  292, 1095,  292,  292,  245,  292,  292,  882,  878,
      245, 1095,  292,  883,  293,  292,  292, 1095,  293,  292,
      757, 1095,  884, 1095,  292,  877,  885,  292, 1095,  292,
      292,  293,  292,  292,  886, 1095,  293,  293,  292,  887,
      888,  292, 1095,  292, 1095,  293,  292,  292,  292,  293,
      292,  292,  292,  292, 1095,  292,  292,  293, 1095, 1095,
     1095,  891,  293,  293,  292,  292,  889,  292,  292,  292,
      890,  293,  292, 1095,  893,  896,  293,  892, 1095,  897,

      293,  293,  894, 1095,  292,  293,  293,  292,  292,  292,
     1095,  292,  292,  895, 1095, 1095, 1095,  293,  293,  899,
      292,  292,  293,  292,  292,  292,  898,  292,  292,  292,
      292,  292,  292, 1095,  292, 1095,  292,  293,  900,  292,
      790,  293,  293,  790,  292, 1095, 1095,  292,  902,  244,
      901,  244,  244,  293,  293, 1095, 1095, 1095,  293,  943,
      293, 1095,  293, 1095,  293,  292,  904,  903,  292,  293,
      905, 1095,  244,  293,  244,  244,  244,  293,  244,  244,
     1095,  244,  245,  244,  244, 1095,  944,  244,  791,  244,
      244,  945,  906,  244, 1095,  244,  244,  244,  293,  244,

      244,  244, 1095,  244,  244,  245, 1095, 1095,  244,  245,
      244,  244, 1095,  244,  245,  244,  244, 1095, 1095,  244,
      245,  244,  244, 1095, 1095,  244,  245,  244,  244,  244,
      245,  244,  244, 1095,  245,  946,  244, 1095,  244,  244,
      244,  245,  244,  244, 1095,  244,  245,  244,  244,  947,
     1095, 1095,  245,  292,  949,  951,  292,  292,  245,  950,
      292,  244,  245,  244,  244,  948, 1095,  961, 1095,  245,
     1095,  952,  244,  245,  244,  244, 1095,  244,  245,  244,
      244,  244,  953,  244,  244,  244,  293,  244,  244,  244,
      293,  244,  244,  244,  245,  244,  244, 1095, 1095,  244,

      954,  244,  244, 1095,  244,  245,  244,  244, 1095,  956,
      245, 1095, 1095,  292,  245,  955,  292, 1095,  245,  957,
     1095,  244,  245,  244,  244,  244,  245,  244,  244, 1095,
     1095,  244,  245,  244,  244, 1095,  244,  245,  244,  244,
      292,  292,  292,  292,  292,  292,  293, 1095, 1095,  292,
      962,  963,  292,  292,  245, 1095,  292,  292,  245,  292,
      292,  959,  292, 1095,  245,  292,  958,  292,  292,  245,
      292, 1095, 1095,  293,  293,  293,  960,  964,  965, 1095,
      292, 1095,  293,  292,  292,  292,  293,  292,  292, 1095,
      293, 1095,  293, 1095,  966,  969,  292, 1095,  293,  292,

      293,  292, 1095,  968,  292,  967,  970,  292, 1095,  292,
      292,  971,  292,  293, 1095, 1095,  292,  293,  293,  292,
      292,  292,  292,  292,  292,  292, 1095, 1095, 1095,  293,
      292,  972,  974,  292,  293,  292,  292, 1095,  292,  292,
      293,  292,  293,  973,  292,  975, 1095, 1095,  292,  293,
     1095,  292, 1095,  293,  293,  293,  244, 1095,  244,  244,
     1095, 1095,  244,  293,  244,  244, 1095, 1095,  293,  293,
     1095, 1095,  977,  244,  293,  244,  244, 1095, 1095, 1095,
      976,  293,  244, 1095,  244,  244,  978, 1095,  244,  245,
      244,  244, 1095, 1095, 1095,  245, 1095,  244, 1095,  244,

      244,  244, 1095,  244,  244,  244,  245,  244,  244,  244,
     1095,  244,  244, 1000, 1095,  245, 1001,  244, 1095,  244,
      244,  245,  244, 1002,  244,  244,  244, 1003,  244,  244,
      245, 1095,  292, 1095,  245,  292, 1004,  244,  245,  244,
      244,  244,  245,  244,  244, 1095,  244, 1095,  244,  244,
      245, 1008, 1095,  244, 1008,  245, 1006, 1095,  292,  245,
      244,  292,  244,  244,  292,  293, 1005,  292, 1007,  244,
      245,  244,  244,  292,  245,  292,  292,  292,  292,  245,
      292, 1095,  292,  292,  245,  292,  292,  292, 1095,  292,
      292,  293,  292,  245, 1095,  292, 1012,  293,  292, 1009,

     1011, 1095,  245, 1095, 1013, 1010,  293, 1095,  293, 1014,
      293,  292, 1095, 1095,  292,  293,  293, 1095, 1095, 1095,
      293, 1015,  293,  292,  292, 1095,  292,  292,  293,  292,
      292, 1019,  292,  292, 1019, 1095, 1095,  292, 1018, 1017,
      292, 1095, 1095,  244,  293,  244,  244,  244, 1095,  244,
      244,  244, 1016,  244,  244, 1095,  293,  293, 1095, 1095,
     1095, 1040,  293,  293,  293, 1038, 1095, 1095, 1095, 1039,
      293, 1095,  244, 1021,  244,  244,  245, 1095, 1095, 1020,
      245, 1095, 1095,  244,  245,  244,  244, 1041,  244, 1095,
      244,  244,  244,  292,  244,  244,  292,  244, 1042,  244,

      244, 1008, 1095,  244, 1008,  245,  244, 1095,  244,  244,
     1045,  292,  244, 1045,  292, 1047,  245,  292, 1095, 1036,
      292,  245, 1036, 1095, 1095,  245,  293, 1049,  292, 1095,
      245,  292, 1043, 1048,  245,  292, 1095,  292,  292,  245,
      292, 1095, 1095,  245,  293, 1051, 1095, 1095,  292, 1009,
      293,  292, 1050,  292, 1044, 1095,  292, 1019, 1046,  292,
     1019,  293,  292, 1054, 1095, 1095, 1054, 1037,  293, 1036,
      293,  292, 1036,  244,  292,  244,  244,  244, 1095,  244,
      244,  293,  244, 1065,  244,  244,  293, 1095, 1052, 1095,
      293,  244,  293,  244,  244, 1095,  293, 1066, 1095, 1095,

      244, 1067,  244,  244,  293, 1020,  245, 1053, 1095,  292,
      245, 1055,  292, 1095, 1095,  245,  244, 1037,  244,  244,
      244, 1095,  244,  244,  245, 1045, 1095,  244, 1045,  244,
     1095,  244,  244,  245,  292,  292,  292,  292,  292,  292,
     1095, 1095,  293, 1095, 1070,  292, 1072, 1095,  292,  245,
     1071,  292, 1068,  245,  292, 1095, 1054,  292,  245, 1054,
      292,  244,  245,  244,  244, 1095, 1095,  293,  293,  293,
     1095, 1095, 1095, 1046, 1095, 1095, 1095, 1069,  293,  292,
     1095, 1073,  292,  244,  293,  244,  244, 1095,  292,  293,
      293,  292, 1095, 1079,  245,  244, 1095,  244,  244,  244,

      292,  244,  244,  292, 1055, 1074,  244, 1095,  244,  244,
     1081,  292,  293, 1095,  292,  292,  245,  244,  292,  244,
      244,  293,  244,  292,  244,  244,  292,  292,  245, 1095,
      292,  292,  245,  293,  292,  244, 1095,  244,  244,  245,
     1095, 1080, 1095,  244,  293,  244,  244, 1095,  293,  244,
      245,  244,  244, 1082,  292,  245,  293,  292, 1095, 1093,
      293, 1095, 1095, 1095,  293, 1095, 1095, 1085,  245, 1090,
     1095,  292, 1086, 1089,  292, 1095,  245, 1095, 1095, 1095,
     1095, 1094,  245, 1095, 1095, 1095, 1095,  293, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,

     1095, 1095, 1095, 1095,  293,   52,   52,   52,   52,   52,
       52,   57,   57,   57,   57,   57,   57,   64,   64,   64,
       64,   64,   64,   69,   69,   69,   69,   69,   69,  171,
      171,  171,  171,  171,  171,  212,  212, 1095,  212,  212,
      212,  222,  222,  222,  222,  222,  222,  225, 1095, 1095,
     1095,  225,  225,  227,  227,  227,  227,  227,  227,  233,
      233, 1095, 1095,  233,  233,  239,  239,  239,  239,  239,
      239,  243,  243, 1095,  243,  243,  243,  280,  280, 1095,
      280,  280,  280,  291,  291, 1095, 1095, 1095,  291,  329,
      329, 1095,  329,  329,  329,  383,  383, 1095, 1095, 1095,

      383,   17, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095
    } ;

static yyconst flex_int16_t yy_chk[3654] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    7,    7,    2,    2,    3,    3,    3,    3,
     1111,    2,    4,    4,    4,    4,    4,    5,    5,    6,
        6,    8,    8,   19,    2,   28,   19,    4,   15,   15,
       15,   15,   28,   30,   39,   15,   35,   49,   34,   33,
       30,    2,  169,    2,   32,    2,   39,   32,    2,    2,

       33,   32,   34,   35,   32,   50,    4,   50,   49,   67,
        5,   15,    6,  169,   67,    5, 1091,    6,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,   10,
       46,   63,   10,   10,   16,   16,   16,   16, 1088,   10,
      156,   16,   69,   69,   46,   55,   55,   55,   60,   60,
       60,   60,   10,  154,  149,  151,  153,  156,  155,  153,

       63,  149,  151,  153,  154, 1087,  153,   16,  170,   10,
      170,   10,  155,   10,  213,  213,   10,   10,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   12,
     1084,  232,   12,   12,   72,  107,   72,   72,  107,   12,
      166,   73,   73,   73,   73,  160,  163,  163,  163,  163,
      177,  189,   12,  177,  166,  203,  703,  160,  203,  210,

      232,  210,  224,  224,  224,  189, 1083,   72,  107,   12,
      236,   12,  703,   12,   73,  236,   12,   12,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   14,
      239,  239,   14,   14,   75,   75,   75,   75, 1078,   14,
      217,   76,  111,   76,   76,  111,   77,  115,   77,   77,
      115,   78,   14,   78,   78,   77,   79, 1076,   79,   79,

       80,  217,   80,   80, 1075,   79,  380,   75, 1063,   14,
     1061,   14, 1059,   14,   76,  111,   14,   14,   43,   77,
      115,   43,   43,   81,   78,   81,   81,  380,   43,   79,
      229,  229,  229,   80,   82, 1058,   82,   82,   83,   81,
       83,   83,  371, 1057,  117,  371,   84,  117,   84,   84,
      376,  376,   82,   83,  116, 1056,   81,  116,   43,   82,
       43,   85,  117,   85,   85,   43,   43,   82,   84,  117,
      116,   83,  357,  416,  406,   84,  416,  117, 1037,   84,
       87,  422,   87,   87,  422, 1034,  357,  116,  406,   89,
       85,   89,   89, 1032,   85,   86,   87,   86,   86,   88,

       89,   88,   88,   90,  805,   90,   90,   87, 1030,  530,
       88,   86,  530,   87,   86, 1029, 1027,   89,   86, 1026,
      805,   86,   89,   91,   88,   91,   91,  831,   86,  422,
       90,   92,   88,   92,   92,   93,   90,   93,   93,   94,
      520,   94,   94,  831,   95,   91,   95,   95, 1025,   97,
       94,   97,   97,   93,  520,   99,   91,   99,   99,   95,
       92, 1024, 1023, 1022,   92,   93,  998,  100,   93,  100,
      100,  996,   94,   96,   96,   96,   96,   95,   98,   98,
       98,   98,   97,  994,  101,   97,  101,  101,   99,  102,
      112,  102,  102,  112,  103,  101,  103,  103,  911,  112,

      100,  104,  992,  104,  104,  105,   96,  105,  105,  101,
      106,   98,  106,  106,  911,  991,  990,  101,  108,  108,
      108,  108,  102,  112,  104,  989,  988,  103,  110,  110,
      110,  110,  986,  114,  104,  102,  114,  103,  105,  105,
      985,  105,  114,  106,  118,  104,  119,  118,  984,  119,
      983,  108,  120,  129,  982,  120,  129,  121,  106,  118,
      121,  110,  122,  981,  129,  122,  114,  125,  119,  127,
      125,  123,  127,  121,  123,  119,  121,  118,  122,  119,
      121,  120,  123,  121,  126,  120,  129,  126,  124,  122,
      121,  124,  980,  979,  125,  122,  123,  942,  127,  124,

      125,  941,  127,  939,  123,  128,  126,  130,  128,  938,
      130,  131,  131,  131,  131,  132,  124,  126,  132,  936,
      935,  124,  130,  128,  133,  133,  133,  133,  931,  134,
      135,  134,  134,  135,  136,  128,  134,  136,  128,  137,
      130,  930,  137,  138,  131,  136,  138,  139,  132,  929,
      139,  132,  928,  923,  922,  141,  921,  133,  141,  136,
      920,  140,  134,  135,  140,  536,  919,  136,  536,  918,
      139,  917,  137,  916,  915,  171,  138,  914,  171,  913,
      139,  142,  142,  142,  142,  137,  138,  912,  141,  910,
      909,  139,  908,  907,  140,  140,  848,  140,  144,  144,

      144,  144,  846,  141,  165,  165,  165,  165,  171,  172,
      172,  172,  172,  536,  142,  174,  174,  174,  174,  176,
      176,  176,  176,  238,  238,  238,  238,  243,  845,  243,
      243,  144,  244,  844,  244,  244,  843,  165,  245,  245,
      245,  245,  172,  246,  246,  246,  246,  842,  174,  841,
      839,  836,  176,  248,  248,  248,  248,  835,  834,  833,
      243,  249,  249,  249,  249,  244,  251,  832,  251,  251,
      830,  245,  238,  821,  820,  251,  246,  819,  252,  818,
      252,  252,  253,  817,  253,  253,  248,  254,  816,  254,
      254,  815,  255,  253,  255,  255,  814,  813,  812,  251,

      252,  256,  811,  256,  256,  257,  810,  257,  257,  254,
      809,  252,  256,  808,  258,  253,  258,  258,  255,  260,
      254,  260,  260,  291,  257,  255,  291,  807,  259,  258,
      259,  259,  806,  261,  256,  261,  261,  262,  257,  262,
      262,  804,  292,  259,  261,  292,  299,  258,  260,  299,
      803,  263,  260,  263,  263,  299,  291,  264,  261,  264,
      264,  259,  802,  801,  262,  265,  261,  265,  265,  266,
      262,  266,  266,  263,  267,  292,  267,  267,  268,  299,
      268,  268,  264,  301,  263,  269,  301,  269,  269,  800,
      264,  799,  265,  266,  301,  798,  575,  267,  265,  575,

      797,  796,  266,  270,  269,  270,  270,  267,  268,  795,
      271,  268,  271,  271,  270,  794,  301,  272,  269,  272,
      272,  273,  793,  273,  273,  274,  792,  274,  274,  271,
      723,  722,  278,  273,  278,  278,  270,  275,  720,  275,
      275,  719,  274,  271,  575,  717,  280,  272,  280,  280,
      272,  716,  308,  715,  273,  308,  275,  713,  274,  275,
      276,  276,  276,  276,  281,  278,  281,  281,  712,  278,
      275,  282,  282,  282,  282,  283,  711,  283,  283,  280,
      284,  308,  284,  284,  285,  308,  285,  285,  286,  710,
      286,  286,  287,  276,  287,  287,  709,  281,  708,  286,

      300,  283,  283,  300,  282,  707,  704,  288,  283,  288,
      288,  702,  701,  284,  284,  287,  289,  285,  289,  289,
      285,  286,  300,  700,  290,  287,  290,  290,  699,  293,
      293,  293,  293,  300,  302,  304,  287,  302,  304,  698,
      288,  294,  294,  294,  294,  303,  304,  288,  303,  289,
      296,  296,  296,  296,  697,  696,  302,  290,  694,  693,
      692,  289,  293,  297,  297,  297,  297,  302,  304,  305,
      306,  303,  305,  306,  294,  691,  307,  310,  303,  307,
      310,  309,  690,  296,  309,  306,  311,  312,  305,  311,
      312,  307,  309,  314,  313,  315,  314,  313,  315,  689,

      687,  686,  305,  306,  310,  685,  309,  684,  311,  307,
      310,  683,  312,  316,  309,  682,  316,  314,  315,  311,
      312,  313,  317,  681,  680,  317,  314,  313,  315,  318,
      319,  320,  318,  319,  320,  321,  322,  679,  321,  322,
      318,  317,  327,  316,  678,  327,  316,  321,  323,  319,
      677,  323,  676,  322,  675,  317,  324,  324,  324,  324,
      674,  320,  318,  319,  320,  673,  672,  323,  321,  322,
      323,  326,  326,  326,  326,  327,  671,  670,  669,  327,
      329,  323,  329,  329,  668,  667,  666,  329,  330,  324,
      330,  330,  665,  664,  663,  330,  331,  331,  331,  331,

      662,  332,  333,  331,  332,  333,  334,  335,  336,  334,
      335,  336,  338,  329,  337,  338,  339,  337,  335,  339,
      661,  330,  340,  340,  340,  340,  660,  332,  332,  331,
      659,  336,  658,  657,  332,  333,  333,  580,  578,  334,
      335,  336,  334,  383,  577,  338,  383,  337,  344,  339,
      344,  344,  336,  384,  337,  340,  384,  338,  342,  342,
      342,  342,  343,  343,  343,  343,  372,  372,  372,  372,
      385,  385,  385,  385,  576,  572,  383,  386,  386,  386,
      386,  344,  388,  388,  388,  388,  384,  389,  389,  389,
      389,  342,  390,  571,  390,  390,  391,  391,  391,  391,

      570,  569,  568,  385,  393,  393,  393,  393,  567,  566,
      386,  421,  421,  421,  421,  388,  428,  428,  428,  428,
      429,  429,  429,  429,  437,  390,  437,  437,  565,  391,
      430,  430,  430,  430,  432,  432,  432,  432,  433,  433,
      433,  433,  435,  435,  435,  435,  564,  436,  437,  436,
      436,  438,  579,  438,  438,  579,  563,  437,  436,  439,
      562,  439,  439,  561,  440,  428,  440,  440,  560,  429,
      487,  433,  441,  487,  441,  441,  438,  559,  558,  430,
      436,  440,  557,  442,  438,  442,  442,  443,  439,  443,
      443,  487,  439,  444,  441,  444,  444,  440,  443,  445,

      579,  445,  445,  487,  556,  441,  442,  446,  444,  446,
      446,  447,  555,  447,  447,  449,  442,  449,  449,  554,
      443,  553,  448,  552,  448,  448,  444,  445,  449,  551,
      550,  446,  445,  448,  549,  450,  447,  450,  450,  451,
      446,  451,  451,  452,  447,  452,  452,  448,  449,  453,
      548,  453,  453,  547,  546,  448,  450,  545,  452,  544,
      454,  453,  454,  454,  540,  539,  688,  451,  450,  688,
      538,  455,  451,  455,  455,  454,  452,  456,  537,  456,
      456,  534,  453,  473,  455,  457,  473,  457,  457,  458,
      533,  458,  458,  454,  473,  459,  532,  459,  459,  456,

      461,  457,  461,  461,  455,  462,  531,  462,  462,  460,
      456,  460,  460,  461,  688,  529,  473,  458,  457,  528,
      458,  475,  458,  459,  475,  527,  460,  526,  459,  463,
      463,  463,  463,  461,  464,  464,  464,  464,  462,  462,
      525,  465,  460,  465,  465,  466,  475,  466,  466,  467,
      524,  467,  467,  468,  475,  468,  468,  469,  476,  469,
      469,  476,  463,  470,  470,  470,  470,  464,  472,  472,
      472,  472,  523,  474,  465,  467,  474,  477,  466,  522,
      477,  478,  467,  521,  478,  466,  468,  476,  519,  465,
      469,  476,  468,  518,  477,  517,  470,  474,  469,  479,

      516,  480,  479,  478,  480,  481,  474,  515,  481,  514,
      477,  513,  480,  482,  478,  483,  482,  512,  483,  511,
      481,  510,  479,  488,  484,  485,  488,  484,  485,  509,
      486,  508,  479,  486,  480,  427,  485,  489,  481,  483,
      489,  482,  490,  486,  491,  490,  482,  491,  483,  484,
      485,  488,  489,  426,  490,  425,  488,  484,  485,  491,
      424,  492,  493,  486,  492,  493,  494,  423,  420,  494,
      489,  419,  418,  495,  492,  490,  495,  491,  498,  417,
      496,  498,  494,  496,  493,  497,  499,  415,  497,  499,
      414,  498,  413,  721,  492,  493,  721,  503,  412,  494,

      503,  495,  497,  411,  495,  410,  495,  505,  496,  504,
      505,  498,  504,  496,  500,  500,  500,  500,  497,  499,
      499,  500,  501,  501,  501,  501,  502,  502,  502,  502,
      503,  506,  507,  505,  506,  507,  535,  535,  535,  535,
      505,  721,  504,  409,  408,  503,  407,  500,  405,  504,
      541,  541,  541,  541,  543,  543,  543,  543,  404,  502,
      573,  573,  573,  573,  506,  507,  581,  581,  581,  581,
      506,  403,  402,  507,  583,  583,  583,  583,  584,  584,
      584,  584,  401,  541,  586,  586,  586,  586,  587,  623,
      587,  587,  623,  588,  940,  588,  588,  940,  589,  400,

      589,  589,  623,  399,  398,  587,  588,  590,  397,  590,
      590,  591,  396,  591,  591,  581,  395,  592,  394,  592,
      592,  587,  623,  382,  381,  590,  588,  584,  589,  379,
      378,  589,  592,  593,  377,  593,  593,  374,  622,  591,
      590,  622,  940,  593,  591,  594,  370,  594,  594,  595,
      592,  595,  595,  369,  596,  622,  596,  596,  597,  368,
      597,  597,  598,  367,  598,  598,  593,  599,  366,  599,
      599,  622,  595,  987,  594,  596,  987,  600,  594,  600,
      600,  365,  595,  364,  599,  363,  597,  596,  598,  362,
      601,  597,  601,  601,  602,  598,  602,  602,  361,  360,

      599,  359,  600,  603,  358,  603,  603,  356,  355,  602,
      600,  601,  604,  603,  604,  604,  605,  354,  605,  605,
      353,  987,  604,  601,  352,  351,  606,  602,  606,  606,
      350,  607,  349,  607,  607,  631,  603,  608,  631,  608,
      608,  348,  347,  241,  605,  604,  607,  237,  234,  605,
      606,  609,  608,  609,  609,  233,  631,  231,  610,  606,
      610,  610,  230,  611,  607,  611,  611,  609,  631,  612,
      608,  612,  612,  634,  611,  613,  634,  613,  613,  612,
      614,  228,  614,  614,  609,  223,  615,  610,  615,  615,
      634,  610,  617,  613,  617,  617,  611,  616,  616,  616,

      616,  618,  612,  618,  618,  614,  634,  219,  613,  619,
      218,  619,  619,  614,  216,  620,  215,  620,  620,  615,
      621,  624,  621,  621,  624,  617,  625,  214,  626,  625,
      616,  626,  615,  629,  618,  211,  629,  209,  633,  208,
      617,  633,  619,  627,  625,  204,  627,  202,  620,  618,
      620,  624,  201,  621,  624,  619,  626,  628,  627,  625,
      628,  626,  629,  200,  633,  199,  629,  628,  621,  630,
      632,  633,  630,  632,  635,  636,  627,  635,  636,  637,
      198,  638,  637,  639,  638,  640,  639,  197,  640,  196,
      628,  638,  630,  639,  637,  195,  636,  641,  632,  635,

      641,  997,  630,  632,  997,  194,  999,  635,  636,  999,
      193,  192,  637,  640,  638,  191,  639,  642,  640,  643,
      642,  641,  643,  644,  645,  646,  644,  645,  646,  190,
      641,  188,  642,  187,  643,  647,  646,  648,  647,  644,
      648,  649,  186,  650,  649,  647,  650,  185,  652,  997,
      642,  652,  643,  645,  999,  648,  644,  645,  646,  651,
      651,  651,  651,  184,  653,  183,  649,  653,  647,  654,
      648,  182,  654,  181,  649,  655,  650,  180,  655,  179,
      656,  652,  168,  656,  725,  167,  725,  725,  724,  650,
      724,  724,  651,  164,  162,  161,  652,  653,  726,  725,

      726,  726,  654,  159,  727,  158,  727,  727,  655,  157,
      655,  152,  653,  656,  727,  654,  724,  725,  150,  148,
      728,  724,  728,  728,  729,  726,  729,  729,  656,  146,
      728,  726,  145,  730,  729,  730,  730,  727,  731,   71,
      731,  731,  732,   68,  732,  732,   66,  737,  731,  737,
      737,   64,  732,  728,   62,   59,  764,  729,  733,  764,
      733,  733,  734,   54,  734,  734,  730,  735,  733,  735,
      735,  731,  734,   51,  737,  732,  736,  735,  736,  736,
      737,  738,   48,  738,  738,  739,   47,  739,  739,  764,
      740,  733,  740,  740,  738,  734,  741,   42,  741,  741,

      735,   41,   40,  742,  736,  742,  742,   38,  760,  736,
      738,  760,  739,  743,  738,  743,  743,  744,  739,  744,
      744,   37,  746,  740,  746,  746,   36,  744,  745,  741,
      745,  745,  742,   31,   29,  760,  742,  747,  745,  747,
      747,  760,  743,   27,  746,   25,  743,  747,   23,  748,
      744,  748,  748,   21,  749,  746,  749,  749,   17,    0,
      750,  745,  750,  750,    0,  751,    0,  751,  751,  752,
      747,  752,  752,  753,  761,  753,  753,  761,  754,  748,
      754,  754,  748,  755,  761,  755,  755,  749,  751,  750,
        0,    0,  756,  750,  756,  756,    0,  757,  751,  757,

      757,  758,  752,    0,  758,  759,  753,  761,  759,  752,
        0,  754,    0,  754,    0,    0,  755,  755,  762,    0,
      759,  762,    0,  763,  774,  756,  763,  774,  762,  758,
      757,    0,  765,  763,  758,  765,  766,    0,  759,  766,
      756,    0,  765,    0,  767,  757,  766,  767,    0,  768,
      769,  762,  768,  769,  767,    0,  763,  774,  770,  768,
      769,  770,    0,  771,    0,  765,  771,  773,  772,  766,
      773,  772,  775,  776,    0,  775,  776,  767,    0,    0,
        0,  772,  768,  769,  777,  778,  770,  777,  778,  779,
      771,  770,  779,    0,  773,  778,  771,  772,    0,  779,

      773,  772,  776,    0,  780,  775,  776,  780,  782,  781,
        0,  782,  781,  777,    0,    0,    0,  777,  778,  781,
      783,  784,  779,  783,  784,  785,  780,  786,  785,  787,
      786,  788,  787,    0,  788,    0,  789,  780,  782,  789,
      790,  782,  781,  790,  791,    0,    0,  791,  785,  849,
      784,  849,  849,  783,  784,    0,    0,    0,  785,  849,
      786,    0,  787,    0,  788,  881,  788,  786,  881,  789,
      789,    0,  852,  790,  852,  852,  850,  791,  850,  850,
        0,  851,  849,  851,  851,    0,  850,  853,  790,  853,
      853,  851,  791,  854,    0,  854,  854,  855,  881,  855,

      855,  856,    0,  856,  856,  852,    0,    0,  857,  850,
      857,  857,    0,  858,  851,  858,  858,    0,    0,  859,
      853,  859,  859,    0,    0,  860,  854,  860,  860,  862,
      855,  862,  862,    0,  856,  860,  861,    0,  861,  861,
      863,  857,  863,  863,    0,  864,  858,  864,  864,  861,
        0,    0,  859,  882,  862,  864,  882,  878,  860,  863,
      878,  865,  862,  865,  865,  861,    0,  878,    0,  861,
        0,  865,  866,  863,  866,  866,    0,  867,  864,  867,
      867,  868,  866,  868,  868,  869,  882,  869,  869,  870,
      878,  870,  870,  871,  865,  871,  871,    0,    0,  872,

      869,  872,  872,    0,  873,  866,  873,  873,    0,  872,
      867,    0,    0,  883,  868,  871,  883,    0,  869,  873,
        0,  874,  870,  874,  874,  875,  871,  875,  875,    0,
        0,  876,  872,  876,  876,    0,  877,  873,  877,  877,
      879,  880,  884,  879,  880,  884,  883,    0,    0,  885,
      879,  880,  885,  886,  874,    0,  886,  887,  875,  888,
      887,  875,  888,    0,  876,  890,  874,  889,  890,  877,
      889,    0,    0,  879,  880,  884,  876,  889,  890,    0,
      891,    0,  885,  891,  892,  893,  886,  892,  893,    0,
      887,    0,  888,    0,  890,  893,  894,    0,  890,  894,

      889,  895,    0,  892,  895,  891,  894,  896,    0,  897,
      896,  895,  897,  891,    0,    0,  898,  892,  893,  898,
      899,  900,  901,  899,  900,  901,    0,    0,    0,  894,
      902,  898,  901,  902,  895,  903,  904,    0,  903,  904,
      896,  905,  897,  900,  905,  902,    0,    0,  906,  898,
        0,  906,    0,  899,  900,  901,  943,    0,  943,  943,
        0,    0,  944,  902,  944,  944,    0,    0,  903,  904,
        0,    0,  904,  945,  905,  945,  945,    0,    0,    0,
      903,  906,  946,    0,  946,  946,  905,    0,  947,  943,
      947,  947,    0,    0,    0,  944,    0,  948,    0,  948,

      948,  949,    0,  949,  949,  950,  945,  950,  950,  951,
        0,  951,  951,  947,    0,  946,  948,  952,    0,  952,
      952,  947,  953,  949,  953,  953,  954,  950,  954,  954,
      948,    0,  961,    0,  949,  961,  954,  955,  950,  955,
      955,  956,  951,  956,  956,    0,  957,    0,  957,  957,
      952,  959,    0,  959,  959,  953,  957,    0,  962,  954,
      958,  962,  958,  958,  963,  961,  955,  963,  958,  960,
      955,  960,  960,  964,  956,  965,  964,  966,  965,  957,
      966,    0,  967,  969,  959,  967,  969,  968,    0,  970,
      968,  962,  970,  958,    0,  971,  966,  963,  971,  959,

      965,    0,  960,    0,  967,  960,  964,    0,  965,  968,
      966,  972,    0,    0,  972,  967,  969,    0,    0,    0,
      968,  972,  970,  973,  974,    0,  973,  974,  971,  975,
      976,  977,  975,  976,  977,    0,    0,  978,  976,  975,
      978,    0,    0, 1000,  972, 1000, 1000, 1001,    0, 1001,
     1001, 1002,  973, 1002, 1002,    0,  973,  974,    0,    0,
        0, 1002,  975,  976,  977, 1000,    0,    0,    0, 1001,
      978,    0, 1003,  978, 1003, 1003, 1000,    0,    0,  977,
     1001,    0,    0, 1004, 1002, 1004, 1004, 1003, 1005,    0,
     1005, 1005, 1006, 1011, 1006, 1006, 1011, 1007, 1005, 1007,

     1007, 1008,    0, 1008, 1008, 1003, 1009,    0, 1009, 1009,
     1010, 1012, 1010, 1010, 1012, 1011, 1004, 1013,    0, 1028,
     1013, 1005, 1028,    0,    0, 1006, 1011, 1013, 1015,    0,
     1007, 1015, 1007, 1012, 1008, 1016,    0, 1014, 1016, 1009,
     1014,    0,    0, 1010, 1012, 1016,    0,    0, 1017, 1008,
     1013, 1017, 1014, 1018, 1009,    0, 1018, 1019, 1010, 1020,
     1019, 1015, 1020, 1021,    0,    0, 1021, 1028, 1016, 1036,
     1014, 1049, 1036, 1038, 1049, 1038, 1038, 1040,    0, 1040,
     1040, 1017, 1039, 1038, 1039, 1039, 1018,    0, 1018,    0,
     1019, 1041, 1020, 1041, 1041,    0, 1021, 1039,    0,    0,

     1042, 1041, 1042, 1042, 1049, 1019, 1038, 1020,    0, 1051,
     1040, 1021, 1051,    0,    0, 1039, 1043, 1036, 1043, 1043,
     1044,    0, 1044, 1044, 1041, 1045,    0, 1045, 1045, 1046,
        0, 1046, 1046, 1042, 1047, 1048, 1050, 1047, 1048, 1050,
        0,    0, 1051,    0, 1047, 1052, 1050,    0, 1052, 1043,
     1048, 1053, 1043, 1044, 1053,    0, 1054, 1055, 1045, 1054,
     1055, 1065, 1046, 1065, 1065,    0,    0, 1047, 1048, 1050,
        0,    0,    0, 1045,    0,    0,    0, 1046, 1052, 1070,
        0, 1052, 1070, 1066, 1053, 1066, 1066,    0, 1072, 1054,
     1055, 1072,    0, 1066, 1065, 1067,    0, 1067, 1067, 1068,

     1071, 1068, 1068, 1071, 1054, 1055, 1069,    0, 1069, 1069,
     1071, 1073, 1070,    0, 1073, 1074, 1066, 1079, 1074, 1079,
     1079, 1072, 1080, 1081, 1080, 1080, 1081, 1082, 1067,    0,
     1082, 1086, 1068, 1071, 1086, 1085,    0, 1085, 1085, 1069,
        0, 1068,    0, 1093, 1073, 1093, 1093,    0, 1074, 1089,
     1079, 1089, 1089, 1073, 1094, 1080, 1081, 1094,    0, 1089,
     1082,    0,    0,    0, 1086,    0,    0, 1080, 1085, 1086,
        0, 1090, 1082, 1085, 1090,    0, 1093,    0,    0,    0,
        0, 1090, 1089,    0,    0,    0,    0, 1094,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0, 1090, 1096, 1096, 1096, 1096, 1096,
     1096, 1097, 1097, 1097, 1097, 1097, 1097, 1098, 1098, 1098,
     1098, 1098, 1098, 1099, 1099, 1099, 1099, 1099, 1099, 1100,
     1100, 1100, 1100, 1100, 1100, 1101, 1101,    0, 1101, 1101,
     1101, 1102, 1102, 1102, 1102, 1102, 1102, 1103,    0,    0,
        0, 1103, 1103, 1104, 1104, 1104, 1104, 1104, 1104, 1105,
     1105,    0,    0, 1105, 1105, 1106, 1106, 1106, 1106, 1106,
     1106, 1107, 1107,    0, 1107, 1107, 1107, 1108, 1108,    0,
     1108, 1108, 1108, 1109, 1109,    0,    0,    0, 1109, 1110,
     1110,    0, 1110, 1110, 1110, 1112, 1112,    0,    0,    0,

     1112, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[82] =
    {   0,
0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 
    0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#line 2 "levcomp.lpp"

// levcomp.lpp:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
//
// Based loosely on NetHack's lev_comp.l

#include <algorithm>
#include <cstring>
#include <queue>
#include "AppHdr.h"
#include "mapdef.h"
#include "levcomp.tab.h"
#include "stuff.h"

static bool alloced = false;

std::queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(100);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

// Enter a new state, first clearing yylval of junk.
#define CBEGIN(x) do { BEGIN(x); clean(); } while (0)

static void post_proc_text(char *text, bool trim_right, int strip_trailing)
{
    char *s = NULL;
    if (trim_right)
    {
        s = text + strlen(text) - 1;
        while (s >= text && isspace(*s))
            *s-- = 0;
    }
    if (strip_trailing)
    {
        if (!s)
            s = text + strlen(text) - 1;
        while (s >= text && --strip_trailing >= 0)
            *s-- = 0;
    }
}

static char *copy_text(bool trim_right, int strip_trailing)
{
    char *newstring = NULL;
    if ((yylval.text = newstring = strdup(yytext)))
    {
        alloced = true;
        post_proc_text(newstring, trim_right, strip_trailing);
    }
    return (newstring);
}

static void settext(bool trim_right = false, int strip_trailing = 0)
{
    clean();
    char *newstring = copy_text(trim_right, strip_trailing);
    yylval.text = newstring;
}

static void str_check()
{
    if (!yylval.text)
    {
        char *buf = (char *) malloc(1);
        if (buf)
        {
            yylval.text = buf;
            *buf = 0;
            alloced = true;
        }
    }
}

static void cattext(bool trim_right = false, int strip_trailing = 0)
{
    if (!yylval.text)
        settext(trim_right, strip_trailing);
    else
    {
        bool was_alloced = alloced;
        char *newbuf = (char*) malloc(strlen(yylval.text) + strlen(yytext) + 1);
        if (!newbuf)
            end(1, "Out of memory");
        alloced = true;
        strcpy(newbuf, yylval.text);
        strcat(newbuf, yytext);
        post_proc_text(newbuf, trim_right, strip_trailing);
        if (was_alloced)
            free((void*) yylval.text);
        yylval.text = newbuf;
    }
}








#line 1770 "levcomp.lex.cc"

#define INITIAL 0
#define MAPDEF 1
#define LUA 2
#define LUA_ONELINER 3
#define ARGUMENT 4
#define MNAME 5
#define KEYWORDS 6
#define ITEM_LIST 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 133 "levcomp.lpp"


#line 1936 "levcomp.lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1096 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1095 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 135 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 137 "levcomp.lpp"
{
                        settext(true);
                        return MAP_LINE;
                    }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 142 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 143 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 144 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 146 "levcomp.lpp"
;
	YY_BREAK
case 7:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 148 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 8:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 149 "levcomp.lpp"
{
                            settext(true, 2);
                            BEGIN(INITIAL);
                            return LUA_LINE;
                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 154 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 158 "levcomp.lpp"
;
	YY_BREAK
case 11:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 160 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 164 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 166 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 171 "levcomp.lpp"
;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 172 "levcomp.lpp"
;
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 173 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 175 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 179 "levcomp.lpp"
;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 181 "levcomp.lpp"
{
                        cattext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 186 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 187 "levcomp.lpp"
;
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 188 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 190 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 192 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 196 "levcomp.lpp"
;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 198 "levcomp.lpp"
{
                        cattext();
                        return MONSTER_NAME;
                    }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 203 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 204 "levcomp.lpp"
;
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 206 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 210 "levcomp.lpp"
;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 212 "levcomp.lpp"
{
                        cattext();
                    }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 216 "levcomp.lpp"
cattext();
	YY_BREAK
case 33:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 218 "levcomp.lpp"
{ BEGIN(INITIAL); str_check(); return STRING; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 220 "levcomp.lpp"
;
	YY_BREAK
case 35:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 222 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 224 "levcomp.lpp"
{ BEGIN(LUA_ONELINER); return MAIN; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 226 "levcomp.lpp"
{ BEGIN(LUA); return PRELUDE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 227 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 228 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 229 "levcomp.lpp"
{ BEGIN(LUA); return VALIDATE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 230 "levcomp.lpp"
{ BEGIN(LUA); return VETO; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 233 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 234 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEFAULT_DEPTH; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 235 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEPTH; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 236 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return ORIENT; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 237 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 238 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return WELCOME; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 239 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 240 "levcomp.lpp"
return WEIGHT;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 241 "levcomp.lpp"
{ CBEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 242 "levcomp.lpp"
{ CBEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 243 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLAGS; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 244 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return BFLAGS; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 245 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SUBST; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 246 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return NSUBST; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 247 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return COLOUR; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 248 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLOORCOL; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 249 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LROCKCOL; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 250 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLOORTILE; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 251 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LROCKTILE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 252 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return FTILE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 253 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return RTILE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 254 "levcomp.lpp"
{ CBEGIN(MNAME); return MONS; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 255 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 256 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return MARKER; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 257 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SHUFFLE; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 259 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KFEAT; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 260 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KITEM; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 261 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMONS; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 262 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMASK; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 263 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KPROP; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 264 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return SUBVAULT; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 266 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 268 "levcomp.lpp"
return COLON;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 270 "levcomp.lpp"
return PERC;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 272 "levcomp.lpp"
{
                        clean();
                        yylval.i = atoi(yytext);
                        return INTEGER;
                    }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 278 "levcomp.lpp"
;
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 279 "levcomp.lpp"
;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 280 "levcomp.lpp"
;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 281 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 283 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 2495 "levcomp.lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MAPDEF):
case YY_STATE_EOF(LUA):
case YY_STATE_EOF(LUA_ONELINER):
case YY_STATE_EOF(ARGUMENT):
case YY_STATE_EOF(MNAME):
case YY_STATE_EOF(KEYWORDS):
case YY_STATE_EOF(ITEM_LIST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1096 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1096 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1095);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 283 "levcomp.lpp"



int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}

