#line 2 "levcomp.lex.cc"

#line 4 "levcomp.lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 69
#define YY_END_OF_BUFFER 70
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[936] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   70,   68,
       65,   66,   67,   63,   64,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   65,   30,   32,   68,   68,   68,   68,   68,   68,
       69,    6,   69,   69,    4,    2,    3,   69,    2,    2,
        2,    2,    9,   10,   69,    9,    9,   69,   12,   69,
       68,   26,   67,   63,   64,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   30,   32,   68,   68,   68,   68,   68,   68,   68,

       24,   21,   24,   23,   64,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   24,   30,   32,   68,   68,   68,   68,   68,   68,
       14,   15,   67,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   14,   13,   13,   13,   13,   13,   17,   19,   20,
       69,   18,   69,   29,   69,   69,   65,   66,   64,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   65,   30,   32,    0,    0,    0,    0,   30,    0,

        0,    0,    0,    0,    0,    0,   35,    6,    5,    0,
        0,    2,    3,    2,    0,    2,    2,    2,    2,    9,
        9,   10,    9,    9,    9,    0,   11,    0,   12,   25,
        0,   26,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   30,   25,   25,   25,
       25,   25,   25,   25,   25,    0,   24,   21,   24,   21,
       64,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   24,   30,    0,    0,    0,    0,    0,

        0,    0,   35,   14,   15,    0,   15,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   14,   13,   13,   13,   13,   13,   13,   13,   16,
        0,   19,   20,    0,    0,   28,    0,   28,    0,   27,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    2,    9,    9,    9,    7,    0,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   31,    0,    0,    0,    0,    0,    2,    9,    8,
        0,    9,    7,    0,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,    0,
        0,   25,   25,   25,   25,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
        0,    0,   22,   22,   22,   22,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,    0,    0,    0,    0,    0,    0,
       56,    0,    0,    0,    0,    0,    0,   55,   38,    0,
        0,    0,    0,    0,    0,   47,    0,    0,    0,   34,
        0,    0,    0,    0,    2,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,    0,   25,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,

       22,   22,   22,    0,   22,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,    0,    0,
        0,   40,   46,    0,   59,   60,   62,   61,    0,    0,
        0,    0,   42,    0,    0,   50,    0,    0,    0,    0,
        0,   37,    1,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,

       22,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   49,   44,   52,    0,
       48,   57,   51,   41,    0,    0,   45,    0,    0,    0,
        0,    1,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   13,   13,   13,   13,   13,   13,   13,    0,
       54,   58,   43,    0,    0,    0,    0,   25,   25,   25,
       25,   25,    0,   25,   25,   22,   22,   22,   22,   22,
        0,   22,   22,   13,   13,   13,   53,    0,   33,    0,

        0,   25,   25,   25,    0,   25,   22,   22,   22,    0,
       22,   13,    0,   36,   25,   25,   22,   22,   13,    0,
       25,   22,   13,    0,   25,   22,   13,    0,   25,   22,
       13,   39,   25,   22,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    7,    8,    1,    1,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,    1,    1,
        1,    1,    1,    1,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       20,   27,   28,   29,   30,   20,   31,   20,   20,   20,
        1,   32,    1,    1,   20,    1,   33,   20,   20,   34,

       35,   36,   20,   37,   38,   20,   20,   39,   20,   20,
       40,   41,   20,   42,   43,   44,   45,   46,   20,   20,
       20,   20,   47,    1,   48,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[49] =
    {   0,
        1,    2,    3,    4,    1,    1,    5,    6,    6,    1,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    1,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    1,    1
    } ;

static yyconst flex_int16_t yy_base[957] =
    {   0,
        0,   47,   55,   60,   52,   64,   47,   68,  112,  159,
      206,  253,  300,  347,   74,   80,   70,  159, 2350, 2351,
       87, 2351, 2346, 2351, 2339, 2331,   73, 2331, 2323, 2315,
       85, 2327,   85,   69, 2315, 2319, 2315,   81, 2328, 2323,
     2302,  393,    0, 2351,  155, 2291, 2293,  144,  135, 2287,
     2351, 2351, 2330,  168, 2351,    0, 2351, 2329,  172,    0,
     2307,  241, 2282, 2351, 2326,  135, 2280,  102, 2351, 2324,
      184, 2351, 2323,  188,  192,  262,  268,  275,  354,  358,
      362,  367,  400,  405,  387,  375,  413,  417,  425,  283,
      439,  444,  448,  452,  456,  460,  464,  471,  476,    0,

      480, 2351,  486, 2351, 2316, 2308,  243, 2308, 2300, 2292,
      246, 2304,  170,  246, 2292, 2296, 2292,  253, 2305, 2300,
     2279,  490,  347,    0,  174, 2268, 2270,  161,  256, 2264,
      494, 2351, 2307,    0, 2300, 2292,  257, 2292, 2284, 2276,
      489, 2288,  270,  354, 2276, 2280, 2276,  343, 2289, 2284,
     2263,  511,  395, 2252, 2254,  332,  391,  426,  515, 2351,
     2292, 2351,  381, 2351,  405,  522,  440, 2351, 2285, 2271,
     2281, 2269, 2264,  461, 2274, 2273, 2258,  510, 2264, 2258,
     2260, 2260, 2252, 2262, 2269, 2266, 2248, 2265, 2259,  448,
     2239,    0,    0, 2351, 2229, 2231,  476, 2225,    0,  374,

     2238, 2235, 2258,  428, 2229, 2223, 2351, 2351, 2351, 2260,
      525,    0, 2351,    0, 2256,  528, 2244, 2233,  353, 2199,
     2198, 2351,  491, 2197,  538,  533, 2351, 2236, 2351,  542,
      546, 2351,  551,  557,  561,  565,  569,  573,  578,  586,
      592,  598,  602,  606,  610,  614,  623,  627,  634,  638,
      645,  650,  654,  659,  663,  668,  672,  678,  682,  686,
      690,  704,  698,  708,  712,  498,  720, 2351,  726, 2351,
      639,  731,  547,  733,  587,  737,  615,  664,  691,  738,
      739,  749,  754,  762,  655,  755,  764,  766,  768,  775,
      779,  781,  786,    0,  788,  792,  797,  799,  803,  804,

      805,  810,  811,  821, 2351, 2232, 2351,    0, 2225, 2211,
     2216, 2199, 2184,  574, 2194, 2183, 2168,  686, 2174, 2158,
     2119, 2118, 2110, 2120, 2127, 2124, 2106, 2123, 2117,  798,
     2095,    0,  692, 2091, 2088, 2111,  436, 2060, 2054,  826,
      827,  833, 2351, 2086,  573, 2351,  837, 2351,  846, 2351,
     2074, 2059, 2054, 2049, 2047, 2035, 2036, 2032, 2016, 1994,
     1993, 2001, 1978, 1967, 1975, 1974, 1967, 1961, 1945, 1944,
     1931, 1900, 1907, 1906, 1879,  853,  841, 1872, 1876, 1855,
     1845, 1858,  857,  861,  868, 2351,  872,  878,  882,  888,
      892,  897,  906,  913,  918,  922,  928,  936,  940,  944,

      948,  953,  957,  962,  968,  978,  982,  986,  990,  998,
     1003, 1007, 1017, 1021, 1025, 1029, 1033, 1037,  893,  898,
      923,  969,  999, 1041, 1042, 1047,  973, 1043, 1048, 1008,
     1055, 1056, 1060, 1064, 1071, 1073, 1078, 1082, 1086, 1092,
     1094, 1096, 1098, 1100, 1104, 1112, 1123, 1116, 1118, 1127,
     1128, 1129, 1133, 1138, 1866, 1849, 1836, 1827, 1838, 1811,
     1807, 1818, 1808, 1785, 1783, 1783, 1769, 1758, 1767, 1769,
     1762, 1755, 1743, 1742, 1729, 1725, 1730, 1733, 1709, 1142,
     1146, 1699, 1706, 1683, 1680, 1695, 1695, 1665, 1676, 1662,
     1656, 1671, 1636, 1635, 1632, 1607, 1614, 1615, 1610, 1605,

     1578, 1580, 1584, 1577, 1568, 1551, 1566, 1550, 1541, 1516,
     1156, 2351, 1160, 1503, 1495, 1505, 1162, 1515, 1171, 2351,
     1177, 1181, 2351, 1185, 1193, 1164, 1197, 1210, 1216, 1220,
     1201, 1228, 1232, 1237, 1241, 1246, 1257, 1263, 1272, 1276,
     1281, 1285, 1289, 1293, 1306, 1310, 1314, 1319, 1323, 1334,
     1329, 1338, 1343, 1347, 1351, 1221, 1247, 1324, 1355, 1189,
     1356, 1357, 1211, 1294, 1301, 1251, 1361, 1367, 1369, 1382,
     1375, 1384, 1389, 1388, 1394, 1395, 1404, 1400, 1410, 1411,
     1417, 1421, 1423, 1427, 1425, 1429, 1505, 1505, 1484, 1490,
     1479, 1476, 1486, 1463, 1463, 1464, 1447, 1450, 1451, 1452,

     1448, 1425, 1425, 1430, 1430, 1422, 1388, 1401, 1389, 1370,
     1330, 1325, 1331, 1431, 1336, 1335, 1319, 1331, 1320, 1300,
     2351, 1297, 1291, 1282, 1278, 1256, 1248, 2351, 2351, 1242,
     1241, 1256, 1239, 1232, 1225, 2351, 1202, 1185, 1165, 2351,
     1166, 1163, 1435, 1145, 1144, 1437, 1442, 1446, 1450, 1459,
     1475, 1479, 1485, 1489, 1496, 1500, 1507, 1511, 1515, 1519,
     1523, 1527, 1532, 1539, 1543, 1549, 1553, 1558, 1565, 1569,
     1573, 1577, 1581, 1587, 1591, 1469, 1592, 1596, 1600, 1607,
     1611, 1528, 1616, 1617, 1623, 1627, 1544, 1634, 1598, 1638,
     1639, 1640, 1644, 1645, 1650, 1646, 1655, 1657, 1661, 1662,

     1669, 1671, 1673, 1675, 1677, 1128, 1140, 1127, 1140, 1139,
     1129, 1131, 1126, 1102, 1101, 1082, 1077, 1061, 1060, 1072,
     1049, 1034, 1041, 1003, 1005,  978,  972,  964,  979,  975,
      969, 2351, 2351,  938, 2351, 2351, 2351, 2351,  944,  937,
      933,  929, 2351,  913,  904, 2351,  902,  889,  847,  850,
      837, 2351,  874, 1683, 1687, 1694, 1698, 1705, 1709, 1713,
     1721, 1725, 1731, 1735, 1739, 1746, 1750, 1757, 1761, 1765,
     1769, 1774, 1783, 1787, 1791, 1795, 1799, 1800, 1804, 1806,
     1714, 1726, 1810, 1770, 1815, 1816, 1817, 1822, 1823, 1832,
     1836, 1838, 1842, 1843, 1847, 1849, 1848, 1855, 1860, 1864,

     1865,  858,  857,  843,  827,  835,  823,  811,  801,  767,
      767,  762,  750,  714,  715,  702, 2351, 2351, 2351,  723,
     2351, 2351, 2351, 2351,  724,  722, 2351,  716,  699, 1866,
      663,  684, 1870, 1874, 1878, 1882, 1886, 1892, 1896, 1901,
     1905, 1912, 1916, 1921, 1925, 1930, 1934, 1887, 1935, 1939,
     1940, 1941, 1945, 1946, 1947, 1951, 1953, 1952, 1962, 1963,
     1968, 1973,  613,  616,  612,  571,  560, 1974,  529,  547,
     2351, 2351, 2351,  511, 1978,  491, 1979, 1983, 1987, 1992,
     1996, 2000, 2005, 2009, 2014, 2018, 2001, 2022, 2027, 2028,
     2033, 2034, 2035,  512,  476, 2039, 2351,  420, 2351, 2040,

      376, 2044, 2049, 2053, 2061, 2065, 2045, 2066, 2070, 2071,
     2072,  377,  333, 2351, 2086, 2090, 2091, 2095,  309,  253,
     2100, 2101,  216,  166, 2105, 2109,  142,   99, 2111, 2115,
       59, 2351, 2124, 2128, 2351, 2146, 2152, 2158, 2164, 2170,
     2176, 2182, 2188, 2194, 2200, 2206, 2212, 2218, 2224, 2230,
     2236,   48, 2242, 2248, 2254, 2260
    } ;

static yyconst flex_int16_t yy_def[957] =
    {   0,
      935,    1,  936,  937,  938,  938,  939,  939,  935,    9,
      935,   11,  935,   13,  940,  940,  941,  941,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  942,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  943,  935,  944,  935,  935,  945,  944,
      944,  944,  946,  935,  935,  946,  946,  947,  935,  935,
      948,  935,  935,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  949,  948,  948,  948,  948,  948,  948,  948,  950,

      935,  935,  935,  935,  950,  950,  950,  950,  950,  950,
      950,  950,  950,  950,  950,  950,  950,  950,  950,  950,
      950,   42,  951,  950,  950,  950,  950,  950,  950,  950,
      935,  935,  935,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,   42,  952,  952,  952,  952,  952,  953,  935,  935,
      935,  935,  954,  935,  954,  954,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,   42,  942,  935,  935,  935,  935,  935,  942,  935,

      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  944,  935,  944,  935,  944,  944,  944,  944,  946,
      946,  935,  946,  946,  946,  947,  935,  935,  935,  948,
      948,  935,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  949,  949,  948,  948,  948,
      948,  948,  948,  948,  948,  955,  935,  935,  935,  935,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,
      955,  955,  955,  122,  956,  955,  955,  955,  955,  955,

      955,  955,  955,  935,  935,  935,  935,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  152,  952,  952,  952,  952,  952,  952,  952,  953,
      953,  935,  935,  935,  954,  935,  954,  935,  954,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  944,  946,  946,  946,  935,  935,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,

      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  955,  956,  955,  955,  955,  955,
      955,  955,  955,  955,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,

      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  944,  946,  935,
      935,  946,  935,  935,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  955,  955,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,

      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  944,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,

      955,  955,  955,  955,  955,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  944,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  955,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,

      955,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  944,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  955,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,
      955,  955,  952,  952,  952,  952,  952,  952,  952,  935,
      935,  935,  935,  935,  935,  935,  935,  948,  948,  948,
      948,  948,  948,  948,  948,  955,  955,  955,  955,  955,
      955,  955,  955,  952,  952,  952,  935,  935,  935,  935,

      935,  948,  948,  948,  948,  948,  955,  955,  955,  955,
      955,  952,  935,  935,  948,  948,  955,  955,  952,  935,
      948,  955,  952,  935,  948,  955,  952,  935,  948,  955,
      952,  935,  948,  955,    0,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935
    } ;

static yyconst flex_int16_t yy_nxt[2400] =
    {   0,
       20,   21,   22,   23,   21,   20,   24,   20,   25,   20,
       20,   26,   27,   28,   20,   29,   20,   20,   30,   20,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   20,
       40,   20,   20,   41,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   42,   69,
       70,   42,   43,  308,   64,   65,   44,   52,   53,   54,
       55,   51,   57,   58,   59,   60,   64,   65,  932,   45,
       69,   70,  164,  165,   61,  159,  160,  161,  159,  182,
      162,  159,  160,  161,  159,   46,  162,   47,  167,   48,
      171,  167,   49,   50,   66,  180,  183,  172,  187,   67,

      176,  166,   62,  177,  227,  228,   66,  178,  932,  181,
      188,   67,   71,   21,   72,   73,   21,   71,   74,   71,
       75,   71,   71,   76,   77,   78,   71,   79,   71,   71,
       80,   71,   81,   82,   83,   84,   85,   86,   87,   88,
       89,   71,   90,   71,   71,   91,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       42,  164,  165,   42,   92,  200,  203,  205,   93,  206,
      208,  210,  211,  209,  213,  215,  216,  223,  931,  181,
      282,   94,  224,  299,  296,  231,  204,  231,  231,  231,
      166,  231,  231,  231,  283,  231,  231,   95,  283,   96,

      233,   97,  928,  300,   98,   99,  100,  101,  102,  103,
      101,  100,  104,  100,  105,  100,  100,  106,  107,  108,
      100,  109,  100,  100,  110,  100,  111,  112,  113,  114,
      115,  116,  117,  118,  119,  100,  120,  100,  100,  121,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  122,  218,  284,  122,  123,  927,
      273,  278,  124,  231,  279,  231,  231,  274,  280,  231,
      289,  231,  231,  285,  311,  125,  231,  234,  231,  231,
      320,  312,  290,  219,  231,  235,  231,  231,  301,  237,
      302,  126,  236,  127,  321,  128,  924,  254,  129,  130,

       20,  131,  132,  133,  131,   20,   24,  134,  135,   20,
      134,  136,  137,  138,  134,  139,  134,  134,  140,  134,
      141,  142,  143,  144,  145,  146,  147,  148,  149,  134,
      150,   20,  134,  151,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,   20,   20,  152,  923,
      199,  152,   43,  199,  336,  231,   44,  231,  231,  231,
      327,  231,  231,  231,  322,  231,  231,  218,  231,  153,
      231,  231,  328,  920,  337,  238,  231,  240,  231,  231,
      241,  323,  243,  346,  242,  154,  239,  155,  231,  156,
      231,  231,  157,   50,  192,  219,  249,  192,  193,  376,

      363,  231,  194,  231,  231,  333,  231,  348,  231,  231,
      244,  919,  347,  248,  231,  246,  231,  231,  231,  321,
      231,  231,  914,  338,  245,  339,  231,  341,  231,  231,
      341,  195,  247,  196,  251,  253,  347,  250,  197,  198,
      231,  167,  231,  231,  167,  257,  252,  257,  257,  231,
      203,  231,  231,  231,  913,  231,  231,  231,  336,  231,
      231,  231,  258,  231,  231,  231,  373,  231,  231,  374,
      204,  355,  231,  255,  231,  231,  245,  231,  337,  231,
      231,  267,  268,  269,  267,  356,  261,  269,  270,  269,
      269,  294,  268,  269,  294,  304,  305,  306,  304,  266,

      259,  260,  266,  263,  316,  264,  262,  317,  205,  912,
      206,  318,  332,  305,  306,  332,  342,  343,  344,  342,
      360,  897,  265,  349,  350,  349,  349,  208,  210,  211,
      213,  215,  216,  223,  361,  227,  228,  899,  224,  385,
      386,  387,  385,  231,  898,  231,  231,  231,  266,  231,
      231,  266,  231,  347,  231,  231,  897,  422,  231,  233,
      231,  231,  231,  896,  231,  231,  231,  895,  231,  231,
      231,  389,  231,  231,  231,  346,  231,  231,  388,  231,
      873,  231,  231,  392,  459,  383,  390,  231,  266,  231,
      231,  266,  394,  231,  391,  231,  231,  393,  460,  231,

      395,  231,  231,  231,  347,  231,  231,  231,  397,  231,
      231,  231,  424,  231,  231,  231,  266,  231,  231,  266,
      396,  872,  398,  399,  231,  871,  231,  231,  231,  427,
      231,  231,  400,  401,  894,  231,  402,  231,  231,  231,
      266,  231,  231,  266,  405,  404,  231,  420,  231,  231,
      406,  231,  403,  231,  231,  231,  266,  231,  231,  266,
      231,  408,  231,  231,  231,  266,  231,  231,  266,  257,
      409,  257,  257,  257,  407,  257,  257,  410,  428,  231,
      411,  231,  231,  231,  436,  231,  231,  231,  832,  231,
      231,  231,  266,  231,  231,  266,  464,  877,  412,  231,

      416,  231,  231,  413,  400,  231,  874,  231,  231,  231,
      465,  231,  231,  231,  414,  231,  231,  480,  467,  429,
      415,  267,  268,  269,  267,  873,  261,  269,  268,  269,
      269,  872,  266,  871,  266,  266,  417,  266,  266,  266,
      266,  266,  266,  266,  870,  869,  262,  425,  430,  868,
      266,  418,  421,  266,  423,  266,  266,  867,  266,  266,
      432,  426,  431,  266,  866,  266,  266,  266,  266,  266,
      266,  827,  266,  437,  438,  433,  266,  434,  439,  266,
      266,  865,  266,  266,  435,  266,  441,  266,  864,  295,
      266,  199,  295,  266,  199,  442,  266,  440,  266,  443,

      266,  266,  444,  266,  266,  266,  266,  266,  266,  266,
      824,  266,  266,  450,  266,  266,  477,  447,  433,  478,
      823,  445,  304,  305,  306,  304,  451,  341,  341,  448,
      341,  341,  822,  449,  342,  343,  344,  342,  349,  350,
      349,  349,  513,  453,  821,  513,  452,  349,  350,  349,
      349,  863,  819,  454,  511,  512,  511,  511,  519,  520,
      521,  519,  522,  523,  524,  522,  818,  817,  347,  385,
      386,  387,  385,  387,  386,  387,  387,  347,  832,  231,
      831,  231,  231,  231,  830,  231,  231,  514,  525,  231,
      829,  231,  231,  231,  266,  231,  231,  266,  231,  266,

      231,  231,  266,  828,  383,  526,  420,  231,  383,  231,
      231,  827,  527,  529,  231,  221,  231,  231,  826,  231,
      528,  231,  231,  231,  266,  231,  231,  266,  532,  231,
      530,  231,  231,  556,  825,  531,  533,  231,  824,  231,
      231,  231,  823,  231,  231,  231,  822,  231,  231,  231,
      536,  231,  231,  821,  231,  534,  231,  231,  231,  535,
      231,  231,  820,  231,  537,  231,  231,  539,  540,  231,
      266,  231,  231,  266,  266,  538,  541,  266,  819,  231,
      542,  231,  231,  231,  818,  231,  231,  231,  817,  231,
      231,  231,  557,  231,  231,  562,  816,  544,  543,  231,

      266,  231,  231,  266,  231,  815,  231,  231,  231,  266,
      231,  231,  266,  545,  547,  548,  814,  546,  550,  512,
      550,  550,  551,  558,  231,  551,  231,  813,  231,  231,
      231,  812,  231,  231,  231,  565,  231,  231,  231,  549,
      231,  231,  266,  266,  266,  266,  266,  266,  266,  266,
      746,  266,  266,  563,  413,  811,  266,  266,  560,  266,
      266,  266,  564,  553,  266,  266,  567,  552,  266,  559,
      554,  561,  266,  810,  266,  266,  555,  266,  566,  266,
      568,  743,  266,  266,  571,  570,  266,  266,  809,  808,
      266,  569,  572,  266,  573,  266,  266,  266,  266,  266,

      266,  266,  266,  807,  266,  266,  574,  575,  266,  806,
      738,  737,  579,  295,  578,  199,  295,  582,  199,  266,
      582,  576,  266,  577,  581,  512,  511,  581,  266,  266,
      266,  266,  266,  266,  266,  736,  580,  266,  450,  266,
      735,  805,  266,  511,  512,  511,  511,  513,  733,  732,
      513,  451,  447,  804,  803,  802,  584,  511,  512,  511,
      511,  513,  583,  643,  513,  231,  643,  231,  231,  753,
      585,  452,  519,  520,  521,  519,  647,  586,  521,  520,
      521,  521,  522,  523,  524,  522,  524,  523,  524,  524,
      266,  752,  514,  266,  231,  751,  231,  231,  231,  750,

      231,  231,  231,  749,  231,  231,  514,  748,  644,  646,
      652,  231,  266,  231,  231,  266,  680,  231,  221,  231,
      231,  231,  266,  231,  231,  266,  648,  649,  221,  231,
      747,  231,  231,  231,  746,  231,  231,  676,  231,  683,
      231,  231,  231,  650,  231,  231,  651,  231,  266,  231,
      231,  266,  266,  745,  654,  266,  653,  655,  231,  677,
      231,  231,  657,  744,  231,  743,  231,  231,  656,  742,
      741,  658,  659,  231,  740,  231,  231,  231,  686,  231,
      231,  660,  231,  739,  231,  231,  231,  738,  231,  231,
      231,  737,  231,  231,  231,  266,  231,  231,  266,  663,

      736,  664,  266,  661,  662,  266,  735,  231,  665,  231,
      231,  231,  734,  231,  231,  231,  684,  231,  231,  667,
      231,  685,  231,  231,  231,  266,  231,  231,  266,  733,
      551,  668,  231,  551,  666,  550,  512,  550,  550,  231,
      732,  231,  231,  669,  231,  731,  231,  231,  231,  730,
      231,  231,  674,  678,  231,  674,  266,  266,  266,  266,
      266,  266,  266,  729,  728,  266,  682,  670,  266,  727,
      266,  266,  679,  266,  726,  552,  266,  687,  689,  266,
      673,  688,  681,  266,  671,  266,  266,  672,  266,  266,
      266,  690,  266,  266,  725,  266,  266,  675,  266,  266,

      694,  266,  691,  693,  266,  266,  724,  692,  266,  695,
      636,  266,  266,  697,  266,  266,  723,  698,  581,  512,
      511,  581,  582,  696,  266,  582,  266,  266,  266,  266,
      704,  266,  643,  704,  699,  643,  643,  722,  231,  643,
      231,  231,  721,  231,  720,  231,  231,  231,  719,  231,
      231,  231,  718,  231,  231,  700,  755,  629,  703,  757,
      231,  628,  231,  231,  754,  717,  716,  583,  758,  701,
      266,  702,  756,  266,  715,  705,  231,  644,  231,  231,
      231,  644,  231,  231,  714,  713,  231,  759,  231,  231,
      231,  712,  231,  231,  760,  621,  778,  231,  761,  231,

      231,  231,  711,  231,  231,  762,  710,  709,  231,  763,
      231,  231,  231,  708,  231,  231,  231,  707,  231,  231,
      231,  706,  231,  231,  231,  645,  231,  231,  231,  266,
      231,  231,  266,  231,  764,  231,  231,  765,  642,  641,
      231,  768,  231,  231,  231,  266,  231,  231,  266,  640,
      231,  766,  231,  231,  231,  767,  231,  231,  771,  231,
      639,  231,  231,  769,  770,  638,  231,  637,  231,  231,
      231,  788,  231,  231,  231,  636,  231,  231,  231,  635,
      231,  231,  231,  634,  231,  231,  772,  773,  674,  633,
      231,  674,  231,  266,  231,  231,  266,  266,  632,  266,

      266,  266,  266,  631,  266,  630,  779,  774,  266,  781,
      775,  266,  266,  776,  629,  266,  782,  266,  266,  628,
      266,  266,  780,  783,  266,  784,  785,  266,  266,  627,
      626,  266,  786,  675,  625,  266,  787,  777,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  624,  792,  266,  795,  266,  623,  266,  266,
      789,  266,  266,  266,  622,  266,  266,  790,  791,  793,
      266,  794,  266,  266,  266,  266,  704,  266,  266,  704,
      621,  266,  620,  797,  231,  796,  231,  231,  231,  619,
      231,  231,  833,  618,  617,  231,  834,  231,  231,  231,

      798,  231,  231,  835,  799,  800,  231,  616,  231,  231,
      231,  615,  231,  231,  231,  266,  231,  231,  266,  614,
      613,  705,  231,  801,  231,  231,  231,  266,  231,  231,
      266,  480,  231,  836,  231,  231,  231,  612,  231,  231,
      231,  611,  231,  231,  837,  610,  609,  231,  838,  231,
      231,  231,  608,  231,  231,  839,  607,  606,  231,  840,
      231,  231,  231,  605,  231,  231,  231,  604,  231,  231,
      231,  266,  231,  231,  266,  231,  603,  231,  231,  842,
      602,  601,  841,  843,  231,  600,  231,  231,  231,  599,
      231,  231,  231,  598,  231,  231,  231,  844,  231,  231,

      231,  266,  231,  231,  266,  266,  597,  266,  266,  848,
      266,  266,  596,  849,  266,  850,  266,  266,  266,  266,
      266,  266,  595,  266,  266,  846,  266,  266,  594,  593,
      845,  852,  853,  266,  851,  592,  266,  266,  847,  266,
      266,  854,  266,  266,  266,  855,  266,  266,  266,  266,
      266,  266,  266,  266,  591,  590,  266,  857,  858,  266,
      589,  266,  859,  856,  266,  266,  266,  875,  266,  266,
      875,  231,  588,  231,  231,  231,  587,  231,  231,  231,
      518,  231,  231,  231,  517,  231,  231,  231,  266,  231,
      231,  266,  516,  231,  861,  231,  231,  231,  860,  231,

      231,  376,  231,  878,  231,  231,  231,  862,  231,  231,
      515,  510,  876,  231,  879,  231,  231,  231,  509,  231,
      231,  880,  231,  508,  231,  231,  231,  507,  231,  231,
      881,  883,  882,  231,  883,  231,  266,  231,  231,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  506,  505,
      887,  886,  888,  266,  266,  504,  266,  266,  885,  891,
      890,  889,  891,  503,  266,  875,  884,  266,  875,  875,
      900,  502,  875,  900,  231,  501,  231,  231,  231,  500,
      231,  231,  902,  231,  499,  231,  231,  231,  498,  231,

      231,  231,  266,  231,  231,  266,  883,  893,  231,  883,
      231,  497,  231,  231,  892,  905,  496,  231,  905,  266,
      876,  495,  266,  266,  876,  901,  266,  907,  266,  266,
      494,  266,  266,  903,  891,  266,  910,  891,  266,  910,
      900,  900,  493,  900,  900,  231,  266,  231,  231,  266,
      231,  884,  231,  231,  231,  904,  231,  231,  492,  491,
      906,  908,  905,  490,  231,  905,  231,  266,  231,  231,
      266,  266,  910,  266,  266,  910,  266,  489,  488,  892,
      909,  911,  487,  915,  486,  901,  901,  231,  343,  231,
      231,  231,  266,  231,  231,  266,  266,  485,  484,  266,

      917,  231,  266,  231,  231,  266,  231,  906,  231,  231,
      266,  916,  231,  266,  231,  231,  266,  911,  918,  266,
      933,  483,  482,  481,  934,  231,  921,  231,  231,  266,
      479,  922,  266,  476,  475,  474,  473,  472,  471,  470,
      469,  929,  468,  925,  926,  930,   51,   51,   51,   51,
       51,   51,   56,   56,   56,   56,   56,   56,   63,   63,
       63,   63,   63,   63,   68,   68,   68,   68,   68,   68,
      158,  158,  158,  158,  158,  158,  163,  163,  163,  163,
      163,  163,  199,  199,  467,  199,  199,  199,  209,  209,
      209,  209,  209,  209,  212,  466,  463,  462,  212,  212,

      214,  214,  214,  214,  214,  214,  220,  220,  461,  458,
      220,  220,  226,  226,  226,  226,  226,  226,  230,  230,
      457,  230,  230,  230,  256,  256,  456,  256,  256,  256,
      266,  266,  455,  309,  305,  266,  295,  295,  227,  295,
      295,  295,  340,  340,  384,  383,  221,  340,  345,  345,
      345,  345,  345,  345,  419,  419,  217,  382,  213,  419,
      446,  446,  208,  446,  446,  446,  381,  380,  379,  378,
      377,  207,  202,  201,  375,  372,  371,  370,  369,  368,
      367,  366,  365,  364,  363,  362,  359,  358,  357,  354,
      353,  352,  351,  169,  343,  335,  334,  331,  330,  329,

      326,  325,  324,  319,  315,  314,  313,  310,  309,  307,
      303,  298,  297,  293,  292,  291,  288,  287,  286,  281,
      277,  276,  275,  272,  271,  232,  229,  225,  222,  221,
      217,  213,  208,  207,  202,  201,  191,  190,  189,  186,
      185,  184,  179,  175,  174,  173,  170,  169,  168,  935,
       19,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935

    } ;

static yyconst flex_int16_t yy_chk[2400] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    7,
        7,    2,    2,  952,    5,    5,    2,    3,    3,    3,
        3,    4,    4,    4,    4,    4,    6,    6,  931,    2,
        8,    8,   17,   17,    4,   15,   15,   15,   15,   34,
       15,   16,   16,   16,   16,    2,   16,    2,   21,    2,
       27,   21,    2,    2,    5,   33,   34,   27,   38,    5,

       31,   17,    4,   31,   68,   68,    6,   31,  928,   33,
       38,    6,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
       10,   18,   18,   10,   10,   45,   48,   49,   10,   49,
       54,   54,   54,   59,   59,   59,   59,   66,  927,   45,
      113,   10,   66,  128,  125,   71,   48,   71,   71,   74,
       18,   74,   74,   75,  113,   75,   75,   10,  125,   10,

       75,   10,  924,  128,   10,   10,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   12,   62,  114,   12,   12,  923,
      107,  111,   12,   76,  111,   76,   76,  107,  111,   77,
      118,   77,   77,  114,  137,   12,   78,   76,   78,   78,
      143,  137,  118,   62,   90,   77,   90,   90,  129,   78,
      129,   12,   77,   12,  143,   12,  920,   90,   12,   12,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   14,  919,
      123,   14,   14,  123,  156,   79,   14,   79,   79,   80,
      148,   80,   80,   81,  144,   81,   81,  219,   82,   14,
       82,   82,  148,  913,  156,   79,   86,   81,   86,   86,
       81,  144,   82,  163,   81,   14,   80,   14,   85,   14,
       85,   85,   14,   14,   42,  219,   86,   42,   42,  200,

      200,   83,   42,   83,   83,  153,   84,  165,   84,   84,
       83,  912,  163,   85,   87,   84,   87,   87,   88,  153,
       88,   88,  901,  157,   83,  157,   89,  158,   89,   89,
      158,   42,   84,   42,   88,   89,  165,   87,   42,   42,
       91,  167,   91,   91,  167,   92,   88,   92,   92,   93,
      204,   93,   93,   94,  898,   94,   94,   95,  337,   95,
       95,   96,   94,   96,   96,   97,  190,   97,   97,  190,
      204,  174,   98,   91,   98,   98,   94,   99,  337,   99,
       99,  101,  101,  101,  101,  174,   97,  103,  103,  103,
      103,  122,  122,  122,  122,  131,  131,  131,  131,  266,

       95,   96,  266,   98,  141,   98,   97,  141,  197,  895,
      197,  141,  152,  152,  152,  152,  159,  159,  159,  159,
      178,  894,   99,  166,  166,  166,  166,  211,  211,  211,
      216,  216,  216,  223,  178,  226,  226,  876,  223,  225,
      225,  225,  225,  230,  874,  230,  230,  231,  273,  231,
      231,  273,  233,  166,  233,  233,  870,  273,  234,  233,
      234,  234,  235,  869,  235,  235,  236,  867,  236,  236,
      237,  235,  237,  237,  238,  345,  238,  238,  234,  239,
      866,  239,  239,  238,  314,  225,  236,  240,  275,  240,
      240,  275,  239,  241,  237,  241,  241,  238,  314,  242,

      240,  242,  242,  243,  345,  243,  243,  244,  242,  244,
      244,  245,  275,  245,  245,  246,  277,  246,  246,  277,
      241,  865,  242,  243,  247,  864,  247,  247,  248,  277,
      248,  248,  244,  245,  863,  249,  246,  249,  249,  250,
      271,  250,  250,  271,  249,  248,  251,  271,  251,  251,
      250,  252,  247,  252,  252,  253,  285,  253,  253,  285,
      254,  252,  254,  254,  255,  278,  255,  255,  278,  256,
      253,  256,  256,  257,  251,  257,  257,  254,  278,  258,
      254,  258,  258,  259,  285,  259,  259,  260,  832,  260,
      260,  261,  279,  261,  261,  279,  318,  831,  255,  263,

      261,  263,  263,  258,  258,  262,  829,  262,  262,  264,
      318,  264,  264,  265,  259,  265,  265,  333,  333,  279,
      260,  267,  267,  267,  267,  828,  262,  269,  269,  269,
      269,  826,  272,  825,  274,  272,  263,  274,  276,  280,
      281,  276,  280,  281,  820,  816,  262,  276,  280,  815,
      282,  264,  272,  282,  274,  283,  286,  814,  283,  286,
      281,  276,  280,  284,  813,  287,  284,  288,  287,  289,
      288,  812,  289,  286,  287,  282,  290,  283,  288,  290,
      291,  811,  292,  291,  284,  292,  290,  293,  810,  295,
      293,  295,  295,  296,  295,  291,  296,  289,  297,  292,

      298,  297,  292,  298,  299,  300,  301,  299,  300,  301,
      809,  302,  303,  299,  302,  303,  330,  296,  296,  330,
      808,  293,  304,  304,  304,  304,  300,  340,  341,  297,
      340,  341,  807,  298,  342,  342,  342,  342,  347,  347,
      347,  347,  377,  301,  806,  377,  300,  349,  349,  349,
      349,  805,  804,  302,  376,  376,  376,  376,  383,  383,
      383,  383,  384,  384,  384,  384,  803,  802,  347,  385,
      385,  385,  385,  387,  387,  387,  387,  349,  753,  388,
      751,  388,  388,  389,  750,  389,  389,  377,  388,  390,
      749,  390,  390,  391,  419,  391,  391,  419,  392,  420,

      392,  392,  420,  748,  383,  389,  420,  393,  384,  393,
      393,  747,  390,  392,  394,  385,  394,  394,  745,  395,
      391,  395,  395,  396,  421,  396,  396,  421,  395,  397,
      393,  397,  397,  421,  744,  394,  396,  398,  742,  398,
      398,  399,  741,  399,  399,  400,  740,  400,  400,  401,
      399,  401,  401,  739,  402,  397,  402,  402,  403,  398,
      403,  403,  734,  404,  400,  404,  404,  402,  403,  405,
      422,  405,  405,  422,  427,  401,  404,  427,  731,  406,
      405,  406,  406,  407,  730,  407,  407,  408,  729,  408,
      408,  409,  422,  409,  409,  427,  728,  407,  406,  410,

      423,  410,  410,  423,  411,  727,  411,  411,  412,  430,
      412,  412,  430,  408,  410,  411,  726,  409,  413,  413,
      413,  413,  414,  423,  414,  414,  415,  725,  415,  415,
      416,  724,  416,  416,  417,  430,  417,  417,  418,  412,
      418,  418,  424,  425,  428,  424,  425,  428,  426,  429,
      723,  426,  429,  428,  416,  722,  431,  432,  425,  431,
      432,  433,  429,  415,  433,  434,  432,  414,  434,  424,
      417,  426,  435,  721,  436,  435,  418,  436,  431,  437,
      433,  720,  437,  438,  436,  435,  438,  439,  719,  718,
      439,  434,  437,  440,  438,  441,  440,  442,  441,  443,

      442,  444,  443,  717,  444,  445,  439,  440,  445,  716,
      715,  714,  444,  446,  443,  446,  446,  448,  446,  449,
      448,  441,  449,  442,  447,  447,  447,  447,  450,  451,
      452,  450,  451,  452,  453,  713,  445,  453,  451,  454,
      712,  711,  454,  480,  480,  480,  480,  481,  710,  709,
      481,  452,  450,  708,  707,  706,  449,  511,  511,  511,
      511,  513,  448,  517,  513,  526,  517,  526,  526,  645,
      453,  452,  519,  519,  519,  519,  526,  454,  521,  521,
      521,  521,  522,  522,  522,  522,  524,  524,  524,  524,
      560,  644,  481,  560,  525,  642,  525,  525,  527,  641,

      527,  527,  531,  639,  531,  531,  513,  638,  517,  525,
      531,  528,  563,  528,  528,  563,  560,  529,  519,  529,
      529,  530,  556,  530,  530,  556,  527,  528,  522,  532,
      637,  532,  532,  533,  635,  533,  533,  556,  534,  563,
      534,  534,  535,  529,  535,  535,  530,  536,  557,  536,
      536,  557,  566,  634,  533,  566,  532,  534,  537,  557,
      537,  537,  536,  633,  538,  632,  538,  538,  535,  631,
      630,  537,  538,  539,  627,  539,  539,  540,  566,  540,
      540,  539,  541,  626,  541,  541,  542,  625,  542,  542,
      543,  624,  543,  543,  544,  564,  544,  544,  564,  542,

      623,  543,  565,  540,  541,  565,  622,  545,  544,  545,
      545,  546,  620,  546,  546,  547,  564,  547,  547,  546,
      548,  565,  548,  548,  549,  558,  549,  549,  558,  619,
      551,  547,  551,  551,  545,  550,  550,  550,  550,  552,
      618,  552,  552,  548,  553,  617,  553,  553,  554,  616,
      554,  554,  555,  558,  555,  555,  559,  561,  562,  559,
      561,  562,  567,  615,  613,  567,  562,  549,  568,  612,
      569,  568,  559,  569,  611,  551,  571,  567,  569,  571,
      554,  568,  561,  570,  552,  572,  570,  553,  572,  574,
      573,  570,  574,  573,  610,  575,  576,  555,  575,  576,

      574,  578,  571,  573,  578,  577,  609,  572,  577,  575,
      608,  579,  580,  577,  579,  580,  607,  578,  581,  581,
      581,  581,  582,  576,  583,  582,  585,  583,  584,  585,
      586,  584,  614,  586,  579,  614,  643,  606,  646,  643,
      646,  646,  605,  647,  604,  647,  647,  648,  603,  648,
      648,  649,  602,  649,  649,  580,  647,  601,  585,  649,
      650,  600,  650,  650,  646,  599,  598,  582,  650,  583,
      676,  584,  648,  676,  597,  586,  651,  614,  651,  651,
      652,  643,  652,  652,  596,  595,  653,  651,  653,  653,
      654,  594,  654,  654,  653,  593,  676,  655,  654,  655,

      655,  656,  592,  656,  656,  655,  591,  590,  657,  656,
      657,  657,  658,  589,  658,  658,  659,  588,  659,  659,
      660,  587,  660,  660,  661,  518,  661,  661,  662,  682,
      662,  662,  682,  663,  657,  663,  663,  658,  516,  515,
      664,  663,  664,  664,  665,  687,  665,  665,  687,  514,
      666,  661,  666,  666,  667,  662,  667,  667,  666,  668,
      510,  668,  668,  664,  665,  509,  669,  508,  669,  669,
      670,  687,  670,  670,  671,  507,  671,  671,  672,  506,
      672,  672,  673,  505,  673,  673,  668,  669,  674,  504,
      674,  674,  675,  677,  675,  675,  677,  678,  503,  689,

      678,  679,  689,  502,  679,  501,  677,  670,  680,  679,
      672,  680,  681,  673,  500,  681,  680,  683,  684,  499,
      683,  684,  678,  681,  685,  683,  684,  685,  686,  498,
      497,  686,  685,  674,  496,  688,  686,  675,  688,  690,
      691,  692,  690,  691,  692,  693,  694,  696,  693,  694,
      696,  695,  495,  693,  695,  696,  697,  494,  698,  697,
      688,  698,  699,  700,  493,  699,  700,  691,  692,  694,
      701,  695,  702,  701,  703,  702,  704,  703,  705,  704,
      492,  705,  491,  699,  754,  698,  754,  754,  755,  490,
      755,  755,  754,  489,  488,  756,  755,  756,  756,  757,

      700,  757,  757,  756,  702,  703,  758,  487,  758,  758,
      759,  486,  759,  759,  760,  781,  760,  760,  781,  485,
      484,  704,  761,  705,  761,  761,  762,  782,  762,  762,
      782,  483,  763,  759,  763,  763,  764,  482,  764,  764,
      765,  479,  765,  765,  764,  478,  477,  766,  765,  766,
      766,  767,  476,  767,  767,  766,  475,  474,  768,  767,
      768,  768,  769,  473,  769,  769,  770,  472,  770,  770,
      771,  784,  771,  771,  784,  772,  471,  772,  772,  770,
      470,  469,  769,  772,  773,  468,  773,  773,  774,  467,
      774,  774,  775,  466,  775,  775,  776,  773,  776,  776,

      777,  778,  777,  777,  778,  779,  465,  780,  779,  778,
      780,  783,  464,  779,  783,  780,  785,  786,  787,  785,
      786,  787,  463,  788,  789,  775,  788,  789,  462,  461,
      774,  788,  789,  790,  783,  460,  790,  791,  776,  792,
      791,  790,  792,  793,  794,  791,  793,  794,  795,  797,
      796,  795,  797,  796,  459,  458,  798,  794,  796,  798,
      457,  799,  797,  793,  799,  800,  801,  830,  800,  801,
      830,  833,  456,  833,  833,  834,  455,  834,  834,  835,
      382,  835,  835,  836,  381,  836,  836,  837,  848,  837,
      837,  848,  380,  838,  799,  838,  838,  839,  798,  839,

      839,  379,  840,  836,  840,  840,  841,  800,  841,  841,
      378,  375,  830,  842,  841,  842,  842,  843,  374,  843,
      843,  842,  844,  373,  844,  844,  845,  372,  845,  845,
      844,  846,  845,  846,  846,  847,  849,  847,  847,  849,
      850,  851,  852,  850,  851,  852,  853,  854,  855,  853,
      854,  855,  856,  858,  857,  856,  858,  857,  371,  370,
      856,  851,  857,  859,  860,  369,  859,  860,  847,  861,
      860,  859,  861,  368,  862,  868,  846,  862,  868,  875,
      877,  367,  875,  877,  878,  366,  878,  878,  879,  365,
      879,  879,  878,  880,  364,  880,  880,  881,  363,  881,

      881,  882,  887,  882,  882,  887,  883,  862,  883,  883,
      884,  362,  884,  884,  861,  885,  361,  885,  885,  886,
      868,  360,  886,  888,  875,  877,  888,  886,  889,  890,
      359,  889,  890,  882,  891,  892,  893,  891,  892,  893,
      896,  900,  358,  896,  900,  902,  907,  902,  902,  907,
      903,  883,  903,  903,  904,  884,  904,  904,  357,  356,
      885,  890,  905,  355,  905,  905,  906,  908,  906,  906,
      908,  909,  910,  911,  909,  910,  911,  354,  353,  891,
      892,  893,  352,  903,  351,  896,  900,  915,  344,  915,
      915,  916,  917,  916,  916,  917,  918,  339,  338,  918,

      908,  921,  922,  921,  921,  922,  925,  905,  925,  925,
      926,  906,  929,  926,  929,  929,  930,  910,  911,  930,
      929,  336,  335,  334,  930,  933,  915,  933,  933,  934,
      331,  917,  934,  329,  328,  327,  326,  325,  324,  323,
      322,  925,  321,  921,  922,  926,  936,  936,  936,  936,
      936,  936,  937,  937,  937,  937,  937,  937,  938,  938,
      938,  938,  938,  938,  939,  939,  939,  939,  939,  939,
      940,  940,  940,  940,  940,  940,  941,  941,  941,  941,
      941,  941,  942,  942,  320,  942,  942,  942,  943,  943,
      943,  943,  943,  943,  944,  319,  317,  316,  944,  944,

      945,  945,  945,  945,  945,  945,  946,  946,  315,  313,
      946,  946,  947,  947,  947,  947,  947,  947,  948,  948,
      312,  948,  948,  948,  949,  949,  311,  949,  949,  949,
      950,  950,  310,  309,  306,  950,  951,  951,  228,  951,
      951,  951,  953,  953,  224,  221,  220,  953,  954,  954,
      954,  954,  954,  954,  955,  955,  218,  217,  215,  955,
      956,  956,  210,  956,  956,  956,  206,  205,  203,  202,
      201,  198,  196,  195,  191,  189,  188,  187,  186,  185,
      184,  183,  182,  181,  180,  179,  177,  176,  175,  173,
      172,  171,  170,  169,  161,  155,  154,  151,  150,  149,

      147,  146,  145,  142,  140,  139,  138,  136,  135,  133,
      130,  127,  126,  121,  120,  119,  117,  116,  115,  112,
      110,  109,  108,  106,  105,   73,   70,   67,   65,   63,
       61,   58,   53,   50,   47,   46,   41,   40,   39,   37,
       36,   35,   32,   30,   29,   28,   26,   25,   23,   19,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[70] =
    {   0,
0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 
    1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#line 2 "levcomp.lpp"

// levcomp.lpp:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
// 
// Based loosely on NetHack's lev_comp.l

#include "AppHdr.h"
#include "mapdef.h"
#include "levcomp.tab.h"
#include <cstring>
#include <queue>

static bool alloced = false;

std::queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(100);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

static char *copy_text(bool trim_right, int strip_trailing)
{
    char *newstring = NULL;
    if ((yylval.text = newstring = strdup(yytext)))
    {
        alloced = true;
        char *s = NULL;
        if (trim_right)
        {
            s = newstring + strlen(newstring) - 1;
            while (isspace(*s) && s >= newstring)
                *s-- = 0;
        }
        if (strip_trailing)
        {
            if (!s)
                s = newstring + strlen(newstring) - 1;
            while (s >= newstring && --strip_trailing >= 0)
                *s-- = 0;
        }
    }
    return (newstring);
}

static void settext(bool trim_right = false, int strip_trailing = 0)
{
    clean();
    char *newstring = copy_text(trim_right, strip_trailing);
    yylval.text = newstring;
}









#line 1395 "levcomp.lex.cc"

#define INITIAL 0
#define MAPDEF 1
#define LUA 2
#define LUA_ONELINER 3
#define ARGUMENT 4
#define MNAME 5
#define KEYWORDS 6
#define ITEM_LIST 7
#define TOEOL 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 89 "levcomp.lpp"


#line 1562 "levcomp.lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 936 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 935 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 91 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 93 "levcomp.lpp"
{
                        settext(true);
                        return MAP_LINE;
                    }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 98 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 99 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 100 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 102 "levcomp.lpp"
;
	YY_BREAK
case 7:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 104 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 8:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 105 "levcomp.lpp"
{
                            settext(true, 2);
                            BEGIN(INITIAL);
                            return LUA_LINE;
                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 110 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 114 "levcomp.lpp"
;
	YY_BREAK
case 11:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 116 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 120 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 122 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 127 "levcomp.lpp"
;
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 128 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 130 "levcomp.lpp"
{ 
                        settext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 135 "levcomp.lpp"
{
                        settext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 140 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 141 "levcomp.lpp"
;
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 142 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 144 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 146 "levcomp.lpp"
{ 
                        settext();
                        return MONSTER_NAME; 
                    }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 151 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 152 "levcomp.lpp"
;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 154 "levcomp.lpp"
{ 
                        BEGIN(INITIAL);
                        settext();
                        return STRING; 
                    }
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 160 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 27:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 162 "levcomp.lpp"
{
                        settext(true, 1);
                        return STRING;
                    }
	YY_BREAK
case 28:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 167 "levcomp.lpp"
{
                        BEGIN(INITIAL);
                        settext(true);
                        return STRING;
                    }
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 172 "levcomp.lpp"
;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 174 "levcomp.lpp"
;
	YY_BREAK
case 31:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 176 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 178 "levcomp.lpp"
{ BEGIN(LUA_ONELINER); return MAIN; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 180 "levcomp.lpp"
{ BEGIN(LUA); return PRELUDE; }      
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 181 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 182 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 183 "levcomp.lpp"
{ BEGIN(LUA); return VALIDATE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 184 "levcomp.lpp"
{ BEGIN(LUA); return VETO; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 187 "levcomp.lpp"
{ BEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 188 "levcomp.lpp"
{ BEGIN(ARGUMENT); return DEFAULT_DEPTH; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 189 "levcomp.lpp"
{ BEGIN(ARGUMENT); return DEPTH; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 190 "levcomp.lpp"
{ BEGIN(ARGUMENT); return ORIENT; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 191 "levcomp.lpp"
{ BEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 192 "levcomp.lpp"
{ BEGIN(ARGUMENT); return WELCOME; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 193 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 194 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 195 "levcomp.lpp"
{ BEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 196 "levcomp.lpp"
{ BEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 197 "levcomp.lpp"
{ BEGIN(ARGUMENT); return LFLAGS; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 198 "levcomp.lpp"
{ BEGIN(ARGUMENT); return BFLAGS; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 199 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return SUBST; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 200 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return NSUBST; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 201 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return COLOUR; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 202 "levcomp.lpp"
{ BEGIN(ARGUMENT); return FLOORCOL; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 203 "levcomp.lpp"
{ BEGIN(ARGUMENT); return ROCKCOL; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 204 "levcomp.lpp"
{ BEGIN(MNAME); return MONS; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 205 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 206 "levcomp.lpp"
{ BEGIN(TOEOL); return MARKER; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 207 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return SHUFFLE; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 209 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KFEAT; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 210 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KITEM; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 211 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KMONS; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 212 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KMASK; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 214 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 216 "levcomp.lpp"
{
                        clean();
                        yylval.i = atoi(yytext);
                        return INTEGER;
                    }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 222 "levcomp.lpp"
;
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 223 "levcomp.lpp"
;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 224 "levcomp.lpp"
;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 225 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 227 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 2065 "levcomp.lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MAPDEF):
case YY_STATE_EOF(LUA):
case YY_STATE_EOF(LUA_ONELINER):
case YY_STATE_EOF(ARGUMENT):
case YY_STATE_EOF(MNAME):
case YY_STATE_EOF(KEYWORDS):
case YY_STATE_EOF(ITEM_LIST):
case YY_STATE_EOF(TOEOL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 936 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 936 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 935);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 227 "levcomp.lpp"



int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}

