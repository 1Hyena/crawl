#line 2 "levcomp.lex.cc"

#line 4 "levcomp.lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 59
#define YY_END_OF_BUFFER 60
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[647] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   60,   58,   52,   53,
       58,   56,   54,   55,   50,   49,   51,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   52,   27,   29,   57,   57,   57,   57,   58,   59,
        6,   59,   59,    4,    2,    3,   59,   59,    2,    2,
        2,    9,   10,   59,    9,    9,   59,   12,   59,   58,
       26,   58,   56,   54,   55,   50,   49,   51,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   27,   29,   57,   57,   57,   57,   58,   58,

       24,   21,   24,   56,   54,   55,   23,   49,   51,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   24,   27,   29,   57,   57,   57,   57,
       58,   14,   15,   58,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       14,   13,   13,   13,   13,   17,   19,   20,   59,   18,
       52,   53,   51,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       52,   27,    0,   27,   57,   57,   57,   57,   57,   32,
        6,    5,    0,    0,    2,    3,    0,    0,    2,    2,

        2,    9,    9,   10,    9,    9,    9,    0,   11,   12,
       25,    0,   26,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   27,   25,   25,   25,   25,   25,   25,    0,
       24,   21,   24,   21,   51,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   24,   27,   57,   57,   57,   57,   57,   32,
       14,   15,    0,   15,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   14,   13,   13,   13,   13,   13,   16,

        0,   19,   20,    0,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       28,   57,   57,    2,    9,    9,    9,    7,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   57,   57,   57,   57,   57,   57,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   57,    0,    0,
       57,    2,    9,    8,    9,    7,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,    0,   25,   25,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,    0,   22,   22,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   57,   57,   57,   44,   57,   57,   57,   43,   33,
       57,   57,   57,   57,   41,   57,   57,   31,   57,    2,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   57,
       35,   40,   46,   47,   48,   57,   37,   57,   42,   57,
       57,   57,    1,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   13,
       13,   13,   13,   13,   13,   38,   36,   57,   39,   57,
       57,   25,   25,   25,   25,   25,   25,   22,   22,   22,

       22,   22,   22,   13,   13,   13,   45,    0,    0,    0,
       25,   25,    0,   25,   22,   22,    0,   22,   13,    0,
       30,   25,   25,   22,   22,   13,    0,   25,   22,   13,
        0,   25,   22,   13,    0,   25,   22,   13,    0,   25,
       22,   13,   34,   25,   22,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    1,    1,    1,    1,    8,
        9,    1,    1,   10,   11,    1,    1,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   13,    1,    1,
        1,    1,    1,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       23,   30,   31,   32,   33,   23,   34,   23,   23,   23,
        1,    1,    1,    1,   23,    1,   35,   23,   23,   36,

       37,   38,   23,   39,   23,   23,   23,   40,   23,   23,
       23,   41,   23,   42,   43,   44,   45,   23,   23,   23,
       23,   23,   46,    1,   47,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[48] =
    {   0,
        1,    2,    3,    4,    2,    1,    1,    1,    1,    5,
        6,    7,    1,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    1,    1
    } ;

static yyconst flex_int16_t yy_base[670] =
    {   0,
        0,   46,   51,   58,   63,   65,   46,   67,  112,  158,
      204,  250,  296,  342,   75,   92, 1556, 1557,   79, 1557,
     1552, 1557, 1557, 1557, 1557, 1557, 1542,    0, 1532, 1534,
     1526, 1518,   81, 1521, 1534, 1517, 1521,   31, 1531, 1526,
     1506,  343,    0, 1557,   60, 1497, 1499,   47, 1494, 1557,
     1557, 1536,  163, 1557,    0, 1557, 1535,  169,    0, 1510,
       39, 1489, 1557, 1532,   62, 1487, 1530, 1557, 1529,  173,
     1557, 1528,  177,  181,  185,  189,  198,  254,  389,  436,
      143,  155,   72,  243,   70,  148,  167,  171,   78,  239,
      249,  240,  269,  276,  254,  325,  330,  331,  357,    0,

      281, 1557,  361,    0,    0,    0, 1557,    0, 1518,  483,
      530,  271,  333,  335,  354,  251,  273,  339,  356,  371,
      274,  366,  380,  404,  406,    0,  391,  394,  392,  405,
     1483,  418, 1557, 1525,    0, 1515, 1515,  403,  360,  407,
      419,  441,  442,  414,  443,  444,  445,  447,  368,  422,
      472,  484,  454,  451,  460,  495,  502, 1557, 1522, 1557,
      506, 1557, 1512,    0, 1509, 1493, 1507, 1502, 1501, 1486,
     1489, 1489, 1489, 1492, 1499, 1479, 1496, 1490, 1487, 1470,
      508,    0, 1461,    0, 1477, 1470, 1467, 1489,  438, 1557,
     1557, 1557, 1499,  516,    0, 1557, 1498,  519, 1483, 1472,

      152, 1451, 1450, 1557,  425, 1449,  523, 1492, 1557, 1557,
      512,  540, 1557,  544, 1473,  466,   54,  488,  529,  534,
      532,  506,  536,  539,  537,  519,  540,  547,  546,  550,
      548,  576,  580,  554,  553,  558,  573,  570,  588,  595,
      599, 1557,  603, 1557,  607,  619,  666,  585, 1479,  597,
      604,  584,  603,  596,  615,  620, 1478,  619,  621,  623,
      624,  625,  646,  652,  626,  646,  633, 1477,  650,  656,
      680, 1557, 1487, 1557,    0, 1477, 1477,  675,  658,  677,
      679,  683,  667,  687,  684,  633,  685,  689,  691,  693,
      694,  695,  698,  716,  699,  705,  711,  715,  716,  728,

      729,  741, 1557, 1484, 1459, 1453, 1464, 1457, 1468, 1463,
     1453, 1448, 1460, 1459, 1460, 1456, 1443, 1442, 1452, 1436,
        0,  730, 1430, 1439,  736,  747,  751, 1557,  730,  726,
      740,  742,  750,  748,  746,  734,  754,  756,  763,  408,
      749,  757,  761,  764, 1439,  784,  766,  788,  790, 1445,
      777,  782,  783,  711, 1444,  793,  786,  787,  794,  801,
      806,  802,  795,  796,  803,  810,  827, 1439,  833,  811,
      814, 1438,  820,  822,  825,  828,  829,  830,  841,  831,
      839,  842,  843,  851,  845,  854,  855,  857,  858, 1440,
      869,  861, 1430, 1424, 1413, 1420, 1396, 1401, 1395, 1408,

     1407, 1392, 1394, 1386, 1366, 1379, 1364, 1339,  871, 1332,
     1332, 1362,  879, 1557,  885, 1557,  862, 1342,  868,  879,
      870,  877,  873,  884,  893,  886,  890,  891,  888,  903,
     1303,  874,  923,  929,  897,  907,  908,  916,  922,  923,
      924,  925,  927,  930,  931,  934,  932,  935,  940,  943,
      945,  958,  960,  947,  955,  957,  962,  959,  864,  963,
      965,  966,  969,  970,  973,  975,  976,  972,  977,  984,
      988, 1305, 1309, 1308, 1557, 1307, 1304, 1303, 1557, 1557,
     1283, 1300, 1287, 1298, 1557, 1278, 1267, 1557, 1262, 1265,
      982,  988,  989, 1009,  994,  999, 1003, 1017, 1021,  996,

     1014, 1009, 1018, 1036, 1011,  997, 1040, 1015, 1032, 1034,
     1039, 1052, 1042, 1045, 1047, 1060, 1061, 1035, 1055, 1050,
     1057, 1071, 1058, 1060, 1075, 1065, 1067, 1070, 1071, 1075,
     1076, 1080, 1081, 1083, 1084, 1086, 1087, 1091, 1092, 1273,
     1557, 1557, 1557, 1557, 1557, 1268, 1557, 1262, 1557, 1258,
     1221, 1222,    0, 1091, 1103, 1112, 1116, 1120, 1125, 1102,
     1130, 1115, 1135, 1125, 1105, 1120, 1097, 1140, 1142, 1146,
     1148, 1150, 1145, 1158, 1147, 1162, 1155, 1129, 1140, 1159,
     1163, 1160, 1168, 1145, 1151, 1557, 1557, 1245, 1557, 1239,
     1178, 1180, 1188, 1173, 1193, 1180, 1194, 1198, 1200, 1193,

     1206, 1198, 1208, 1203, 1227, 1215, 1557, 1194, 1216, 1177,
     1223, 1227, 1231, 1237, 1232, 1242, 1241, 1243, 1183, 1167,
     1557, 1247, 1251, 1255, 1262, 1150, 1134, 1264, 1268, 1125,
     1062, 1270, 1274,  961,  606, 1286, 1280,  550,  488, 1291,
     1295,  340, 1557, 1297, 1301, 1557, 1325, 1332, 1339, 1346,
     1353,  247, 1360, 1367, 1374, 1381, 1388, 1395, 1402, 1409,
     1416, 1423, 1430, 1432, 1434, 1441, 1448, 1455, 1462
    } ;

static yyconst flex_int16_t yy_def[670] =
    {   0,
      646,    1,  647,  648,  649,  649,  650,  650,  646,    9,
      646,   11,  646,   13,  651,  651,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  646,  653,  646,  652,  652,  652,  652,  646,  646,
      646,  646,  654,  646,  655,  646,  646,  654,  655,  655,
      655,  656,  646,  646,  656,  656,  657,  646,  646,  658,
      646,  646,  658,  658,  658,  658,  658,  658,  659,  659,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,  660,  658,   80,   80,   80,   80,  658,  661,

      646,  646,  646,  661,  661,  661,  646,  661,  661,  662,
      662,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  646,  663,  661,  111,  111,  111,  111,
      661,  646,  646,  646,  664,  664,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      646,  665,  665,  665,  665,  666,  646,  646,  646,  646,
      646,  646,  646,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      646,  653,  646,  653,  652,  652,  652,  652,  652,  646,
      646,  646,  646,  646,  655,  646,  646,  646,  655,  655,

      655,  656,  656,  646,  656,  656,  656,  657,  646,  646,
      658,  658,  646,  658,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,  660,  660,   80,   80,   80,   80,   80,  658,  667,
      646,  646,  646,  646,  667,  668,  668,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  646,  669,  247,  247,  247,  247,  247,  667,
      646,  646,  646,  646,  664,  664,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  646,  665,  665,  665,  665,  665,  666,

      666,  646,  646,  646,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  655,  656,  656,  656,  646,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,  667,  667,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  669,  247,  247,  247,
      247,  247,  247,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  652,  652,  652,  652,  652,  652,  652,  652,

      652,  652,  652,  652,  652,  652,  652,  652,  646,  646,
      652,  655,  656,  646,  656,  646,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,  658,  658,   80,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  667,  667,  247,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  652,  652,  652,  646,  652,  652,  652,  646,  646,
      652,  652,  652,  652,  646,  652,  652,  646,  652,  655,
       80,   80,   80,  658,   80,   80,   80,  658,  658,   80,

       80,   80,   80,  658,   80,   80,  658,   80,  247,  247,
      247,  667,  247,  247,  247,  667,  667,  247,  247,  247,
      247,  667,  247,  247,  667,  247,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  652,
      646,  646,  646,  646,  646,  652,  646,  652,  646,  652,
      652,  652,  655,   80,  658,  658,  658,  658,  658,   80,
      658,   80,  658,   80,   80,   80,  247,  667,  667,  667,
      667,  667,  247,  667,  247,  667,  247,  247,  247,  665,
      665,  665,  665,  665,  665,  646,  646,  652,  646,  652,
      652,  658,  658,   80,  658,   80,   80,  667,  667,  247,

      667,  247,  247,  665,  665,  665,  646,  646,  646,  646,
      658,  658,  658,  658,  667,  667,  667,  667,  664,  646,
      646,  658,  658,  667,  667,  664,  646,  658,  667,  664,
      646,  658,  667,  664,  646,  658,  667,  664,  646,  658,
      667,  664,  646,  658,  667,    0,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646
    } ;

static yyconst flex_int16_t yy_nxt[1605] =
    {   0,
       18,   19,   20,   21,   19,   22,   18,   23,   24,   25,
       26,   27,   18,   28,   28,   29,   30,   28,   31,   28,
       28,   32,   28,   33,   28,   34,   35,   36,   37,   28,
       38,   39,   28,   40,   28,   41,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   18,   18,   42,   68,   69,
       42,  176,   43,   51,   52,   53,  200,   54,   44,   50,
       56,   57,   58,  177,   59,   63,   64,   63,   64,   68,
       69,   45,  188,  185,  215,   60,  157,  158,  159,  157,
      161,  201,  330,  161,  160,   46,   47,  172,   48,  189,
      215,   49,  215,  157,  158,  159,  157,  223,  227,  169,

       61,  160,  170,  219,  205,   65,  171,   65,  206,   66,
      228,   66,   70,   19,   71,   72,   19,   73,   70,   74,
       75,   76,   77,   78,   70,   79,   79,   80,   81,   79,
       82,   79,   79,   83,   79,   84,   79,   85,   86,   87,
       88,   79,   89,   90,   79,   91,   79,   92,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   70,   70,   42,
      217,  224,   42,  215,   93,  191,  193,  194,  215,  200,
       94,  196,  197,  198,  212,  215,  212,  212,  212,  218,
      212,  212,  212,   95,  212,  212,  212,  215,  212,  212,
      212,  215,  212,  212,  201,  226,  225,   96,   97,  212,

       98,  212,  212,   99,  100,  101,  102,  103,  101,  104,
      100,  105,  106,  107,  108,  109,  100,  110,  110,  111,
      112,  110,  113,  110,  110,  114,  110,  115,  110,  116,
      117,  118,  119,  110,  120,  121,  110,  122,  110,  123,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  100,
      100,  124,  229,  164,  124,  212,  125,  212,  212,  215,
      215,  220,  126,  215,  221,  214,  230,  234,  222,  215,
      233,  246,  233,  233,  215,  127,  231,  212,  254,  212,
      212,  223,  241,  242,  243,  241,  255,  260,  248,  128,
      129,  246,  130,  246,  246,  131,   18,  132,  133,  134,

      132,   22,   18,   23,   24,   25,  135,  136,   18,  137,
      137,  138,  139,  137,  140,  137,  137,  141,  137,  142,
      137,  143,  144,  145,  146,  137,  147,  148,  137,  149,
      137,  150,  137,  137,  137,  137,  137,  137,  137,  137,
      137,   18,   18,  151,  181,  215,  151,  181,   43,  182,
      215,  215,  643,  246,   44,  246,  237,  249,  212,  246,
      212,  212,  243,  244,  243,  243,  250,  152,  256,  235,
      275,  236,  251,  238,  246,  252,  246,  279,  275,  253,
      257,  153,  154,  261,  155,  292,  246,   49,  183,  211,
      212,  258,  212,  212,  211,  211,  211,  211,  211,  211,

      246,  211,  239,  259,  265,  263,  242,  243,  263,  184,
      182,  246,  246,  275,  246,  184,  262,  275,  254,  271,
      272,  273,  271,  278,  275,  246,  428,  286,  215,  275,
      268,  280,  275,  267,  211,  211,  211,  212,  266,  212,
      212,  211,  211,  211,  211,  211,  211,  269,  211,  183,
      281,  275,  275,  275,  275,  275,  216,  275,  293,  282,
      291,  275,  283,  188,  275,  289,  284,  205,  288,  285,
      275,  206,  287,  294,  272,  273,  294,  290,  182,  329,
      189,  211,  211,  240,  240,  298,  215,  240,  240,  240,
      240,  240,  297,  240,  275,  240,  301,  295,  296,  301,

      643,  331,  299,  302,  303,  304,  302,  161,  215,  181,
      161,  285,  181,  212,  182,  212,  212,  183,  191,  193,
      194,  196,  197,  198,  327,  328,  215,  327,  240,  240,
      240,  240,  339,  335,  240,  240,  240,  240,  240,  215,
      240,  212,  240,  212,  212,  212,  332,  212,  212,  215,
      247,  333,  215,  183,  215,  214,  215,  215,  338,  215,
      215,  341,  336,  334,  337,  342,  215,  215,  215,  325,
      215,  343,  340,  215,  215,  240,  240,  233,  215,  233,
      233,  233,  345,  233,  233,  344,  234,  346,  642,  212,
      215,  212,  212,  215,  347,  237,  240,  350,  350,  240,

      241,  242,  243,  241,  243,  242,  243,  243,  240,  350,
      350,  240,  238,  352,  354,  356,  350,  350,  349,  348,
      240,  355,  358,  240,  348,  348,  348,  348,  350,  348,
      357,  348,  350,  350,  350,  363,  350,  350,  350,  350,
      359,  360,  364,  275,  639,  365,  350,  263,  242,  243,
      263,  362,  182,  264,  368,  184,  264,  240,  382,  350,
      240,  184,  366,  350,  348,  348,  348,  240,  275,  370,
      240,  348,  348,  348,  348,  372,  348,  275,  348,  351,
      369,  271,  272,  273,  271,  275,  375,  275,  374,  275,
      376,  183,  373,  275,  275,  275,  377,  275,  379,  275,

      378,  275,  384,  275,  275,  275,  383,  386,  275,  275,
      381,  348,  348,  387,  380,  275,  388,  294,  272,  273,
      294,  275,  182,  385,  350,  275,  275,  390,  295,  301,
      301,  409,  301,  301,  409,  389,  439,  413,  414,  391,
      413,  298,  302,  303,  304,  302,  215,  392,  415,  416,
      215,  415,  327,  328,  215,  327,  417,  418,  299,  419,
      215,  183,  215,  421,  424,  422,  215,  420,  215,  215,
      215,  425,  423,  426,  215,  410,  215,  215,  427,  429,
      431,  215,  325,  215,  215,  433,  215,  430,  433,  240,
      350,  240,  240,  325,  240,  350,  350,  203,  432,  350,

      350,  349,  438,  436,  215,  435,  350,  350,  350,  350,
      441,  444,  442,  437,  350,  350,  350,  443,  445,  350,
      447,  446,  450,  350,  350,  448,  449,  350,  264,  434,
      184,  264,  275,  350,  452,  275,  184,  452,  275,  275,
      275,  275,  368,  459,  451,  372,  350,  457,  455,  275,
      454,  275,  275,  275,  458,  275,  456,  461,  460,  463,
      464,  275,  373,  466,  275,  275,  465,  275,  275,  462,
      409,  275,  409,  409,  275,  409,  469,  491,  453,  275,
      413,  414,  215,  413,  467,  468,  415,  416,  215,  415,
      215,  494,  470,  215,  215,  530,  498,  215,  493,  215,

      471,  495,  496,  497,  215,  499,  215,  501,  215,  502,
      215,  215,  500,  215,  410,  504,  410,  215,  506,  503,
      350,  350,  509,  215,  433,  203,  212,  433,  510,  350,
      212,  203,  212,  212,  512,  350,  350,  350,  350,  516,
      350,  508,  517,  350,  350,  350,  511,  350,  350,  514,
      520,  519,  522,  350,  513,  515,  350,  518,  350,  452,
      350,  240,  452,  523,  240,  275,  521,  275,  434,  275,
      527,  475,  275,  275,  507,  275,  275,  528,  479,  275,
      275,  480,  275,  275,  485,  275,  275,  275,  531,  524,
      534,  526,  529,  535,  275,  532,  533,  537,  275,  554,

      555,  556,  215,  453,  638,  525,  557,  536,  215,  215,
      212,  558,  212,  212,  215,  559,  215,  215,  212,  215,
      212,  212,  212,  215,  212,  212,  561,  560,  538,  215,
      563,  215,  539,  562,  215,  215,  565,  212,  215,  212,
      212,  212,  564,  212,  212,  350,  568,  350,  350,  567,
      566,  569,  350,  240,  570,  350,  240,  571,  350,  572,
      350,  240,  240,  350,  240,  240,  573,  574,  350,  576,
      350,  350,  240,  350,  575,  240,  240,  275,  350,  240,
      275,  275,  541,  542,  580,  275,  275,  543,  544,  577,
      275,  275,  545,  275,  275,  547,  275,  275,  549,  578,

      579,  275,  275,  592,  212,  635,  212,  212,  582,  598,
      350,  215,  581,  212,  593,  212,  212,  212,  583,  212,
      212,  212,  215,  212,  212,  215,  212,  585,  212,  212,
      584,  212,  594,  212,  212,  215,  212,  595,  212,  212,
      215,  240,  350,  240,  240,  215,  240,  240,  596,  240,
      240,  240,  240,  350,  240,  275,  597,  599,  350,  240,
      350,  275,  240,  240,  600,  634,  240,  601,  350,  275,
      275,  586,  602,  275,  631,  587,  603,  604,  275,  609,
      589,  212,  609,  212,  212,  611,  630,  606,  605,  212,
      612,  212,  212,  215,  212,  613,  212,  212,  613,  240,

      215,  240,  240,  627,  240,  615,  350,  240,  616,  617,
      240,  350,  617,  275,  215,  607,  609,  609,  626,  609,
      609,  350,  621,  610,  212,  275,  212,  212,  212,  620,
      212,  212,  613,  240,  212,  613,  240,  619,  212,  614,
      212,  212,  617,  240,  240,  617,  240,  240,  212,  608,
      212,  212,  212,  618,  212,  212,  240,  607,  591,  240,
      610,  610,  622,  240,  590,  212,  240,  212,  212,  240,
      589,  212,  240,  212,  212,  240,  614,  624,  240,  588,
      587,  240,  623,  628,  240,  586,  618,  212,  625,  212,
      212,  629,  212,  553,  212,  212,  240,  552,  212,  240,

      212,  212,  240,  644,  632,  240,  551,  645,  633,  550,
      549,  548,  547,  636,  546,  545,  544,  637,  641,  543,
      542,  541,  540,  505,  640,   50,   50,   50,   50,   50,
       50,   50,   55,   55,   55,   55,   55,   55,   55,   62,
       62,   62,   62,   62,   62,   62,   67,   67,   67,   67,
       67,   67,   67,  156,  156,  156,  156,  156,  156,  156,
      184,  184,  492,  184,  184,  184,  184,  192,  192,  192,
      192,  192,  192,  192,  195,  490,  489,  488,  195,  195,
      195,  202,  202,  487,  486,  202,  202,  202,  208,  208,
      208,  485,  208,  208,  208,  211,  211,  484,  211,  211,

      211,  211,  215,  215,  483,  215,  215,  215,  215,  232,
      232,  482,  232,  232,  232,  232,  240,  240,  481,  480,
      479,  240,  240,  246,  246,  478,  477,  476,  246,  246,
      264,  264,  475,  264,  264,  264,  264,  275,  275,  277,
      277,  300,  300,  474,  473,  472,  300,  300,  348,  348,
      275,  371,  350,  348,  348,  350,  350,  440,  350,  215,
      350,  350,  367,  367,  412,  367,  367,  367,  367,  411,
      408,  407,  406,  405,  404,  403,  402,  401,  400,  399,
      398,  397,  396,  395,  394,  393,  303,  275,  276,  272,
      371,  361,  353,  215,  209,  326,  325,  203,  199,  324,

      196,  191,  185,  323,  322,  321,  190,  320,  319,  318,
      317,  316,  315,  314,  313,  312,  311,  310,  309,  308,
      307,  306,  305,  163,  303,  275,  276,  274,  270,  245,
      213,  210,  209,  207,  204,  203,  199,  196,  191,  190,
      187,  186,  180,  179,  178,  175,  174,  173,  172,  168,
      167,  166,  165,  163,  162,  646,   17,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,

      646,  646,  646,  646
    } ;

static yyconst flex_int16_t yy_chk[1605] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    7,    7,
        2,   38,    2,    3,    3,    3,   61,    3,    2,    4,
        4,    4,    4,   38,    4,    5,    5,    6,    6,    8,
        8,    2,   48,   45,  217,    4,   15,   15,   15,   15,
       19,   61,  217,   19,   15,    2,    2,   45,    2,   48,
       85,    2,   83,   16,   16,   16,   16,   85,   89,   33,

        4,   16,   33,   83,   65,    5,   33,    6,   65,    5,
       89,    6,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,   10,
       81,   86,   10,   81,   10,   53,   53,   53,   86,  201,
       10,   58,   58,   58,   70,   82,   70,   70,   73,   82,
       73,   73,   74,   10,   74,   74,   75,   87,   75,   75,
       76,   88,   76,   76,  201,   88,   87,   10,   10,   77,

       10,   77,   77,   10,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   12,   90,  652,   12,   78,   12,   78,   78,   90,
       92,   84,   12,   84,   84,   78,   91,   95,   84,   91,
       93,  116,   93,   93,   95,   12,   92,   94,  116,   94,
       94,   95,  101,  101,  101,  101,  117,  121,  112,   12,
       12,  112,   12,  117,  121,   12,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   14,   42,   96,   14,   42,   14,   42,
       97,   98,  642,  113,   14,  114,   98,  113,   99,  118,
       99,   99,  103,  103,  103,  103,  114,   14,  118,   96,
      139,   97,  115,   98,  115,  115,  119,  139,  149,  115,
      119,   14,   14,  122,   14,  149,  122,   14,   42,   79,
       79,  120,   79,   79,   79,   79,   79,   79,   79,   79,

      123,   79,   99,  120,  127,  124,  124,  124,  124,  125,
      124,  127,  129,  138,  128,  125,  123,  140,  127,  132,
      132,  132,  132,  138,  144,  130,  340,  144,  340,  141,
      130,  140,  150,  129,   79,   79,   80,   80,  128,   80,
       80,   80,   80,   80,   80,   80,   80,  130,   80,  124,
      141,  142,  143,  145,  146,  147,   80,  148,  150,  142,
      148,  154,  142,  189,  153,  147,  142,  205,  146,  143,
      155,  205,  145,  151,  151,  151,  151,  147,  151,  216,
      189,   80,   80,  110,  110,  155,  216,  110,  110,  110,
      110,  110,  154,  110,  152,  110,  156,  152,  153,  156,

      639,  218,  155,  157,  157,  157,  157,  161,  218,  181,
      161,  152,  181,  211,  181,  211,  211,  151,  194,  194,
      194,  198,  198,  198,  207,  207,  222,  207,  110,  110,
      111,  111,  226,  222,  111,  111,  111,  111,  111,  226,
      111,  212,  111,  212,  212,  214,  219,  214,  214,  219,
      111,  220,  221,  181,  220,  214,  223,  225,  225,  224,
      227,  228,  223,  221,  224,  229,  229,  228,  231,  207,
      230,  230,  227,  235,  234,  111,  111,  232,  236,  232,
      232,  233,  234,  233,  233,  231,  237,  235,  638,  239,
      238,  239,  239,  237,  236,  238,  240,  252,  248,  240,

      241,  241,  241,  241,  243,  243,  243,  243,  245,  254,
      250,  245,  238,  248,  250,  252,  253,  251,  245,  246,
      246,  251,  254,  246,  246,  246,  246,  246,  255,  246,
      253,  246,  258,  256,  259,  259,  260,  261,  262,  265,
      255,  256,  260,  286,  635,  261,  267,  263,  263,  263,
      263,  258,  263,  264,  265,  264,  264,  270,  286,  266,
      270,  264,  262,  269,  246,  246,  247,  247,  279,  267,
      247,  247,  247,  247,  247,  269,  247,  283,  247,  247,
      266,  271,  271,  271,  271,  278,  279,  280,  278,  281,
      280,  263,  269,  282,  285,  287,  281,  284,  283,  288,

      282,  289,  288,  290,  291,  292,  287,  290,  293,  295,
      285,  247,  247,  291,  284,  296,  292,  294,  294,  294,
      294,  297,  294,  289,  354,  298,  299,  295,  298,  300,
      301,  322,  300,  301,  322,  293,  354,  325,  325,  296,
      325,  299,  302,  302,  302,  302,  330,  297,  326,  326,
      329,  326,  327,  327,  336,  327,  329,  330,  299,  331,
      331,  294,  332,  333,  336,  334,  335,  332,  334,  341,
      333,  337,  335,  338,  337,  322,  338,  342,  339,  341,
      343,  343,  325,  339,  344,  346,  347,  342,  346,  348,
      351,  349,  348,  326,  349,  352,  353,  327,  344,  357,

      358,  349,  353,  351,  346,  347,  356,  359,  363,  364,
      356,  359,  357,  352,  360,  362,  365,  358,  360,  361,
      362,  361,  365,  366,  370,  363,  364,  371,  367,  346,
      367,  367,  374,  373,  369,  375,  367,  369,  376,  377,
      378,  380,  371,  378,  366,  373,  369,  376,  374,  381,
      370,  379,  382,  383,  377,  385,  375,  380,  379,  382,
      383,  384,  373,  385,  386,  387,  384,  388,  389,  381,
      391,  392,  409,  391,  459,  409,  388,  417,  369,  391,
      413,  413,  417,  413,  386,  387,  415,  415,  419,  415,
      421,  420,  389,  423,  432,  459,  424,  422,  419,  420,

      392,  421,  422,  423,  424,  425,  426,  427,  429,  428,
      427,  428,  426,  425,  391,  430,  409,  435,  432,  429,
      436,  437,  436,  430,  433,  413,  433,  433,  437,  438,
      434,  415,  434,  434,  439,  439,  440,  441,  442,  443,
      443,  435,  444,  444,  445,  447,  438,  446,  448,  441,
      447,  446,  449,  449,  440,  442,  450,  445,  451,  452,
      454,  453,  452,  450,  453,  455,  448,  456,  433,  458,
      455,  458,  457,  460,  434,  461,  462,  456,  462,  463,
      464,  463,  468,  465,  468,  466,  467,  469,  460,  451,
      465,  454,  457,  466,  470,  461,  464,  469,  471,  491,

      492,  493,  491,  452,  634,  453,  495,  467,  492,  493,
      494,  496,  494,  494,  495,  497,  500,  506,  498,  496,
      498,  498,  499,  497,  499,  499,  501,  500,  470,  502,
      503,  505,  471,  502,  501,  508,  506,  504,  503,  504,
      504,  507,  505,  507,  507,  509,  510,  510,  518,  509,
      508,  511,  511,  512,  513,  513,  512,  514,  514,  515,
      515,  516,  517,  520,  516,  517,  518,  519,  519,  521,
      521,  523,  522,  524,  520,  522,  525,  527,  526,  525,
      528,  529,  528,  529,  527,  530,  531,  530,  531,  523,
      532,  533,  532,  534,  535,  534,  536,  537,  536,  524,

      526,  538,  539,  554,  555,  631,  555,  555,  535,  567,
      567,  554,  533,  556,  560,  556,  556,  557,  537,  557,
      557,  558,  560,  558,  558,  565,  559,  539,  559,  559,
      538,  561,  562,  561,  561,  562,  563,  564,  563,  563,
      566,  568,  578,  569,  568,  564,  569,  570,  565,  571,
      570,  572,  571,  579,  572,  584,  566,  573,  573,  574,
      575,  585,  574,  576,  575,  630,  576,  577,  577,  580,
      582,  580,  578,  581,  627,  581,  579,  582,  583,  591,
      583,  592,  591,  592,  592,  594,  626,  585,  584,  593,
      596,  593,  593,  594,  595,  597,  595,  595,  597,  598,

      596,  599,  598,  620,  599,  600,  600,  601,  602,  603,
      601,  602,  603,  604,  597,  604,  606,  609,  619,  606,
      609,  603,  610,  591,  611,  606,  611,  611,  612,  608,
      612,  612,  613,  615,  613,  613,  615,  605,  614,  597,
      614,  614,  617,  616,  618,  617,  616,  618,  622,  590,
      622,  622,  623,  603,  623,  623,  624,  588,  552,  624,
      606,  609,  612,  625,  551,  628,  625,  628,  628,  629,
      550,  632,  629,  632,  632,  633,  613,  616,  633,  548,
      546,  637,  614,  622,  637,  540,  617,  636,  618,  636,
      636,  624,  640,  490,  640,  640,  641,  489,  644,  641,

      644,  644,  645,  640,  628,  645,  487,  641,  629,  486,
      484,  483,  482,  632,  481,  478,  477,  633,  637,  476,
      474,  473,  472,  431,  636,  647,  647,  647,  647,  647,
      647,  647,  648,  648,  648,  648,  648,  648,  648,  649,
      649,  649,  649,  649,  649,  649,  650,  650,  650,  650,
      650,  650,  650,  651,  651,  651,  651,  651,  651,  651,
      653,  653,  418,  653,  653,  653,  653,  654,  654,  654,
      654,  654,  654,  654,  655,  412,  411,  410,  655,  655,
      655,  656,  656,  408,  407,  656,  656,  656,  657,  657,
      657,  406,  657,  657,  657,  658,  658,  405,  658,  658,

      658,  658,  659,  659,  404,  659,  659,  659,  659,  660,
      660,  403,  660,  660,  660,  660,  661,  661,  402,  401,
      400,  661,  661,  662,  662,  399,  398,  397,  662,  662,
      663,  663,  396,  663,  663,  663,  663,  664,  664,  665,
      665,  666,  666,  395,  394,  393,  666,  666,  667,  667,
      390,  372,  368,  667,  667,  668,  668,  355,  350,  345,
      668,  668,  669,  669,  324,  669,  669,  669,  669,  323,
      320,  319,  318,  317,  316,  315,  314,  313,  312,  311,
      310,  309,  308,  307,  306,  305,  304,  277,  276,  273,
      268,  257,  249,  215,  208,  206,  203,  202,  200,  199,

      197,  193,  188,  187,  186,  185,  183,  180,  179,  178,
      177,  176,  175,  174,  173,  172,  171,  170,  169,  168,
      167,  166,  165,  163,  159,  137,  136,  134,  131,  109,
       72,   69,   67,   66,   64,   62,   60,   57,   52,   49,
       47,   46,   41,   40,   39,   37,   36,   35,   34,   32,
       31,   30,   29,   27,   21,   17,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,

      646,  646,  646,  646
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[60] =
    {   0,
0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 
    1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
        };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#line 2 "levcomp.lpp"

// levcomp.lpp:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
// 
// Based loosely on NetHack's lev_comp.l

#include "AppHdr.h"
#include "mapdef.h"
#include "levcomp.tab.h"
#include <cstring>
#include <queue>

static bool alloced = false;

std::queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(100);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

static void settext(bool trim_right = false, int strip_trailing = 0)
{
    clean();
    char *newstring = NULL;
    if ((yylval.text = newstring = strdup(yytext)))
    {
        alloced = true;

        char *s = NULL;
        if (trim_right)
        {
            s = newstring + strlen(newstring) - 1;
            while (isspace(*s) && s >= newstring)
                *s-- = 0;
        }
        if (strip_trailing)
        {
            if (!s)
                s = newstring + strlen(newstring) - 1;
            while (s >= newstring && --strip_trailing >= 0)
                *s-- = 0;
        }
    }
}








#line 1118 "levcomp.lex.cc"

#define INITIAL 0
#define MAPDEF 1
#define LUA 2
#define LUA_ONELINER 3
#define ARGUMENT 4
#define MNAME 5
#define KEYWORDS 6
#define ITEM_LIST 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 82 "levcomp.lpp"


#line 1284 "levcomp.lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 647 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 646 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 84 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 86 "levcomp.lpp"
{
                        settext();
                        return MAP_LINE;
                    }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 91 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 92 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 93 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 95 "levcomp.lpp"
;
	YY_BREAK
case 7:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 97 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 8:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 98 "levcomp.lpp"
{
                            settext(true, 2);
                            BEGIN(INITIAL);
                            return LUA_LINE;
                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 103 "levcomp.lpp"
{
                            settext();
                            return LUA_LINE;
                        }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 107 "levcomp.lpp"
;
	YY_BREAK
case 11:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 109 "levcomp.lpp"
{
                            settext();
                            return LUA_LINE;
                        }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 113 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 115 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 120 "levcomp.lpp"
;
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 121 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 123 "levcomp.lpp"
{ 
                        settext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 128 "levcomp.lpp"
{
                        settext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 133 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 134 "levcomp.lpp"
;
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 135 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 137 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 139 "levcomp.lpp"
{ 
                        settext();
                        return MONSTER_NAME; 
                    }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 144 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 145 "levcomp.lpp"
;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 147 "levcomp.lpp"
{ 
                        BEGIN(INITIAL);
                        settext();
                        return STRING; 
                    }
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 153 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 155 "levcomp.lpp"
;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 157 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 159 "levcomp.lpp"
{ BEGIN(LUA_ONELINER); return MAIN; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 161 "levcomp.lpp"
{ BEGIN(LUA); return PRELUDE; }      
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 162 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 163 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 164 "levcomp.lpp"
{ BEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 165 "levcomp.lpp"
{ BEGIN(ARGUMENT); return DEFAULT_DEPTH; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 166 "levcomp.lpp"
{ BEGIN(ARGUMENT); return DEPTH; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 167 "levcomp.lpp"
{ BEGIN(ARGUMENT); return ORIENT; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 168 "levcomp.lpp"
{ BEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 169 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 170 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 171 "levcomp.lpp"
{ BEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 172 "levcomp.lpp"
{ BEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 173 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return SUBST; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 174 "levcomp.lpp"
{ BEGIN(MNAME); return MONS; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 175 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 176 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return SHUFFLE; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 178 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KFEAT; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 179 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KITEM; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 180 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KMONS; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 182 "levcomp.lpp"
return DASH;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 183 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 185 "levcomp.lpp"
{
                        clean();
                        yylval.i = atoi(yytext);
                        return INTEGER;
                    }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 191 "levcomp.lpp"
;
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 192 "levcomp.lpp"
;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 194 "levcomp.lpp"
return OPAREN;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 195 "levcomp.lpp"
return CPAREN;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 197 "levcomp.lpp"
return QUOTE;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 199 "levcomp.lpp"
{
                        settext();
                        return IDENTIFIER;
                    }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 204 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 206 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 1723 "levcomp.lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MAPDEF):
case YY_STATE_EOF(LUA):
case YY_STATE_EOF(LUA_ONELINER):
case YY_STATE_EOF(ARGUMENT):
case YY_STATE_EOF(MNAME):
case YY_STATE_EOF(KEYWORDS):
case YY_STATE_EOF(ITEM_LIST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 647 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 647 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 646);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 206 "levcomp.lpp"



int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}

