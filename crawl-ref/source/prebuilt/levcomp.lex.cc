#line 2 "levcomp.lex.cc"

#line 4 "levcomp.lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 73
#define YY_END_OF_BUFFER 74
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1460] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   74,   72,   66,   67,   72,   70,   68,   69,
       64,   63,   65,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   66,   20,   72,   72,   73,
        6,   73,   73,    4,    3,   73,   73,    2,    2,    2,
       72,   19,   72,   70,   68,   69,   64,   63,   65,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   20,   72,   72,   72,   17,   14,   17,   70,   68,

       69,   16,   63,   65,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   17,   20,   72,   72,
        8,    9,   72,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    8,    7,    7,
       72,   12,   13,   72,   70,   68,   69,   11,   63,   65,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   12,   20,   72,   72,   66,   67,   65,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   66,   20,   20,   71,
       71,   71,    6,    5,    0,    0,    3,    0,    0,    2,
        2,    2,    2,   18,    0,   19,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   20,   18,   18,   18,    0,
       17,   14,   17,   14,   65,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   17,   20,   71,   71,   71,    8,    9,    0,
        9,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        8,    7,    7,    7,    0,   12,   13,    0,   13,   65,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   12,   20,   71,
       71,   71,   71,   71,   71,   71,   71,   42,   71,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   21,    2,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   56,   71,   71,   71,

       71,   71,   71,   71,   71,   57,    2,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   71,   71,   71,   71,   36,   71,   71,
       71,   71,   71,   32,   41,   31,   71,   22,   71,   71,
       71,   71,   71,   71,   71,   71,   29,   71,   71,   62,
       71,   71,   71,   54,   71,   55,    2,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,

       10,   10,   10,   10,   71,   71,   71,   24,   71,   71,
       71,   28,   71,   71,   71,   26,   71,   71,   71,   71,
       71,   30,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,    1,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   37,   71,   27,   35,   71,   71,   71,   71,   71,
       25,   71,   43,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   71,   71,   71,   71,   71,   47,   71,   71,
       71,   33,    0,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,

       18,   18,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   71,   71,   71,   46,   71,   71,   71,   71,    0,
       53,   71,   52,   71,   58,   59,   71,   60,   61,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       34,   71,   45,   71,   71,   71,   71,    0,   50,   51,
       49,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,    7,    7,    7,    7,    7,    7,    7,
        7,    7,   10,   10,   10,   10,   10,   10,   10,   10,

       10,   10,   10,   48,   71,   44,   71,   38,    0,   18,
       18,   18,   18,   18,   18,   15,   15,   15,   15,   15,
       15,    7,    7,    7,    7,   10,   10,   10,   10,   10,
       10,   71,   40,    0,   18,   18,   18,   15,   15,   15,
        7,    7,   10,   10,   10,   39,    0,   18,   18,   15,
       15,    7,   10,   10,   23,   18,   15,   10,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    8,    8,    8,    1,    9,
       10,    8,    8,   11,   12,    8,    1,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,    1,    8,
        8,    8,    8,    8,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       24,   31,   32,   33,   34,   35,   24,   36,   37,   24,
        8,    1,    8,    8,   38,    1,   39,   24,   40,   41,

       42,   43,   24,   44,   45,   24,   24,   46,   47,   48,
       49,   50,   24,   51,   52,   53,   54,   55,   56,   24,
       24,   24,    8,    8,    8,    8,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[57] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    4,    4,    4,
        3,    5,    6,    1,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6
    } ;

static yyconst flex_int16_t yy_base[1483] =
    {   0,
        0,   55,   60,  107,  159,   64,  215,   68,  271,   72,
      327,   76, 3090, 3091,   56, 3091, 3086, 3091, 3091, 3091,
     3091, 3091, 3075,    0, 3056, 3064, 3066,   40, 3058, 3050,
     3063, 3052, 3065, 3048,   58, 3049,   58, 3062, 3034,   48,
     3029, 3025, 3034, 3023, 3029,   95,    0,   57,   78, 3091,
     3091, 3067,   85, 3091, 3091, 3066,  128,    0, 3040,   82,
      133, 3091, 3064,  137,  141,  145,  149,  153,  382,  395,
      409,   84,   98,  357,  363,   92,  117,  361,  125, 3035,
      398,  397,  400,  412,  399,  405,   73,  401,  113,  406,
      404,  443,  423,  429,    0,  459, 3091,  463,    0,    0,

        0, 3091,    0, 3052,  481,  495,  420,  438,  443,  444,
      461,  453,  477,  483, 3033,  484,  487,  490,  498,  486,
      491,  427,  428,  492,  489,  494,  530,  387,  512,  513,
      543, 3091, 3060,    0, 3049, 3049,  468,  427,  530,  538,
      541,  539,  540,  542,  543,  544,  551,  552,  548,  561,
      545,  549,  556,  557,  568,  567,  571,  587,  581,  572,
        0,  615, 3091, 3057,    0,    0,    0, 3091,    0, 3046,
      624,  638,  454,  581,  567,  578,  604,  592,  620,  570,
     3027,  627,  626,  634,  644,  629,  633,  596,  630,  583,
      635,  632,  683,  604,  662,  649,  665, 3091, 3044,    0,

     3041, 3040,  662,  671, 3031,  668, 3034, 3017, 3023, 3023,
     3026, 3033, 3024, 3031,  678, 3011, 3028, 3022, 2999, 2989,
     3000, 2990,  590, 2990, 2983, 2984,  698,    0,    0, 3005,
     3019,  669, 3091, 3091, 3030,  705, 3091, 3029,  708,    0,
     3013, 3002,  654,  712,  718, 3091,  722, 2998,  684,  687,
      699,  707,  705,  717,  714,   63,  706,  381,  716,  726,
      719,  728,  727,  718,  735,  732,  724,  723,  729,  730,
      733,  734,  731,  737,  768,  772,  750,  763,  756,  786,
      793, 3091,  797, 3091,  801,  814,  828, 3013,  824,  792,
      789,  798,  771,  796,  777,  826,  794, 3012,  832, 3011,

      831,  817,  834,  837,  830,  842,  778,  844,  846,  847,
      848,  849,  863,  867,  859, 3010,  860,  877, 3091, 3021,
     3091,    0, 3010, 3010,  871,  873,  878,  887,  880,  892,
      894,  865,  897,  864,  899,  902,  903,  904,  906,  912,
      915,  916,  917,  884,  918,  920,  921,  922,  926,  927,
      938,  932,  935,  936,  947,  951, 3091, 3018, 3091,  962,
      988, 1002, 3005,  946,  950,  958,  942,  967,  970,  959,
      986,  969, 3004,  976, 3003, 1003,  991, 1006, 1008, 1000,
     1004, 1009, 1011, 1012, 1013, 1015, 1016, 1031, 1035, 1027,
     3002, 1026, 2988, 2987, 2999, 2980, 2995, 2984, 2979, 2976,

     2987, 2978, 2979, 2986, 2972, 2984, 2983, 2984, 2972, 2965,
     2973, 2964, 2976, 2963, 2962, 2954, 2939, 2942, 2951, 1000,
     2936, 2947, 2934, 2933,    0, 2958, 1017, 1031, 1039, 1033,
     1041, 1040, 2953, 1042, 1053, 1048, 1049, 1062, 1051, 1066,
     1067, 1070, 1060, 1058, 1065, 1069, 1074, 1072, 1075, 1077,
     1064, 1016, 1079, 1068, 1078, 1080, 1082, 1083, 2952, 1120,
     1124, 2967, 1100, 1105, 2966, 1109, 1115, 1112, 1119, 1123,
     1125, 1126, 1130, 1128, 1129, 1133, 1134, 1143, 1136, 1139,
     1144, 1147, 1148, 1150, 1151, 1152, 1155, 1156, 1157, 1159,
     1160,  936, 1162, 1163, 1182, 2965, 1164, 2964, 1170, 1164,

     1176, 1183, 1169, 1189, 1197, 1187, 1178, 1200, 1188, 1207,
     1208, 1211, 1213, 1214, 1218, 1216, 1195, 1224, 1219, 1225,
     1226, 1227, 1228, 1229, 1230, 1234, 1236, 1235, 1242, 1239,
     1241, 2966, 1255, 1259, 2962, 1235, 1240, 2961, 1241, 1254,
     1250, 1247, 1251, 1255, 1260, 1266, 1271, 1270, 1280, 1281,
     1286, 1282, 1283, 1289, 1290, 1291, 1292, 1293, 1294, 1297,
     1298, 1300, 1301, 1304, 1303, 1305, 1306, 1324, 2960, 1307,
     2959, 1315, 2956, 2955, 2937, 2948, 2955, 2939, 2930, 2928,
     2933, 2933, 2949, 2936, 1313, 2947, 2932, 2940, 2935, 2931,
     2918, 2917, 2934, 2920, 2938, 2897,    0, 2903, 2896, 2901,

     2898, 2899, 2901, 2902, 2899,    0, 2927, 1317, 1323, 1307,
     1329, 1318, 1324, 1331, 1305, 1332, 2910, 1347, 1339, 1352,
     1355, 1343, 1353, 1350, 1349, 1351, 1356, 1357, 1359, 1362,
     1348, 2909, 1360, 1364, 1365, 1366, 1367, 1369, 1368, 1372,
     2908, 1389, 1394, 1386, 1403, 1407, 1390, 1393, 1408, 1409,
     1411, 1413, 1414, 1417, 1419, 1420, 1424, 1421, 1423, 1422,
     1430, 1432, 1436, 1439, 1440, 2923, 1441, 1442, 1443, 1444,
     1449, 1447, 1450, 1455, 2922, 1449, 1455, 1451, 1459, 1461,
     1468, 1464, 1462, 1466, 1471, 1465, 1477, 1472, 1492, 1495,
     1496, 1497, 1498, 1475, 1499, 1502, 1500, 1504, 1505, 2924,

     1507, 1509, 1513, 1514, 1517, 1522, 1515, 1523, 2923, 1513,
     1521, 1516, 1517, 1526, 1527, 1528, 1530, 1529, 1538, 1532,
     1555, 1557, 1534, 1558, 1536, 1559, 1561, 1537, 1562, 1563,
     1564, 1570, 1565, 2919, 1573, 1543, 1574, 1576, 1577, 1578,
     1584, 1579, 2918, 2910, 2912, 2904, 2915, 3091, 2900, 2889,
     2899, 2911, 2886, 3091,    0, 3091, 2904, 3091, 2889, 2907,
     2885, 2886, 2901, 2899, 2890, 2901, 3091, 2868, 2863,    0,
     2867, 2858, 2865, 1553, 2862, 1556, 2878, 1579, 1583, 1577,
     1597, 1602, 1585, 1596, 1602, 1601, 1599, 1634, 2876, 1638,
     1586, 1642, 1617, 1604, 1610, 1618, 1635, 1636, 1627, 1641,

     1655, 1625, 1630, 2875, 1631, 1632, 1633, 1637, 1634, 1642,
     1655, 1667, 1668, 1660, 1685, 1673, 1654, 1676, 1681, 1674,
     1695, 2890, 1697, 1689, 1704, 1690, 1696, 1692, 1698, 1699,
     1700, 1702, 1705, 1719, 1707, 1710, 2889, 1711, 1714, 1717,
     1715, 1718, 1719, 1723, 1724, 1725, 1726, 1727, 1730, 1732,
     1734, 1735, 2891, 1751, 1746, 1738, 1729, 1754, 1737, 1760,
     1757, 1762, 1765, 1768, 2890, 1769, 1770, 1772, 1773, 1774,
     1777, 1773, 1775, 1776, 1778, 1794, 1782, 1786, 1785, 1789,
     1790, 1804, 2886, 1811, 1807, 1825, 1792, 1817, 1805, 1819,
     1820, 1821, 1823, 1827, 1841, 1829, 1830, 2885, 1832, 1833,

     1836, 1840, 1838, 1841, 1836, 2885, 2865, 3091, 2865, 2869,
     2863, 3091, 2877, 2862, 2878, 3091, 2876, 2876, 2860, 2869,
     2868, 3091, 2833, 2846, 2833, 2844, 2831, 2842, 2838, 2830,
     2839, 2835,    0, 1843, 1845, 1827, 1860, 1835, 1841, 1838,
     1885, 1861, 2845, 1857, 1889, 1848, 1870, 1869, 1876, 1880,
     1900, 1872, 1875, 1877, 1878, 1879, 1881, 1882, 1884, 1887,
     1885, 1917, 1907, 1904, 1934, 1908, 1914, 1919, 1940, 1929,
     1923, 1933, 1947, 2860, 1941, 1928, 1943, 1944, 1948, 1945,
     1946, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1957, 1959,
     1962, 1963, 1969, 1966, 1972, 1970, 1974, 1976, 1968, 1994,

     1980, 1995, 1998, 1967, 1985, 1999, 2000, 2001, 2003, 2004,
     2006, 2009, 2007, 2008, 2013, 2010, 2027, 2015, 2018, 2019,
     2033, 2039, 2022, 2026, 2055, 2859, 2044, 2046, 2047, 2048,
     2063, 2016, 2049, 2021, 2055, 2029, 2056, 2058, 2059, 2062,
     2061, 3091, 2854, 3091,    0, 2839, 2839, 2849, 2840, 2836,
     3091, 2833, 3091, 2840, 2835, 2850, 2851, 2810, 2810, 2807,
     2808, 2806, 2805, 2808, 2803, 2802, 2077, 2059, 2081, 2822,
     2056, 2060, 1777, 2067, 2073, 2105, 2068, 2109, 2086, 2085,
     2092, 2106, 2088, 2090, 2089, 2093, 2091, 2094, 2097, 2095,
     2096, 2127, 2078, 2128, 2837, 2116, 2119, 2135, 2123, 2121,

     2152, 2124, 2157, 2140, 2145, 2149, 2153, 2120, 2146, 2152,
     2155, 2156, 2158, 2154, 2159, 2161, 2165, 2839, 2166, 2168,
     2167, 2169, 2171, 2170, 2175, 2177, 2178, 2838, 2173, 2179,
     2174, 2181, 2182, 2183, 2197, 2184, 2200, 2212, 2200, 2216,
     2834, 2205, 2201, 2207, 2208, 2209, 2224, 2216, 2237, 2225,
     2228, 2232, 2241, 2229, 2233, 2234, 2239, 2240, 2242, 2245,
     2244, 2246, 2828, 2828, 2825, 2831, 2818,    0, 2817, 2813,
     2808, 3091, 2799, 2787, 2789, 2795, 2787, 2782, 2781, 2788,
     2779, 2778, 2242, 2244, 2243, 2251, 2240, 2799, 2241, 2239,
     2245, 2275, 2281, 2257, 2258, 2260, 2264, 2266, 2268, 2269,

     2270, 2272, 2290, 2289, 2291, 2301, 2302, 2814, 2303, 2305,
     2309, 2325, 2330, 2296, 2311, 2316, 2318, 2321, 2322, 2323,
     2324, 2325, 2329, 2331, 2332, 2333, 2339, 2816, 2340, 2334,
     2343, 2786, 2342, 2344, 2345, 2347, 2349, 2350, 2352, 2357,
     2358, 2364, 2366, 2365, 2358, 2373, 2811, 2374, 2375, 2368,
     2390, 2403, 2367, 2376, 2391, 2383, 2392, 2394, 2397, 2398,
     2399, 2811, 2793, 2809, 3091, 2793, 2788, 2786, 2797, 2776,
        0, 2766,    0, 2765,    0,    0, 2775,    0,    0, 2403,
     2783, 2404, 2418, 2395, 2396, 2397, 2399, 2434, 2782, 2406,
     2781, 2409, 2780, 2779, 2410, 2778, 2777, 2401, 2428, 2434,

     2451, 2439, 2431, 2440, 2443, 2461, 2788, 2446, 2783, 2447,
     2782, 2777, 2452, 2776, 2770, 2457, 2458, 2461, 2465, 2460,
     2466, 2468, 2738, 2767, 2467, 2762, 2469, 2761, 2755, 2470,
     2750, 2749, 2469, 2470, 2472, 2486, 2480, 2481, 2487, 2484,
     2502, 2741, 2490, 2740, 2496, 2730, 2725, 2493, 2724, 2719,
     3091, 2701, 3091, 2693, 2707, 2684, 2686, 2635,    0,    0,
        0, 2511, 2491, 2522, 2494, 2498, 2653, 2503, 2533, 2652,
     2651, 2650, 2534, 2516, 2538, 2515, 2531, 2527, 2536, 2550,
     2653, 2652, 2644, 2541, 2520, 2545, 2544, 2548, 2603, 2637,
     2630, 2625, 2559, 2548, 2563, 2551, 2555, 2556, 2562, 2576,

     2615, 2609, 2605,    0, 2551, 3091, 2560, 3091, 2466, 2238,
     2053, 2584, 2553, 2588, 2592, 1858, 2564, 2596, 2588, 2602,
     2603, 1619, 2560, 2597, 1429, 1316, 2584, 2608, 2602, 2616,
     2617, 1175, 3091, 1008, 2592, 2623, 2627, 2619, 2633, 2634,
     2600,  634, 2626, 2641, 2642, 3091,  591, 2646, 2650, 2655,
     2660,  108, 2656, 2661, 3091, 2675, 2667, 2671, 3091, 2686,
     2692,   53, 2698, 2704, 2707, 2713, 2719, 2725, 2731, 2737,
     2743, 2745, 2747, 2753, 2759, 2765, 2771, 2777, 2783, 2789,
     2795, 2801
    } ;

static yyconst flex_int16_t yy_def[1483] =
    {   0,
     1459,    1, 1460, 1461, 1459,    5, 1459,    7, 1459,    9,
     1459,   11, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459,
     1459, 1459, 1459, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1462, 1462, 1462, 1462, 1462, 1459, 1463, 1462, 1462, 1459,
     1459, 1459, 1464, 1459, 1459, 1459, 1464, 1465, 1465, 1465,
     1466, 1459, 1459, 1466, 1466, 1466, 1466, 1466, 1466, 1467,
     1467,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71, 1468,   71,   71, 1469, 1459, 1459, 1459, 1469, 1469,

     1469, 1459, 1469, 1469, 1470, 1470,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106, 1459, 1471,  106,  106,
     1459, 1459, 1459, 1472, 1472, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1459, 1473, 1473,
     1474, 1459, 1459, 1459, 1474, 1474, 1474, 1459, 1474, 1474,
     1475, 1475,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172, 1459, 1476,  172,  172, 1459, 1459, 1459, 1462,

     1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1462, 1462, 1462, 1462, 1462, 1462, 1459, 1463, 1463, 1462,
     1462, 1462, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1465,
     1465, 1465, 1465, 1466, 1466, 1459, 1466,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71, 1468, 1468,   71,   71,   71, 1477,
     1459, 1459, 1459, 1459, 1477, 1478, 1478,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,

      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287, 1459, 1479,  287,  287,  287, 1459, 1459, 1459,
     1459, 1472, 1472, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1459, 1473, 1473, 1473, 1480, 1459, 1459, 1459, 1459, 1480,
     1481, 1481,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362, 1459, 1482,  362,
      362,  362, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,

     1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1462, 1462, 1462, 1462, 1462, 1465,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71, 1477,
     1477,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287, 1479,  287,  287,  287,  287, 1473,

     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1480, 1480,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362, 1482,  362,  362,
      362,  362, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,

     1462, 1462, 1462, 1462, 1462, 1462, 1465,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,

     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362, 1462, 1462, 1462, 1462, 1459, 1462, 1462,
     1462, 1462, 1462, 1459, 1462, 1459, 1462, 1459, 1462, 1462,
     1462, 1462, 1462, 1462, 1462, 1462, 1459, 1462, 1462, 1462,
     1462, 1462, 1462, 1462, 1462, 1462, 1465,   71,   71,   71,
       71, 1466,   71,   71,   71,   71,   71, 1466,   71, 1466,
       71, 1466,   71,   71,   71,   71,   71,   71,   71,   71,

     1466,   71,   71,   71,   71,   71,   71,   71,   71,   71,
      287,  287,  287,  287, 1477,  287,  287,  287,  287,  287,
     1477,  287, 1477,  287, 1477,  287,  287,  287,  287,  287,
      287,  287,  287, 1477,  287,  287,  287,  287,  287,  287,
      287,  287,  287, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473,  362,  362,  362,  362, 1480,  362,  362,  362,  362,
      362, 1480,  362, 1480,  362, 1480,  362,  362,  362,  362,
      362,  362,  362,  362, 1480,  362,  362,  362,  362,  362,

      362,  362,  362,  362, 1462, 1462, 1462, 1459, 1462, 1462,
     1462, 1459, 1462, 1462, 1462, 1459, 1462, 1462, 1462, 1462,
     1462, 1459, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1462, 1462, 1465,   71,   71,   71, 1466,   71,   71,   71,
     1466,   71,   71,   71, 1466,   71,   71,   71,   71,   71,
     1466,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,  287,  287,  287, 1477,  287,  287,  287, 1477,  287,
      287,  287, 1477,  287,  287,  287,  287,  287, 1477,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,

     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473,  362,  362,  362, 1480,  362,  362,  362,
     1480,  362,  362,  362, 1480,  362,  362,  362,  362,  362,
     1480,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362, 1459, 1462, 1459, 1462, 1462, 1462, 1462, 1462, 1462,
     1459, 1462, 1459, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1462, 1462, 1462, 1462, 1462, 1462, 1466,   71, 1466,   71,
       71,   71,   71,   71,   71, 1466,   71, 1466,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71, 1477,  287, 1477,  287,  287,  287,  287,  287,  287,

     1477,  287, 1477,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1480,  362, 1480,
      362,  362,  362,  362,  362,  362, 1480,  362, 1480,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1462, 1459, 1459, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1462, 1462,   71,   71,   71,   71,   71,   71,   71,   71,
       71, 1466, 1466,   71,   71,   71,   71,   71,   71,   71,

       71,   71,  287,  287,  287,  287,  287,  287,  287,  287,
      287, 1477, 1477,  287,  287,  287,  287,  287,  287,  287,
      287,  287, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1472, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473,  362,  362,  362,  362,  362,  362,  362,  362,  362,
     1480, 1480,  362,  362,  362,  362,  362,  362,  362,  362,
      362, 1462, 1462, 1462, 1459, 1462, 1462, 1462, 1462, 1459,
     1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,   71,
       71,   71, 1466,   71,   71,   71,   71, 1466,   71,   71,
       71,   71,   71,   71,   71,   71,   71,  287,  287,  287,

     1477,  287,  287,  287,  287, 1477,  287,  287,  287,  287,
      287,  287,  287,  287,  287, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1472, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473,  362,  362,  362, 1480,  362,  362,  362,  362,
     1480,  362,  362,  362,  362,  362,  362,  362,  362,  362,
     1459, 1462, 1459, 1462, 1462, 1462, 1462, 1459, 1462, 1462,
     1462, 1466,   71, 1466,   71,   71,   71,   71, 1466,   71,
       71,   71, 1477,  287, 1477,  287,  287,  287,  287, 1477,
      287,  287,  287, 1473, 1473, 1473, 1473, 1473, 1472, 1473,
     1473, 1473, 1480,  362, 1480,  362,  362,  362,  362, 1480,

      362,  362,  362, 1462, 1462, 1459, 1462, 1459, 1459,   71,
       71, 1466,   71, 1466, 1466,  287,  287, 1477,  287, 1477,
     1477, 1473, 1473, 1473, 1472,  362,  362, 1480,  362, 1480,
     1480, 1462, 1459, 1459,   71, 1466, 1466,  287, 1477, 1477,
     1473, 1472,  362, 1480, 1480, 1459, 1459, 1466, 1466, 1477,
     1477, 1472, 1480, 1480, 1459, 1466, 1477, 1480,    0, 1459,
     1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459,
     1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459,
     1459, 1459
    } ;

static yyconst flex_int16_t yy_nxt[3148] =
    {   0,
       14,   15,   16,   17,   15,   18,   14,   14,   19,   20,
       21,   22,   23,   14,   24,   25,   26,   27,   28,   29,
       24,   24,   30,   24,   24,   31,   32,   33,   34,   35,
       36,   37,   38,   24,   24,   24,   24,   24,   24,   24,
       39,   40,   41,   24,   24,   24,   24,   42,   24,   43,
       24,   44,   24,   24,   24,   45,   46,  197,  200,   46,
      197,   47,   51,   52,   53,   46,   54,  204,   46,  127,
       92,  230,  127,  158,  128,  205,  158,  193,   47,  216,
      193,   48,  194,  212,  213,  209,  220,  233,  235,  236,
       93,  217,  214,  248,  129,  221,  227,  438,  159,  227,

      242,  228,  195,  248,  231,  250,   49,   50,   50,   55,
       56,   57,   50,   54,  248,   94,  251,   50,  270,  130,
       50, 1455,  248,  160,  255,   59,  225,  196,  248,  232,
      237,  238,  239,  243,  245,  256,  245,  245,  245,  258,
      245,  245,  245,  248,  245,  245,  245,  248,  245,  245,
      245,  272,  245,  245,  245,  248,  245,  245,   60,   61,
       15,   62,   63,   15,   64,   61,   61,   65,   66,   67,
       68,   69,   61,   70,   71,   72,   73,   74,   75,   70,
       70,   76,   70,   70,   77,   78,   79,   80,   81,   82,
       83,   84,   70,   70,   70,   70,   70,   70,   70,   85,

       86,   87,   70,   70,   70,   70,   88,   70,   89,   70,
       90,   70,   70,   70,   91,   95,   96,   97,   98,   96,
       99,   95,   95,  100,  101,  102,  103,  104,   95,  105,
      106,  107,  108,  109,  110,  105,  105,  111,  105,  105,
      112,  113,  114,  115,  116,  117,  118,  119,  105,  105,
      105,  105,  105,  105,  105,  120,  121,  122,  105,  105,
      105,  105,  123,  105,  124,  105,  125,  105,  105,  105,
      126,   14,  131,  132,  133,  131,   18,   14,   14,   19,
       20,   21,  134,  135,   14,  136,  137,  138,  139,  140,
      141,  136,  136,  142,  136,  136,  143,  144,  145,  146,

      147,  148,  149,  150,  136,  136,  136,  136,  136,  136,
      136,  151,  152,  153,  136,  136,  136,  136,  154,  136,
      155,  136,  156,  136,  136,  136,  157,  161,  162,  163,
      164,  162,  165,  161,  161,  166,  167,  168,  169,  170,
      161,  171,  172,  173,  174,  175,  176,  171,  171,  177,
      171,  171,  178,  179,  180,  181,  182,  183,  184,  185,
      171,  171,  171,  171,  171,  171,  171,  186,  187,  188,
      171,  171,  171,  171,  189,  171,  190,  171,  191,  171,
      171,  171,  192,  245,  252,  245,  245,  248,  254,  257,
      229,  248,  253,  248,  247,  244,  245,  229,  245,  245,

      244,  244,  244,  244,  244,  244,  244,  440,  244,  244,
      245,  248,  245,  245,  244,  244,  244,  244,  244,  244,
      244,  264,  244,  260,  261,  263,  266,  248,  248,  248,
      248,  248,  262,  265,  248,  248,  248,  277,  322,  249,
      267,  288,  248,  268,  276,  274,  276,  276,  326,  271,
      286,  257,  269,  248,  273,  278,  289,  286,  286,  248,
      281,  282,  283,  281,  283,  284,  283,  283,  286,  292,
      290,  294,  308,  286,  286,  363,  309,  273,  291,  322,
      279,  280,  280,  286,  361,  280,  280,  280,  280,  280,
      280,  286,  280,  293,  280,  280,  280,  296,  325,  280,

      280,  280,  280,  280,  280,  295,  280,  286,  280,  298,
      299,  302,  304,  286,  286,  301,  286,  286,  300,  286,
      286,  286,  286,  303,  286,  287,  315,  305,  286,  306,
      310,  313,  282,  283,  313,  312,  228,  311,  307,  316,
      295,  322,  286,  286,  318,  319,  320,  318,  327,  322,
      322,  322,  322,  322,  322,  322,  322,  334,  332,  322,
      322,  311,  322,  322,  317,  328,  330,  322,  322,  340,
      333,  331,  322,  329,  335,  342,  336,  337,  322,  322,
      339,  341,  322,  322,  371,  338,  343,  344,  351,  319,
      320,  351,  322,  228,  365,  352,  345,  361,  353,  364,

      361,  346,  366,  367, 1455,  347,  348,  229,  361,  333,
      369,  361,  350,  361,  229,  349,  356,  357,  358,  356,
      349,  385,  361,  354,  355,  355,  361,  420,  355,  355,
      355,  355,  355,  355,  361,  355,  368,  355,  355,  355,
      421,  383,  355,  355,  355,  355,  355,  355,  370,  355,
      361,  355,  373,  374,  376,  377,  361,  361,  379,  361,
      361,  375,  361,  361,  361,  361,  197,  378,  362,  197,
      380,  381,  242,  387,  361,  391,  390, 1452,  384,  361,
      382,  395,  401,  386,  388,  357,  358,  388,  398,  228,
      370,  396,  361,  397,  411,  231,  402,  386,  427,  227,

      392,  428,  227,  399,  228,  243,  412,  233,  235,  236,
      237,  238,  239,  245,  248,  245,  245,  248,  429,  245,
      232,  245,  245,  245,  432,  245,  245,  434,  430,  248,
      431,  435,  437,  439,  247,  248,  248,  248,  441,  433,
      442,  443,  444,  445,  248,  436,  248,  248,  248,  248,
      448,  447,  449,  248,  248,  446,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  450,  248,  452,  276,
      454,  276,  276,  276,  451,  276,  276,  277,  453,  459,
      248,  456,  278,  455,  457,  462,  248,  280,  458,  473,
      280,  462,  462,  248,  281,  282,  283,  281,  283,  282,

      283,  283,  280,  462,  475,  280,  462,  279,  462,  468,
      462,  470,  471,  461,  460,  280,  477,  488,  280,  460,
      460,  460,  460,  460,  469,  460,  472,  460,  460,  280,
      474,  462,  280,  460,  460,  460,  460,  460,  462,  460,
      462,  460,  463,  465,  462,  462,  462,  481,  462,  484,
      483,  462,  476,  466,  479,  467,  462,  485,  462,  482,
      462,  462,  462,  462,  313,  282,  283,  313,  314,  228,
      229,  314,  486,  462,  462,  322,  322,  229,  318,  319,
      320,  318,  322,  490,  322,  500,  498,  501,  496,  322,
      513,  322,  489,  487,  492,  322,  491,  502,  322,  511,

      494,  493,  507,  322,  505,  322,  508,  503,  322,  504,
      322,  499,  510,  322,  322,  322,  515,  322,  517,  506,
      509,  514,  518,  322,  512,  516,  322,  322,  322,  322,
      521,  322,  322,  322,  519,  524,  522,  322,  322,  351,
      319,  320,  351,  322,  228,  520,  322,  322,  355,  352,
      462,  355,  356,  357,  358,  356,  544,  525,  527,  523,
      535,  532,  353,  355,  535,  538,  355,  541,  526,  529,
      545,  528,  535,  535,  534,  539,  673,  540,  531,  530,
      543,  535,  542,  535,  535,  546,  548,  354,  533,  355,
      535,  550,  355,  533,  533,  533,  533,  533,  552,  533,

      535,  533,  533,  355,  547,  535,  355,  533,  533,  533,
      533,  533,  549,  533,  535,  533,  536,  535,  535,  554,
      535,  557,  535,  535,  556,  535,  535,  535,  558,  535,
      535,  555,  388,  357,  358,  388,  389,  228,  229,  389,
      535,  535,  559,  600,  608,  229,  248,  248,  561,  563,
      601, 1447,  571,  610,  602,  560,  569,  612,  609,  562,
      565,  248,  564,  248,  633,  611,  613,  567,  566,  248,
      248,  248,  248,  616,  615,  618,  617,  572,  248,  248,
      619,  248,  620,  248,  621,  622,  623,  624,  248,  626,
      248,  625,  248,  628,  248,  248,  248,  248,  248,  248,

      248,  627,  248,  629,  248,  248,  630,  248,  248,  248,
      248,  635,  248,  248,  462,  631,  632,  634,  636,  462,
      639,  280,  637,  462,  280,  280,  462,  642,  280,  462,
      638,  646,  643,  462,  640,  641,  461,  462,  647,  462,
      462,  645,  462,  462,  462,  650,  653,  462,  462,  648,
      462,  655,  656,  462,  651,  649,  652,  462,  462,  657,
      654,  462,  462,  658,  462,  462,  462,  662,  660,  462,
      462,  462,  659,  462,  462,  322,  462,  462,  462,  661,
      322,  663,  664,  314,  462,  229,  314,  322, 1446,  322,
      665,  676,  229,  496,  322,  668,  498,  678,  322,  322,

      322,  679,  669,  677,  667,  680,  322,  666,  322,  670,
      683,  322,  672,  671,  674,  675,  685,  682,  322,  322,
      684,  499,  322,  681,  322,  322,  687,  322,  693,  322,
      322,  689,  690,  686,  691,  322,  322,  322,  322,  322,
      322,  322,  688,  692,  696,  322,  322,  322,  694,  535,
      322,  695,  322,  322,  535,  535,  355,  697,  698,  355,
      355,  535,  710,  355,  535,  535,  699,  711,  535,  535,
      714,  534,  702,  713,  535,  718,  715,  716,  701,  703,
      535,  700,  707,  717,  535,  535,  704,  706,  719,  721,
      705,  708,  720,  709,  535,  535,  535,  535,  723,  724,

      535,  722,  725,  535,  535,  535,  535,  535,  535,  726,
      730,  535,  535,  728,  535,  535,  727,  535,  535,  535,
      535,  535,  729,  731,  732,  389,  756,  229,  389,  535,
      535,  782,  733,  778,  229,  248,  569,  248,  736,  779,
      780,  571,  785,  741,  737,  757,  735,  248,  248,  734,
      781,  738,  783,  248,  248,  739,  740,  742,  743,  248,
      788,  248,  248,  786,  789,  790,  572,  784,  792,  248,
      793,  794,  795,  248,  796,  801,  799,  248,  248,  248,
      248,  248,  248,  248,  791,  248,  248,  248,  797,  248,
      248,  800,  248,  798,  248,  248,  248,  248,  248,  248,

      462,  802,  248,  462,  462,  811,  803,  462,  462,  809,
      812,  805,  808,  807,  806,  810,  804,  462,  816,  813,
      815,  462,  462,  462,  814,  462,  821,  462,  462,  817,
      823,  462,  825,  462,  462,  462,  462,  462,  462,  822,
      819,  820,  827,  828,  462,  818,  462,  826,  829,  824,
      462,  832,  834,  462,  462,  462,  462,  462,  462,  830,
      322,  462,  322,  462,  462,  844,  322,  831,  833,  462,
      322,  845,  322,  322,  748,  322,  322,  322,  754,  322,
      847, 1442,  322,  322,  846,  756,  322,  836,  322,  838,
      841,  842,  839,  835,  837,  840,  848,  851,  843,  850,

      849,  852,  853,  322,  854,  758,  322,  322,  322,  322,
      322,  322,  859,  322,  856,  322,  322,  767,  322,  857,
      322,  861,  855,  858,  322,  322,  322,  535,  322,  872,
      535,  535,  862,  322,  322,  535,  860,  873,  875,  876,
      535,  535,  535,  535,  535,  882,  535,  886,  535,  874,
      535,  535,  535,  864,  888,  877,  870,  535,  863,  866,
      880,  865,  867,  868,  878,  869,  871,  879,  881,  535,
      884,  535,  535,  535,  891,  535,  535,  535,  535,  535,
      883,  889,  893,  895,  535,  887,  890,  535,  535,  885,
      535,  535,  535,  535,  928,  898,  894,  931,  535,  892,

      934,  935,  936,  245,  943,  245,  245,  248,  929,  248,
      937,  932,  938,  248,  941,  248,  248,  945,  896,  897,
      899,  902,  904,  901,  900,  903,  248,  248,  940,  248,
      322,  248,  248,  939,  248,  245,  942,  245,  245,  245,
      248,  245,  245,  245,  946,  245,  245,  248,  248,  944,
      947,  948,  950,  949,  951,  248,  245,  248,  245,  245,
      248,  248,  248,  248,  248,  248,  248,  248,  462,  462,
      952,  248,  248,  965,  462,  954,  962,  956,  957,  953,
      959,  462,  462,  960,  955,  963,  280,  462,  462,  280,
      462,  967,  958,  964,  969,  462,  280,  961,  280,  280,

      966,  280,  968,  462,  462,  280,  462,  971,  280,  973,
      462,  970,  462,  462,  462,  976,  462,  977,  979,  462,
      280,  462,  972,  280,  462,  462,  974,  978,  462,  462,
      975,  462,  462,  462,  322,  322,  322,  322,  322,  908,
      322,  322,  991,  322,  990,  322,  322,  912,  322,  322,
      992,  916,  980, 1001,  993,  982,  985,  322,  995,  981,
      988,  984,  322,  999,  987,  322,  983,  994,  322,  997,
      986,  322,  996,  322,  989,  922,  322, 1002,  998,  322,
      322,  322, 1003,  322,  322,  322, 1000,  535,  322,  535,
      535, 1017,  535, 1015, 1014,  355,  535, 1186,  355,  535,

      535, 1016, 1021,  535,  535,  355,  535,  248,  355, 1018,
     1004, 1020,  355, 1006, 1009,  355, 1008, 1005, 1012,  535,
     1011,  535, 1007, 1019, 1024, 1023,  355, 1022, 1010,  355,
     1025,  535, 1013,  535,  535,  535, 1028,  535, 1029, 1026,
     1031,  535,  355,  535,  535,  355,  535,  535, 1030, 1042,
      535, 1027,  535, 1043,  535,  535, 1067,  248, 1069, 1070,
     1068,  245, 1077,  245,  245,  248, 1071, 1072,  248, 1073,
     1076,  248,  462,  248, 1032,  248, 1034, 1074,  248, 1033,
     1036, 1037, 1040, 1078, 1039, 1035,  245,  248,  245,  245,
      245,  248,  245,  245, 1080, 1038, 1041, 1079, 1081,  248,

      248,  245,  248,  245,  245,  248,  248,  248,  248,  248,
      248,  248,  248, 1083,  248,  248, 1085,  248,  462, 1087,
     1094,  462,  462, 1088, 1082, 1090, 1091, 1084,  462, 1086,
     1092,  462, 1089,  462, 1093,  280, 1095,  462,  280, 1096,
     1097,  280,  462,  462,  280, 1099, 1101,  462,  280,  280,
     1098,  280,  280, 1100, 1103,  462, 1104,  462,  462,  462,
      462, 1105, 1106,  462,  462,  462,  462,  462,  462,  462,
      322,  462, 1042,  322,  322, 1044, 1117,  322,  322,  322,
      322,  322, 1124,  322, 1108,  322, 1122,  322, 1110, 1051,
     1112,  322, 1120, 1115, 1113, 1118,  322, 1107, 1116, 1109,

     1119, 1111, 1114, 1121, 1123,  322,  322, 1053, 1125,  322,
      322,  322,  322, 1126,  322,  322, 1127,  322,  322, 1128,
      322, 1138,  535, 1129,  535, 1139, 1140,  535,  355,  535,
      535,  355,  535,  535,  355,  535,  535,  355, 1131, 1147,
      535, 1133, 1141,  535, 1143, 1134, 1142, 1136, 1137, 1130,
     1144, 1132, 1146,  535, 1135, 1145,  355, 1149,  535,  355,
      535,  535,  535,  535,  355, 1151, 1152,  355, 1153,  535,
      535, 1155,  535,  535, 1150,  535,  535, 1183,  245, 1157,
      245,  245,  245, 1435,  245,  245,  248, 1154, 1184,  248,
      248, 1185,  462, 1156, 1158, 1187, 1203,  248,  248, 1159,

     1161, 1189, 1162,  248, 1188, 1192,  245, 1160,  245,  245,
      245, 1190,  245,  245, 1191,  248,  248, 1193,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  280,  280,
      462,  280,  280,  462,  462,  462,  248,  462,  462, 1194,
     1195, 1196, 1198, 1197, 1200, 1199, 1201, 1202, 1204,  462,
     1205, 1207, 1208,  280,  462, 1206,  280, 1209,  280,  462,
      462,  280, 1212,  462, 1213, 1210,  462,  462,  462,  462,
      462, 1214,  462,  462, 1211,  462,  322,  322,  322,  322,
      322,  322,  322, 1223,  322,  322,  322, 1226,  322,  322,
      322, 1172,  322,  322,  322,  322, 1215, 1227, 1224, 1225,

     1230, 1220, 1228, 1229, 1216, 1217, 1231, 1218,  322, 1219,
     1221,  322, 1222,  355,  535,  535,  355,  355, 1242,  535,
      355,  535,  535,  535, 1233,  355, 1235, 1245,  355, 1234,
      535, 1236, 1244, 1237, 1238, 1240, 1246, 1243,  355,  535,
     1247,  355,  535,  535, 1239, 1251,  535,  535,  535, 1248,
     1249, 1241, 1252,  535,  535,  535,  535, 1250,  535,  535,
      535, 1280, 1281, 1282, 1283, 1284, 1285, 1286,  248,  248,
      248,  248,  248,  248,  248,  248,  245, 1287,  245,  245,
     1253,  248,  245, 1254,  245,  245, 1255,  248,  248, 1256,
      248, 1257, 1259, 1258,  248, 1260,  248, 1261,  248,  248,

      248, 1291,  248,  462,  462,  462, 1290, 1299, 1289, 1298,
      462, 1300, 1292, 1295, 1301,  462,  462,  462, 1293,  462,
     1294, 1288, 1296,  462, 1297,  462,  280, 1302, 1303,  280,
      462,  280,  462, 1304,  280,  462,  462,  462,  462,  462,
      322, 1305,  322,  322,  322,  322, 1265, 1307, 1316, 1317,
      322,  322, 1318,  322,  322,  322,  322, 1309,  322, 1308,
      322,  322, 1321,  322, 1319, 1320, 1310, 1313,  322,  322,
     1306, 1336,  535, 1311, 1312, 1322, 1314, 1315,  535,  535,
      535,  535,  535, 1333, 1334, 1335, 1326,  535,  535,  535,
      535,  355, 1325, 1324,  355, 1327, 1330,  535, 1337, 1338,

     1340, 1328, 1329, 1339,  355,  535,  535,  355,  535, 1331,
     1332,  535,  535,  535, 1373,  462, 1362, 1364, 1342,  245,
     1368,  245,  245, 1365, 1343,  248,  248,  248, 1366,  248,
     1367, 1345, 1344,  248,  248,  245,  248,  245,  245,  248,
      248, 1348,  462, 1341, 1346,  462, 1347, 1375,  462, 1372,
     1349, 1350,  280,  462,  462,  280, 1370,  462, 1374, 1371,
      462,  462,  280, 1377, 1379,  280,  462, 1376,  322,  322,
     1351,  322,  322, 1378, 1353, 1369,  322,  322,  322,  322,
      322,  322, 1393,  535,  535, 1395,  535,  355, 1384, 1388,
      355, 1383, 1386, 1385,  535,  535, 1381, 1382,  535, 1387,

     1394,  535, 1380,  355,  535, 1399,  355,  535, 1396, 1392,
      535, 1412,  245, 1397,  245,  245, 1414, 1390, 1434, 1391,
     1398,  248, 1410,  245,  248,  245,  245, 1411,  248,  462,
      462,  322, 1403,  248,  245,  280,  245,  245,  280,  280,
     1401,  462,  280, 1400, 1418,  462, 1402, 1416, 1417, 1420,
      462,  280,  322, 1423,  280,  322,  322, 1419, 1406,  322,
      355, 1408,  535,  355,  355,  535, 1436,  355, 1428,  535,
      535,  322, 1422, 1433, 1424, 1430,  535,  355,  462, 1426,
      355, 1432, 1415,  248, 1427,  245, 1429,  245,  245,  245,
     1441,  245,  245,  245, 1438,  245,  245,  280,  535, 1421,

      280, 1439,  462,  280,  280, 1448,  280,  280,  322,  355,
     1433,  322,  355, 1446, 1443, 1444,  535,  355,  355,  535,
      355,  355,  248,  535,  245, 1431,  245,  245,  245,  535,
      245,  245, 1450,  462,  280,  280,  322,  280,  280, 1453,
      535,  322,  355,  355, 1437,  355,  355,  245,  322,  245,
      245,  245, 1425,  245,  245, 1440,  280,  355,  462,  280,
      355,  280,  355, 1456,  280,  355,  462,  462,  280, 1445,
     1449,  280,  355, 1457, 1458,  355,  245, 1451,  245,  245,
      248,  248,  248, 1413, 1409, 1454,   50,   50,   50,   50,
       50,   50,   58,   58,   58,   58,   58,   58,  229, 1408,

      229,  229,  229,  229,  234,  234,  234,  234,  234,  234,
      240,  240,  240,  244, 1407,  244,  244,  244,  244,  248,
     1406,  248,  248,  248,  248,  275, 1405,  275,  275,  275,
      275,  280, 1404,  535,  280,  280,  280,  286,  535,  535,
      286,  286,  286,  314,  535,  314,  314,  314,  314,  322,
      322,  324,  324,  355,  535,  535,  355,  355,  355,  361,
      322,  322,  361,  361,  361,  389,  322,  389,  389,  389,
      389,  460,  322,  322,  460,  460,  460,  462,  322, 1389,
      462,  462,  462,  495,  462,  495,  495,  495,  495,  533,
      462,  462,  533,  533,  533,  535,  462,  462,  535,  535,

      535,  568,  462,  568,  568,  568,  568,  248,  248,  248,
      248,  248,  248, 1363, 1361, 1360, 1359, 1358, 1357, 1356,
     1355, 1354, 1353, 1352, 1351,  535, 1323,  322,  462,  248,
     1279, 1278, 1277, 1276, 1275, 1274, 1273, 1272, 1271, 1270,
     1269, 1268, 1267, 1266, 1265, 1264, 1263, 1262,  535, 1232,
      322,  462,  248, 1182, 1181, 1180, 1179, 1178, 1177, 1176,
     1175, 1174, 1173, 1172, 1171, 1170, 1169, 1168, 1167, 1166,
     1165, 1164, 1163, 1148, 1102, 1075, 1066, 1065, 1064, 1063,
     1062, 1061, 1060, 1059, 1058, 1057, 1056, 1055, 1054, 1053,
     1052, 1051, 1050, 1049, 1048, 1047, 1046, 1045, 1044,  535,

      535,  322,  322,  462,  462,  248,  248,  933,  930,  927,
      926,  925,  924,  923,  922,  921,  920,  919,  918,  917,
      916,  915,  914,  913,  912,  911,  910,  909,  908,  907,
      906,  905,  535,  535,  322,  322,  462,  462,  248,  248,
      787,  777,  776,  775,  774,  773,  772,  771,  770,  769,
      768,  767,  766,  765,  764,  763,  762,  761,  760,  759,
      758,  755,  754,  753,  752,  751,  750,  749,  748,  747,
      746,  745,  744,  570,  535,  712,  535,  322,  497,  462,
      644,  462,  248,  614,  607,  606,  605,  604,  603,  599,
      598,  597,  596,  595,  594,  593,  592,  591,  590,  589,

      588,  587,  586,  585,  584,  583,  582,  581,  580,  579,
      578,  577,  576,  575,  574,  573,  570,  553,  551,  537,
      357,  322,  323,  319,  497,  480,  478,  464,  248,  241,
      426,  237,  233,  230,  425,  424,  423,  422,  419,  418,
      417,  416,  415,  414,  413,  410,  409,  408,  407,  406,
      405,  404,  403,  400,  394,  393,  199,  372,  360,  359,
      322,  323,  321,  297,  285,  259,  246,  241,  237,  233,
      226,  225,  224,  223,  222,  219,  218,  215,  211,  210,
      209,  208,  207,  206,  203,  202,  201,  199,  198, 1459,
       13, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459,

     1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459,
     1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459,
     1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459,
     1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459,
     1459, 1459, 1459, 1459, 1459, 1459, 1459
    } ;

static yyconst flex_int16_t yy_chk[3148] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    2,   15, 1462,    2,
       15,    2,    3,    3,    3,    6,    3,   28,    6,    8,
        6,   48,    8,   10,    8,   28,   10,   12,   10,   37,
       12,    2,   12,   35,   35,   48,   40,   53,   53,   53,
        6,   37,   35,  256,    8,   40,   46,  256,   10,   46,

       60,   46,   12,   87,   49,   72,    2,    4,    4,    4,
        4,    4,    4,    4,   72,    6,   73,    4,   87,    8,
        4, 1452,   76,   10,   76,    4,   49,   12,   73,   49,
       57,   57,   57,   60,   61,   77,   61,   61,   64,   79,
       64,   64,   65,   89,   65,   65,   66,   77,   66,   66,
       67,   89,   67,   67,   68,   79,   68,   68,    4,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   69,   74,   69,   69,   74,   75,   78,
      128,   78,   74,   75,   69,   70,   70,  128,   70,   70,

       70,   70,   70,   70,   70,   70,   70,  258,   70,   71,
       71,  258,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   83,   71,   81,   81,   82,   84,   82,   81,   85,
       83,   88,   81,   83,   91,   86,   90,   93,  138,   71,
       85,  107,   84,   86,   92,   91,   92,   92,  138,   88,
      107,   93,   86,   93,   90,   94,  108,  122,  123,   94,
       96,   96,   96,   96,   98,   98,   98,   98,  108,  110,
      109,  112,  122,  109,  110,  173,  123,   94,  109,  137,
       94,  105,  105,  112,  173,  105,  105,  105,  105,  105,
      105,  111,  105,  111,  105,  106,  106,  114,  137,  106,

      106,  106,  106,  106,  106,  113,  106,  113,  106,  116,
      116,  118,  119,  114,  116,  117,  120,  117,  116,  125,
      118,  121,  124,  118,  126,  106,  129,  120,  119,  121,
      124,  127,  127,  127,  127,  126,  127,  125,  121,  130,
      129,  139,  129,  130,  131,  131,  131,  131,  139,  140,
      142,  143,  141,  144,  145,  146,  151,  145,  143,  149,
      152,  130,  147,  148,  130,  140,  141,  153,  154,  149,
      144,  142,  150,  140,  146,  150,  147,  147,  156,  155,
      148,  149,  157,  160,  180,  147,  151,  152,  158,  158,
      158,  158,  159,  158,  175,  159,  152,  175,  160,  174,

      180,  153,  175,  176, 1447,  154,  155,  194,  176,  159,
      178,  174,  157,  190,  194,  156,  162,  162,  162,  162,
      160,  190,  178,  160,  171,  171,  188,  223,  171,  171,
      171,  171,  171,  171,  177,  171,  177,  171,  172,  172,
      223,  188,  172,  172,  172,  172,  172,  172,  179,  172,
      179,  172,  182,  182,  183,  184,  183,  182,  185,  186,
      189,  182,  192,  187,  184,  191,  197,  184,  172,  197,
      186,  187,  243,  192,  185,  196,  195, 1442,  189,  196,
      187,  203,  206,  191,  193,  193,  193,  193,  204,  193,
      195,  203,  195,  203,  215,  232,  206,  196,  249,  227,

      196,  250,  227,  204,  227,  243,  215,  236,  236,  236,
      239,  239,  239,  244,  249,  244,  244,  250,  251,  245,
      232,  245,  245,  247,  252,  247,  247,  253,  251,  251,
      251,  254,  255,  257,  247,  253,  257,  252,  259,  252,
      260,  261,  262,  263,  255,  254,  259,  254,  264,  261,
      265,  264,  266,  268,  267,  263,  260,  263,  262,  269,
      270,  273,  266,  271,  272,  265,  267,  274,  269,  275,
      271,  275,  275,  276,  268,  276,  276,  278,  270,  277,
      277,  272,  279,  271,  273,  293,  279,  280,  274,  293,
      280,  295,  307,  278,  281,  281,  281,  281,  283,  283,

      283,  283,  285,  291,  295,  285,  290,  279,  297,  290,
      294,  291,  292,  285,  286,  286,  297,  307,  286,  286,
      286,  286,  286,  286,  290,  286,  292,  286,  287,  287,
      294,  302,  287,  287,  287,  287,  287,  287,  289,  287,
      296,  287,  287,  289,  305,  301,  299,  301,  303,  303,
      302,  304,  296,  289,  299,  289,  306,  304,  308,  301,
      309,  310,  311,  312,  313,  313,  313,  313,  314,  313,
      314,  314,  305,  315,  317,  334,  332,  314,  318,  318,
      318,  318,  325,  309,  326,  325,  317,  326,  315,  327,
      334,  329,  308,  306,  310,  344,  309,  327,  328,  332,

      312,  311,  329,  330,  328,  331,  330,  327,  333,  327,
      335,  317,  331,  336,  337,  338,  336,  339,  338,  328,
      330,  335,  339,  340,  333,  337,  341,  342,  343,  345,
      341,  346,  347,  348,  339,  344,  342,  349,  350,  351,
      351,  351,  351,  352,  351,  340,  353,  354,  355,  353,
      492,  355,  356,  356,  356,  356,  367,  345,  347,  343,
      364,  352,  354,  360,  365,  364,  360,  365,  346,  348,
      367,  347,  366,  370,  360,  364,  492,  364,  350,  349,
      366,  368,  365,  372,  369,  368,  370,  354,  361,  361,
      374,  372,  361,  361,  361,  361,  361,  361,  374,  361,

      371,  361,  362,  362,  369,  377,  362,  362,  362,  362,
      362,  362,  371,  362,  380,  362,  362,  376,  381,  376,
      378,  378,  379,  382,  377,  383,  384,  385,  379,  386,
      387,  376,  388,  388,  388,  388,  389,  388,  389,  389,
      392,  390,  380,  420,  427,  389,  452,  427,  382,  384,
      420, 1434,  392,  429,  420,  381,  390,  431,  428,  383,
      385,  428,  384,  430,  452,  430,  432,  387,  386,  429,
      432,  431,  434,  435,  434,  437,  436,  392,  436,  437,
      438,  439,  439,  435,  440,  441,  442,  443,  444,  445,
      443,  444,  438,  447,  451,  445,  440,  441,  454,  446,

      442,  446,  448,  448,  447,  449,  449,  450,  455,  453,
      456,  454,  457,  458,  463,  450,  451,  453,  454,  464,
      456,  460,  454,  466,  460,  461,  468,  463,  461,  467,
      455,  467,  464,  469,  457,  458,  461,  470,  468,  471,
      472,  466,  474,  475,  473,  471,  474,  476,  477,  469,
      479,  476,  477,  480,  472,  470,  473,  478,  481,  478,
      475,  482,  483,  479,  484,  485,  486,  483,  481,  487,
      488,  489,  480,  490,  491,  500,  493,  494,  497,  482,
      503,  484,  485,  495,  499,  495,  495,  501, 1432,  507,
      486,  500,  495,  497,  502,  489,  499,  502,  506,  509,

      504,  503,  490,  501,  488,  504,  517,  487,  505,  490,
      507,  508,  491,  490,  493,  494,  509,  506,  510,  511,
      508,  499,  512,  505,  513,  514,  511,  516,  517,  515,
      519,  513,  514,  510,  515,  518,  520,  521,  522,  523,
      524,  525,  512,  516,  520,  526,  528,  527,  518,  536,
      530,  519,  531,  529,  537,  539,  533,  521,  522,  533,
      534,  542,  536,  534,  541,  543,  523,  537,  540,  544,
      540,  534,  526,  539,  545,  544,  541,  542,  525,  527,
      546,  524,  529,  543,  548,  547,  527,  528,  545,  547,
      527,  530,  546,  531,  549,  550,  552,  553,  549,  550,

      551,  548,  551,  554,  555,  556,  557,  558,  559,  552,
      556,  560,  561,  554,  562,  563,  553,  565,  564,  566,
      567,  570,  555,  557,  558,  568,  585,  568,  568,  572,
     1426,  612,  559,  608,  568,  615,  570,  610,  562,  609,
      610,  572,  615,  565,  563,  585,  561,  608,  612,  560,
      611,  563,  613,  609,  613,  563,  564,  566,  567,  611,
      618,  614,  616,  616,  619,  620,  572,  614,  621,  619,
      622,  623,  624,  622,  625,  630,  628,  618,  631,  625,
      624,  626,  620,  623,  620,  621,  627,  628,  626,  629,
      633,  629,  630,  627,  634,  635,  636,  637,  639,  638,

      644,  631,  640,  642,  647,  642,  633,  648,  643,  639,
      643,  635,  638,  637,  636,  640,  634,  645,  647,  644,
      646,  646,  649,  650,  645,  651,  652,  652,  653,  648,
      654,  654,  655,  655,  656,  658,  660,  659,  657,  653,
      650,  651,  657,  658,  661,  649,  662,  656,  659,  654,
      663,  662,  664,  664,  665,  667,  668,  669,  670,  660,
      676,  672,  678,  671,  673,  676,  677,  661,  663,  674,
      679,  677,  680,  683,  680,  682,  686,  684,  686,  681,
      679, 1425,  685,  688,  678,  688,  694,  667,  687,  669,
      672,  673,  670,  665,  668,  671,  681,  684,  674,  683,

      682,  685,  687,  689,  688,  689,  690,  691,  692,  693,
      695,  697,  694,  696,  691,  698,  699,  698,  701,  692,
      702,  696,  690,  693,  703,  704,  707,  710,  705,  710,
      712,  713,  697,  706,  708,  711,  695,  711,  713,  714,
      714,  715,  716,  718,  717,  720,  720,  723,  723,  712,
      725,  728,  719,  701,  725,  715,  707,  736,  699,  703,
      718,  702,  704,  705,  716,  706,  708,  717,  719,  721,
      722,  722,  724,  726,  728,  727,  729,  730,  731,  733,
      721,  726,  730,  732,  732,  724,  727,  735,  737,  722,
      738,  739,  740,  742,  774,  736,  731,  776,  741,  729,

      778,  779,  780,  782,  791,  782,  782,  780,  774,  778,
      781,  776,  783,  779,  786,  783,  791,  794,  733,  735,
      737,  740,  742,  739,  738,  741,  784,  781,  785,  787,
     1422,  786,  785,  784,  794,  788,  787,  788,  788,  790,
      795,  790,  790,  792,  795,  792,  792,  793,  796,  793,
      796,  797,  799,  798,  800,  802,  801,  799,  801,  801,
      803,  805,  806,  807,  809,  797,  798,  808,  817,  811,
      802,  800,  810,  814,  814,  805,  811,  807,  808,  803,
      809,  812,  813,  810,  806,  812,  815,  816,  820,  815,
      818,  817,  808,  813,  819,  819,  821,  810,  823,  821,

      816,  823,  818,  824,  826,  825,  828,  824,  825,  827,
      827,  820,  829,  830,  831,  830,  832,  831,  833,  833,
      834,  835,  826,  834,  836,  838,  828,  832,  839,  841,
      829,  840,  842,  843,  844,  845,  846,  847,  848,  847,
      857,  849,  845,  850,  844,  851,  852,  851,  859,  856,
      846,  856,  835,  859,  848,  838,  841,  855,  850,  836,
      843,  840,  854,  857,  842,  858,  839,  849,  861,  854,
      841,  860,  852,  862,  843,  862,  863,  860,  855,  864,
      866,  867,  861,  868,  869,  870,  858,  872,  871,  873,
      874,  875,  875,  873,  872,  876,  877, 1073,  876,  879,

      878,  874,  880,  880,  881,  882,  887, 1073,  882,  877,
      863,  879,  884,  866,  869,  884,  868,  864,  871,  889,
      870,  885,  867,  878,  887,  885,  886,  881,  869,  886,
      888,  888,  871,  890,  891,  892,  891,  893,  892,  889,
      894,  894,  895,  896,  897,  895,  899,  900,  893,  905,
      901,  890,  903,  905,  902,  904,  934,  936,  935,  936,
      934,  937,  946,  937,  937,  938,  938,  939,  940,  940,
      944,  939, 1416,  934,  896,  935,  899,  942,  946,  897,
      901,  902,  904,  947,  903,  900,  941,  944,  941,  941,
      945,  942,  945,  945,  949,  902,  904,  948,  950,  948,

      947,  951,  952,  951,  951,  953,  949,  954,  955,  956,
      950,  957,  958,  953,  959,  961,  955,  960,  964,  957,
      963,  963,  966,  958,  952,  960,  961,  954,  967,  956,
      962,  962,  959,  968,  962,  965,  964,  971,  965,  966,
      967,  969,  976,  970,  969,  970,  972,  972,  973,  979,
      968,  973,  979,  971,  975,  975,  976,  977,  978,  980,
      981,  977,  978,  982,  983,  984,  985,  986,  987,  988,
      990,  989,  990,  991,  992,  991,  990,  994, 1004,  999,
      993,  996,  999,  995,  981,  997,  996,  998,  983,  998,
      985, 1001,  994,  988,  986,  992, 1005,  980,  989,  982,

      993,  984,  987,  995,  997, 1000, 1002, 1000, 1001, 1003,
     1006, 1007, 1008, 1002, 1009, 1010, 1003, 1011, 1013, 1004,
     1012, 1014, 1014, 1005, 1016, 1014, 1015, 1015, 1017, 1018,
     1032, 1017, 1019, 1020, 1021, 1034, 1023, 1021, 1007, 1024,
     1024, 1009, 1016, 1036, 1019, 1010, 1018, 1012, 1013, 1006,
     1020, 1008, 1023, 1022, 1011, 1022, 1025, 1027, 1027, 1025,
     1028, 1029, 1030, 1033, 1031, 1029, 1030, 1031, 1032, 1035,
     1037, 1034, 1038, 1039, 1028, 1041, 1040, 1068, 1067, 1036,
     1067, 1067, 1069, 1411, 1069, 1069, 1071, 1033, 1071, 1068,
     1072, 1072, 1093, 1035, 1037, 1074, 1093, 1074, 1077, 1038,

     1040, 1077, 1041, 1075, 1075, 1081, 1076, 1039, 1076, 1076,
     1078, 1079, 1078, 1078, 1080, 1080, 1079, 1082, 1083, 1085,
     1084, 1087, 1081, 1086, 1088, 1090, 1091, 1089, 1092, 1094,
     1096, 1092, 1094, 1097, 1108, 1100, 1082, 1099, 1102, 1083,
     1084, 1085, 1087, 1086, 1089, 1088, 1090, 1091, 1096, 1098,
     1097, 1099, 1100, 1101, 1104, 1098, 1101, 1102, 1103, 1105,
     1109, 1103, 1106, 1106, 1107, 1104, 1110, 1107, 1114, 1111,
     1112, 1108, 1113, 1115, 1105, 1116, 1117, 1119, 1121, 1120,
     1122, 1124, 1123, 1117, 1129, 1131, 1125, 1121, 1126, 1127,
     1130, 1127, 1132, 1133, 1134, 1136, 1109, 1122, 1119, 1120,

     1125, 1114, 1123, 1124, 1110, 1111, 1126, 1112, 1135, 1113,
     1115, 1137, 1116, 1138, 1139, 1143, 1138, 1140, 1139, 1142,
     1140, 1144, 1145, 1146, 1129, 1147, 1131, 1144, 1147, 1130,
     1148, 1132, 1143, 1133, 1134, 1136, 1145, 1142, 1149, 1150,
     1146, 1149, 1151, 1154, 1135, 1152, 1152, 1155, 1156, 1148,
     1150, 1137, 1153, 1157, 1158, 1153, 1159, 1151, 1161, 1160,
     1162, 1183, 1184, 1185, 1186, 1187, 1189, 1190, 1410, 1190,
     1187, 1189, 1183, 1185, 1184, 1191, 1192, 1191, 1192, 1192,
     1154, 1186, 1193, 1155, 1193, 1193, 1156, 1194, 1195, 1157,
     1196, 1158, 1160, 1159, 1197, 1161, 1198, 1162, 1199, 1200,

     1201, 1196, 1202, 1204, 1203, 1205, 1195, 1204, 1194, 1203,
     1214, 1205, 1197, 1200, 1206, 1206, 1207, 1209, 1198, 1210,
     1199, 1193, 1201, 1211, 1202, 1215, 1212, 1207, 1209, 1212,
     1216, 1213, 1217, 1210, 1213, 1218, 1219, 1220, 1221, 1222,
     1223, 1211, 1224, 1225, 1226, 1230, 1226, 1214, 1223, 1224,
     1227, 1229, 1225, 1233, 1231, 1234, 1235, 1216, 1236, 1215,
     1237, 1238, 1230, 1239, 1227, 1229, 1217, 1220, 1240, 1241,
     1213, 1245, 1245, 1218, 1219, 1231, 1221, 1222, 1242, 1244,
     1243, 1253, 1250, 1242, 1243, 1244, 1235, 1246, 1248, 1249,
     1254, 1251, 1234, 1233, 1251, 1236, 1239, 1256, 1246, 1248,

     1250, 1237, 1238, 1249, 1252, 1255, 1257, 1252, 1258, 1240,
     1241, 1259, 1260, 1261, 1298, 1298, 1280, 1282, 1253, 1283,
     1287, 1283, 1283, 1284, 1254, 1284, 1285, 1286, 1285, 1287,
     1286, 1256, 1255, 1280, 1282, 1288, 1290, 1288, 1288, 1292,
     1295, 1259, 1299, 1252, 1257, 1303, 1258, 1300, 1300, 1295,
     1260, 1261, 1301, 1302, 1304, 1301, 1290, 1305, 1299, 1292,
     1308, 1310, 1306, 1303, 1305, 1306, 1313, 1302, 1316, 1317,
     1316, 1320, 1318, 1304, 1318, 1288, 1319, 1321, 1325, 1322,
     1327, 1330, 1333, 1333, 1334, 1335, 1335, 1336, 1317, 1322,
     1336, 1313, 1320, 1319, 1337, 1338, 1308, 1310, 1340, 1321,

     1334, 1339, 1306, 1341, 1343, 1340, 1341, 1348, 1337, 1330,
     1345, 1366, 1362, 1338, 1362, 1362, 1368, 1325, 1409, 1327,
     1339, 1363, 1363, 1364, 1365, 1364, 1364, 1365, 1366, 1376,
     1374, 1385, 1348, 1368, 1369, 1373, 1369, 1369, 1373, 1375,
     1343, 1378, 1375, 1341, 1377, 1377, 1345, 1374, 1376, 1379,
     1379, 1380, 1384, 1385, 1380, 1387, 1386, 1378, 1386, 1388,
     1393, 1388, 1394, 1393, 1395, 1396, 1413, 1395, 1397, 1397,
     1398, 1423, 1384, 1407, 1387, 1399, 1399, 1400, 1417, 1394,
     1400, 1405, 1369, 1413, 1396, 1412, 1398, 1412, 1412, 1414,
     1423, 1414, 1414, 1415, 1417, 1415, 1415, 1418, 1427, 1380,

     1418, 1419, 1419, 1420, 1421, 1435, 1420, 1421, 1424, 1428,
     1424, 1441, 1428, 1441, 1427, 1429, 1429, 1430, 1431, 1403,
     1430, 1431, 1435, 1402, 1436, 1400, 1436, 1436, 1437, 1401,
     1437, 1437, 1438, 1438, 1439, 1440, 1392, 1439, 1440, 1443,
     1443, 1391, 1444, 1445, 1415, 1444, 1445, 1448, 1390, 1448,
     1448, 1449, 1389, 1449, 1449, 1421, 1450, 1453, 1383, 1450,
     1453, 1451, 1454, 1449, 1451, 1454, 1382, 1381, 1457, 1431,
     1437, 1457, 1458, 1451, 1454, 1458, 1456, 1440, 1456, 1456,
     1372, 1371, 1370, 1367, 1358, 1445, 1460, 1460, 1460, 1460,
     1460, 1460, 1461, 1461, 1461, 1461, 1461, 1461, 1463, 1357,

     1463, 1463, 1463, 1463, 1464, 1464, 1464, 1464, 1464, 1464,
     1465, 1465, 1465, 1466, 1356, 1466, 1466, 1466, 1466, 1467,
     1355, 1467, 1467, 1467, 1467, 1468, 1354, 1468, 1468, 1468,
     1468, 1469, 1352, 1350, 1469, 1469, 1469, 1470, 1349, 1347,
     1470, 1470, 1470, 1471, 1346, 1471, 1471, 1471, 1471, 1472,
     1472, 1473, 1473, 1474, 1344, 1342, 1474, 1474, 1474, 1475,
     1332, 1331, 1475, 1475, 1475, 1476, 1329, 1476, 1476, 1476,
     1476, 1477, 1328, 1326, 1477, 1477, 1477, 1478, 1324, 1323,
     1478, 1478, 1478, 1479, 1315, 1479, 1479, 1479, 1479, 1480,
     1314, 1312, 1480, 1480, 1480, 1481, 1311, 1309, 1481, 1481,

     1481, 1482, 1307, 1482, 1482, 1482, 1482, 1297, 1296, 1294,
     1293, 1291, 1289, 1281, 1277, 1274, 1272, 1270, 1269, 1268,
     1267, 1266, 1264, 1263, 1262, 1247, 1232, 1228, 1208, 1188,
     1182, 1181, 1180, 1179, 1178, 1177, 1176, 1175, 1174, 1173,
     1171, 1170, 1169, 1167, 1166, 1165, 1164, 1163, 1141, 1128,
     1118, 1095, 1070, 1066, 1065, 1064, 1063, 1062, 1061, 1060,
     1059, 1058, 1057, 1056, 1055, 1054, 1052, 1050, 1049, 1048,
     1047, 1046, 1043, 1026,  974,  943,  932,  931,  930,  929,
      928,  927,  926,  925,  924,  923,  921,  920,  919,  918,
      917,  915,  914,  913,  911,  910,  909,  907,  906,  898,

      883,  865,  853,  837,  822,  804,  789,  777,  775,  773,
      772,  771,  769,  768,  766,  765,  764,  763,  762,  761,
      760,  759,  757,  753,  752,  751,  750,  749,  747,  746,
      745,  744,  743,  734,  709,  700,  675,  666,  641,  632,
      617,  607,  605,  604,  603,  602,  601,  600,  599,  598,
      596,  595,  594,  593,  592,  591,  590,  589,  588,  587,
      586,  584,  583,  582,  581,  580,  579,  578,  577,  576,
      575,  574,  573,  571,  569,  538,  535,  532,  498,  496,
      465,  462,  459,  433,  426,  424,  423,  422,  421,  419,
      418,  417,  416,  415,  414,  413,  412,  411,  410,  409,

      408,  407,  406,  405,  404,  403,  402,  401,  400,  399,
      398,  397,  396,  395,  394,  393,  391,  375,  373,  363,
      358,  324,  323,  320,  316,  300,  298,  288,  248,  242,
      241,  238,  235,  231,  230,  226,  225,  224,  222,  221,
      220,  219,  218,  217,  216,  214,  213,  212,  211,  210,
      209,  208,  207,  205,  202,  201,  199,  181,  170,  164,
      136,  135,  133,  115,  104,   80,   63,   59,   56,   52,
       45,   44,   43,   42,   41,   39,   38,   36,   34,   33,
       32,   31,   30,   29,   27,   26,   25,   23,   17,   13,
     1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459,

     1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459,
     1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459,
     1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459,
     1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459,
     1459, 1459, 1459, 1459, 1459, 1459, 1459
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[74] =
    {   0,
0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#line 2 "levcomp.lpp"

// levcomp.l:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
// 
// Based loosely on NetHack's lev_comp.l

#include "AppHdr.h"
#include "levcomp.tab.h"
#include <cstring>
#include <queue>

static bool alloced = false;

std::queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(20);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

static void settext()
{
    clean();
    if ((yylval.text = strdup(yytext)))
        alloced = true;
}






#line 1705 "levcomp.lex.cc"

#define INITIAL 0
#define MAPDEF 1
#define ARGUMENT 2
#define MNAME 3
#define KEYWORDS 4
#define ITEM_LIST 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 61 "levcomp.lpp"


#line 1869 "levcomp.lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1460 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1459 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 63 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 65 "levcomp.lpp"
{
                        settext();
                        return MAP_LINE;
                    }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 70 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 71 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 72 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 74 "levcomp.lpp"
;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 76 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 81 "levcomp.lpp"
;
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 82 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 84 "levcomp.lpp"
{ 
                        settext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 89 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 90 "levcomp.lpp"
;
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 91 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 93 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 95 "levcomp.lpp"
{ 
                        settext();
                        return MONSTER_NAME; 
                    }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 100 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 101 "levcomp.lpp"
;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 103 "levcomp.lpp"
{ 
                        BEGIN(INITIAL);
                        settext();
                        return STRING; 
                    }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 109 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 111 "levcomp.lpp"
;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 113 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 116 "levcomp.lpp"
{ BEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 117 "levcomp.lpp"
return DEFAULT_DEPTH;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 118 "levcomp.lpp"
return DEPTH;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 119 "levcomp.lpp"
return ORIENT;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 120 "levcomp.lpp"
{ BEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 121 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 122 "levcomp.lpp"
return FLAGS;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 123 "levcomp.lpp"
{ BEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 124 "levcomp.lpp"
{ BEGIN(ARGUMENT); return SUBST; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 125 "levcomp.lpp"
{ BEGIN(MNAME); return MONS; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 126 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 127 "levcomp.lpp"
{ BEGIN(ARGUMENT); return SHUFFLE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 129 "levcomp.lpp"
return BRANCH;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 130 "levcomp.lpp"
return DEFAULT;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 131 "levcomp.lpp"
return DESC;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 132 "levcomp.lpp"
return BRANCH;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 133 "levcomp.lpp"
return ROOT_DEPTH;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 134 "levcomp.lpp"
return FLOOR_COLOUR;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 135 "levcomp.lpp"
return ROCK_COLOUR;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 137 "levcomp.lpp"
return LEVEL;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 138 "levcomp.lpp"
return END;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 139 "levcomp.lpp"
return PVAULT;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 140 "levcomp.lpp"
return PMINIVAULT;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 142 "levcomp.lpp"
{ BEGIN(ARGUMENT); return ENTRY_MSG; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 143 "levcomp.lpp"
{ BEGIN(ARGUMENT); return EXIT_MSG; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 145 "levcomp.lpp"
return MONSTERS;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 146 "levcomp.lpp"
return ENDMONSTERS;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 149 "levcomp.lpp"
return PANDEMONIC;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 150 "levcomp.lpp"
return NO_HMIRROR;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 151 "levcomp.lpp"
return NO_VMIRROR;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 152 "levcomp.lpp"
return NO_ROTATE;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 154 "levcomp.lpp"
return ENCOMPASS;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 155 "levcomp.lpp"
return NORTH;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 156 "levcomp.lpp"
return SOUTH;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 157 "levcomp.lpp"
return EAST;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 158 "levcomp.lpp"
return WEST;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 159 "levcomp.lpp"
return NORTHEAST;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 160 "levcomp.lpp"
return NORTHWEST;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 161 "levcomp.lpp"
return SOUTHEAST;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 162 "levcomp.lpp"
return SOUTHWEST;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 163 "levcomp.lpp"
return FLOAT;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 165 "levcomp.lpp"
return DASH;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 166 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 168 "levcomp.lpp"
{
                        clean();
                        yylval.i = atoi(yytext);
                        return INTEGER;
                    }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 174 "levcomp.lpp"
;
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 175 "levcomp.lpp"
;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 177 "levcomp.lpp"
return OPAREN;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 178 "levcomp.lpp"
return CPAREN;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 180 "levcomp.lpp"
return QUOTE;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 182 "levcomp.lpp"
{
                        settext();
                        return IDENTIFIER;
                    }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 187 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 189 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 2354 "levcomp.lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MAPDEF):
case YY_STATE_EOF(ARGUMENT):
case YY_STATE_EOF(MNAME):
case YY_STATE_EOF(KEYWORDS):
case YY_STATE_EOF(ITEM_LIST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1460 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1460 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1459);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 189 "levcomp.lpp"



int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}

