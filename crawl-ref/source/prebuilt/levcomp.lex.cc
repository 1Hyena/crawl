#line 2 "levcomp.lex.cc"

#line 4 "levcomp.lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 34
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 * Given that the standard has decreed that size_t exists since 1989,
 * I guess we can afford to depend on it. Manoj.
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 75
#define YY_END_OF_BUFFER 76
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[974] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   76,   74,   71,   72,
       73,   69,   74,   67,   70,   68,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   71,   34,   36,   74,   74,   74,   74,   74,
       74,   75,    6,   75,   75,    4,    2,    3,   75,    2,
        2,    2,    2,    9,   10,   75,    9,    9,   75,   12,
       75,   32,   71,   33,   73,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   71,   32,   32,

       32,   32,   32,   32,   32,   32,   74,   28,   23,   28,
       69,   74,   27,   70,   68,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   28,   34,   36,   74,   74,   74,   74,   74,
       74,   15,   16,   73,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   74,   13,   15,   13,   13,   13,   13,   13,
       75,   21,   22,   75,   20,   75,   71,   72,   70,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   71,   34,   36,    0,    0,    0,    0,   34,    0,
        0,    0,    0,    0,    0,    0,   39,    6,    5,    0,
        0,    2,    3,    2,    0,    2,    2,    2,    2,    9,
        9,   10,    9,    9,    9,    0,   11,    0,   12,   31,
        0,   31,   71,   33,    0,    0,   33,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,    0,
       30,   31,   71,   31,   34,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   26,    0,   26,   28,   23,   28,
        0,   23,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,    0,   25,    0,   26,   28,   26,
       34,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       15,   16,    0,    0,    0,   16,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,    0,
       14,   13,   15,   13,   13,   13,   13,   13,   13,   13,
       19,    0,   19,   21,   22,    0,    0,    0,    0,   18,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    2,    9,    9,    9,    7,    0,    0,   29,
        0,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   34,   31,   31,   31,
       31,   31,   31,    0,   24,    0,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   34,   34,   26,   26,   26,   26,   26,   26,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
        0,   17,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   35,
        0,    0,    0,    0,    0,    2,    9,    8,    0,    9,
        7,    0,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,    0,    0,   31,
       31,   31,   31,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,    0,    0,
       26,   26,   26,   26,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,    0,    0,    0,    0,    0,    0,   60,    0,
        0,    0,    0,    0,    0,   59,   42,    0,    0,    0,
        0,    0,    0,   51,    0,    0,    0,   38,    0,    0,
        0,    0,    2,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,    0,   31,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,    0,   26,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,    0,    0,    0,   44,
       50,    0,   63,   64,   66,   65,    0,    0,    0,    0,
       46,    0,    0,   54,    0,    0,    0,    0,    0,   41,
        1,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   53,   48,   56,    0,   52,   61,
       55,   45,    0,    0,   49,    0,    0,    0,    0,    1,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       13,   13,   13,   13,   13,   13,   13,    0,   58,   62,
       47,    0,    0,    0,    0,   31,   31,   31,   31,   31,
        0,   31,   31,   26,   26,   26,   26,   26,    0,   26,
       26,   13,   13,   13,   57,    0,   37,    0,    0,   31,
       31,   31,    0,   31,   26,   26,   26,    0,   26,   13,
        0,   40,   31,   31,   26,   26,   13,    0,   31,   26,
       13,    0,   31,   26,   13,    0,   31,   26,   13,   43,
       31,   26,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    6,    1,    7,    1,    1,    1,
        1,    1,    8,    9,   10,    1,    1,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   12,    1,    1,
        1,    1,    1,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       22,   29,   30,   31,   32,   22,   33,   22,   22,   22,
        1,   34,    1,    1,   22,    1,   35,   22,   22,   36,

       37,   38,   22,   39,   40,   22,   22,   41,   22,   22,
       42,   43,   22,   44,   45,   46,   47,   48,   22,   22,
       22,   22,   49,    1,   50,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[51] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    1,    5,    6,
        6,    1,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    1,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    1,    1
    } ;

static yyconst flex_int16_t yy_base[991] =
    {   0,
        0,   49,   53,   60,   64,   66,   49,   68,  116,  165,
      214,  263,  312,  361,   76,  170, 2035, 3243,   71, 3243,
     2031, 3243, 2007, 3243, 2006, 3243, 1998,   55, 1996, 1985,
     1967,   66, 1975,   73,   76, 1959, 1960, 1951,   63, 1955,
     1937, 1915,  409,    0, 3243,   75, 1900, 1900,   68,   64,
     1894, 3243, 3243, 1935,  177, 3243,    0, 3243, 1934,  181,
        0, 1906,  151, 1878, 3243, 1924,   58, 1869,  184, 3243,
     1914,  268,  275, 3243,  366,  373,  378,  383,  388,  392,
      414,  426,  432,  437,  460,  465,  470,  474,  480,  493,
      501,  507,  511,  515,  519,  535,  528,  552,  542,  546,

      562,  556,  566,  577,  583,  589,  269,  602, 3243,  610,
      374,  422, 3243,  590,  379,  614,  623,  624,  625,  629,
      649,  635,  659,  660,  637,  673,  650,  680,  674,  686,
      713,  687,  723,  697,  708,  717,  727,  731,  733,  735,
      743,  750, 3243,  777, 1898, 1896,    0, 1886,  149, 1884,
     1867, 1859,  173, 1871,  165,  182, 1854, 1857, 1850,  169,
     1863, 1858,  279, 1834,  783,  180, 1820, 1817,  241,  162,
      757,  791, 3243,  795, 3243,  799,  102, 3243, 1846, 1824,
     1833, 1789, 1784,  263, 1794, 1790, 1775,  272, 1781, 1773,
     1775, 1775, 1766, 1776, 1778, 1751, 1733, 1750, 1738,   91,

     1718,    0,    0, 3243, 1704, 1703,  165, 1696,    0,  263,
     1707, 1703, 1724,  242, 1694, 1685, 3243, 3243, 3243, 1725,
      290,    0, 3243,    0, 1724,  293, 1695, 1681,  378, 1647,
     1646, 3243,  255, 1642,  803,  361, 3243, 1687, 3243,  808,
      814,  818,  832, 3243,  836,  841, 3243,  845,  853,  858,
      870,  863,  876,  881,  891,  897,  907,  912,  919,  925,
      933,  938,  945,  950,  960,  969,  976,  981,  987,  993,
     3243, 1000,    0, 1012, 1018, 1026, 1035, 1031, 1039, 1043,
     1049, 1057, 1053, 1066,  825,  871, 1076, 1099, 3243, 1103,
     1109, 3243, 1084, 1091, 1114, 1115, 1119, 1127, 1121, 1126,

     1139, 1154, 1140, 1160, 1161, 1166, 1167, 1175, 1173, 1177,
     1188, 1200, 1208, 1214, 1221, 3243, 1226, 1213,    0, 1235,
     1241, 1254, 1262, 1231, 1247, 1266, 1268, 1275, 1280, 1281,
     1301, 3243, 1315, 1319, 1293, 3243,    0, 1662, 1636, 1640,
     1614, 1602,  378, 1606, 1605, 1575,  416, 1578, 1567, 1555,
     1547, 1539, 1549, 1552, 1549, 1531, 1546, 1526,  286, 1326,
     3243, 1502,    0,  416, 1496, 1487, 1510,  395, 1473, 1463,
     1305, 1306, 1339, 1343, 3243, 1348, 1352, 1332, 1356, 3243,
     1360, 1495, 1476, 1473, 1467, 1477, 1467, 1467, 1470, 1463,
     1445, 1448, 1449, 1435, 1419, 1429, 1428, 1424, 1419, 1410,

     1405, 1387, 1386, 1394, 1394, 1364, 1365,  524, 1348, 1360,
     1347, 1334, 1350, 1376, 1381, 1389, 3243, 1393, 1398, 3243,
     1402, 1406, 1410, 1416, 1420, 1433, 1443, 1451, 1455, 1461,
     1467, 1477, 1486, 1482, 1502, 1508, 1513, 1517, 1524, 1533,
     1539, 1544, 1550, 1557, 1564, 1581, 1585, 1590, 1595, 1599,
     1603, 1607, 1616, 1623, 3243, 1425, 1630, 1608, 1548, 1634,
     1643, 1644, 1649, 1650, 1664, 1665, 1654, 1674, 1670, 1680,
     1684, 1459, 1689, 1698, 1707, 1715, 1714, 1720, 1719, 1700,
     1724, 1758, 1766, 1770, 1750, 1774, 1775, 1776, 1780, 1361,
     1346, 1344, 1307, 1314, 1305, 1300, 1299, 1284, 1269, 1268,

     1279, 1266, 1257, 1261, 1262, 1257, 1257, 1239, 1243, 1230,
     1224, 1234, 1226, 1197, 1784,  572, 1180, 1189, 1172, 1166,
     1791, 3243, 1815, 1187, 1189, 1171, 1178, 1167, 1156, 1172,
     1152, 1151, 1135, 1127, 1133, 1134, 1138, 1134, 1106, 1109,
     1117, 1115, 1104, 1078, 1085, 1072, 1063, 1041, 1824, 3243,
      741, 1036, 1037, 1046,  766, 1062, 1828, 3243, 1832, 1836,
     3243, 1840, 1845, 1850, 1819, 1854, 1864, 1858, 1868, 1891,
     1895, 1901, 1906, 1911, 1929, 1937, 1946, 1951, 1957, 1962,
     1971, 1985, 1990, 1995, 2006, 2010, 2018, 2028, 2023, 2034,
     2041, 2045, 2051, 2058, 1967, 1880, 2046, 1972, 2062, 2082,

     2068, 2084, 2088, 2093, 2101, 2102, 2103, 2112, 2108, 2123,
     2124, 2128, 2129, 2143, 2148, 2149, 2154, 2150, 2162, 2166,
     2168, 2173, 2174, 2184, 1053, 1052, 1018, 1029, 1012, 1003,
     1014,  994,  999,  996,  988,  994,  995,  997,  995,  976,
      973,  976,  973,  969,  951,  965,  956,  942,  921,  914,
      924, 1528,  927,  939,  916,  932,  927,  918, 3243,  920,
      914,  910,  907,  888,  884, 3243, 3243,  876,  875,  888,
      863,  864,  872, 3243,  851,  844,  823, 3243,  825,  819,
     1612,  802,  804, 2189, 2207, 2201, 2224, 2235, 2240, 2244,
     2248, 2252, 2261, 2275, 2266, 2279, 2257, 2288, 2297, 2301,

     2312, 2316, 2321, 2325, 2334, 2347, 2352, 2356, 2360, 2365,
     2369, 2378, 2383, 2310, 2374, 2193, 2390, 2404, 2270, 2391,
     2408, 2409, 2417, 2421, 2426, 2432, 2413, 2434, 2439, 2443,
     2447, 2448, 2452, 2460, 2462, 2478, 2482, 2483, 2487, 2493,
     2488, 2497, 2498,  801,  811,  797,  812,  802,  794,  777,
      771,  764,  761,  736,  735,  732,  729,  744,  723,  725,
      729,  708,  709,  682,  675,  674,  693,  692,  686, 3243,
     3243,  669, 3243, 3243, 3243, 3243,  683,  669,  668,  656,
     3243,  632,  630, 3243,  634,  628,  589,  596,  563, 3243,
      603, 2506, 2531, 2537, 2546, 2550, 2554, 2558, 2562, 2568,

     2572, 2581, 2585, 2596, 2605, 2609, 2616, 2620, 2624, 2629,
     2640, 2644, 2651, 2657, 2662, 2663, 2667, 2668, 2523, 2589,
     2679, 2681, 2687, 2693, 2702, 2706, 2707, 2712, 2718, 2720,
     2724, 2726, 2730, 2732, 2740, 2745, 2751, 2760, 2765,  587,
      586,  585,  557,  571,  566,  560,  551,  535,  535,  530,
      501,  461,  465,  454, 3243, 3243, 3243,  472, 3243, 3243,
     3243, 3243,  480,  477, 3243,  469,  470, 1734,  440,  468,
     2767, 2771, 2776, 2785, 2791, 2798, 2809, 2813, 2818, 2822,
     2831, 2836, 2840, 2849, 2853, 2826, 2844, 2857, 2861, 2859,
     2866, 2867, 2871, 2877, 2892, 2875, 2894, 2905, 2911, 2912,

      444,  451,  447,  443,  444, 1741,  414,  435, 3243, 3243,
     3243,  402, 1916,  386, 1921, 2917, 2928, 2932, 2936, 2948,
     2952, 2959, 2963, 2969, 2942, 2953, 2970, 2975, 2983, 2987,
     2989,  413,  367, 1955, 3243,  364, 3243, 2185,  349, 2994,
     3011, 3020, 3025, 3029, 3005, 3035, 3039, 3041, 3045,  337,
      329, 3243, 3053, 3047, 3059, 3051,  258,  243, 3063, 3078,
      165,  170, 3084, 3093,  166,  191, 3099, 3103,   84, 3243,
     3112, 3105, 3243, 3146, 3152, 3158, 3164, 3170, 3176, 3182,
     3188, 3194, 3200, 3206, 3212, 3218, 3224, 3230,   54, 3236
    } ;

static yyconst flex_int16_t yy_def[991] =
    {   0,
      973,    1,  974,  975,  976,  976,  977,  977,  973,    9,
      973,   11,  973,   13,  978,  978,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  979,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  980,  973,  981,  973,  973,  982,
      981,  981,  981,  983,  973,  973,  983,  983,  984,  973,
      973,  985,  973,  973,  973,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,   43,  986,  985,

      985,  985,  985,  985,  985,  985,  987,  973,  973,  973,
      987,  987,  973,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,   43,  988,  987,  987,  987,  987,  987,  987,
      987,  973,  973,  973,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  973,  989,   43,  989,  989,  989,  989,  989,
      990,  973,  973,  973,  973,  990,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,

      973,   43,  979,  973,  973,  973,  973,  973,  979,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  981,  973,  981,  973,  981,  981,  981,  981,  983,
      983,  973,  983,  983,  983,  984,  973,  973,  973,  985,
      985,  985,  973,  973,  973,  973,  973,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      973,  985,   98,  986,  986,  986,  985,  985,  985,  985,
      985,  985,  985,  985,  987,  987,  987,  973,  973,  973,
      973,  973,  987,  987,  987,  987,  987,  987,  987,  987,

      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  973,  973,  987,  133,  988,
      988,  988,  987,  987,  987,  987,  987,  987,  987,  987,
      973,  973,  973,  973,  973,  973,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  973,
      973,  989,  165,  989,  989,  989,  989,  989,  989,  989,
      990,  990,  990,  973,  973,  973,  973,  973,  990,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,

      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  981,  983,  983,  983,  973,  973,  985,  973,
      973,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  986,  985,  985,  985,
      985,  985,  985,  987,  973,  973,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  988,  979,  987,  987,  987,  987,  987,  987,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,

      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      990,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  981,  983,  973,  973,  983,
      973,  973,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  987,  987,  987,  987,  987,  987,  987,

      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  981,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,

      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      981,  985,  985,  985,  985,  985,  985,  985,  985,  985,

      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  981,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,

      989,  989,  989,  989,  989,  989,  989,  973,  973,  973,
      973,  973,  973,  973,  973,  985,  985,  985,  985,  985,
      985,  985,  985,  987,  987,  987,  987,  987,  987,  987,
      987,  989,  989,  989,  973,  973,  973,  973,  973,  985,
      985,  985,  985,  985,  987,  987,  987,  987,  987,  989,
      973,  973,  985,  985,  987,  987,  989,  973,  985,  987,
      989,  973,  985,  987,  989,  973,  985,  987,  989,  973,
      985,  987,    0,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973
    } ;

static yyconst flex_int16_t yy_nxt[3294] =
    {   0,
       18,   19,   20,   21,   19,   18,   22,   23,   24,   23,
       25,   26,   18,   27,   28,   29,   18,   30,   18,   18,
       31,   18,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   18,   41,   18,   18,   42,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       43,   70,   71,   43,   44,   53,   54,   55,   56,  337,
       45,   52,   58,   59,   60,   61,   65,   66,   65,   66,
       70,   71,  177,   46,  181,  177,   62,  172,  173,  174,
      172,  182,  197,  186,  175,  190,  187,  210,  192,   47,
      188,   48,  213,   49,  198,  970,   50,   51,  215,  191,

      216,  191,  233,  177,   63,  193,  177,  234,   67,  176,
       67,  404,  214,   68,  405,   68,   72,   73,   74,   75,
       73,   72,   76,   77,   78,   77,   79,   80,   72,   81,
       82,   83,   72,   84,   72,   72,   85,   72,   86,   87,
       88,   89,   90,   91,   92,   93,   94,   72,   95,   96,
       72,   97,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   98,  228,  340,   98,
       99,  172,  173,  174,  172,  341,  100,  349,  175,  218,
      220,  221,  219,  223,  225,  226,  237,  238,  356,  101,
      345,  350,  364,  346,  351,  229,  369,  347,  370,  215,

      357,  216,  970,  176,  969,  102,  350,  103,  966,  104,
      965,  352,  105,  106,  107,  108,  109,  110,  108,  107,
      111,  112,  113,  112,  114,  115,  107,  116,  117,  118,
      107,  119,  107,  107,  120,  107,  121,  122,  123,  124,
      125,  126,  127,  128,  129,  107,  130,  131,  107,  132,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  133,  367,  213,  133,  134,  241,
      286,  241,  241,  286,  135,  386,  243,  244,  245,  243,
      360,  361,  360,  360,  391,  368,  214,  136,  962,  387,
      407,  394,  218,  220,  221,  223,  225,  226,  392,  233,

      961,  242,  287,  137,  234,  138,  512,  139,  246,  513,
      140,  141,   18,  142,  143,  144,  142,   18,   22,   23,
       24,  145,  146,   26,  147,  148,  149,  150,  147,  151,
      147,  147,  152,  147,  153,  154,  155,  156,  157,  158,
      159,  160,  161,  147,  162,  163,  147,  164,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
       18,   18,  165,  237,  238,  165,   44,  245,  247,  245,
      245,  958,   45,  957,  241,  286,  241,  241,  286,  241,
      286,  241,  241,  286,  241,  166,  241,  241,  248,  241,
      494,  241,  241,  241,  228,  241,  241,  952,  248,  246,

      951,  167,  950,  168,  495,  169,  242,  287,  170,   51,
      202,  242,  287,  202,  203,  241,  242,  241,  241,  367,
      204,  242,  229,  286,  935,  242,  286,  241,  499,  241,
      241,  249,  293,  241,  937,  241,  241,  936,  241,  368,
      241,  241,  500,  515,  502,  250,  935,  242,  252,  205,
      934,  206,  251,  933,  911,  287,  207,  208,  910,  242,
      253,  241,  909,  241,  241,  242,  241,  932,  241,  241,
      242,  241,  870,  241,  241,  241,  915,  241,  241,  912,
      911,  241,  255,  241,  241,  256,  259,  258,  910,  257,
      254,  909,  261,  242,  241,  908,  241,  241,  242,  907,

      260,  906,  241,  242,  241,  241,  905,  242,  241,  262,
      241,  241,  241,  242,  241,  241,  241,  904,  241,  241,
      241,  263,  241,  241,  264,  551,  242,  268,  551,  241,
      266,  241,  241,  265,  242,  269,  270,  271,  270,  270,
      242,  865,  267,  275,  242,  275,  275,  241,  242,  241,
      241,  903,  242,  273,  244,  245,  273,  241,  902,  241,
      241,  242,  862,  241,  272,  241,  241,  241,  242,  241,
      241,  861,  552,  551,  277,  276,  551,  860,  241,  242,
      241,  241,  859,  901,  241,  246,  241,  241,  260,  242,
      241,  286,  241,  241,  286,  242,  857,  856,  855,  242,

      293,  280,  278,  288,  289,  290,  288,  870,  869,  279,
      242,  290,  292,  290,  290,  286,  242,  282,  286,  283,
      552,  281,  242,  287,  286,  286,  286,  286,  286,  286,
      286,  294,  868,  286,  867,  291,  286,  284,  286,  286,
      297,  286,  295,  291,  866,  865,  864,  287,  298,  296,
      286,  286,  303,  286,  286,  863,  287,  287,  287,  299,
      286,  286,  287,  286,  286,  308,  300,  862,  287,  301,
      287,  304,  306,  302,  286,  286,  310,  286,  286,  861,
      860,  286,  287,  287,  286,  305,  313,  286,  286,  307,
      286,  286,  287,  287,  859,  858,  309,  857,  321,  311,

      209,  321,  314,  856,  855,  209,  287,  287,  854,  286,
      853,  312,  286,  287,  315,  316,  317,  315,  286,  287,
      287,  286,  852,  318,  319,  289,  290,  319,  286,  323,
      322,  286,  286,  851,  286,  286,  286,  286,  850,  286,
      784,  287,  551,  305,  286,  551,  287,  286,  849,  848,
      287,  331,  332,  333,  331,  781,  291,  326,  372,  847,
      287,  372,  846,  845,  287,  844,  287,  681,  287,  328,
      681,  329,  776,  324,  325,  775,  287,  327,  335,  336,
      335,  335,  774,  334,  363,  332,  333,  363,  773,  552,
      373,  330,  374,  375,  376,  374,  378,  375,  378,  378,

      379,  380,  381,  379,  416,  417,  418,  416,  843,  241,
      334,  241,  241,  771,  682,  241,  334,  241,  241,  419,
      420,  419,  419,  770,  377,  842,  286,  841,  377,  286,
      840,  791,  373,  243,  244,  245,  243,  245,  244,  245,
      245,  242,  421,  271,  421,  421,  241,  242,  241,  241,
      790,  242,  414,  789,  241,  248,  241,  241,  287,  241,
      788,  241,  241,  787,  241,  246,  241,  241,  786,  246,
      423,  241,  286,  241,  241,  286,  422,  241,  242,  241,
      241,  785,  241,  784,  241,  241,  242,  783,  426,  782,
      425,  242,  241,  424,  241,  241,  242,  428,  241,  781,

      241,  241,  427,  242,  287,  780,  779,  429,  241,  242,
      241,  241,  778,  241,  242,  241,  241,  777,  776,  431,
      241,  775,  241,  241,  242,  774,  241,  430,  241,  241,
      242,  773,  772,  432,  241,  433,  241,  241,  771,  241,
      242,  241,  241,  770,  769,  242,  241,  434,  241,  241,
      435,  241,  242,  241,  241,  768,  767,  436,  242,  766,
      765,  241,  439,  241,  241,  438,  242,  764,  763,  437,
      241,  242,  241,  241,  440,  762,  674,  241,  242,  241,
      241,  761,  241,  242,  241,  241,  760,  759,  241,  442,
      241,  241,  758,  242,  270,  271,  270,  270,  757,  443,

      441,  241,  242,  241,  241,  756,  667,  444,  666,  242,
      445,  755,  754,  275,  242,  275,  275,  753,  752,  275,
      242,  275,  275,  751,  750,  659,  242,  447,  420,  447,
      447,  749,  241,  242,  241,  241,  241,  446,  241,  241,
      241,  748,  241,  241,  241,  276,  241,  241,  747,  746,
      241,  276,  241,  241,  241,  451,  241,  241,  241,  276,
      241,  241,  448,  434,  242,  449,  745,  241,  242,  241,
      241,  744,  242,  280,  683,  450,  242,  454,  455,  456,
      454,  680,  242,  679,  678,  286,  242,  677,  286,  676,
      242,  675,  286,  281,  293,  286,  674,  452,  453,  242,

      288,  289,  290,  288,  290,  289,  290,  290,  673,  287,
      317,  316,  317,  317,  457,  286,  286,  287,  286,  286,
      286,  672,  286,  286,  287,  286,  458,  286,  286,  671,
      286,  286,  291,  670,  669,  668,  291,  463,  459,  461,
      286,  286,  464,  286,  286,  667,  460,  287,  287,  666,
      665,  664,  287,  462,  287,  286,  663,  662,  286,  287,
      287,  286,  286,  468,  286,  286,  466,  286,  286,  465,
      286,  286,  287,  287,  286,  661,  286,  286,  286,  286,
      467,  286,  660,  659,  658,  474,  470,  287,  469,  286,
      471,  475,  286,  287,  287,  473,  657,  656,  472,  287,

      287,  286,  655,  654,  286,  653,  287,  652,  287,  286,
      287,  651,  286,  477,  286,  286,  515,  286,  286,  476,
      650,  287,  315,  316,  317,  315,  478,  317,  316,  317,
      317,  649,  286,  287,  479,  286,  321,  480,  209,  321,
      648,  287,  321,  209,  209,  321,  287,  287,  286,  209,
      481,  286,  647,  646,  287,  482,  455,  483,  482,  645,
      644,  643,  209,  286,  287,  485,  286,  286,  322,  286,
      286,  642,  286,  641,  322,  640,  286,  639,  487,  286,
      287,  286,  286,  486,  286,  286,  638,  322,  637,  484,
      469,  636,  326,  635,  335,  287,  335,  335,  634,  287,

      633,  287,  331,  332,  333,  331,  372,  372,  287,  372,
      372,  632,  327,  287,  287,  488,  335,  332,  335,  335,
      360,  361,  360,  360,  631,  489,  334,  360,  361,  360,
      360,  630,  629,  378,  334,  378,  378,  628,  373,  373,
      521,  522,  523,  521,  374,  375,  376,  374,  334,  378,
      375,  378,  378,  381,  380,  381,  381,  379,  380,  381,
      379,  381,  380,  381,  381,  377,  549,  550,  549,  549,
      627,  626,  373,  625,  556,  555,  377,  557,  558,  559,
      557,  377,  560,  561,  562,  560,  554,  407,  553,  373,
      416,  417,  418,  416,  418,  417,  418,  418,  548,  419,

      420,  419,  419,  421,  271,  421,  421,  241,  547,  241,
      241,  241,  546,  241,  241,  545,  544,  241,  563,  241,
      241,  241,  543,  241,  241,  414,  456,  455,  456,  456,
      414,  242,  542,  541,  241,  564,  241,  241,  231,  242,
      540,  539,  565,  242,  241,  538,  241,  241,  537,  242,
      566,  567,  241,  242,  241,  241,  241,  536,  241,  241,
      286,  535,  241,  286,  241,  241,  242,  570,  241,  568,
      241,  241,  609,  534,  533,  569,  242,  571,  241,  532,
      241,  241,  531,  241,  242,  241,  241,  241,  242,  241,
      241,  530,  287,  529,  242,  528,  572,  527,  574,  526,

      242,  525,  573,  241,  575,  241,  241,  524,  520,  241,
      242,  241,  241,  519,  241,  242,  241,  241,  241,  242,
      241,  241,  518,  517,  577,  241,  578,  241,  241,  681,
      516,  576,  681,  579,  241,  242,  241,  241,  580,  514,
      241,  242,  241,  241,  511,  241,  242,  241,  241,  286,
      242,  241,  286,  241,  241,  581,  582,  242,  241,  510,
      241,  241,  509,  508,  507,  241,  242,  241,  241,  506,
      505,  504,  242,  583,  596,  585,  682,  242,  586,  584,
      503,  287,  241,  242,  241,  241,  447,  420,  447,  447,
      242,  588,  550,  588,  588,  502,  589,  242,  241,  589,

      241,  501,  241,  241,  241,  498,  241,  241,  241,  286,
      241,  241,  286,  681,  242,  587,  681,  241,  276,  241,
      241,  497,  496,  242,  454,  455,  456,  454,  242,  493,
      448,  286,  242,  595,  286,  286,  242,  492,  286,  591,
      242,  287,  594,  590,  286,  286,  592,  286,  286,  242,
      286,  286,  491,  286,  286,  286,  287,  593,  286,  490,
      682,  598,  601,  287,  597,  286,  286,  287,  286,  286,
      599,  286,  338,  600,  286,  286,  287,  287,  286,  604,
      602,  286,  287,  287,  286,  286,  605,  287,  286,  237,
      286,  415,  606,  286,  603,  414,  231,  287,  287,  286,

      608,  286,  286,  287,  286,  610,  227,  287,  286,  607,
      413,  286,  611,  287,  617,  286,  286,  287,  286,  286,
      286,  286,  287,  286,  286,  286,  223,  218,  286,  612,
      412,  287,  613,  287,  411,  913,  410,  616,  913,  409,
      287,  408,  913,  614,  217,  913,  212,  287,  287,  615,
      211,  620,  287,  287,  620,  406,  403,  287,  618,  482,
      455,  483,  482,  402,  401,  400,  209,  483,  455,  483,
      483,  619,  550,  549,  619,  286,  286,  286,  286,  286,
      286,  286,  914,  287,  286,  549,  550,  549,  549,  914,
      399,  322,  521,  522,  523,  521,  398,  397,  621,  396,

      395,  394,  484,  287,  393,  390,  389,  287,  287,  287,
      388,  385,  384,  287,  622,  623,  523,  522,  523,  523,
      241,  624,  241,  241,  373,  549,  550,  549,  549,  557,
      558,  559,  557,  559,  558,  559,  559,  560,  561,  562,
      560,  562,  561,  562,  562,  383,  241,  382,  241,  241,
      686,  241,  242,  241,  241,  241,  179,  241,  241,  241,
      366,  241,  241,  684,  685,  241,  365,  241,  241,  241,
      362,  241,  241,  687,  359,  358,  355,  231,  242,  690,
      354,  286,  353,  242,  286,  231,  689,  242,  348,  344,
      343,  242,  241,  688,  241,  241,  241,  242,  241,  241,

      342,  242,  241,  339,  241,  241,  338,  241,  338,  241,
      241,  716,  241,  287,  241,  241,  239,  913,  235,  692,
      913,  691,  938,  693,  242,  938,  232,  231,  242,  695,
      241,  227,  241,  241,  242,  694,  223,  218,  241,  242,
      241,  241,  217,  212,  242,  696,  211,  241,  697,  241,
      241,  201,  241,  200,  241,  241,  938,  698,  241,  938,
      241,  241,  242,  241,  914,  241,  241,  199,  286,  939,
      242,  286,  241,  286,  241,  241,  286,  196,  701,  242,
      699,  715,  700,  195,  242,  702,  241,  194,  241,  241,
      242,  241,  189,  241,  241,  242,  241,  185,  241,  241,

      287,  718,  703,  939,  242,  287,  705,  241,  184,  241,
      241,  241,  183,  241,  241,  180,  179,  179,  242,  241,
      704,  241,  241,  242,  589,  706,  241,  589,  242,  588,
      550,  588,  588,  178,  973,  241,  707,  241,  241,  242,
      973,  973,  241,  242,  241,  241,  241,  286,  241,  241,
      286,  242,  712,  973,  241,  712,  242,  973,  973,  286,
      973,  242,  286,  286,  708,  717,  286,  242,  973,  286,
      973,  590,  286,  973,  242,  973,  714,  973,  242,  287,
      711,  973,  709,  286,  242,  286,  286,  710,  286,  286,
      719,  287,  286,  720,  286,  287,  973,  286,  721,  713,

      973,  287,  286,  286,  286,  286,  286,  286,  722,  286,
      723,  973,  286,  286,  727,  287,  286,  287,  726,  725,
      973,  287,  724,  728,  286,  286,  287,  286,  286,  286,
      286,  973,  286,  286,  287,  287,  287,  729,  973,  973,
      731,  287,  732,  973,  286,  287,  733,  286,  730,  286,
      286,  286,  286,  286,  286,  286,  287,  287,  286,  735,
      973,  287,  287,  619,  550,  549,  619,  620,  736,  286,
      620,  973,  286,  734,  286,  286,  287,  286,  286,  973,
      737,  287,  287,  287,  973,  742,  938,  287,  742,  938,
      241,  973,  241,  241,  286,  287,  738,  286,  973,  287,

      973,  287,  241,  973,  241,  241,  287,  287,  241,  741,
      241,  241,  973,  973,  621,  973,  739,  287,  792,  740,
      973,  818,  242,  793,  973,  241,  287,  241,  241,  794,
      973,  973,  743,  939,  242,  795,  241,  973,  241,  241,
      242,  241,  973,  241,  241,  241,  796,  241,  241,  241,
      973,  241,  241,  241,  797,  241,  241,  242,  241,  798,
      241,  241,  241,  799,  241,  241,  973,  241,  242,  241,
      241,  286,  800,  242,  286,  973,  241,  242,  241,  241,
      241,  242,  241,  241,  821,  242,  801,  973,  973,  241,
      242,  241,  241,  973,  242,  802,  973,  973,  241,  242,

      241,  241,  241,  287,  241,  241,  973,  803,  242,  973,
      973,  286,  242,  241,  286,  241,  241,  241,  973,  241,
      241,  242,  241,  806,  241,  241,  241,  804,  241,  241,
      242,  805,  973,  973,  242,  241,  809,  241,  241,  816,
      973,  973,  807,  287,  808,  242,  973,  973,  241,  242,
      241,  241,  973,  241,  242,  241,  241,  241,  242,  241,
      241,  241,  973,  241,  241,  973,  241,  242,  241,  241,
      241,  973,  241,  241,  973,  286,  811,  810,  286,  712,
      242,  241,  712,  973,  241,  242,  241,  241,  973,  242,
      817,  286,  286,  242,  286,  286,  812,  973,  242,  973,

      813,  819,  242,  814,  973,  286,  973,  287,  286,  286,
      286,  242,  286,  286,  286,  820,  242,  286,  286,  822,
      823,  286,  286,  287,  287,  286,  713,  286,  824,  973,
      286,  815,  825,  286,  973,  286,  286,  287,  286,  973,
      286,  287,  287,  286,  286,  973,  287,  286,  286,  286,
      287,  286,  286,  286,  287,  826,  286,  973,  830,  287,
      827,  286,  973,  286,  286,  287,  286,  287,  973,  828,
      973,  833,  287,  829,  831,  832,  287,  973,  973,  286,
      287,  287,  286,  286,  286,  287,  286,  286,  286,  286,
      973,  286,  286,  287,  286,  287,  973,  286,  742,  286,

      973,  742,  286,  973,  973,  973,  835,  241,  834,  241,
      241,  287,  973,  973,  973,  287,  287,  871,  973,  973,
      287,  287,  838,  836,  286,  973,  287,  286,  837,  973,
      287,  287,  241,  973,  241,  241,  973,  973,  241,  242,
      241,  241,  872,  973,  973,  743,  839,  241,  873,  241,
      241,  241,  973,  241,  241,  241,  287,  241,  241,  241,
      973,  241,  241,  241,  242,  241,  241,  973,  973,  241,
      242,  241,  241,  241,  973,  241,  241,  973,  973,  242,
      874,  973,  241,  242,  241,  241,  241,  242,  241,  241,
      286,  242,  875,  286,  973,  242,  876,  241,  973,  241,

      241,  242,  973,  973,  973,  242,  241,  877,  241,  241,
      241,  973,  241,  241,  242,  973,  878,  241,  242,  241,
      241,  241,  287,  241,  241,  241,  973,  241,  241,  242,
      241,  973,  241,  241,  973,  973,  880,  973,  242,  879,
      881,  241,  242,  241,  241,  241,  973,  241,  241,  242,
      973,  973,  241,  242,  241,  241,  882,  242,  241,  973,
      241,  241,  242,  241,  286,  241,  241,  286,  286,  286,
      973,  286,  286,  242,  886,  973,  973,  242,  887,  888,
      286,  973,  286,  286,  242,  286,  973,  884,  286,  883,
      242,  286,  973,  973,  286,  242,  287,  286,  973,  973,

      287,  287,  885,  286,  973,  889,  286,  286,  286,  973,
      286,  286,  287,  286,  287,  973,  286,  890,  891,  286,
      287,  286,  286,  892,  286,  286,  287,  286,  286,  893,
      286,  286,  973,  286,  286,  287,  286,  973,  973,  287,
      287,  286,  895,  896,  286,  287,  286,  894,  973,  286,
      973,  287,  286,  287,  973,  286,  897,  287,  973,  287,
      973,  286,  973,  287,  286,  287,  286,  973,  241,  286,
      241,  241,  241,  287,  241,  241,  973,  241,  287,  241,
      241,  973,  973,  973,  287,  973,  241,  899,  241,  241,
      898,  973,  241,  287,  241,  241,  973,  973,  287,  241,

      242,  241,  241,  973,  242,  900,  973,  973,  916,  242,
      241,  973,  241,  241,  241,  973,  241,  241,  242,  241,
      973,  241,  241,  241,  242,  241,  241,  286,  973,  917,
      286,  242,  241,  918,  241,  241,  973,  241,  973,  241,
      241,  241,  242,  241,  241,  286,  242,  919,  286,  920,
      921,  242,  241,  921,  241,  242,  241,  241,  286,  287,
      286,  286,  286,  286,  242,  286,  973,  286,  286,  242,
      286,  286,  286,  242,  973,  286,  286,  287,  286,  286,
      973,  286,  242,  973,  924,  973,  242,  973,  925,  923,
      287,  973,  287,  286,  287,  286,  286,  922,  286,  287,

      287,  973,  973,  926,  287,  927,  286,  973,  287,  286,
      287,  973,  929,  286,  928,  929,  286,  973,  241,  973,
      241,  241,  973,  973,  973,  287,  973,  287,  940,  241,
      973,  241,  241,  241,  973,  241,  241,  241,  287,  241,
      241,  973,  973,  286,  287,  287,  286,  973,  931,  241,
      242,  241,  241,  921,  286,  241,  921,  286,  973,  930,
      241,  242,  241,  241,  943,  242,  241,  943,  973,  242,
      286,  286,  973,  286,  286,  287,  286,  973,  973,  286,
      945,  242,  973,  941,  929,  242,  287,  929,  286,  973,
      948,  286,  242,  948,  973,  241,  242,  241,  241,  973,

      922,  973,  287,  287,  973,  973,  286,  942,  287,  286,
      946,  944,  241,  973,  241,  241,  287,  973,  973,  973,
      287,  241,  287,  241,  241,  973,  943,  242,  241,  943,
      241,  930,  241,  241,  973,  947,  286,  949,  287,  286,
      286,  973,  948,  286,  242,  948,  286,  953,  241,  286,
      241,  241,  286,  242,  241,  286,  241,  241,  242,  973,
      286,  973,  242,  286,  241,  973,  241,  241,  287,  973,
      973,  955,  287,  944,  287,  973,  973,  954,  287,  286,
      242,  973,  286,  973,  287,  241,  242,  241,  241,  949,
      973,  973,  287,  956,  286,  959,  242,  286,  973,  973,

      241,  960,  241,  241,  286,  973,  286,  286,  963,  286,
      971,  287,  973,  241,  972,  241,  241,  242,  973,  973,
      973,  973,  967,  964,  973,  973,  287,  973,  973,  973,
      973,  968,  242,  973,  973,  973,  287,  973,  287,  973,
      973,  973,  973,  973,  973,  242,   52,   52,   52,   52,
       52,   52,   57,   57,   57,   57,   57,   57,   64,   64,
       64,   64,   64,   64,   69,   69,   69,   69,   69,   69,
      171,  171,  171,  171,  171,  171,  209,  209,  973,  209,
      209,  209,  219,  219,  219,  219,  219,  219,  222,  973,
      973,  973,  222,  222,  224,  224,  224,  224,  224,  224,

      230,  230,  973,  973,  230,  230,  236,  236,  236,  236,
      236,  236,  240,  240,  973,  240,  240,  240,  274,  274,
      973,  274,  274,  274,  285,  285,  973,  973,  973,  285,
      320,  320,  973,  320,  320,  320,  371,  371,  973,  973,
      973,  371,   17,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973

    } ;

static yyconst flex_int16_t yy_chk[3294] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    7,    7,    2,    2,    3,    3,    3,    3,  989,
        2,    4,    4,    4,    4,    4,    5,    5,    6,    6,
        8,    8,   19,    2,   28,   19,    4,   15,   15,   15,
       15,   28,   39,   32,   15,   34,   32,   46,   35,    2,
       32,    2,   49,    2,   39,  969,    2,    2,   50,   34,

       50,   46,   67,  177,    4,   35,  177,   67,    5,   15,
        6,  200,   49,    5,  200,    6,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,   10,   63,  149,   10,
       10,   16,   16,   16,   16,  149,   10,  155,   16,   55,
       55,   55,   60,   60,   60,   60,   69,   69,  160,   10,
      153,  155,  166,  153,  156,   63,  170,  153,  170,  207,

      160,  207,  966,   16,  965,   10,  166,   10,  962,   10,
      961,  156,   10,   10,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   12,  169,  214,   12,   12,   72,
      107,   72,   72,  107,   12,  184,   73,   73,   73,   73,
      163,  163,  163,  163,  188,  169,  214,   12,  958,  184,
      210,  210,  221,  221,  221,  226,  226,  226,  188,  233,

      957,   72,  107,   12,  233,   12,  359,   12,   73,  359,
       12,   12,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   14,  236,  236,   14,   14,   75,   75,   75,
       75,  951,   14,  950,   76,  111,   76,   76,  111,   77,
      115,   77,   77,  115,   78,   14,   78,   78,   77,   79,
      343,   79,   79,   80,  229,   80,   80,  939,   79,   75,

      936,   14,  933,   14,  343,   14,   76,  111,   14,   14,
       43,   77,  115,   43,   43,   81,   78,   81,   81,  368,
       43,   79,  229,  112,  932,   80,  112,   82,  347,   82,
       82,   81,  112,   83,  914,   83,   83,  912,   84,  368,
       84,   84,  347,  364,  364,   82,  908,   81,   83,   43,
      907,   43,   82,  905,  904,  112,   43,   43,  903,   82,
       84,   85,  902,   85,   85,   83,   86,  901,   86,   86,
       84,   87,  870,   87,   87,   88,  869,   88,   88,  867,
      866,   89,   86,   89,   89,   86,   88,   87,  864,   86,
       85,  863,   89,   85,   90,  858,   90,   90,   86,  854,

       88,  853,   91,   87,   91,   91,  852,   88,   92,   89,
       92,   92,   93,   89,   93,   93,   94,  851,   94,   94,
       95,   90,   95,   95,   91,  408,   90,   94,  408,   97,
       93,   97,   97,   92,   91,   95,   96,   96,   96,   96,
       92,  850,   93,   99,   93,   99,   99,  100,   94,  100,
      100,  849,   95,   98,   98,   98,   98,  102,  848,  102,
      102,   97,  847,  101,   97,  101,  101,  103,   96,  103,
      103,  846,  408,  516,  101,   99,  516,  845,  104,  100,
      104,  104,  844,  843,  105,   98,  105,  105,  101,  102,
      106,  114,  106,  106,  114,  101,  842,  841,  840,  103,

      114,  104,  102,  108,  108,  108,  108,  791,  789,  103,
      104,  110,  110,  110,  110,  116,  105,  105,  116,  105,
      516,  104,  106,  114,  117,  118,  119,  117,  118,  119,
      120,  116,  788,  120,  787,  108,  122,  106,  125,  122,
      118,  125,  117,  110,  786,  785,  783,  116,  119,  117,
      121,  127,  122,  121,  127,  782,  117,  118,  119,  120,
      123,  124,  120,  123,  124,  125,  121,  780,  122,  121,
      125,  123,  124,  121,  126,  129,  127,  126,  129,  779,
      778,  128,  121,  127,  128,  123,  129,  130,  132,  124,
      130,  132,  123,  124,  777,  772,  126,  769,  134,  128,

      134,  134,  130,  768,  767,  134,  126,  129,  766,  135,
      765,  128,  135,  128,  131,  131,  131,  131,  136,  130,
      132,  136,  764,  132,  133,  133,  133,  133,  137,  136,
      134,  137,  138,  763,  139,  138,  140,  139,  762,  140,
      761,  135,  551,  136,  141,  551,  131,  141,  760,  759,
      136,  142,  142,  142,  142,  758,  133,  139,  171,  757,
      137,  171,  756,  755,  138,  754,  139,  555,  140,  140,
      555,  140,  753,  137,  138,  752,  141,  139,  144,  144,
      144,  144,  751,  142,  165,  165,  165,  165,  750,  551,
      171,  141,  172,  172,  172,  172,  174,  174,  174,  174,

      176,  176,  176,  176,  235,  235,  235,  235,  749,  240,
      144,  240,  240,  748,  555,  241,  165,  241,  241,  242,
      242,  242,  242,  747,  172,  746,  285,  745,  174,  285,
      744,  683,  176,  243,  243,  243,  243,  245,  245,  245,
      245,  240,  246,  246,  246,  246,  248,  241,  248,  248,
      682,  242,  235,  680,  249,  248,  249,  249,  285,  250,
      679,  250,  250,  677,  252,  243,  252,  252,  676,  245,
      250,  251,  286,  251,  251,  286,  249,  253,  248,  253,
      253,  675,  254,  673,  254,  254,  249,  672,  253,  671,
      252,  250,  255,  251,  255,  255,  252,  254,  256,  670,

      256,  256,  253,  251,  286,  669,  668,  255,  257,  253,
      257,  257,  665,  258,  254,  258,  258,  664,  663,  257,
      259,  662,  259,  259,  255,  661,  260,  256,  260,  260,
      256,  660,  658,  257,  261,  258,  261,  261,  657,  262,
      257,  262,  262,  656,  655,  258,  263,  259,  263,  263,
      260,  264,  259,  264,  264,  654,  653,  261,  260,  651,
      650,  265,  264,  265,  265,  263,  261,  649,  648,  262,
      266,  262,  266,  266,  265,  647,  646,  267,  263,  267,
      267,  645,  268,  264,  268,  268,  644,  643,  269,  267,
      269,  269,  642,  265,  270,  270,  270,  270,  641,  268,

      266,  272,  266,  272,  272,  640,  639,  269,  638,  267,
      269,  637,  636,  274,  268,  274,  274,  635,  634,  275,
      269,  275,  275,  633,  632,  631,  270,  276,  276,  276,
      276,  630,  278,  272,  278,  278,  277,  272,  277,  277,
      279,  629,  279,  279,  280,  274,  280,  280,  628,  627,
      281,  275,  281,  281,  283,  280,  283,  283,  282,  276,
      282,  282,  277,  277,  278,  278,  626,  284,  277,  284,
      284,  625,  279,  281,  556,  279,  280,  287,  287,  287,
      287,  554,  281,  553,  552,  293,  283,  548,  293,  547,
      282,  546,  294,  281,  293,  294,  545,  282,  283,  284,

      288,  288,  288,  288,  290,  290,  290,  290,  544,  287,
      291,  291,  291,  291,  294,  295,  296,  293,  295,  296,
      297,  543,  299,  297,  294,  299,  295,  300,  298,  542,
      300,  298,  288,  541,  540,  539,  290,  299,  296,  298,
      301,  303,  300,  301,  303,  538,  297,  295,  296,  537,
      536,  535,  297,  298,  299,  302,  534,  533,  302,  300,
      298,  304,  305,  303,  304,  305,  302,  306,  307,  301,
      306,  307,  301,  303,  309,  532,  308,  309,  310,  308,
      302,  310,  531,  530,  529,  309,  305,  302,  304,  311,
      306,  310,  311,  304,  305,  308,  528,  527,  307,  306,

      307,  312,  526,  525,  312,  524,  309,  520,  308,  313,
      310,  519,  313,  312,  318,  314,  518,  318,  314,  311,
      517,  311,  315,  315,  315,  315,  313,  317,  317,  317,
      317,  514,  324,  312,  314,  324,  320,  314,  320,  320,
      513,  313,  321,  320,  321,  321,  318,  314,  325,  321,
      318,  325,  512,  511,  315,  322,  322,  322,  322,  510,
      509,  508,  322,  323,  324,  324,  323,  326,  320,  327,
      326,  507,  327,  506,  321,  505,  328,  504,  326,  328,
      325,  329,  330,  325,  329,  330,  503,  322,  502,  323,
      323,  501,  327,  500,  335,  323,  335,  335,  499,  326,

      498,  327,  331,  331,  331,  331,  371,  372,  328,  371,
      372,  497,  327,  329,  330,  328,  333,  333,  333,  333,
      334,  334,  334,  334,  496,  329,  335,  360,  360,  360,
      360,  495,  494,  378,  331,  378,  378,  493,  371,  372,
      373,  373,  373,  373,  374,  374,  374,  374,  333,  376,
      376,  376,  376,  377,  377,  377,  377,  379,  379,  379,
      379,  381,  381,  381,  381,  378,  407,  407,  407,  407,
      492,  491,  373,  490,  413,  412,  374,  414,  414,  414,
      414,  376,  415,  415,  415,  415,  411,  410,  409,  379,
      416,  416,  416,  416,  418,  418,  418,  418,  406,  419,

      419,  419,  419,  421,  421,  421,  421,  422,  405,  422,
      422,  423,  404,  423,  423,  403,  402,  424,  422,  424,
      424,  425,  401,  425,  425,  414,  456,  456,  456,  456,
      415,  419,  400,  399,  426,  423,  426,  426,  416,  422,
      398,  397,  424,  423,  427,  396,  427,  427,  395,  424,
      425,  426,  428,  425,  428,  428,  429,  394,  429,  429,
      472,  393,  430,  472,  430,  430,  426,  429,  431,  427,
      431,  431,  472,  392,  391,  428,  427,  430,  432,  390,
      432,  432,  389,  434,  428,  434,  434,  433,  429,  433,
      433,  388,  472,  387,  430,  386,  431,  385,  433,  384,

      431,  383,  432,  435,  434,  435,  435,  382,  370,  436,
      432,  436,  436,  369,  437,  434,  437,  437,  438,  433,
      438,  438,  367,  366,  436,  439,  437,  439,  439,  652,
      365,  435,  652,  438,  440,  435,  440,  440,  439,  362,
      441,  436,  441,  441,  358,  442,  437,  442,  442,  459,
      438,  443,  459,  443,  443,  440,  441,  439,  444,  357,
      444,  444,  356,  355,  354,  445,  440,  445,  445,  353,
      352,  351,  441,  442,  459,  444,  652,  442,  445,  443,
      350,  459,  446,  443,  446,  446,  447,  447,  447,  447,
      444,  448,  448,  448,  448,  349,  449,  445,  449,  449,

      450,  348,  450,  450,  451,  346,  451,  451,  452,  458,
      452,  452,  458,  681,  446,  446,  681,  453,  447,  453,
      453,  345,  344,  448,  454,  454,  454,  454,  449,  342,
      451,  457,  450,  458,  457,  460,  451,  341,  460,  450,
      452,  458,  457,  449,  461,  462,  452,  461,  462,  453,
      463,  464,  340,  463,  464,  467,  454,  453,  467,  339,
      681,  461,  464,  457,  460,  465,  466,  460,  465,  466,
      462,  469,  338,  463,  469,  468,  461,  462,  468,  467,
      465,  470,  463,  464,  470,  471,  468,  467,  471,  238,
      473,  234,  469,  473,  466,  231,  230,  465,  466,  474,

      471,  480,  474,  469,  480,  473,  228,  468,  475,  470,
      227,  475,  474,  470,  480,  477,  476,  471,  477,  476,
      479,  478,  473,  479,  478,  481,  225,  220,  481,  475,
      216,  474,  476,  480,  215,  868,  213,  479,  868,  212,
      475,  211,  906,  477,  208,  906,  206,  477,  476,  478,
      205,  485,  479,  478,  485,  201,  199,  481,  481,  482,
      482,  482,  482,  198,  197,  196,  482,  483,  483,  483,
      483,  484,  484,  484,  484,  486,  487,  488,  486,  487,
      488,  489,  868,  485,  489,  515,  515,  515,  515,  906,
      195,  482,  521,  521,  521,  521,  194,  193,  485,  192,

      191,  190,  487,  484,  189,  187,  186,  486,  487,  488,
      185,  183,  182,  489,  486,  488,  523,  523,  523,  523,
      565,  489,  565,  565,  521,  549,  549,  549,  549,  557,
      557,  557,  557,  559,  559,  559,  559,  560,  560,  560,
      560,  562,  562,  562,  562,  181,  563,  180,  563,  563,
      565,  564,  565,  564,  564,  566,  179,  566,  566,  568,
      168,  568,  568,  563,  564,  567,  167,  567,  567,  569,
      164,  569,  569,  566,  162,  161,  159,  557,  563,  569,
      158,  596,  157,  564,  596,  560,  568,  566,  154,  152,
      151,  568,  570,  567,  570,  570,  571,  567,  571,  571,

      150,  569,  572,  148,  572,  572,  146,  573,  145,  573,
      573,  596,  574,  596,  574,  574,   71,  913,   68,  571,
      913,  570,  915,  572,  570,  915,   66,   64,  571,  574,
      575,   62,  575,  575,  572,  573,   59,   54,  576,  573,
      576,  576,   51,   48,  574,  575,   47,  577,  576,  577,
      577,   42,  578,   41,  578,  578,  934,  577,  579,  934,
      579,  579,  575,  580,  913,  580,  580,   40,  595,  915,
      576,  595,  581,  598,  581,  581,  598,   38,  580,  577,
      578,  595,  579,   37,  578,  581,  582,   36,  582,  582,
      579,  583,   33,  583,  583,  580,  584,   31,  584,  584,

      595,  598,  582,  934,  581,  598,  584,  585,   30,  585,
      585,  586,   29,  586,  586,   27,   25,   23,  582,  587,
      583,  587,  587,  583,  589,  585,  589,  589,  584,  588,
      588,  588,  588,   21,   17,  590,  586,  590,  590,  585,
        0,    0,  591,  586,  591,  591,  592,  597,  592,  592,
      597,  587,  593,    0,  593,  593,  589,    0,    0,  594,
        0,  588,  594,  599,  587,  597,  599,  590,    0,  601,
        0,  589,  601,    0,  591,    0,  594,    0,  592,  597,
      592,    0,  590,  600,  593,  602,  600,  591,  602,  603,
      599,  594,  603,  600,  604,  599,    0,  604,  601,  593,

        0,  601,  605,  606,  607,  605,  606,  607,  602,  609,
      603,    0,  609,  608,  607,  600,  608,  602,  606,  605,
        0,  603,  604,  608,  610,  611,  604,  610,  611,  612,
      613,    0,  612,  613,  605,  606,  607,  609,    0,    0,
      611,  609,  612,    0,  614,  608,  613,  614,  610,  615,
      616,  618,  615,  616,  618,  617,  610,  611,  617,  615,
        0,  612,  613,  619,  619,  619,  619,  620,  616,  621,
      620,    0,  621,  614,  622,  623,  614,  622,  623,    0,
      617,  615,  616,  618,    0,  624,  938,  617,  624,  938,
      684,    0,  684,  684,  716,  619,  618,  716,    0,  620,

        0,  621,  686,    0,  686,  686,  622,  623,  685,  623,
      685,  685,    0,    0,  620,    0,  621,  624,  684,  622,
        0,  716,  684,  685,    0,  687,  716,  687,  687,  686,
        0,    0,  624,  938,  686,  687,  688,    0,  688,  688,
      685,  689,    0,  689,  689,  690,  688,  690,  690,  691,
        0,  691,  691,  692,  689,  692,  692,  687,  697,  691,
      697,  697,  693,  692,  693,  693,    0,  695,  688,  695,
      695,  719,  693,  689,  719,    0,  694,  690,  694,  694,
      696,  691,  696,  696,  719,  692,  694,    0,    0,  698,
      697,  698,  698,    0,  693,  695,    0,    0,  699,  695,

      699,  699,  700,  719,  700,  700,    0,  696,  694,    0,
        0,  714,  696,  701,  714,  701,  701,  702,    0,  702,
      702,  698,  703,  701,  703,  703,  704,  699,  704,  704,
      699,  700,    0,    0,  700,  705,  704,  705,  705,  714,
        0,    0,  702,  714,  703,  701,    0,    0,  706,  702,
      706,  706,    0,  707,  703,  707,  707,  708,  704,  708,
      708,  709,    0,  709,  709,    0,  710,  705,  710,  710,
      711,    0,  711,  711,    0,  715,  707,  706,  715,  712,
      706,  712,  712,    0,  713,  707,  713,  713,    0,  708,
      715,  717,  720,  709,  717,  720,  708,    0,  710,    0,

      710,  717,  711,  711,    0,  718,    0,  715,  718,  721,
      722,  712,  721,  722,  727,  718,  713,  727,  723,  721,
      722,  723,  724,  717,  720,  724,  712,  725,  723,    0,
      725,  713,  724,  726,    0,  728,  726,  718,  728,    0,
      729,  721,  722,  729,  730,    0,  727,  730,  731,  732,
      723,  731,  732,  733,  724,  725,  733,    0,  731,  725,
      726,  734,    0,  735,  734,  726,  735,  728,    0,  729,
        0,  734,  729,  730,  732,  733,  730,    0,    0,  736,
      731,  732,  736,  737,  738,  733,  737,  738,  739,  741,
        0,  739,  741,  734,  740,  735,    0,  740,  742,  743,

        0,  742,  743,    0,    0,    0,  737,  792,  736,  792,
      792,  736,    0,    0,    0,  737,  738,  792,    0,    0,
      739,  741,  741,  738,  819,    0,  740,  819,  740,    0,
      742,  743,  793,    0,  793,  793,    0,    0,  794,  792,
      794,  794,  793,    0,    0,  742,  743,  795,  794,  795,
      795,  796,    0,  796,  796,  797,  819,  797,  797,  798,
        0,  798,  798,  799,  793,  799,  799,    0,    0,  800,
      794,  800,  800,  801,    0,  801,  801,    0,    0,  795,
      797,    0,  802,  796,  802,  802,  803,  797,  803,  803,
      820,  798,  802,  820,    0,  799,  803,  804,    0,  804,

      804,  800,    0,    0,    0,  801,  805,  804,  805,  805,
      806,    0,  806,  806,  802,    0,  805,  807,  803,  807,
      807,  808,  820,  808,  808,  809,    0,  809,  809,  804,
      810,    0,  810,  810,    0,    0,  808,    0,  805,  807,
      810,  811,  806,  811,  811,  812,    0,  812,  812,  807,
        0,    0,  813,  808,  813,  813,  811,  809,  814,    0,
      814,  814,  810,  815,  816,  815,  815,  816,  817,  818,
        0,  817,  818,  811,  816,    0,    0,  812,  817,  818,
      821,    0,  822,  821,  813,  822,    0,  813,  823,  812,
      814,  823,    0,    0,  824,  815,  816,  824,    0,    0,

      817,  818,  814,  825,    0,  821,  825,  826,  827,    0,
      826,  827,  821,  828,  822,    0,  828,  826,  827,  829,
      823,  830,  829,  828,  830,  831,  824,  832,  831,  829,
      832,  833,    0,  834,  833,  825,  834,    0,    0,  826,
      827,  835,  832,  834,  835,  828,  836,  831,    0,  836,
        0,  829,  837,  830,    0,  837,  835,  831,    0,  832,
        0,  838,    0,  833,  838,  834,  839,    0,  871,  839,
      871,  871,  872,  835,  872,  872,    0,  873,  836,  873,
      873,    0,    0,    0,  837,    0,  874,  837,  874,  874,
      836,    0,  875,  838,  875,  875,    0,    0,  839,  876,

      871,  876,  876,    0,  872,  838,    0,    0,  874,  873,
      877,    0,  877,  877,  878,    0,  878,  878,  874,  879,
        0,  879,  879,  880,  875,  880,  880,  886,    0,  879,
      886,  876,  881,  880,  881,  881,    0,  882,    0,  882,
      882,  883,  877,  883,  883,  887,  878,  882,  887,  883,
      884,  879,  884,  884,  885,  880,  885,  885,  888,  886,
      890,  888,  889,  890,  881,  889,    0,  891,  892,  882,
      891,  892,  893,  883,    0,  893,  896,  887,  894,  896,
        0,  894,  884,    0,  889,    0,  885,    0,  894,  885,
      888,    0,  890,  895,  889,  897,  895,  884,  897,  891,

      892,    0,    0,  895,  893,  897,  898,    0,  896,  898,
      894,    0,  899,  900,  898,  899,  900,    0,  916,    0,
      916,  916,    0,    0,    0,  895,    0,  897,  916,  917,
        0,  917,  917,  918,    0,  918,  918,  919,  898,  919,
      919,    0,    0,  925,  899,  900,  925,    0,  900,  920,
      916,  920,  920,  921,  926,  921,  921,  926,    0,  899,
      922,  917,  922,  922,  923,  918,  923,  923,    0,  919,
      924,  927,    0,  924,  927,  925,  928,    0,    0,  928,
      924,  920,    0,  920,  929,  921,  926,  929,  930,    0,
      931,  930,  922,  931,    0,  940,  923,  940,  940,    0,

      921,    0,  924,  927,    0,    0,  945,  922,  928,  945,
      928,  923,  941,    0,  941,  941,  929,    0,    0,    0,
      930,  942,  931,  942,  942,    0,  943,  940,  943,  943,
      944,  929,  944,  944,    0,  930,  946,  931,  945,  946,
      947,    0,  948,  947,  941,  948,  949,  941,  954,  949,
      954,  954,  956,  942,  953,  956,  953,  953,  943,    0,
      955,    0,  944,  955,  959,    0,  959,  959,  946,    0,
        0,  946,  947,  943,  948,    0,    0,  944,  949,  960,
      954,    0,  960,    0,  956,  963,  953,  963,  963,  948,
        0,    0,  955,  949,  964,  953,  959,  964,    0,    0,

      967,  955,  967,  967,  968,    0,  972,  968,  959,  972,
      967,  960,    0,  971,  968,  971,  971,  963,    0,    0,
        0,    0,  963,  960,    0,    0,  964,    0,    0,    0,
        0,  964,  967,    0,    0,    0,  968,    0,  972,    0,
        0,    0,    0,    0,    0,  971,  974,  974,  974,  974,
      974,  974,  975,  975,  975,  975,  975,  975,  976,  976,
      976,  976,  976,  976,  977,  977,  977,  977,  977,  977,
      978,  978,  978,  978,  978,  978,  979,  979,    0,  979,
      979,  979,  980,  980,  980,  980,  980,  980,  981,    0,
        0,    0,  981,  981,  982,  982,  982,  982,  982,  982,

      983,  983,    0,    0,  983,  983,  984,  984,  984,  984,
      984,  984,  985,  985,    0,  985,  985,  985,  986,  986,
        0,  986,  986,  986,  987,  987,    0,    0,    0,  987,
      988,  988,    0,  988,  988,  988,  990,  990,    0,    0,
        0,  990,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[76] =
    {   0,
0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 
    0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#line 2 "levcomp.lpp"

// levcomp.lpp:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
//
// Based loosely on NetHack's lev_comp.l

#include <algorithm>
#include <cstring>
#include <queue>
#include "AppHdr.h"
#include "mapdef.h"
#include "levcomp.tab.h"

static bool alloced = false;

std::queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(100);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

// Enter a new state, first clearing yylval of junk.
#define CBEGIN(x) do { BEGIN(x); clean(); } while (0)

static void post_proc_text(char *text, bool trim_right, int strip_trailing)
{
    char *s = NULL;
    if (trim_right)
    {
        s = text + strlen(text) - 1;
        while (s >= text && isspace(*s))
            *s-- = 0;
    }
    if (strip_trailing)
    {
        if (!s)
            s = text + strlen(text) - 1;
        while (s >= text && --strip_trailing >= 0)
            *s-- = 0;
    }
}

static char *copy_text(bool trim_right, int strip_trailing)
{
    char *newstring = NULL;
    if ((yylval.text = newstring = strdup(yytext)))
    {
        alloced = true;
        post_proc_text(newstring, trim_right, strip_trailing);
    }
    return (newstring);
}

static void settext(bool trim_right = false, int strip_trailing = 0)
{
    clean();
    char *newstring = copy_text(trim_right, strip_trailing);
    yylval.text = newstring;
}

static void str_check()
{
    if (!yylval.text)
    {
        char *buf = (char *) malloc(1);
        if (buf)
        {
            yylval.text = buf;
            *buf = 0;
            alloced = true;
        }
    }
}

static void cattext(bool trim_right = false, int strip_trailing = 0)
{
    if (!yylval.text)
        settext(trim_right, strip_trailing);
    else
    {
        bool was_alloced = alloced;
        char *newbuf = (char*) malloc(strlen(yylval.text) + strlen(yytext) + 1);
        if (!newbuf)
            end(1, "Out of memory");
        alloced = true;
        strcpy(newbuf, yylval.text);
        strcat(newbuf, yytext);
        post_proc_text(newbuf, trim_right, strip_trailing);
        if (was_alloced)
            free((void*) yylval.text);
        yylval.text = newbuf;
    }
}








#line 1648 "levcomp.lex.cc"

#define INITIAL 0
#define MAPDEF 1
#define LUA 2
#define LUA_ONELINER 3
#define ARGUMENT 4
#define MNAME 5
#define KEYWORDS 6
#define ITEM_LIST 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 132 "levcomp.lpp"


#line 1814 "levcomp.lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 974 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 973 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 134 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 136 "levcomp.lpp"
{
                        settext(true);
                        return MAP_LINE;
                    }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 141 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 142 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 143 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 145 "levcomp.lpp"
;
	YY_BREAK
case 7:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 147 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 8:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 148 "levcomp.lpp"
{
                            settext(true, 2);
                            BEGIN(INITIAL);
                            return LUA_LINE;
                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 153 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 157 "levcomp.lpp"
;
	YY_BREAK
case 11:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 159 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 163 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 165 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 170 "levcomp.lpp"
;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 171 "levcomp.lpp"
;
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 172 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 174 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 178 "levcomp.lpp"
;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 180 "levcomp.lpp"
{
                        cattext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 185 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 186 "levcomp.lpp"
;
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 187 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 189 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 191 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 195 "levcomp.lpp"
;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 197 "levcomp.lpp"
{
                        cattext();
                        return MONSTER_NAME;
                    }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 202 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 203 "levcomp.lpp"
;
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 205 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 209 "levcomp.lpp"
;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 211 "levcomp.lpp"
{
                        cattext();
                    }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 215 "levcomp.lpp"
cattext();
	YY_BREAK
case 33:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 217 "levcomp.lpp"
{ BEGIN(INITIAL); str_check(); return STRING; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 219 "levcomp.lpp"
;
	YY_BREAK
case 35:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 221 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 223 "levcomp.lpp"
{ BEGIN(LUA_ONELINER); return MAIN; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 225 "levcomp.lpp"
{ BEGIN(LUA); return PRELUDE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 226 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 227 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 228 "levcomp.lpp"
{ BEGIN(LUA); return VALIDATE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 229 "levcomp.lpp"
{ BEGIN(LUA); return VETO; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 232 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 233 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEFAULT_DEPTH; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 234 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEPTH; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 235 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return ORIENT; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 236 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 237 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return WELCOME; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 238 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 239 "levcomp.lpp"
return WEIGHT;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 240 "levcomp.lpp"
{ CBEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 241 "levcomp.lpp"
{ CBEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 242 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLAGS; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 243 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return BFLAGS; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 244 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SUBST; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 245 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return NSUBST; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 246 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return COLOUR; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 247 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return FLOORCOL; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 248 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return ROCKCOL; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 249 "levcomp.lpp"
{ CBEGIN(MNAME); return MONS; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 250 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 251 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return MARKER; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 252 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SHUFFLE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 254 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KFEAT; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 255 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KITEM; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 256 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMONS; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 257 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMASK; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 259 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 261 "levcomp.lpp"
return COLON;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 263 "levcomp.lpp"
return PERC;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 265 "levcomp.lpp"
{
                        clean();
                        yylval.i = atoi(yytext);
                        return INTEGER;
                    }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 271 "levcomp.lpp"
;
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 272 "levcomp.lpp"
;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 273 "levcomp.lpp"
;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 274 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 276 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 2343 "levcomp.lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MAPDEF):
case YY_STATE_EOF(LUA):
case YY_STATE_EOF(LUA_ONELINER):
case YY_STATE_EOF(ARGUMENT):
case YY_STATE_EOF(MNAME):
case YY_STATE_EOF(KEYWORDS):
case YY_STATE_EOF(ITEM_LIST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 974 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 974 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 973);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 276 "levcomp.lpp"



int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}

