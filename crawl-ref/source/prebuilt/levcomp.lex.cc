#line 2 "levcomp.lex.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 68
#define YY_END_OF_BUFFER 69
static yyconst short int yy_acclist[975] =
    {   0,
       69,   67,   68,   65,   67,   68,   66,   68,   67,   68,
       63,   67,   68,   64,   67,   68,   67,   68,   67,   68,
       67,   68,   67,   68,   67,   68,   67,   68,   67,   68,
       67,   68,   67,   68,   67,   68,   67,   68,   67,   68,
       67,   68,   67,   68,   67,   68,   67,   68,   65,   67,
       68,   30,   67,   68,   32,   67,   68,   67,   68,   67,
       68,   67,   68,   67,   68,   67,   68,   67,   68,   68,
        6,   68,   68,   68,    4,   68,    2,   68,    3,    6,
       68,   68,    2,   68,    2,    4,   68,    2,   68,    2,
       68,    9,   68,   10,   68,   68,    9,   68,    9,   68,

       68,   12,   68,   68,   67,   68,   26,   66,   68,   67,
       68,   63,   67,   68,   64,   67,   68,   67,   68,   67,
       68,   67,   68,   67,   68,   67,   68,   67,   68,   67,
       68,   67,   68,   67,   68,   67,   68,   67,   68,   67,
       68,   67,   68,   67,   68,   67,   68,   67,   68,   30,
       67,   68,   32,   67,   68,   67,   68,   67,   68,   67,
       68,   67,   68,   67,   68,   67,   68,   67,   68,   24,
       65,   67,   68,   21,   66,   68,   24,   67,   68,   23,
       63,   67,   68,   64,   67,   68,   67,   68,   67,   68,
       67,   68,   67,   68,   67,   68,   67,   68,   67,   68,

       67,   68,   67,   68,   67,   68,   67,   68,   67,   68,
       67,   68,   67,   68,   67,   68,   67,   68,   24,   65,
       67,   68,   30,   67,   68,   32,   67,   68,   67,   68,
       67,   68,   67,   68,   67,   68,   67,   68,   67,   68,
       14,   65,   67,   68,   15,   66,   68,   67,   68,   13,
       67,   68,   13,   64,   67,   68,   13,   67,   68,   13,
       67,   68,   13,   67,   68,   13,   67,   68,   13,   67,
       68,   13,   67,   68,   13,   67,   68,   13,   67,   68,
       13,   67,   68,   13,   67,   68,   13,   67,   68,   13,
       67,   68,   13,   67,   68,   13,   67,   68,   13,   67,

       68,   13,   67,   68,   14,   65,   67,   68,   13,   67,
       68,   13,   67,   68,   13,   67,   68,   13,   67,   68,
       13,   67,   68,   17,   68,   19,   68,   20,   68,   68,
       18,   68,   68,   29,   68,   68,   68,   65,   66,   64,
       65,   30,   32,   30,   35,    6,    5,    2,    3,    6,
        2,    5,    2,    2,    2,    2,    9,    9,   10,    9,
        9,    9,   11,   12,   25,   26,   66,   25,   64,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   30,   30,   25,   25,   25,   25,   25,   25,

       25,   25,   35,   24,   65,   21,   24,   21,   66,   64,
       24,   65,   30,   35,   14,   65,   15,   15,   66,   13,
       13,   64,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   14,   65,   13,   13,   13,   13,
       13,   13,   13,   16,   19,   20,   28,   28,   29,   27,
       28,    2,    9,    9,    9,    7,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   22,   22,   64,

       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,

       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   30,   22,   22,   22,
       22,   22,   22,   22,   22,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   31,    2,    9,    8,
        9,    7,    8,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   22,   22,   22,   22,   22,   22,   22,   22,

       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   56,
       55,   38,   47,   34,    2,   25,   25,   25,   25,   25,
       25,   25,   56,   25,   25,   25,   25,   25,   25,   25,
       55,   25,   38,   25,   25,   25,   25,   25,   25,   25,
       47,   25,   25,   25,   25,   34,   25,   25,   25,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   13,   13,

       22,   22,   22,   22,   22,   22,   56,   22,   22,   22,
       22,   22,   22,   22,   55,   22,   38,   22,   22,   22,
       22,   22,   22,   22,   47,   22,   22,   22,   22,   34,
       22,   22,   22,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   40,   46,   59,   60,
       62,   61,   42,   50,   37,    1,    2,   25,   25,   25,
       25,   40,   25,   46,   25,   25,   59,   25,   60,   25,
       62,   25,   61,   25,   25,   25,   25,   25,   42,   25,
       25,   25,   50,   25,   25,   25,   25,   25,   25,   37,

       22,   22,   22,   22,   40,   22,   46,   22,   22,   59,
       22,   60,   22,   62,   22,   61,   22,   22,   22,   22,
       22,   42,   22,   22,   22,   50,   22,   22,   22,   22,
       22,   22,   37,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   49,   44,
       52,   48,   57,   51,   41,   45,    1,    2,   25,   49,
       25,   44,   25,   52,   25,   25,   48,   25,   57,   25,
       51,   25,   41,   25,   25,   25,   45,   25,   25,   25,
       25,   22,   49,   22,   44,   22,   52,   22,   22,   48,
       22,   57,   22,   51,   22,   41,   22,   22,   22,   45,

       22,   22,   22,   22,   13,   13,   13,   13,   13,   13,
       13,   54,   58,   43,   25,   25,   54,   25,   58,   25,
       43,   25,   25,   25,   22,   22,   54,   22,   58,   22,
       43,   22,   22,   22,   13,   13,   13,   53,   33,   25,
       53,   25,   25,   33,   25,   22,   53,   22,   22,   33,
       22,   13,   36,   25,   25,   36,   22,   22,   36,   13,
       25,   22,   13,   25,   22,   13,   25,   22,   13,   39,
       25,   39,   22,   39
    } ;

static yyconst short int yy_accept[933] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        4,    7,    9,   11,   14,   17,   19,   21,   23,   25,
       27,   29,   31,   33,   35,   37,   39,   41,   43,   45,
       47,   49,   52,   55,   58,   60,   62,   64,   66,   68,
       70,   71,   73,   74,   75,   77,   79,   82,   83,   85,
       88,   90,   92,   94,   96,   97,   99,  101,  102,  104,
      105,  107,  110,  112,  115,  118,  120,  122,  124,  126,
      128,  130,  132,  134,  136,  138,  140,  142,  144,  146,
      148,  150,  153,  156,  158,  160,  162,  164,  166,  168,

      170,  174,  177,  180,  184,  187,  189,  191,  193,  195,
      197,  199,  201,  203,  205,  207,  209,  211,  213,  215,
      217,  219,  223,  226,  229,  231,  233,  235,  237,  239,
      241,  245,  248,  250,  253,  257,  260,  263,  266,  269,
      272,  275,  278,  281,  284,  287,  290,  293,  296,  299,
      302,  305,  309,  312,  315,  318,  321,  324,  326,  328,
      330,  331,  333,  334,  336,  337,  338,  339,  340,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  342,  343,  344,  344,  344,  344,  344,  345,

      345,  345,  345,  345,  345,  345,  345,  346,  347,  348,
      348,  348,  349,  351,  353,  353,  354,  355,  356,  357,
      358,  359,  360,  361,  362,  363,  363,  364,  365,  366,
      366,  368,  370,  371,  372,  373,  374,  375,  376,  377,
      378,  379,  380,  381,  382,  383,  384,  385,  386,  387,
      388,  389,  390,  391,  392,  394,  395,  396,  397,  398,
      399,  400,  401,  402,  404,  404,  406,  407,  408,  410,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  413,  414,  414,  414,  414,  414,  414,

      414,  414,  415,  417,  418,  418,  420,  421,  423,  424,
      425,  426,  427,  428,  429,  430,  431,  432,  433,  434,
      435,  436,  437,  438,  439,  440,  441,  442,  443,  444,
      445,  447,  448,  449,  450,  451,  452,  453,  454,  455,
      455,  456,  457,  457,  457,  458,  458,  460,  460,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  463,  464,  465,  466,  467,  468,  469,  470,  471,
      472,  473,  474,  475,  476,  477,  478,  479,  480,  481,

      482,  483,  484,  485,  486,  487,  488,  489,  490,  491,
      492,  493,  494,  495,  496,  497,  498,  499,  501,  502,
      503,  504,  505,  506,  507,  508,  509,  510,  511,  512,
      513,  514,  515,  516,  517,  518,  519,  520,  521,  522,
      523,  524,  525,  526,  528,  529,  530,  531,  532,  533,
      534,  535,  536,  537,  538,  539,  540,  541,  542,  543,
      544,  545,  546,  547,  548,  549,  550,  551,  552,  553,
      554,  555,  556,  557,  558,  559,  560,  561,  562,  563,
      564,  565,  566,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,

      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      568,  568,  568,  568,  568,  568,  569,  570,  571,  572,
      574,  575,  576,  577,  578,  579,  580,  581,  582,  583,
      584,  585,  586,  587,  588,  589,  590,  591,  592,  593,
      594,  595,  596,  597,  598,  599,  599,  599,  600,  601,
      602,  603,  604,  605,  606,  607,  608,  609,  610,  611,
      612,  613,  614,  615,  616,  617,  618,  619,  620,  621,
      622,  623,  624,  625,  626,  627,  628,  628,  628,  629,
      630,  631,  632,  633,  634,  635,  636,  637,  638,  639,
      640,  641,  642,  643,  644,  645,  646,  647,  648,  649,

      650,  651,  652,  653,  654,  655,  656,  657,  658,  659,
      660,  660,  660,  660,  660,  660,  660,  661,  661,  661,
      661,  661,  661,  661,  662,  663,  663,  663,  663,  663,
      663,  663,  664,  664,  664,  664,  665,  665,  665,  665,
      665,  666,  667,  668,  669,  670,  671,  672,  674,  675,
      676,  677,  678,  679,  680,  682,  684,  685,  686,  687,
      688,  689,  690,  692,  693,  694,  695,  697,  698,  699,
      699,  700,  701,  702,  703,  704,  705,  706,  708,  709,
      710,  711,  712,  713,  714,  716,  718,  719,  720,  721,
      722,  723,  724,  726,  727,  728,  729,  731,  732,  733,

      733,  734,  735,  736,  737,  738,  739,  740,  741,  742,
      743,  744,  745,  746,  747,  748,  749,  750,  751,  752,
      753,  754,  755,  756,  757,  757,  757,  757,  758,  759,
      759,  760,  761,  762,  763,  763,  763,  763,  763,  764,
      764,  764,  765,  765,  765,  765,  765,  765,  766,  768,
      769,  770,  771,  773,  775,  776,  778,  780,  782,  784,
      785,  786,  787,  788,  790,  791,  792,  794,  795,  796,
      797,  798,  799,  801,  802,  803,  804,  806,  808,  809,
      811,  813,  815,  817,  818,  819,  820,  821,  823,  824,
      825,  827,  828,  829,  830,  831,  832,  834,  835,  836,

      837,  838,  839,  840,  841,  842,  843,  844,  845,  846,
      847,  848,  849,  850,  851,  852,  852,  853,  854,  855,
      856,  856,  856,  857,  857,  857,  857,  857,  859,  861,
      863,  865,  866,  868,  870,  872,  874,  875,  876,  878,
      879,  880,  881,  882,  884,  886,  888,  889,  891,  893,
      895,  897,  898,  899,  901,  902,  903,  904,  905,  906,
      907,  908,  909,  910,  911,  912,  912,  913,  914,  915,
      915,  915,  915,  915,  916,  918,  920,  922,  923,  923,
      924,  925,  926,  928,  930,  932,  933,  933,  934,  935,
      936,  937,  938,  939,  939,  940,  940,  940,  942,  943,

      945,  945,  946,  948,  949,  951,  951,  952,  953,  953,
      954,  955,  957,  958,  960,  961,  961,  962,  963,  964,
      964,  965,  966,  967,  967,  968,  969,  970,  971,  973,
      975,  975
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    7,    8,    1,    1,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,    1,    1,
        1,    1,    1,    1,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       20,   27,   28,   29,   30,   20,   31,   20,   20,   20,
        1,   32,    1,    1,   20,    1,   33,   20,   20,   34,

       35,   36,   20,   37,   38,   20,   20,   39,   20,   20,
       40,   41,   20,   42,   43,   44,   45,   46,   20,   20,
       20,   20,   47,    1,   48,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[49] =
    {   0,
        1,    2,    3,    4,    1,    1,    5,    6,    6,    1,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    1,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    1,    1
    } ;

static yyconst short int yy_base[953] =
    {   0,
        0,   47,   55,   60,   52,   64,   47,   68,  112,  159,
      206,  253,  300,  347,   74,   80,   70,  159, 2320, 2321,
       87, 2321, 2316, 2321, 2309, 2301,   73, 2301, 2293, 2285,
       85, 2297,   85,   69, 2285, 2289, 2285,   81, 2298, 2293,
     2272,  393,    0, 2321,  155, 2261, 2263,  144,  135, 2257,
     2321, 2321, 2300,  168, 2321,    0, 2321, 2299,  172,    0,
     2277,  241, 2252, 2321, 2296,  135, 2250, 2294, 2321, 2293,
      184, 2321, 2292,  188,  192,  262,  268,  275,  354,  358,
      362,  367,  400,  405,  387,  375,  413,  417,  425,  283,
      439,  444,  448,  452,  456,  460,  464,  471,  476,    0,

      480, 2321,  486, 2321, 2285, 2277,  243, 2277, 2269, 2261,
      246, 2273,  170,  246, 2261, 2265, 2261,  253, 2274, 2269,
     2248,  490,  102,    0,  174, 2237, 2239,  161,  256, 2233,
      494, 2321, 2276,    0, 2269, 2261,  257, 2261, 2253, 2245,
      489, 2257,  270,  340, 2245, 2249, 2245,  343, 2258, 2253,
     2232,  511,  371, 2221, 2223,  331,  373,  418,  515, 2321,
     2261, 2321,  352, 2321,  410,  519,  426, 2321, 2254, 2240,
     2250, 2238, 2233,  401, 2243, 2242, 2227,  426, 2233, 2227,
     2229, 2229, 2221, 2231, 2238, 2235, 2217, 2234, 2228,  448,
     2208,    0,    0, 2321, 2198, 2200,  476, 2191,    0,  374,

     2201, 2198, 2221,  436, 2183, 2177, 2321, 2321, 2321, 2217,
      522,    0, 2321,    0, 2211,  525, 2196, 2185,  457, 2160,
     2154, 2321,  488, 2148,  530, 2188, 2321, 2321,  535,  539,
     2321,  543,  551,  555,  559,  563,  572,  567,  583,  588,
      597,  601,  605,  609,  614,  622,  626,  636,  644,  649,
      654,  658,  663,  667,  672,  676,  682,  686,  690,  694,
      708,  702,  712,  716,  544,  724, 2321,  730, 2321,  634,
      735,  589,  737,  741,  610,  668,  743,  695,  750,  742,
      758,  748,  760,  659,  768,  766,  776,  764,  774,  786,
      788,  790,    0,  794,  795,  800,  804,  806,  811,  810,

      818,  822,  826, 2321, 2182, 2321,    0, 2175, 2151, 2161,
     2149, 2134,  559, 2104, 2103, 2088,  609, 2091, 2085, 2081,
     2081, 2070, 2080, 2084, 2078, 2060, 2077, 2067,  813, 2042,
        0,  553, 2040, 2027, 2049,  511, 2019, 2010,  835,  836,
      840, 2321, 2049,  572, 2321,  845, 2321,  850, 2321, 2014,
     2000, 1981, 1973, 1981, 1971, 1968, 1963, 1955, 1937, 1928,
     1933, 1921, 1910, 1917, 1894, 1887, 1884, 1869, 1873, 1848,
     1841, 1844, 1844, 1820,  854,  856, 1801, 1810, 1793, 1771,
     1786,  861,  865,  869, 2321,  874,  882,  886,  890,  895,
      900,  916,  922,  926,  930,  938,  942,  946,  950,  955,

      959,  964,  970,  980,  984,  988,  992, 1000, 1005, 1009,
     1019, 1023, 1027, 1031, 1035, 1039,  878,  905, 1001,  891,
     1043, 1045, 1044, 1050,  975, 1049, 1054,  971, 1060, 1075,
     1062, 1076, 1080,  896, 1085, 1086, 1087, 1091, 1092, 1096,
     1100, 1101, 1107, 1111, 1120, 1124, 1125, 1126, 1130, 1131,
     1132, 1137, 1794, 1774, 1763, 1753, 1752, 1740, 1738, 1746,
     1741, 1724, 1719, 1728, 1712, 1704, 1713, 1710, 1706, 1704,
     1688, 1689, 1672, 1667, 1674, 1674, 1641, 1141, 1143, 1634,
     1643, 1622, 1597, 1603, 1598, 1580, 1576, 1560, 1552, 1563,
     1540, 1542, 1536, 1527, 1533, 1524, 1519, 1518, 1487, 1487,

     1492, 1490, 1481, 1467, 1482, 1468, 1460, 1436, 1148, 2321,
     1153, 1428, 1426, 1422, 1154, 1443, 1158, 2321, 1163, 2321,
     1171, 1176, 1180, 1189, 1193, 1200, 1210, 1214, 1221, 1226,
     1230, 1234, 1244, 1250, 1259, 1263, 1268, 1272, 1276, 1280,
     1293, 1297, 1301, 1306, 1310, 1321, 1316, 1325, 1330, 1334,
     1338, 1240, 1281, 1194, 1235, 1181, 1339, 1343, 1288, 1344,
     1349, 1345, 1311, 1354, 1355, 1369, 1356, 1375, 1376, 1381,
     1385, 1387, 1393, 1391, 1167, 1395, 1402, 1406, 1408, 1412,
     1410, 1416, 1431, 1434, 1409, 1420, 1397, 1379, 1392, 1359,
     1359, 1355, 1336, 1345, 1337, 1327, 1323, 1281, 1280, 1285,

     1275, 1263, 1246, 1261, 1248, 1237, 1211, 1205, 1207, 1417,
     1205, 1214, 1195, 1207, 1203, 1195, 2321, 1193, 1177, 1169,
     1157, 1134, 1130, 2321, 2321, 1120, 1118, 1128, 1096, 1097,
     1101, 2321, 1081, 1053, 1033, 2321, 1037, 1030, 1418, 1011,
     1027, 1422, 1426, 1431, 1441, 1457, 1464, 1468, 1474, 1478,
     1485, 1489, 1496, 1500, 1504, 1508, 1512, 1516, 1521, 1528,
     1532, 1538, 1542, 1547, 1554, 1558, 1562, 1566, 1570, 1576,
     1580, 1432, 1427, 1447, 1581, 1585, 1591, 1517, 1596, 1597,
     1603, 1607, 1533, 1587, 1613, 1614, 1619, 1620, 1624, 1626,
     1628, 1630, 1634, 1636, 1640, 1641, 1642, 1650, 1652, 1651,

     1656, 1010, 1019, 1003, 1016, 1009, 1002,  998,  985,  981,
      977,  953,  938,  927,  920,  935,  913,  915,  926,  900,
      900,  883,  882,  856,  871,  865,  863, 2321, 2321,  844,
     2321, 2321, 2321, 2321,  855,  850,  841,  836, 2321,  814,
      810, 2321,  809,  803,  770,  769,  740, 2321,  777, 1662,
     1666, 1673, 1677, 1684, 1688, 1692, 1697, 1702, 1706, 1710,
     1714, 1721, 1725, 1732, 1736, 1740, 1744, 1749, 1758, 1762,
     1766, 1770, 1774, 1775, 1779, 1781, 1657, 1745, 1785, 1790,
     1791, 1792, 1797, 1798, 1802, 1811, 1813, 1815, 1817, 1822,
     1823, 1824, 1828, 1830, 1836, 1840, 1842,  770,  764,  744,

      724,  728,  726,  720,  713,  700,  700,  701,  687,  657,
      658,  611, 2321, 2321, 2321,  628, 2321, 2321, 2321, 2321,
      634,  632, 2321,  619,  617, 1844,  561,  590, 1846, 1850,
     1854, 1858, 1862, 1868, 1873, 1877, 1883, 1890, 1894, 1899,
     1903, 1908, 1912, 1863, 1881, 1913, 1917, 1918, 1919, 1923,
     1924, 1925, 1931, 1929, 1935, 1941, 1946, 1948,  564,  552,
      548,  540,  534, 1952,  503,  500, 2321, 2321, 2321,  469,
     1954,  439, 1956, 1958, 1962, 1967, 1971, 1975, 1980, 1984,
     1990, 1995, 1976, 1985, 2002, 2006, 2008, 2010, 2012,  461,
      421, 2014, 2321,  410, 2321, 2016,  377, 2018, 2030, 2024,

     2034, 2039, 2028, 2040, 2044, 2045, 2046,  340,  324, 2321,
     2062, 2066, 2067, 2051,  309,  253, 2072, 2077,  216,  166,
     2083, 2078,  142,   95, 2092, 2096,   59, 2321, 2105, 2109,
     2321, 2121, 2127, 2133, 2139, 2145, 2151, 2157, 2163, 2169,
     2175, 2181, 2187, 2193, 2199, 2205, 2211,   48, 2217, 2223,
     2229, 2235
    } ;

static yyconst short int yy_def[953] =
    {   0,
      931,    1,  932,  933,  934,  934,  935,  935,  931,    9,
      931,   11,  931,   13,  936,  936,  937,  937,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  938,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  939,  931,  940,  931,  931,  941,  940,
      940,  940,  942,  931,  931,  942,  942,  943,  931,  931,
      944,  931,  931,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  945,  944,  944,  944,  944,  944,  944,  944,  946,

      931,  931,  931,  931,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,   42,  947,  946,  946,  946,  946,  946,  946,  946,
      931,  931,  931,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,   42,  948,  948,  948,  948,  948,  949,  931,  931,
      931,  931,  950,  931,  950,  950,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,   42,  938,  931,  931,  931,  931,  931,  938,  931,

      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  940,  931,  940,  931,  940,  940,  940,  940,  942,
      942,  931,  942,  942,  942,  943,  931,  931,  944,  944,
      931,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  945,  945,  944,  944,  944,  944,
      944,  944,  944,  944,  951,  931,  931,  931,  931,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  122,  952,  951,  951,  951,  951,  951,  951,

      951,  951,  931,  931,  931,  931,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      152,  948,  948,  948,  948,  948,  948,  948,  949,  949,
      931,  931,  931,  950,  931,  950,  931,  950,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      940,  942,  942,  942,  931,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,

      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  952,  951,  951,  951,  951,  951,  951,
      951,  951,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  816,  818,  804,  818,
      804,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  827,  827,  827,

      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  940,  942,  931,  942,  931,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      804,  816,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  827,  827,  827,

      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      940,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,

      951,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  940,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  948,  948,  948,

      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  940,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  948,  948,
      948,  948,  948,  948,  948,  931,  931,  931,  931,  931,
      931,  931,  931,  944,  944,  944,  944,  944,  944,  944,
      944,  951,  951,  951,  951,  951,  951,  951,  951,  948,
      948,  948,  931,  931,  931,  931,  931,  944,  944,  944,

      944,  944,  951,  951,  951,  951,  951,  948,  931,  931,
      944,  944,  951,  951,  948,  931,  944,  951,  948,  931,
      944,  951,  948,  931,  944,  951,  948,  931,  944,  951,
        0,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931
    } ;

static yyconst short int yy_nxt[2370] =
    {   0,
       20,   21,   22,   23,   21,   20,   24,   20,   25,   20,
       20,   26,   27,   28,   20,   29,   20,   20,   30,   20,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   20,
       40,   20,   20,   41,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   42,   69,
       70,   42,   43,  307,   64,   65,   44,   52,   53,   54,
       55,   51,   57,   58,   59,   60,   64,   65,  928,   45,
       69,   70,  164,  165,   61,  159,  160,  161,  159,  182,
      162,  159,  160,  161,  159,   46,  162,   47,  167,   48,
      171,  167,   49,   50,   66,  180,  183,  172,  187,   67,

      176,  166,   62,  177,  928,  199,   66,  178,  199,  181,
      188,   67,   71,   21,   72,   73,   21,   71,   74,   71,
       75,   71,   71,   76,   77,   78,   71,   79,   71,   71,
       80,   71,   81,   82,   83,   84,   85,   86,   87,   88,
       89,   71,   90,   71,   71,   91,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       42,  164,  165,   42,   92,  200,  203,  205,   93,  206,
      208,  210,  211,  209,  213,  215,  216,  223,  927,  181,
      281,   94,  224,  298,  295,  230,  204,  230,  230,  230,
      166,  230,  230,  230,  282,  230,  230,   95,  282,   96,

      232,   97,  924,  299,   98,   99,  100,  101,  102,  103,
      101,  100,  104,  100,  105,  100,  100,  106,  107,  108,
      100,  109,  100,  100,  110,  100,  111,  112,  113,  114,
      115,  116,  117,  118,  119,  100,  120,  100,  100,  121,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  122,  218,  283,  122,  123,  923,
      272,  277,  124,  230,  278,  230,  230,  273,  279,  230,
      288,  230,  230,  284,  310,  125,  230,  233,  230,  230,
      319,  311,  289,  219,  230,  234,  230,  230,  300,  236,
      301,  126,  235,  127,  320,  128,  920,  253,  129,  130,

       20,  131,  132,  133,  131,   20,   24,  134,  135,   20,
      134,  136,  137,  138,  134,  139,  134,  134,  140,  134,
      141,  142,  143,  144,  145,  146,  147,  148,  149,  134,
      150,   20,  134,  151,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,   20,   20,  152,  919,
      321,  152,   43,  335,  345,  230,   44,  230,  230,  230,
      326,  230,  230,  230,  916,  230,  230,  322,  230,  153,
      230,  230,  327,  336,  915,  237,  230,  239,  230,  230,
      240,  332,  242,  346,  241,  154,  238,  155,  230,  156,
      230,  230,  157,   50,  192,  320,  248,  192,  193,  375,

      362,  230,  194,  230,  230,  337,  230,  338,  230,  230,
      243,  354,  347,  247,  230,  245,  230,  230,  230,  340,
      230,  230,  340,  910,  244,  355,  230,  167,  230,  230,
      167,  195,  246,  196,  250,  252,  359,  249,  197,  198,
      230,  346,  230,  230,  909,  256,  251,  256,  256,  230,
      360,  230,  230,  230,  908,  230,  230,  230,  203,  230,
      230,  230,  257,  230,  230,  230,  372,  230,  230,  373,
      893,  218,  230,  254,  230,  230,  244,  230,  204,  230,
      230,  266,  267,  268,  266,  895,  260,  268,  269,  268,
      268,  293,  267,  268,  293,  303,  304,  305,  303,  219,

      258,  259,  894,  262,  315,  263,  261,  316,  205,  893,
      206,  317,  331,  304,  305,  331,  341,  342,  343,  341,
      348,  349,  264,  348,  208,  210,  211,  213,  215,  216,
      223,  384,  385,  335,  384,  224,  230,  892,  230,  230,
      230,  891,  230,  230,  230,  265,  230,  230,  265,  869,
      346,  232,  230,  336,  230,  230,  230,  868,  230,  230,
      230,  867,  230,  230,  230,  387,  230,  230,  230,  457,
      230,  230,  386,  230,  345,  230,  230,  382,  478,  465,
      388,  392,  390,  458,  230,  890,  230,  230,  389,  230,
      265,  230,  230,  265,  828,  873,  391,  393,  230,  420,

      230,  230,  230,  346,  230,  230,  230,  395,  230,  230,
      230,  265,  230,  230,  265,  230,  394,  230,  230,  462,
      423,  396,  397,  230,  870,  230,  230,  230,  869,  230,
      230,  398,  399,  463,  424,  265,  400,  230,  265,  230,
      230,  868,  418,  867,  402,  230,  403,  230,  230,  866,
      230,  401,  230,  230,  865,  230,  404,  230,  230,  230,
      265,  230,  230,  265,  230,  406,  230,  230,  230,  265,
      230,  230,  265,  256,  407,  256,  256,  256,  405,  256,
      256,  408,  425,  230,  409,  230,  230,  230,  434,  230,
      230,  230,  864,  230,  230,  230,  265,  230,  230,  265,

      863,  862,  410,  230,  414,  230,  230,  411,  398,  230,
      823,  230,  230,  230,  861,  230,  230,  230,  412,  230,
      230,  860,  820,  427,  413,  266,  267,  268,  266,  819,
      260,  268,  267,  268,  268,  818,  265,  817,  265,  265,
      415,  265,  265,  265,  265,  265,  265,  265,  859,  265,
      261,  265,  265,  815,  265,  416,  419,  426,  421,  265,
      428,  265,  265,  430,  265,  265,  422,  265,  265,  265,
      265,  432,  265,  814,  429,  265,  436,  265,  265,  813,
      265,  828,  433,  827,  431,  439,  435,  265,  437,  265,
      265,  265,  265,  438,  265,  294,  265,  199,  294,  265,

      199,  265,  440,  826,  265,  265,  441,  265,  265,  442,
      265,  265,  265,  825,  265,  265,  448,  824,  823,  265,
      445,  431,  265,  265,  822,  443,  265,  303,  304,  305,
      303,  475,  446,  449,  476,  821,  340,  340,  447,  340,
      340,  341,  342,  343,  341,  820,  348,  349,  451,  348,
      819,  348,  349,  450,  348,  509,  510,  511,  509,  818,
      511,  452,  517,  518,  817,  517,  519,  520,  816,  519,
      384,  385,  815,  384,  814,  230,  346,  230,  230,  265,
      813,  346,  265,  230,  521,  230,  230,  230,  812,  230,
      230,  230,  265,  230,  230,  265,  230,  265,  230,  230,

      265,  230,  512,  230,  230,  522,  265,  567,  382,  265,
      523,  525,  382,  418,  553,  811,  221,  230,  524,  230,
      230,  810,  809,  230,  526,  230,  230,  230,  808,  230,
      230,  230,  528,  230,  230,  742,  807,  806,  527,  230,
      529,  230,  230,  230,  739,  230,  230,  230,  805,  230,
      230,  230,  532,  230,  230,  804,  230,  530,  230,  230,
      230,  531,  230,  230,  803,  230,  533,  230,  230,  535,
      536,  230,  265,  230,  230,  265,  265,  534,  537,  265,
      802,  230,  538,  230,  230,  230,  734,  230,  230,  230,
      733,  230,  230,  230,  732,  230,  230,  558,  561,  540,

      539,  230,  265,  230,  230,  265,  230,  731,  230,  230,
      230,  552,  230,  230,  801,  541,  543,  544,  729,  542,
      546,  510,  230,  546,  547,  728,  230,  547,  230,  800,
      230,  230,  230,  799,  230,  230,  230,  798,  230,  230,
      230,  545,  230,  230,  265,  265,  265,  265,  265,  265,
      265,  265,  749,  265,  265,  265,  411,  748,  265,  559,
      556,  265,  747,  265,  265,  549,  265,  554,  560,  548,
      746,  745,  550,  555,  557,  744,  265,  265,  551,  265,
      265,  265,  564,  562,  265,  563,  265,  265,  265,  265,
      265,  265,  265,  265,  566,  265,  265,  265,  569,  568,

      265,  265,  265,  565,  265,  265,  571,  570,  265,  743,
      742,  265,  294,  575,  199,  294,  574,  199,  741,  572,
      740,  577,  510,  573,  577,  578,  265,  265,  578,  265,
      265,  265,  265,  265,  265,  265,  265,  739,  265,  576,
      448,  265,  509,  510,  511,  509,  738,  511,  737,  509,
      510,  445,  509,  449,  511,  639,  736,  511,  639,  517,
      518,  735,  517,  580,  519,  520,  734,  519,  265,  581,
      579,  265,  230,  450,  230,  230,  582,  230,  733,  230,
      230,  230,  265,  230,  230,  265,  732,  642,  643,  512,
      230,  695,  230,  230,  230,  265,  230,  230,  265,  512,

      640,  230,  731,  230,  230,  221,  645,  730,  676,  644,
      221,  230,  729,  230,  230,  230,  728,  230,  230,  648,
      646,  727,  230,  674,  230,  230,  647,  230,  726,  230,
      230,  230,  725,  230,  230,  230,  265,  230,  230,  265,
      724,  265,  649,  650,  265,  230,  651,  230,  230,  723,
      653,  230,  675,  230,  230,  722,  672,  652,  654,  655,
      230,  721,  230,  230,  230,  720,  230,  230,  656,  230,
      632,  230,  230,  230,  719,  230,  230,  230,  718,  230,
      230,  230,  265,  230,  230,  265,  659,  717,  660,  265,
      657,  658,  265,  673,  230,  661,  230,  230,  230,  716,

      230,  230,  230,  715,  230,  230,  663,  230,  714,  230,
      230,  230,  265,  230,  230,  265,  679,  547,  664,  230,
      547,  662,  546,  510,  230,  546,  230,  683,  230,  230,
      665,  230,  625,  230,  230,  230,  624,  230,  230,  670,
      265,  230,  670,  265,  265,  265,  265,  265,  265,  265,
      265,  713,  678,  265,  666,  265,  265,  265,  265,  265,
      265,  712,  548,  711,  685,  677,  680,  669,  684,  681,
      265,  667,  682,  265,  668,  710,  265,  265,  686,  265,
      265,  709,  265,  687,  671,  265,  265,  708,  265,  265,
      689,  265,  265,  690,  265,  265,  265,  265,  688,  265,

      691,  617,  693,  577,  510,  707,  577,  578,  694,  265,
      578,  265,  265,  265,  265,  692,  265,  700,  639,  639,
      700,  639,  639,  230,  706,  230,  230,  230,  265,  230,
      230,  265,  230,  265,  230,  230,  265,  705,  704,  696,
      751,  775,  230,  699,  230,  230,  703,  702,  265,  750,
      753,  265,  579,  641,  697,  638,  698,  752,  230,  774,
      230,  230,  701,  640,  640,  230,  754,  230,  230,  230,
      637,  230,  230,  776,  636,  230,  755,  230,  230,  230,
      635,  230,  230,  756,  634,  633,  230,  757,  230,  230,
      230,  632,  230,  230,  758,  631,  630,  230,  759,  230,

      230,  230,  629,  230,  230,  230,  628,  230,  230,  230,
      627,  230,  230,  230,  626,  230,  230,  230,  265,  230,
      230,  265,  230,  760,  230,  230,  761,  625,  624,  230,
      764,  230,  230,  230,  265,  230,  230,  265,  623,  230,
      762,  230,  230,  230,  763,  230,  230,  767,  230,  622,
      230,  230,  765,  766,  621,  230,  620,  230,  230,  230,
      784,  230,  230,  230,  619,  230,  230,  230,  618,  230,
      230,  230,  617,  230,  230,  768,  769,  670,  616,  230,
      670,  230,  265,  230,  230,  265,  265,  615,  265,  265,
      777,  265,  265,  614,  778,  265,  770,  265,  265,  771,

      265,  265,  772,  779,  265,  780,  781,  265,  265,  613,
      612,  265,  782,  785,  265,  265,  783,  265,  265,  611,
      265,  265,  671,  265,  265,  265,  773,  265,  265,  265,
      265,  265,  265,  788,  265,  265,  610,  265,  265,  791,
      265,  265,  265,  265,  265,  265,  265,  786,  787,  790,
      789,  265,  700,  265,  265,  700,  265,  265,  265,  609,
      265,  265,  793,  230,  792,  230,  230,  230,  478,  230,
      230,  829,  608,  607,  230,  830,  230,  230,  230,  794,
      230,  230,  831,  795,  796,  230,  606,  230,  230,  230,
      605,  230,  230,  230,  604,  230,  230,  701,  230,  603,

      230,  230,  797,  230,  602,  230,  230,  230,  601,  230,
      230,  230,  832,  230,  230,  230,  600,  230,  230,  833,
      599,  598,  230,  834,  230,  230,  230,  597,  230,  230,
      835,  596,  595,  230,  836,  230,  230,  230,  594,  230,
      230,  230,  593,  230,  230,  230,  265,  230,  230,  265,
      230,  592,  230,  230,  838,  591,  590,  837,  839,  230,
      589,  230,  230,  230,  588,  230,  230,  230,  587,  230,
      230,  230,  840,  230,  230,  230,  265,  230,  230,  265,
      265,  586,  265,  265,  844,  265,  265,  585,  845,  265,
      846,  265,  265,  265,  265,  265,  265,  584,  265,  265,

      842,  265,  265,  265,  583,  841,  265,  848,  516,  847,
      515,  849,  265,  843,  265,  265,  265,  265,  265,  265,
      850,  265,  851,  265,  265,  265,  265,  265,  265,  265,
      514,  265,  265,  854,  265,  375,  853,  265,  852,  513,
      265,  265,  855,  265,  265,  871,  265,  230,  871,  230,
      230,  230,  508,  230,  230,  230,  507,  230,  230,  230,
      506,  230,  230,  230,  265,  230,  230,  265,  505,  230,
      857,  230,  230,  856,  230,  504,  230,  230,  230,  874,
      230,  230,  265,  858,  230,  265,  230,  230,  503,  502,
      872,  230,  875,  230,  230,  230,  501,  230,  230,  876,

      230,  500,  230,  230,  230,  499,  230,  230,  877,  879,
      878,  230,  879,  230,  265,  230,  230,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  498,  265,  265,  883,  265,  265,  497,  882,  265,
      884,  496,  265,  495,  885,  265,  881,  887,  886,  265,
      887,  494,  265,  871,  880,  871,  871,  896,  871,  230,
      896,  230,  230,  230,  493,  230,  230,  898,  230,  492,
      230,  230,  230,  491,  230,  230,  230,  265,  230,  230,
      265,  879,  889,  230,  879,  230,  265,  230,  230,  265,
      490,  901,  888,  230,  901,  489,  265,  488,  872,  265,

      872,  487,  897,  265,  903,  486,  265,  265,  899,  887,
      265,  265,  887,  906,  265,  896,  906,  896,  896,  230,
      896,  230,  230,  485,  484,  230,  880,  230,  230,  265,
      900,  230,  265,  230,  230,  901,  902,  230,  901,  904,
      230,  265,  230,  230,  265,  265,  906,  265,  265,  906,
      265,  342,  265,  483,  888,  265,  905,  482,  907,  481,
      897,  480,  897,  230,  911,  230,  230,  230,  265,  230,
      230,  265,  479,  230,  913,  230,  230,  477,  265,  265,
      902,  265,  265,  474,  230,  912,  230,  230,  473,  472,
      471,  907,  914,  230,  470,  230,  230,  265,  469,  468,

      265,  929,  917,  467,  466,  930,  230,  918,  230,  230,
      265,  465,  464,  265,  926,  921,  461,  460,  459,  925,
      922,   51,   51,   51,   51,   51,   51,   56,   56,   56,
       56,   56,   56,   63,   63,   63,   63,   63,   63,   68,
       68,   68,   68,   68,   68,  158,  158,  158,  158,  158,
      158,  163,  163,  163,  163,  163,  163,  199,  199,  456,
      199,  199,  199,  209,  209,  209,  209,  209,  209,  212,
      455,  454,  453,  212,  212,  214,  214,  214,  214,  214,
      214,  220,  220,  308,  304,  220,  220,  226,  226,  226,
      227,  226,  226,  229,  229,  383,  229,  229,  229,  255,

      255,  382,  255,  255,  255,  265,  265,  221,  217,  381,
      265,  294,  294,  213,  294,  294,  294,  339,  339,  208,
      380,  379,  339,  344,  344,  344,  344,  344,  344,  417,
      417,  378,  377,  376,  417,  444,  444,  207,  444,  444,
      444,  202,  201,  374,  371,  370,  369,  368,  367,  366,
      365,  364,  363,  362,  361,  358,  357,  356,  353,  352,
      351,  350,  169,  342,  334,  333,  330,  329,  328,  325,
      324,  323,  318,  314,  313,  312,  309,  308,  306,  302,
      297,  296,  292,  291,  290,  287,  286,  285,  280,  276,
      275,  274,  271,  270,  231,  228,  227,  225,  222,  221,

      217,  213,  208,  207,  202,  201,  191,  190,  189,  186,
      185,  184,  179,  175,  174,  173,  170,  169,  168,  931,
       19,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931
    } ;

static yyconst short int yy_chk[2370] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    7,
        7,    2,    2,  948,    5,    5,    2,    3,    3,    3,
        3,    4,    4,    4,    4,    4,    6,    6,  927,    2,
        8,    8,   17,   17,    4,   15,   15,   15,   15,   34,
       15,   16,   16,   16,   16,    2,   16,    2,   21,    2,
       27,   21,    2,    2,    5,   33,   34,   27,   38,    5,

       31,   17,    4,   31,  924,  123,    6,   31,  123,   33,
       38,    6,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
       10,   18,   18,   10,   10,   45,   48,   49,   10,   49,
       54,   54,   54,   59,   59,   59,   59,   66,  923,   45,
      113,   10,   66,  128,  125,   71,   48,   71,   71,   74,
       18,   74,   74,   75,  113,   75,   75,   10,  125,   10,

       75,   10,  920,  128,   10,   10,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   12,   62,  114,   12,   12,  919,
      107,  111,   12,   76,  111,   76,   76,  107,  111,   77,
      118,   77,   77,  114,  137,   12,   78,   76,   78,   78,
      143,  137,  118,   62,   90,   77,   90,   90,  129,   78,
      129,   12,   77,   12,  143,   12,  916,   90,   12,   12,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   14,  915,
      144,   14,   14,  156,  163,   79,   14,   79,   79,   80,
      148,   80,   80,   81,  909,   81,   81,  144,   82,   14,
       82,   82,  148,  156,  908,   79,   86,   81,   86,   86,
       81,  153,   82,  163,   81,   14,   80,   14,   85,   14,
       85,   85,   14,   14,   42,  153,   86,   42,   42,  200,

      200,   83,   42,   83,   83,  157,   84,  157,   84,   84,
       83,  174,  165,   85,   87,   84,   87,   87,   88,  158,
       88,   88,  158,  897,   83,  174,   89,  167,   89,   89,
      167,   42,   84,   42,   88,   89,  178,   87,   42,   42,
       91,  165,   91,   91,  894,   92,   88,   92,   92,   93,
      178,   93,   93,   94,  891,   94,   94,   95,  204,   95,
       95,   96,   94,   96,   96,   97,  190,   97,   97,  190,
      890,  219,   98,   91,   98,   98,   94,   99,  204,   99,
       99,  101,  101,  101,  101,  872,   97,  103,  103,  103,
      103,  122,  122,  122,  122,  131,  131,  131,  131,  219,

       95,   96,  870,   98,  141,   98,   97,  141,  197,  866,
      197,  141,  152,  152,  152,  152,  159,  159,  159,  159,
      166,  166,   99,  166,  211,  211,  211,  216,  216,  216,
      223,  225,  225,  336,  225,  223,  229,  865,  229,  229,
      230,  863,  230,  230,  232,  265,  232,  232,  265,  862,
      166,  232,  233,  336,  233,  233,  234,  861,  234,  234,
      235,  860,  235,  235,  236,  234,  236,  236,  238,  313,
      238,  238,  233,  237,  344,  237,  237,  225,  332,  332,
      235,  238,  237,  313,  239,  859,  239,  239,  236,  240,
      272,  240,  240,  272,  828,  827,  237,  239,  241,  272,

      241,  241,  242,  344,  242,  242,  243,  241,  243,  243,
      244,  275,  244,  244,  275,  245,  240,  245,  245,  317,
      275,  241,  242,  246,  825,  246,  246,  247,  824,  247,
      247,  243,  244,  317,  275,  270,  245,  248,  270,  248,
      248,  822,  270,  821,  247,  249,  248,  249,  249,  816,
      250,  246,  250,  250,  812,  251,  249,  251,  251,  252,
      284,  252,  252,  284,  253,  251,  253,  253,  254,  276,
      254,  254,  276,  255,  252,  255,  255,  256,  250,  256,
      256,  253,  276,  257,  253,  257,  257,  258,  284,  258,
      258,  259,  811,  259,  259,  260,  278,  260,  260,  278,

      810,  809,  254,  262,  260,  262,  262,  257,  257,  261,
      808,  261,  261,  263,  807,  263,  263,  264,  258,  264,
      264,  806,  805,  278,  259,  266,  266,  266,  266,  804,
      261,  268,  268,  268,  268,  803,  271,  802,  273,  271,
      262,  273,  274,  280,  277,  274,  280,  277,  801,  282,
      261,  279,  282,  800,  279,  263,  271,  277,  273,  281,
      279,  283,  281,  280,  283,  288,  274,  286,  288,  285,
      286,  282,  285,  799,  279,  289,  286,  287,  289,  798,
      287,  749,  283,  747,  281,  289,  285,  290,  287,  291,
      290,  292,  291,  288,  292,  294,  295,  294,  294,  295,

      294,  296,  290,  746,  296,  297,  291,  298,  297,  291,
      298,  300,  299,  745,  300,  299,  298,  744,  743,  301,
      295,  295,  301,  302,  741,  292,  302,  303,  303,  303,
      303,  329,  296,  299,  329,  740,  339,  340,  297,  339,
      340,  341,  341,  341,  341,  738,  346,  346,  300,  346,
      737,  348,  348,  299,  348,  375,  375,  376,  375,  736,
      376,  301,  382,  382,  735,  382,  383,  383,  730,  383,
      384,  384,  727,  384,  726,  386,  346,  386,  386,  417,
      725,  348,  417,  387,  386,  387,  387,  388,  724,  388,
      388,  389,  420,  389,  389,  420,  390,  434,  390,  390,

      434,  391,  376,  391,  391,  387,  418,  434,  382,  418,
      388,  390,  383,  418,  420,  723,  384,  392,  389,  392,
      392,  722,  721,  393,  391,  393,  393,  394,  720,  394,
      394,  395,  393,  395,  395,  719,  718,  717,  392,  396,
      394,  396,  396,  397,  716,  397,  397,  398,  715,  398,
      398,  399,  397,  399,  399,  714,  400,  395,  400,  400,
      401,  396,  401,  401,  713,  402,  398,  402,  402,  400,
      401,  403,  428,  403,  403,  428,  425,  399,  402,  425,
      712,  404,  403,  404,  404,  405,  711,  405,  405,  406,
      710,  406,  406,  407,  709,  407,  407,  425,  428,  405,

      404,  408,  419,  408,  408,  419,  409,  708,  409,  409,
      410,  419,  410,  410,  707,  406,  408,  409,  706,  407,
      411,  411,  411,  411,  412,  705,  412,  412,  413,  704,
      413,  413,  414,  703,  414,  414,  415,  702,  415,  415,
      416,  410,  416,  416,  421,  423,  422,  421,  423,  422,
      426,  424,  641,  426,  424,  427,  414,  640,  427,  426,
      423,  429,  638,  431,  429,  413,  431,  421,  427,  412,
      637,  635,  415,  422,  424,  634,  430,  432,  416,  430,
      432,  433,  431,  429,  433,  430,  435,  436,  437,  435,
      436,  437,  438,  439,  433,  438,  439,  440,  436,  435,

      440,  441,  442,  432,  441,  442,  438,  437,  443,  633,
      631,  443,  444,  442,  444,  444,  441,  444,  630,  439,
      629,  445,  445,  440,  445,  446,  447,  448,  446,  447,
      448,  449,  450,  451,  449,  450,  451,  628,  452,  443,
      449,  452,  478,  478,  479,  478,  627,  479,  626,  509,
      509,  448,  509,  450,  511,  515,  623,  511,  515,  517,
      517,  622,  517,  447,  519,  519,  621,  519,  575,  451,
      446,  575,  521,  450,  521,  521,  452,  522,  620,  522,
      522,  523,  556,  523,  523,  556,  619,  521,  522,  479,
      524,  575,  524,  524,  525,  554,  525,  525,  554,  511,

      515,  526,  618,  526,  526,  517,  524,  616,  556,  523,
      519,  527,  615,  527,  527,  528,  614,  528,  528,  527,
      525,  613,  529,  554,  529,  529,  526,  530,  612,  530,
      530,  531,  611,  531,  531,  532,  555,  532,  532,  555,
      609,  552,  528,  529,  552,  533,  530,  533,  533,  608,
      532,  534,  555,  534,  534,  607,  552,  531,  533,  534,
      535,  606,  535,  535,  536,  605,  536,  536,  535,  537,
      604,  537,  537,  538,  603,  538,  538,  539,  602,  539,
      539,  540,  553,  540,  540,  553,  538,  601,  539,  559,
      536,  537,  559,  553,  541,  540,  541,  541,  542,  600,

      542,  542,  543,  599,  543,  543,  542,  544,  598,  544,
      544,  545,  563,  545,  545,  563,  559,  547,  543,  547,
      547,  541,  546,  546,  546,  546,  548,  563,  548,  548,
      544,  549,  597,  549,  549,  550,  596,  550,  550,  551,
      557,  551,  551,  557,  558,  560,  562,  558,  560,  562,
      561,  595,  558,  561,  545,  564,  565,  567,  564,  565,
      567,  594,  547,  593,  565,  557,  560,  550,  564,  561,
      566,  548,  562,  566,  549,  592,  568,  569,  566,  568,
      569,  591,  570,  567,  551,  570,  571,  590,  572,  571,
      569,  572,  574,  570,  573,  574,  576,  573,  568,  576,

      571,  589,  573,  577,  577,  588,  577,  578,  574,  579,
      578,  581,  579,  580,  581,  572,  580,  582,  610,  639,
      582,  610,  639,  642,  587,  642,  642,  643,  673,  643,
      643,  673,  644,  672,  644,  644,  672,  586,  585,  576,
      643,  673,  645,  581,  645,  645,  584,  583,  674,  642,
      645,  674,  578,  516,  579,  514,  580,  644,  646,  672,
      646,  646,  582,  610,  639,  647,  646,  647,  647,  648,
      513,  648,  648,  674,  512,  649,  647,  649,  649,  650,
      508,  650,  650,  649,  507,  506,  651,  650,  651,  651,
      652,  505,  652,  652,  651,  504,  503,  653,  652,  653,

      653,  654,  502,  654,  654,  655,  501,  655,  655,  656,
      500,  656,  656,  657,  499,  657,  657,  658,  678,  658,
      658,  678,  659,  653,  659,  659,  654,  498,  497,  660,
      659,  660,  660,  661,  683,  661,  661,  683,  496,  662,
      657,  662,  662,  663,  658,  663,  663,  662,  664,  495,
      664,  664,  660,  661,  494,  665,  493,  665,  665,  666,
      683,  666,  666,  667,  492,  667,  667,  668,  491,  668,
      668,  669,  490,  669,  669,  664,  665,  670,  489,  670,
      670,  671,  675,  671,  671,  675,  676,  488,  684,  676,
      675,  684,  677,  487,  676,  677,  666,  679,  680,  668,

      679,  680,  669,  677,  681,  679,  680,  681,  682,  486,
      485,  682,  681,  684,  685,  686,  682,  685,  686,  484,
      687,  688,  670,  687,  688,  689,  671,  690,  689,  691,
      690,  692,  691,  689,  692,  693,  483,  694,  693,  692,
      694,  695,  696,  697,  695,  696,  697,  687,  688,  691,
      690,  698,  700,  699,  698,  700,  699,  701,  777,  482,
      701,  777,  695,  750,  694,  750,  750,  751,  481,  751,
      751,  750,  480,  477,  752,  751,  752,  752,  753,  696,
      753,  753,  752,  698,  699,  754,  476,  754,  754,  755,
      475,  755,  755,  756,  474,  756,  756,  700,  757,  473,

      757,  757,  701,  758,  472,  758,  758,  759,  471,  759,
      759,  760,  755,  760,  760,  761,  470,  761,  761,  760,
      469,  468,  762,  761,  762,  762,  763,  467,  763,  763,
      762,  466,  465,  764,  763,  764,  764,  765,  464,  765,
      765,  766,  463,  766,  766,  767,  778,  767,  767,  778,
      768,  462,  768,  768,  766,  461,  460,  765,  768,  769,
      459,  769,  769,  770,  458,  770,  770,  771,  457,  771,
      771,  772,  769,  772,  772,  773,  774,  773,  773,  774,
      775,  456,  776,  775,  774,  776,  779,  455,  775,  779,
      776,  780,  781,  782,  780,  781,  782,  454,  783,  784,

      771,  783,  784,  785,  453,  770,  785,  784,  381,  779,
      380,  785,  786,  772,  787,  786,  788,  787,  789,  788,
      786,  789,  787,  790,  791,  792,  790,  791,  792,  793,
      379,  794,  793,  792,  794,  378,  790,  795,  789,  377,
      795,  796,  793,  797,  796,  826,  797,  829,  826,  829,
      829,  830,  374,  830,  830,  831,  373,  831,  831,  832,
      372,  832,  832,  833,  844,  833,  833,  844,  371,  834,
      795,  834,  834,  794,  835,  370,  835,  835,  836,  832,
      836,  836,  845,  796,  837,  845,  837,  837,  369,  368,
      826,  838,  837,  838,  838,  839,  367,  839,  839,  838,

      840,  366,  840,  840,  841,  365,  841,  841,  840,  842,
      841,  842,  842,  843,  846,  843,  843,  846,  847,  848,
      849,  847,  848,  849,  850,  851,  852,  850,  851,  852,
      854,  364,  853,  854,  852,  853,  855,  363,  847,  855,
      853,  362,  856,  361,  855,  856,  843,  857,  856,  858,
      857,  360,  858,  864,  842,  871,  864,  873,  871,  874,
      873,  874,  874,  875,  359,  875,  875,  874,  876,  358,
      876,  876,  877,  357,  877,  877,  878,  883,  878,  878,
      883,  879,  858,  879,  879,  880,  884,  880,  880,  884,
      356,  881,  857,  881,  881,  355,  882,  354,  864,  882,

      871,  353,  873,  885,  882,  352,  885,  886,  878,  887,
      886,  888,  887,  889,  888,  892,  889,  896,  892,  898,
      896,  898,  898,  351,  350,  900,  879,  900,  900,  903,
      880,  899,  903,  899,  899,  901,  881,  901,  901,  886,
      902,  904,  902,  902,  904,  905,  906,  907,  905,  906,
      907,  343,  914,  338,  887,  914,  888,  337,  889,  335,
      892,  334,  896,  911,  899,  911,  911,  912,  913,  912,
      912,  913,  333,  917,  904,  917,  917,  330,  918,  922,
      901,  918,  922,  328,  921,  902,  921,  921,  327,  326,
      325,  906,  907,  925,  324,  925,  925,  926,  323,  322,

      926,  925,  911,  321,  320,  926,  929,  913,  929,  929,
      930,  319,  318,  930,  922,  917,  316,  315,  314,  921,
      918,  932,  932,  932,  932,  932,  932,  933,  933,  933,
      933,  933,  933,  934,  934,  934,  934,  934,  934,  935,
      935,  935,  935,  935,  935,  936,  936,  936,  936,  936,
      936,  937,  937,  937,  937,  937,  937,  938,  938,  312,
      938,  938,  938,  939,  939,  939,  939,  939,  939,  940,
      311,  310,  309,  940,  940,  941,  941,  941,  941,  941,
      941,  942,  942,  308,  305,  942,  942,  943,  943,  943,
      226,  943,  943,  944,  944,  224,  944,  944,  944,  945,

      945,  221,  945,  945,  945,  946,  946,  220,  218,  217,
      946,  947,  947,  215,  947,  947,  947,  949,  949,  210,
      206,  205,  949,  950,  950,  950,  950,  950,  950,  951,
      951,  203,  202,  201,  951,  952,  952,  198,  952,  952,
      952,  196,  195,  191,  189,  188,  187,  186,  185,  184,
      183,  182,  181,  180,  179,  177,  176,  175,  173,  172,
      171,  170,  169,  161,  155,  154,  151,  150,  149,  147,
      146,  145,  142,  140,  139,  138,  136,  135,  133,  130,
      127,  126,  121,  120,  119,  117,  116,  115,  112,  110,
      109,  108,  106,  105,   73,   70,   68,   67,   65,   63,

       61,   58,   53,   50,   47,   46,   41,   40,   39,   37,
       36,   35,   32,   30,   29,   28,   26,   25,   23,   19,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#define INITIAL 0
#line 2 "levcomp.lpp"

// levcomp.lpp:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
// 
// Based loosely on NetHack's lev_comp.l

#include "AppHdr.h"
#include "mapdef.h"
#include "levcomp.tab.h"
#include <cstring>
#include <queue>

static bool alloced = false;

std::queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(100);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

static char *copy_text(bool trim_right, int strip_trailing)
{
    char *newstring = NULL;
    if ((yylval.text = newstring = strdup(yytext)))
    {
        alloced = true;
        char *s = NULL;
        if (trim_right)
        {
            s = newstring + strlen(newstring) - 1;
            while (isspace(*s) && s >= newstring)
                *s-- = 0;
        }
        if (strip_trailing)
        {
            if (!s)
                s = newstring + strlen(newstring) - 1;
            while (s >= newstring && --strip_trailing >= 0)
                *s-- = 0;
        }
    }
    return (newstring);
}

static void settext(bool trim_right = false, int strip_trailing = 0)
{
    clean();
    char *newstring = copy_text(trim_right, strip_trailing);
    yylval.text = newstring;
}

#define MAPDEF 1

#define LUA 2

#define LUA_ONELINER 3

#define ARGUMENT 4

#define MNAME 5

#define KEYWORDS 6

#define ITEM_LIST 7

#define TOEOL 8

#define YY_NEVER_INTERACTIVE 1
#line 1403 "levcomp.lex.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 89 "levcomp.lpp"


#line 1560 "levcomp.lex.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 932 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2321 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 91 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 93 "levcomp.lpp"
{
                        settext(true);
                        return MAP_LINE;
                    }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 98 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 99 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 100 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 102 "levcomp.lpp"
;
	YY_BREAK
case 7:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 104 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 8:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 105 "levcomp.lpp"
{
                            settext(true, 2);
                            BEGIN(INITIAL);
                            return LUA_LINE;
                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 110 "levcomp.lpp"
{
                            settext();
                            return LUA_LINE;
                        }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 114 "levcomp.lpp"
;
	YY_BREAK
case 11:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 116 "levcomp.lpp"
{
                            settext();
                            return LUA_LINE;
                        }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 120 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 122 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 127 "levcomp.lpp"
;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 128 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 130 "levcomp.lpp"
{ 
                        settext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 135 "levcomp.lpp"
{
                        settext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 140 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 141 "levcomp.lpp"
;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 142 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 144 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 146 "levcomp.lpp"
{ 
                        settext();
                        return MONSTER_NAME; 
                    }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 151 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 152 "levcomp.lpp"
;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 154 "levcomp.lpp"
{ 
                        BEGIN(INITIAL);
                        settext();
                        return STRING; 
                    }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 160 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 27:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 162 "levcomp.lpp"
{
                        settext(true, 1);
                        return STRING;
                    }
	YY_BREAK
case 28:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 167 "levcomp.lpp"
{
                        BEGIN(INITIAL);
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 172 "levcomp.lpp"
;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 174 "levcomp.lpp"
;
	YY_BREAK
case 31:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 176 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 178 "levcomp.lpp"
{ BEGIN(LUA_ONELINER); return MAIN; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 180 "levcomp.lpp"
{ BEGIN(LUA); return PRELUDE; }      
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 181 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 182 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 183 "levcomp.lpp"
{ BEGIN(LUA); return VALIDATE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 184 "levcomp.lpp"
{ BEGIN(LUA); return VETO; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 187 "levcomp.lpp"
{ BEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 188 "levcomp.lpp"
{ BEGIN(ARGUMENT); return DEFAULT_DEPTH; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 189 "levcomp.lpp"
{ BEGIN(ARGUMENT); return DEPTH; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 190 "levcomp.lpp"
{ BEGIN(ARGUMENT); return ORIENT; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 191 "levcomp.lpp"
{ BEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 192 "levcomp.lpp"
{ BEGIN(ARGUMENT); return WELCOME; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 193 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 194 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 195 "levcomp.lpp"
{ BEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 196 "levcomp.lpp"
{ BEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 197 "levcomp.lpp"
{ BEGIN(ARGUMENT); return LFLAGS; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 198 "levcomp.lpp"
{ BEGIN(ARGUMENT); return BFLAGS; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 199 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return SUBST; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 200 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return NSUBST; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 201 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return COLOUR; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 202 "levcomp.lpp"
{ BEGIN(ARGUMENT); return FLOORCOL; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 203 "levcomp.lpp"
{ BEGIN(ARGUMENT); return ROCKCOL; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 204 "levcomp.lpp"
{ BEGIN(MNAME); return MONS; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 205 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 206 "levcomp.lpp"
{ BEGIN(TOEOL); return MARKER; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 207 "levcomp.lpp"
{ BEGIN(ITEM_LIST); return SHUFFLE; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 209 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KFEAT; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 210 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KFEAT; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 211 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KITEM; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 212 "levcomp.lpp"
{ BEGIN(ARGUMENT); return KMASK; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 214 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 216 "levcomp.lpp"
{
                        clean();
                        yylval.i = atoi(yytext);
                        return INTEGER;
                    }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 222 "levcomp.lpp"
;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 223 "levcomp.lpp"
;
	YY_BREAK
case 67:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 224 "levcomp.lpp"
;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 226 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 2050 "levcomp.lex.cc"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(MAPDEF):
			case YY_STATE_EOF(LUA):
			case YY_STATE_EOF(LUA_ONELINER):
			case YY_STATE_EOF(ARGUMENT):
			case YY_STATE_EOF(MNAME):
			case YY_STATE_EOF(KEYWORDS):
			case YY_STATE_EOF(ITEM_LIST):
			case YY_STATE_EOF(TOEOL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 932 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 932 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 931);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');
	if ( yy_current_buffer->yy_at_bol )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 226 "levcomp.lpp"


int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}
