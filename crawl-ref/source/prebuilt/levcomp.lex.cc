#line 2 "levcomp.lex.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvs/root/flex/flex/skel.c,v 1.2 2004/05/07 00:28:17 jkh Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 63
#define YY_END_OF_BUFFER 64
static yyconst short int yy_acclist[2559] =
    {   0,
        3,    3,   64,   62,   63,   57,   62,   63,   57,   63,
       60,   62,   63,   58,   62,   63,   59,   62,   63,   53,
       62,   63,   52,   62,   63,   54,   62,   63,   62,   63,
       62,   63,   62,   63,   62,   63,   62,   63,   62,   63,
       62,   63,   62,   63,   62,   63,   62,   63,   62,   63,
       62,   63,   62,   63,   62,   63,   62,   63,   62,   63,
       62,   63,   62,   63,   62,   63,   62,   63,   62,   63,
        5,   62,   63,   62,   63,   62,   63,    3,   62,   63,
        3,   58,   62,   63,    3,   59,   62,   63,    3,   52,
       62,   63,    3,   54,   62,   63,    3,   62,   63,    3,

       62,   63,    3,   62,   63,    3,   62,   63,    3,   62,
       63,    3,   62,   63,    3,   62,   63,    3,   62,   63,
        3,   62,   63,    3,   62,   63,    3,   62,   63,    3,
       62,   63,    3,   62,   63,    3,   62,   63,    3,   62,
       63,    3,   62,   63,    3,   62,   63,    3,   62,   63,
        3,   62,   63,    3,   62,   63,    3,   62,   63,    3,
        5,   62,   63,    3,   62,   63,    3,   62,   63,    3,
       62,   63,   62,   63,   56,   57,   63,   57,   62,   63,
       60,   62,   63,   58,   62,   63,   59,   62,   63,   53,
       62,   63,   52,   62,   63,   54,   62,   63,   62,   63,

       62,   63,   62,   63,   62,   63,   62,   63,   62,   63,
       62,   63,   62,   63,   62,   63,   62,   63,   62,   63,
       62,   63,   62,   63,   62,   63,   62,   63,   62,   63,
       62,   63,   62,   63,   62,   63,   62,   63,   62,   63,
        5,   62,   63,   62,   63,   62,   63,   62,   63,   37,
       57,   62,   63,   36,   57,   63,   57,   62,   63,   60,
       62,   63,   58,   62,   63,   59,   62,   63,   35,   53,
       62,   63,   52,   62,   63,   54,   62,   63,   62,   63,
       62,   63,   62,   63,   62,   63,   62,   63,   62,   63,
       62,   63,   62,   63,   62,   63,   62,   63,   62,   63,

       62,   63,   62,   63,   62,   63,   62,   63,   62,   63,
       62,   63,   62,   63,   62,   63,   62,   63,   62,   63,
        5,   62,   63,   62,   63,   62,   63,   32,   57,   62,
       63,   33,   57,   63,   57,   62,   63,   31,   52,   62,
       63,   31,   54,   62,   63,   31,   62,   63,   31,   62,
       63,   31,   62,   63,   31,   62,   63,   31,   62,   63,
       31,   62,   63,   31,   62,   63,   31,   62,   63,   31,
       62,   63,   31,   62,   63,   31,   62,   63,   31,   62,
       63,   31,   62,   63,   31,   62,   63,   31,   62,   63,
       31,   62,   63,   31,   62,   63,   31,   62,   63,   31,

       62,   63,   31,   62,   63,   31,   62,   63,   31,   62,
       63,   31,   62,   63,   57,   54,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,    5,   61,    5,   61,   61,    3,    3,   54,    3,
       61,    3,   61,    3,   61,    3,   61,    3,   61,    3,
       61,    3,   61,    3,   61,    3,   61,    3,   61,    3,
       61,    3,   61,    3,   61,    3,   61,    3,   61,    3,
       61,    3,   61,    3,   61,    3,   61,    3,   61,    3,
       61,    3,   61,    3,   61,    3,   61,    3,   61,    5,

        2,    5,    3,    5,    3,   61,    3,   61,    3,    5,
        3,   61,    3,   61,    3,   61,   55,   56,   57,   54,
       55,   55,   61,   55,   61,   55,   61,   55,   61,   55,
       61,   55,   61,   55,   61,   55,   61,   55,   61,   55,
       61,   55,   61,   55,   61,   55,   61,   55,   61,   55,
       61,   55,   61,   55,   61,   55,   61,   55,   61,   55,
       61,   55,   61,   55,   61,   55,   61,   55,   61,   55,
       61,    5,   55,    5,   55,   61,    5,   55,   55,   61,
       55,   61,   57,   36,   57,   57,   54,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,    5,   61,    5,   61,   61,   32,   57,   33,
       57,   57,   31,   31,   54,   31,   61,   31,   61,   31,
       61,   31,   61,   31,   61,   31,   61,   31,   61,   31,
       61,   31,   61,   31,   61,   31,   61,   31,   61,   31,
       61,   31,   61,   31,   61,   31,   61,   31,   61,   31,
       61,   31,   61,   31,   61,   31,   61,   31,   61,   31,
       61,   31,   61,   31,   61,   31,   61,   31,   61,   31,
       61,   61,   61,   61,   61,   61,   24,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,    4,   61,    3,   61,    3,   61,    3,   61,
        3,   61,    3,   61,    3,   24,   61,    3,   61,    3,
       61,    3,   61,    3,   61,    3,   61,    3,   61,    3,
       61,    3,   61,    3,   61,    3,   61,    3,   61,    3,
       61,    3,   61,    3,   61,    3,   61,    3,   61,    3,
       61,    3,   61,    3,   61,    3,   61,    3,   61,    3,
       61,    3,   61,    3,   61,    3,   24,   61,    3,    4,
       61,    3,    5,    3,   61,   55,   61,   55,   61,   55,
       61,   55,   61,   55,   61,   24,   55,   61,   55,   61,

       55,   61,   55,   61,   55,   61,   55,   61,   55,   61,
       55,   61,   55,   61,   55,   61,   55,   61,   55,   61,
       55,   61,   55,   61,   55,   61,   55,   61,   55,   61,
       55,   61,   55,   61,   55,   61,   55,   61,   55,   61,
       55,   61,   55,   61,   55,   61,    4,   55,   61,   34,
       34,   54,   34,   61,   34,   61,   34,   61,   34,   61,
       34,   61,   34,   61,   24,   34,   61,   34,   61,   34,
       61,   34,   61,   34,   61,   34,   61,   34,   61,   34,
       61,   34,   61,   34,   61,   34,   61,   34,   61,   34,
       61,   34,   61,   34,   61,   34,   61,   34,   61,   34,

       61,   34,   61,   34,   61,   34,   61,   34,   61,   34,
       61,   34,   61,   34,   61,    5,   34,    4,   34,   61,
       34,   61,    5,   34,   34,   61,   34,   61,   31,   61,
       31,   61,   31,   61,   31,   61,   31,   61,   24,   31,
       61,   31,   61,   31,   61,   31,   61,   31,   61,   31,
       61,   31,   61,   31,   61,   31,   61,   31,   61,   31,
       61,   31,   61,   31,   61,   31,   61,   31,   61,   31,
       61,   31,   61,   31,   61,   31,   61,   31,   61,   31,
       61,   31,   61,   31,   61,   31,   61,   31,   61,    4,
       31,   61,   61,   61,   61,   61,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   45,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   46,   61,    3,   61,    3,   61,
        3,   61,    3,   61,    3,   61,    3,   61,    3,   61,
        3,   61,    3,   61,    3,   61,    3,   61,    3,   61,
        3,   61,    3,   61,    3,   61,    3,   61,    3,   61,
        3,   61,    3,   61,    3,   61,    3,   61,    3,   61,
        3,   45,   61,    3,   61,    3,   61,    3,   61,    3,
       61,    3,   61,    3,   61,    3,   61,    3,   61,    3,
       46,   61,    3,   61,    3,   61,   55,   61,   55,   61,

       55,   61,   55,   61,   55,   61,   55,   61,   55,   61,
       55,   61,   55,   61,   55,   61,   55,   61,   55,   61,
       55,   61,   55,   61,   55,   61,   55,   61,   55,   61,
       55,   61,   55,   61,   55,   61,   55,   61,   55,   61,
       45,   55,   61,   55,   61,   55,   61,   55,   61,   55,
       61,   55,   61,   55,   61,   55,   61,   55,   61,   46,
       55,   61,   34,   61,   34,   61,   34,   61,   34,   61,
       34,   61,   34,   61,   34,   61,   34,   61,   34,   61,
       34,   61,   34,   61,   34,   61,   34,   61,   34,   61,
       34,   61,   34,   61,   34,   61,   34,   61,   34,   61,

       34,   61,   34,   61,   34,   61,   34,   45,   61,   34,
       61,   34,   61,   34,   61,   34,   61,   34,   61,   34,
       61,   34,   61,   34,   61,   34,   46,   61,   31,   61,
       31,   61,   31,   61,   31,   61,   31,   61,   31,   61,
       31,   61,   31,   61,   31,   61,   31,   61,   31,   61,
       31,   61,   31,   61,   31,   61,   31,   61,   31,   61,
       31,   61,   31,   61,   31,   61,   31,   61,   31,   61,
       31,   61,   31,   45,   61,   31,   61,   31,   61,   31,
       61,   31,   61,   31,   61,   31,   61,   31,   61,   31,
       61,   31,   46,   61,   61,   61,   61,   61,   18,   61,

       61,   61,   61,   61,   23,   61,   15,   61,    6,   61,
       61,   61,   61,   61,   61,   61,   13,   61,   61,   51,
       61,   61,   61,   61,   43,   61,   61,   44,   61,    3,
       61,    3,   61,    3,   61,    3,   61,    3,   61,    3,
       61,    3,   61,    3,   61,    3,   61,    3,   23,   61,
        3,   61,    3,   61,    3,   61,    3,   61,    3,   61,
        3,   61,    3,   61,    3,   61,    3,   61,    3,   61,
        3,   51,   61,    3,   61,    3,   61,    3,   61,    3,
       43,   61,    3,   61,    3,   44,   61,    3,   61,    3,
       61,   55,   61,   55,   61,   55,   61,   55,   61,   18,

       55,   55,   61,   55,   61,   55,   61,   55,   61,   55,
       61,   23,   55,   61,   15,   55,   55,   61,    6,   55,
       55,   61,   55,   61,   55,   61,   55,   61,   55,   61,
       55,   61,   55,   61,   13,   55,   55,   61,   55,   61,
       51,   55,   61,   55,   61,   55,   61,   55,   61,   43,
       55,   61,   55,   61,   44,   55,   61,   34,   61,   34,
       61,   34,   61,   34,   61,   18,   34,   34,   61,   34,
       61,   34,   61,   34,   61,   34,   61,   23,   34,   61,
       15,   34,   34,   61,    6,   34,   34,   61,   34,   61,
       34,   61,   34,   61,   34,   61,   34,   61,   34,   61,

       13,   34,   34,   61,   34,   61,   34,   51,   61,   34,
       61,   34,   61,   34,   61,   34,   43,   61,   34,   61,
       34,   44,   61,   31,   61,   31,   61,   31,   61,   31,
       61,   31,   61,   31,   61,   31,   61,   31,   61,   31,
       61,   23,   31,   61,   31,   61,   31,   61,   31,   61,
       31,   61,   31,   61,   31,   61,   31,   61,   31,   61,
       31,   61,   31,   61,   31,   51,   61,   31,   61,   31,
       61,   31,   61,   31,   43,   61,   31,   61,   31,   44,
       61,   61,   61,   61,    8,   61,   61,   61,   12,   61,
       61,   61,   10,   61,   61,   61,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   61,    3,   61,
        3,   61,    3,   61,    3,   61,    3,   61,    3,   61,
        3,   61,    3,   61,    3,   61,    3,   61,    3,   61,
        3,   61,    3,   61,    3,   61,    3,   61,    3,   61,
        3,   61,    3,   61,    3,   61,    3,   61,    3,   61,
        3,   61,    3,   61,    3,   61,    1,    3,   61,   55,
       61,   55,   61,   55,   61,    8,   55,   55,   61,   55,
       61,   55,   61,   12,   55,   55,   61,   55,   61,   55,
       61,   10,   55,   55,   61,   55,   61,   55,   61,   55,
       61,   55,   61,   55,   61,   55,   61,   55,   61,   55,

       61,   55,   61,   55,   61,   55,   61,   55,   61,   55,
       61,   55,   61,   34,   61,   34,   61,   34,   61,    8,
       34,   34,   61,   34,   61,   34,   61,   12,   34,   34,
       61,   34,   61,   34,   61,   10,   34,   34,   61,   34,
       61,   34,   61,   34,   61,   34,   61,   34,   61,   34,
       61,   34,   61,   34,   61,   34,   61,   34,   61,   34,
       61,   34,   61,   34,   61,   34,   61,   31,   61,   31,
       61,   31,   61,   31,   61,   31,   61,   31,   61,   31,
       61,   31,   61,   31,   61,   31,   61,   31,   61,   31,
       61,   31,   61,   31,   61,   31,   61,   31,   61,   31,

       61,   31,   61,   31,   61,   31,   61,   31,   61,   31,
       61,   31,   61,   31,   61,   19,   61,   11,   17,   61,
       61,   61,   61,   61,   61,    9,   61,   25,   61,   61,
       14,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,    3,   61,    3,   17,   61,    3,   61,    3,   61,
        3,   61,    3,   61,    3,   61,    3,   61,    3,   61,
        3,   61,    3,   61,    3,   61,    3,   61,    3,   61,
        3,   61,    3,   61,    3,   61,    3,   61,    3,   61,
        3,   61,   19,   55,   55,   61,   11,   55,   17,   55,
       61,   55,   61,   55,   61,   55,   61,   55,   61,   55,

       61,    9,   55,   55,   61,   25,   55,   55,   61,   55,
       61,   14,   55,   55,   61,   55,   61,   55,   61,   55,
       61,   55,   61,   55,   61,   55,   61,   55,   61,   55,
       61,   55,   61,   19,   34,   34,   61,   11,   34,   17,
       34,   61,   34,   61,   34,   61,   34,   61,   34,   61,
       34,   61,    9,   34,   34,   61,   25,   34,   34,   61,
       34,   61,   14,   34,   34,   61,   34,   61,   34,   61,
       34,   61,   34,   61,   34,   61,   34,   61,   34,   61,
       34,   61,   34,   61,   31,   61,   17,   31,   61,   31,
       61,   31,   61,   31,   61,   31,   61,   31,   61,   31,

       61,   31,   61,   31,   61,   31,   61,   31,   61,   31,
       61,   31,   61,   31,   61,   31,   61,   31,   61,   31,
       61,   31,   61,   31,   61,   61,   61,   61,   61,   61,
       29,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,    3,   61,    3,   61,    3,   61,
        3,   61,    3,   61,    3,   29,   61,    3,   61,    3,
       61,    3,   61,    3,    3,   61,    3,   61,    3,   61,
        3,   61,    3,   61,    3,   61,    3,   61,    3,   61,
        3,   61,   55,   61,   55,   61,   55,   61,   55,   61,
       55,   61,   29,   55,   61,   55,   61,   55,   61,   55,

       61,   55,   55,   61,   55,   61,   55,   61,   55,   61,
       55,   61,   55,   61,   55,   61,   55,   61,   55,   61,
       34,   61,   34,   61,   34,   61,   34,   61,   34,   61,
       29,   34,   61,   34,   61,   34,   61,   34,   61,   34,
       34,   61,   34,   61,   34,   61,   34,   61,   34,   61,
       34,   61,   34,   61,   34,   61,   34,   61,   31,   61,
       31,   61,   31,   61,   31,   61,   31,   61,   29,   31,
       61,   31,   61,   31,   61,   31,   61,   31,   31,   61,
       31,   61,   31,   61,   31,   61,   31,   61,   31,   61,
       31,   61,   31,   61,   31,   61,   61,   61,   61,   28,

       61,   61,   61,   61,   42,   61,   61,   41,   61,   61,
       47,   61,   48,   61,   61,   49,   61,   50,   61,    3,
       61,    3,   61,    3,   61,    3,   61,    3,   61,    3,
       61,    3,   61,    3,    3,   42,   61,    3,   61,    3,
       41,   61,    3,   61,    3,   47,   61,    3,   48,   61,
        3,   61,    3,   49,   61,    3,   50,   61,   55,   61,
       55,   61,   55,   61,   28,   55,   55,   61,   55,   61,
       55,   61,   55,   61,   55,   42,   55,   61,   55,   61,
       41,   55,   61,   55,   61,   47,   55,   61,   48,   55,
       61,   55,   61,   49,   55,   61,   50,   55,   61,   34,

       61,   34,   61,   34,   61,   28,   34,   34,   61,   34,
       61,   34,   61,   34,   61,   34,   34,   42,   61,   34,
       61,   34,   41,   61,   34,   61,   34,   47,   61,   34,
       48,   61,   34,   61,   34,   49,   61,   34,   50,   61,
       31,   61,   31,   61,   31,   61,   31,   61,   31,   61,
       31,   61,   31,   61,   31,   31,   42,   61,   31,   61,
       31,   41,   61,   31,   61,   31,   47,   61,   31,   48,
       61,   31,   61,   31,   49,   61,   31,   50,   61,   16,
       61,   27,   61,   61,   61,   61,   39,   61,   40,   61,
       38,   61,    3,   61,    3,   61,    3,   61,    3,   61,

        3,   61,    3,    3,   39,   61,    3,   40,   61,    3,
       38,   61,   16,   55,   55,   61,   27,   55,   55,   61,
       55,   61,   55,   61,   55,   61,   55,   39,   55,   61,
       40,   55,   61,   38,   55,   61,   16,   34,   34,   61,
       27,   34,   34,   61,   34,   61,   34,   61,   34,   61,
       34,   34,   39,   61,   34,   40,   61,   34,   38,   61,
       31,   61,   31,   61,   31,   61,   31,   61,   31,   61,
       31,   31,   39,   61,   31,   40,   61,   31,   38,   61,
       30,   61,   61,   26,   61,   20,    3,   30,   61,    3,
       61,    3,   61,    3,   30,   55,   61,   55,   61,   26,

       55,   55,   61,   20,   55,   55,   30,   34,   61,   34,
       61,   26,   34,   34,   61,   20,   34,   34,   30,   31,
       61,   31,   61,   31,   61,   31,   61,   22,    3,   61,
        3,   55,   61,   22,   55,   55,   34,   61,   22,   34,
       34,   31,   61,   31,   21,    3,   21,   55,   55,   21,
       34,   34,   31,    7,    7,   55,    7,   34
    } ;

static yyconst short int yy_accept[1350] =
    {   0,
        1,    1,    1,    2,    3,    3,    3,    3,    3,    3,
        3,    4,    6,    9,   11,   14,   17,   20,   23,   26,
       29,   31,   33,   35,   37,   39,   41,   43,   45,   47,
       49,   51,   53,   55,   57,   59,   61,   63,   65,   67,
       69,   71,   74,   76,   78,   81,   85,   89,   93,   97,
      100,  103,  106,  109,  112,  115,  118,  121,  124,  127,
      130,  133,  136,  139,  142,  145,  148,  151,  154,  157,
      160,  164,  167,  170,  173,  175,  178,  181,  184,  187,
      190,  193,  196,  199,  201,  203,  205,  207,  209,  211,
      213,  215,  217,  219,  221,  223,  225,  227,  229,  231,

      233,  235,  237,  239,  241,  244,  246,  248,  250,  254,
      257,  260,  263,  266,  269,  273,  276,  279,  281,  283,
      285,  287,  289,  291,  293,  295,  297,  299,  301,  303,
      305,  307,  309,  311,  313,  315,  317,  319,  321,  324,
      326,  328,  332,  335,  338,  342,  346,  349,  352,  355,
      358,  361,  364,  367,  370,  373,  376,  379,  382,  385,
      388,  391,  394,  397,  400,  403,  406,  409,  412,  415,
      416,  417,  418,  419,  420,  421,  422,  423,  424,  425,
      426,  427,  428,  429,  430,  431,  432,  433,  434,  435,
      436,  437,  438,  439,  440,  441,  442,  443,  444,  445,

      446,  447,  448,  450,  452,  454,  456,  458,  460,  462,
      464,  466,  468,  470,  472,  474,  476,  478,  480,  482,
      484,  486,  488,  490,  492,  494,  496,  498,  500,  501,
      502,  503,  505,  507,  509,  511,  513,  515,  517,  518,
      518,  520,  522,  524,  526,  528,  530,  532,  534,  536,
      538,  540,  542,  544,  546,  548,  550,  552,  554,  556,
      558,  560,  562,  564,  566,  568,  570,  572,  574,  575,
      577,  579,  581,  583,  583,  584,  586,  587,  588,  589,
      590,  591,  592,  593,  594,  595,  596,  597,  598,  599,
      600,  601,  602,  603,  604,  605,  606,  607,  608,  609,

      610,  611,  612,  613,  614,  615,  616,  617,  618,  620,
      622,  623,  624,  626,  628,  630,  632,  634,  636,  638,
      640,  642,  644,  646,  648,  650,  652,  654,  656,  658,
      660,  662,  664,  666,  668,  670,  672,  674,  676,  678,
      680,  682,  683,  684,  685,  686,  687,  689,  690,  691,
      692,  693,  694,  695,  696,  697,  698,  699,  700,  701,
      702,  703,  704,  705,  706,  707,  708,  709,  710,  711,
      712,  713,  715,  717,  719,  721,  723,  725,  728,  730,
      732,  734,  736,  738,  740,  742,  744,  746,  748,  750,
      752,  754,  756,  758,  760,  762,  764,  766,  768,  770,

      772,  774,  776,  779,  782,  784,  786,  788,  790,  792,
      794,  796,  799,  801,  803,  805,  807,  809,  811,  813,
      815,  817,  819,  821,  823,  825,  827,  829,  831,  833,
      835,  837,  839,  841,  843,  845,  847,  850,  851,  853,
      855,  857,  859,  861,  863,  865,  868,  870,  872,  874,
      876,  878,  880,  882,  884,  886,  888,  890,  892,  894,
      896,  898,  900,  902,  904,  906,  908,  910,  912,  914,
      916,  918,  921,  923,  925,  927,  929,  931,  933,  935,
      937,  939,  942,  944,  946,  948,  950,  952,  954,  956,
      958,  960,  962,  964,  966,  968,  970,  972,  974,  976,

      978,  980,  982,  984,  986,  988,  990,  993,  994,  995,
      996,  997,  998,  999, 1000, 1001, 1002, 1003, 1004, 1005,
     1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
     1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027,
     1029, 1031, 1033, 1035, 1037, 1039, 1041, 1043, 1045, 1047,
     1049, 1051, 1053, 1055, 1057, 1059, 1061, 1063, 1065, 1067,
     1069, 1071, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088,
     1090, 1093, 1095, 1097, 1099, 1101, 1103, 1105, 1107, 1109,
     1111, 1113, 1115, 1117, 1119, 1121, 1123, 1125, 1127, 1129,
     1131, 1133, 1135, 1137, 1139, 1141, 1144, 1146, 1148, 1150,

     1152, 1154, 1156, 1158, 1160, 1163, 1165, 1167, 1169, 1171,
     1173, 1175, 1177, 1179, 1181, 1183, 1185, 1187, 1189, 1191,
     1193, 1195, 1197, 1199, 1201, 1203, 1205, 1207, 1210, 1212,
     1214, 1216, 1218, 1220, 1222, 1224, 1226, 1229, 1231, 1233,
     1235, 1237, 1239, 1241, 1243, 1245, 1247, 1249, 1251, 1253,
     1255, 1257, 1259, 1261, 1263, 1265, 1267, 1269, 1271, 1273,
     1276, 1278, 1280, 1282, 1284, 1286, 1288, 1290, 1292, 1295,
     1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305,
     1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316,
     1317, 1318, 1319, 1320, 1322, 1323, 1324, 1325, 1327, 1328,

     1330, 1332, 1334, 1336, 1338, 1340, 1342, 1344, 1346, 1348,
     1351, 1353, 1355, 1357, 1359, 1361, 1363, 1365, 1367, 1369,
     1371, 1374, 1376, 1378, 1380, 1383, 1385, 1388, 1390, 1392,
     1394, 1396, 1398, 1400, 1402, 1404, 1406, 1408, 1410, 1412,
     1415, 1417, 1419, 1421, 1423, 1425, 1427, 1429, 1431, 1433,
     1435, 1437, 1439, 1441, 1444, 1446, 1448, 1450, 1453, 1455,
     1458, 1460, 1462, 1464, 1466, 1468, 1470, 1472, 1474, 1476,
     1478, 1481, 1483, 1485, 1487, 1489, 1491, 1493, 1495, 1497,
     1499, 1501, 1503, 1505, 1507, 1510, 1512, 1514, 1516, 1519,
     1521, 1524, 1526, 1528, 1530, 1532, 1534, 1536, 1538, 1540,

     1542, 1545, 1547, 1549, 1551, 1553, 1555, 1557, 1559, 1561,
     1563, 1565, 1568, 1570, 1572, 1574, 1577, 1579, 1582, 1583,
     1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593,
     1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603,
     1604, 1605, 1606, 1607, 1608, 1609, 1611, 1613, 1615, 1617,
     1619, 1621, 1623, 1625, 1627, 1629, 1631, 1633, 1635, 1637,
     1639, 1641, 1643, 1645, 1647, 1649, 1651, 1653, 1655, 1657,
     1660, 1662, 1664, 1666, 1668, 1670, 1672, 1674, 1676, 1678,
     1680, 1682, 1684, 1686, 1688, 1690, 1692, 1694, 1696, 1698,
     1700, 1702, 1704, 1706, 1708, 1710, 1712, 1714, 1716, 1718,

     1720, 1722, 1724, 1726, 1728, 1730, 1732, 1734, 1736, 1738,
     1740, 1742, 1744, 1746, 1748, 1750, 1752, 1754, 1756, 1758,
     1760, 1762, 1764, 1766, 1768, 1770, 1772, 1774, 1776, 1778,
     1780, 1782, 1784, 1786, 1788, 1790, 1792, 1794, 1796, 1798,
     1800, 1802, 1804, 1806, 1808, 1810, 1812, 1814, 1816, 1817,
     1818, 1819, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828,
     1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838,
     1839, 1840, 1841, 1842, 1844, 1847, 1849, 1851, 1853, 1855,
     1857, 1859, 1861, 1863, 1865, 1867, 1869, 1871, 1873, 1875,
     1877, 1879, 1881, 1883, 1885, 1887, 1889, 1892, 1894, 1896,

     1898, 1900, 1902, 1904, 1906, 1908, 1910, 1912, 1914, 1916,
     1918, 1920, 1922, 1924, 1926, 1928, 1930, 1932, 1934, 1936,
     1938, 1940, 1943, 1945, 1947, 1949, 1951, 1953, 1955, 1957,
     1959, 1961, 1963, 1965, 1967, 1969, 1971, 1973, 1975, 1977,
     1979, 1981, 1983, 1985, 1987, 1990, 1992, 1994, 1996, 1998,
     2000, 2002, 2004, 2006, 2008, 2010, 2012, 2014, 2016, 2018,
     2020, 2022, 2024, 2026, 2027, 2028, 2029, 2030, 2031, 2033,
     2034, 2035, 2036, 2036, 2037, 2038, 2039, 2040, 2041, 2042,
     2043, 2044, 2045, 2047, 2049, 2051, 2053, 2055, 2058, 2060,
     2062, 2064, 2065, 2067, 2069, 2071, 2073, 2075, 2077, 2079,

     2081, 2083, 2085, 2087, 2089, 2091, 2093, 2096, 2098, 2100,
     2102, 2103, 2105, 2107, 2109, 2111, 2113, 2115, 2117, 2119,
     2121, 2123, 2125, 2127, 2129, 2131, 2134, 2136, 2138, 2140,
     2141, 2143, 2145, 2147, 2149, 2151, 2153, 2155, 2157, 2159,
     2161, 2163, 2165, 2167, 2169, 2172, 2174, 2176, 2178, 2179,
     2181, 2183, 2185, 2187, 2189, 2191, 2193, 2195, 2197, 2198,
     2199, 2200, 2201, 2202, 2203, 2204, 2205, 2205, 2207, 2208,
     2210, 2211, 2213, 2215, 2216, 2218, 2220, 2222, 2224, 2226,
     2228, 2230, 2232, 2234, 2235, 2238, 2240, 2243, 2245, 2248,
     2251, 2253, 2256, 2259, 2261, 2263, 2265, 2267, 2269, 2271,

     2273, 2275, 2276, 2279, 2281, 2284, 2286, 2289, 2292, 2294,
     2297, 2300, 2302, 2304, 2306, 2308, 2310, 2312, 2314, 2316,
     2317, 2320, 2322, 2325, 2327, 2330, 2333, 2335, 2338, 2341,
     2343, 2345, 2347, 2349, 2351, 2353, 2355, 2356, 2359, 2361,
     2364, 2366, 2369, 2372, 2374, 2377, 2380, 2381, 2382, 2383,
     2384, 2385, 2386, 2387, 2387, 2389, 2391, 2393, 2395, 2397,
     2399, 2401, 2403, 2404, 2407, 2410, 2413, 2415, 2417, 2419,
     2421, 2423, 2425, 2427, 2428, 2431, 2434, 2437, 2439, 2441,
     2443, 2445, 2447, 2449, 2451, 2452, 2455, 2458, 2461, 2463,
     2465, 2467, 2469, 2471, 2472, 2475, 2478, 2481, 2483, 2484,

     2485, 2486, 2487, 2487, 2490, 2492, 2494, 2495, 2498, 2500,
     2502, 2504, 2506, 2507, 2510, 2512, 2514, 2516, 2518, 2519,
     2522, 2524, 2526, 2527, 2528, 2529, 2529, 2531, 2532, 2534,
     2536, 2537, 2539, 2541, 2542, 2544, 2545, 2546, 2546, 2547,
     2549, 2550, 2552, 2553, 2554, 2555, 2557, 2559, 2559
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    7,    7,    7,    1,    8,
        9,    7,    7,   10,   11,    7,    1,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   13,    1,    7,
        7,    7,    7,    7,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       23,   30,   31,   32,   33,   34,   23,   35,   36,   23,
        7,    1,    7,    7,   37,    1,   38,   23,   39,   40,

       41,   42,   23,   43,   44,   23,   23,   45,   46,   47,
       48,   49,   23,   50,   51,   52,   53,   54,   55,   23,
       23,   23,    7,    7,    7,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[56] =
    {   0,
        1,    1,    2,    3,    1,    4,    4,    4,    4,    3,
        5,    6,    1,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6
    } ;

static yyconst short int yy_base[1367] =
    {   0,
        0,   50,  101,  151,  202,  252,  303,  353,  404,  454,
     4209, 4210,   55,   58, 4210, 4210, 4210, 4210, 4210, 4196,
        0, 4177, 4185, 4187,   36, 4179, 4185, 4174, 4187, 4170,
       39, 4171, 4162, 4183, 4155,   28, 4150, 4146, 4155, 4144,
     4150,    0,   53,  455,    0,    0,    0,    0, 4178,   71,
      152,   77,  165,  159,  254,  181,  260,   83,  266,  355,
      274,  361,  283,  456,  462,  468,  476,  482,  508,  519,
      372,  526,  534,  557,   66,  176,  193,   70,   91,  160,
      189,  196,  382,  608,  621,   66,  246,  360,  268,  269,
      256,  171, 4159,  366,  371,  145,  464,  229,  474,  348,

      335,  469,  462,  330,  494,  508,  525,    0,  555,  567,
      575,    0,    0,    0, 4210,    0, 4176,  651,  664,  694,
      715,  733,  519,  554,  557,  553,  560,  572,  566,  606,
      610,  608,  641,  609,  613,  512,  656,  651,  291,  683,
      721,  600,  678,  710,    0, 4175, 4175,  609,  377,  484,
      663,  461,  490,  563,  538,  676,  725,  627,  575,  636,
       58,  714,  674,  682,  720,  697,  721,  743,  759,  771,
     4173,    0, 4170, 4169,  724,  732, 4160,  568, 4147, 4153,
     4153, 4156, 4163, 4154, 4161,  495, 4148, 4153, 4130, 4120,
     4131, 4121,  726, 4121, 4114, 4115,    0, 4136,    0, 4150,

      760,    0, 4151,  771,  781,  790,  806,  812,  825,  832,
      842,  848,  855,  861,  871,  880,  886,  897,  903,  910,
      925,  931,  937,  943,  949,  955,  962,  972,  399, 4210,
      780,  991,  999, 1011, 1023, 1035, 1041, 1050,  789,  798,
      824,  804, 4132,  828,  860,  958,  792,  707,  970,  633,
      869,  894,  843,  893,  905,  945,  981,  896,  983,  911,
      984,  764,  917, 1023,  854, 1021, 1015,  970, 1028, 1008,
     1061, 1040, 1058, 4159, 1075, 1078, 1083, 1027, 1109, 1122,
     1136, 1150, 1073, 1077, 1146, 1064, 1135, 1154, 1165, 1157,
     1170, 1176, 1181, 1185, 1198, 1184, 1201, 1202, 1205, 1206,

     1219, 1220, 1226, 1065, 1239, 1087, 1240, 1255, 1260, 1276,
     1285,    0, 4148, 4148, 1089, 1156, 1264, 1102,  507, 1271,
     1060, 1121,  819, 1171, 1208, 1180, 1233, 1212, 1114, 1001,
     1249, 1061, 1167, 1254, 1261,  979, 1115, 1256, 1110, 1283,
     1290, 4131, 4130, 4142, 4123, 4138, 4127, 4122, 4119, 4130,
     4121, 4130, 4116, 4128, 4127, 4128, 4116, 4109, 4117, 4108,
     4124, 4107, 4099, 4084, 4087, 4096, 1260, 4081, 4092, 4079,
     4078,    0, 1311, 1317, 1323, 1339, 1345, 1351, 1357, 1367,
     1373, 1383, 1389, 1395, 1406, 1412, 1425, 1431, 1437, 1443,
     1453, 1465, 1475, 1481, 1487, 1493, 1502, 1509, 1515, 1521,

     1527, 1536, 1542, 1549, 1568, 1576, 1278, 1282, 1262, 1283,
      751, 1216, 4099, 1303, 1178, 1312, 1309, 1339, 1325, 1392,
     1274, 1356, 1355, 1405, 1395, 1306, 1378, 1417, 1423, 1319,
     1427, 1546, 1426, 1439, 1473, 1534, 4098, 4125, 1495, 1546,
     1572, 1575, 1576, 1579, 1593, 1594, 1597, 1600, 1614, 1611,
     1617, 1618, 1632, 1635, 1636, 1641, 1640, 1655, 1656, 1661,
     1662, 1670, 1675, 1676, 1681, 1692, 1684, 1697, 1701, 1710,
     1741, 1719, 1725, 1745, 1738, 1752, 1535, 1630, 1452, 1480,
      673, 1651,  841, 1560, 1457,  887, 1135, 1543, 1603, 1691,
     1667, 1671, 1685, 1748, 1586, 1749, 1627, 1606, 1604, 1686,

     1750, 1720, 1714, 1526, 1754, 1757, 4115, 4109, 4108, 4090,
     4101, 4108, 4092, 4083, 4081, 4086, 4086, 4090, 1701, 4101,
     4086, 4094, 4089, 4085, 4072, 4071, 4079, 4093, 4052,    0,
     4058, 4051, 4056, 4053, 4054, 4056, 4057, 4054,    0, 1778,
     1784, 1790, 1804, 1811, 1820, 1826, 1832, 1843, 1849, 1857,
     1864, 1877, 1886, 1892, 1898, 1908, 1915, 1921, 1928, 1934,
     1942, 1953, 1959, 1965, 1972, 1978, 1985, 1991, 2000, 2013,
     2021, 2029, 2038, 1786, 1791, 1743, 1484, 1817, 1747, 1778,
     1816, 1749, 4066, 1692, 1829, 1878, 1851, 1398, 1814, 1952,
     1850, 1881, 1916, 1925, 1752, 4065, 1958, 1815, 1993, 1927,

     2012, 1846, 1960, 1882, 4064, 2032, 2036, 2040, 2041, 2055,
     1984, 2047, 2056, 2060, 2069, 2076, 2077, 2084, 2083, 2063,
     2097, 2092, 2101, 2105, 2112, 2116, 2108, 2125, 2129, 2133,
     2134, 2138, 2147, 2152, 2153, 2158, 2169, 2135, 2139, 2157,
     2138, 2003, 2022, 2163, 2043, 2180, 2162, 2093, 2191, 2192,
     2185, 2195, 2111, 2196, 2197, 2198, 2186, 2204, 2199, 4082,
     2205, 1958, 2207, 2208, 2209, 1920, 2213, 2214, 4081, 4070,
     4072, 4064, 4075, 4210, 4060, 4049, 4059, 4071, 4046,    0,
     4210, 4064, 4210, 4049, 4067, 4045, 4046, 4061, 4059, 4050,
     4210, 4029, 4024,    0, 4028, 4019, 4026, 2181, 4023, 2185,

     2221, 2252, 2237, 2258, 2266, 2272, 2278, 2288, 2299, 2305,
     2311, 2317, 2324, 2332, 2339, 2345, 2351, 2366, 2372, 2378,
     2386, 2392, 2398, 2404, 2412, 2422, 2431, 2448, 2438, 2149,
     2219, 2208, 2285, 2237, 2220, 2297, 2262, 2352, 2333, 4038,
     2298, 2273, 2340, 2337, 2395, 2392, 2358, 2252, 2434, 2433,
     2412, 2430, 2394, 4037, 2246, 2431, 2432, 2439, 2435, 2441,
     2466, 2460, 2473, 2480, 4064, 2481, 2484, 2488, 2503, 2499,
     2504, 4063, 2508, 4062, 2512, 2527, 2519, 2523, 2541, 2530,
     2544, 4061, 2545, 2548, 2549, 2552, 2563, 2569, 2570, 2574,
     2583, 2463, 2423, 2495, 2477, 2518, 2365, 2540, 2573, 2554,

     4051, 2455, 2574, 2596, 2490, 2576, 2605, 2593, 2606, 2310,
     2421, 4050, 1361, 2584, 2607, 2608, 2611, 2612, 2613, 4047,
     4027, 4210, 4027, 4031, 4025, 4210, 4039, 4024, 4040, 4210,
     4038, 4038, 4022, 4031, 4035, 3995, 4008, 3995, 4006, 3993,
     4004, 4000, 3992, 4001, 3997, 2626, 2639, 2653, 2662, 2668,
     2675, 2681, 2692, 2701, 2709, 2718, 2726, 2732, 2738, 2749,
     2755, 2761, 2767, 2773, 2779, 2788, 2801, 2807, 2813, 2819,
     2735, 2614, 2610, 2652, 2598, 2665, 2635, 2676, 2625, 4007,
     2683, 2700, 2691, 2698, 2761, 2712, 2706, 2801, 2762, 2475,
     2768, 2753, 2802, 2803, 2723, 2804, 2805, 2838, 2837, 2829,

     4034, 2833, 2844, 2852, 4033, 2858, 2861, 2865, 4032, 2874,
     2866, 2879, 2882, 2893, 2885, 2890, 2896, 2901, 2904, 2907,
     2912, 2921, 2928, 2929, 2826, 2791, 2827, 2871, 2918, 2931,
     2825, 2888, 2938, 2950, 2952, 2906, 2854, 2960, 2944, 2945,
     2385, 2956, 2836, 2957, 2961, 2963, 2965, 2964, 4210, 4015,
     4210,    0, 4000, 4000, 4010, 4001, 3997, 4210, 3994, 4210,
     4001, 3996, 4210, 4013, 3972, 3972, 3969, 3970, 3968, 3967,
     3970, 3965, 3964, 2971, 2979, 3001, 3007, 3014, 3020, 3033,
     3043, 3049, 3059, 3071, 3078, 3084, 3090, 3096, 3102, 3108,
     3114, 3124, 3130, 2989, 2974, 2995, 3984, 2968, 3005, 3017,

     2989, 3015, 3028, 2951, 3057, 2976, 3033, 3067, 3013, 3043,
     3076, 3023, 3094, 3097, 3098, 3053, 3113, 3115, 4011, 3136,
     4010, 3121, 3139, 3143, 3157, 3154, 3160, 4009, 3161, 4008,
     3168, 3176, 4007, 3185, 3179, 3182, 3190, 3193, 3196, 3204,
     3207, 3210, 3215, 3145, 3997, 3146, 3189, 3061, 3217, 3206,
     3136, 2647, 2748, 3996, 3207, 3101, 3220, 3229, 3237, 3238,
     3239, 3240, 3241, 3987, 3987, 3980, 3982, 3969,    0, 3964,
     3960, 3950, 3926, 3910, 3912, 3914, 3906, 3896, 3890, 3892,
     3866, 3863, 3256, 3262, 3276, 3291, 3299, 3305, 3311, 3319,
     3326, 3874, 3332, 3342, 3348, 3354, 3360, 3366, 3373, 3385,

     3392, 3271, 3263, 3301, 3244, 3379, 3883, 3380, 3248, 3312,
     3374, 3226, 3154, 3356, 3316, 3293, 3355, 3265, 3376, 3378,
     3392, 3407, 3400, 3403, 3414, 3421, 3422, 3427, 3430, 3425,
     3435, 3441, 3438, 3444, 3449, 3452, 3465, 3466, 3469, 3376,
     3242, 3283, 3402, 3304, 3901, 3465, 3463, 3471, 3871, 3466,
     3476, 3482, 3488, 3491, 3494, 3495, 3496, 3497, 3897, 3879,
     3895, 4210, 3879, 3874, 3872, 3883, 3862,    0, 3852,    0,
     3851,    0,    0, 3861,    0,    0, 3519, 3504, 3544, 3552,
     3558, 3564, 3570, 3858, 3576, 3587, 3593, 3599, 3605, 3611,
     3617, 3623, 3632, 3501, 3864, 3503, 3518, 3507, 3508, 3173,

     3524, 3631, 3863, 3512, 3862, 3538, 3861, 3860, 3517, 3839,
     3838, 3623, 3628, 3631, 3851, 3636, 3642, 3647, 3656, 3607,
     3650, 3663, 3664, 3667, 3670, 3671, 3685, 3678, 3689, 3640,
     3616, 3657, 3575, 3652, 3508, 3694, 3789, 3813, 3677, 3810,
     3680, 3778, 3724, 2014, 3718, 3692, 4210, 3614, 4210, 3588,
     3531, 3499, 3435, 3393,    0,    0,    0, 3725, 3731, 3737,
     3746, 3752, 3375, 3760, 3766, 3772, 3708, 3691, 3721, 3559,
     3698, 3340, 3757, 3745, 3322, 3229, 3130, 3116, 3766, 2874,
     3767, 3780, 3772, 3791, 3386, 3786, 3787, 3794, 3695, 3708,
     3771, 3777, 3779, 2513, 2353, 2220, 2114,    0, 2047, 4210,

     1941, 4210, 1850, 3820, 3826, 3832, 1752, 1710, 1550, 3810,
     3806, 3840, 3844, 3828, 3831, 1529, 3836, 1298, 3806, 1161,
     3840, 3841, 1055, 1021, 4210,  942, 3865,  885, 3850, 3862,
     3873, 3866,  803, 3572, 3870,  666, 4210,  633,  587, 3880,
     3885,  464, 3749,  287, 4210, 3884,  182, 4210,   94, 3916,
     3919, 3922, 3928, 3934, 3940, 3946, 3952, 3958, 3964, 3966,
     3968, 3974, 3980, 3986, 3992, 3998
    } ;

static yyconst short int yy_def[1367] =
    {   0,
     1348,    1, 1348,    3, 1348,    5, 1348,    7, 1348,    9,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1350, 1349, 1349, 1351, 1351, 1351, 1351, 1351, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1353, 1352, 1352, 1352, 1354, 1348, 1348, 1354, 1354, 1354,
     1354, 1354, 1354, 1355, 1355,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,

       85,   85,   85,   85, 1356,   85,   85, 1357, 1348, 1348,
     1348, 1357, 1357, 1357, 1348, 1357, 1357, 1358, 1358, 1358,
     1358, 1358,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122, 1359,  122,
      122, 1348, 1348, 1348, 1360, 1360, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1348,
     1348, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1350, 1349, 1350, 1349,

     1349, 1351, 1351, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1362, 1348,
     1362, 1353, 1352, 1352, 1363, 1352, 1352, 1352, 1354, 1354,
     1348, 1354,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85, 1356, 1356,   85,
     1356,   85,   85, 1364, 1348, 1348, 1348, 1364, 1365, 1365,
     1365, 1365,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,

      282,  282,  282, 1366,  282, 1366,  282,  282, 1348, 1348,
     1348, 1360, 1360, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,

     1352, 1352, 1352, 1352, 1363, 1352,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85, 1364, 1364,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
     1366,  282,  282, 1366,  282,  282, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,

     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,

       85,   85,   85,   85,   85,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1349,
     1349, 1349, 1349, 1348, 1349, 1349, 1349, 1349, 1349, 1349,
     1348, 1349, 1348, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1348, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,

     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,   85,
       85,   85,   85, 1354,   85,   85,   85,   85,   85,   85,
     1354,   85, 1354,   85,   85,   85,   85,   85,   85,   85,
     1354,   85,   85,   85,   85,   85,   85,   85,   85,   85,
      282,  282,  282,  282, 1364,  282,  282,  282,  282,  282,
      282, 1364,  282, 1364,  282,  282,  282,  282,  282,  282,
      282, 1364,  282,  282,  282,  282,  282,  282,  282,  282,
      282, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,

     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1349, 1349,
     1349, 1348, 1349, 1349, 1349, 1348, 1349, 1349, 1349, 1348,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
       85,   85,   85, 1354,   85,   85,   85, 1354,   85,   85,
       85, 1354,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,  282,  282,  282,

     1364,  282,  282,  282, 1364,  282,  282,  282, 1364,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1348, 1349,
     1348, 1349, 1349, 1349, 1349, 1349, 1349, 1348, 1349, 1348,
     1349, 1349, 1348, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1354,   85, 1354,   85,   85,   85,   85,

       85,   85, 1354,   85, 1354,   85,   85, 1354,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85, 1364,  282,
     1364,  282,  282,  282,  282,  282,  282, 1364,  282, 1364,
      282,  282, 1364,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1348, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1351, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,

     1352,   85,   85,   85,   85,   85,   85,   85,   85,   85,
     1354,   85,   85,   85,   85,   85,   85,   85,   85,   85,
      282,  282,  282,  282,  282,  282,  282,  282,  282, 1364,
      282,  282,  282,  282,  282,  282,  282,  282,  282, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1360, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1349, 1349,
     1349, 1348, 1349, 1349, 1349, 1349, 1348, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1351, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352,   85,   85,   85, 1354,   85,   85,   85,

       85, 1354,   85,   85,   85,   85,   85,   85,   85,   85,
       85,  282,  282,  282, 1364,  282,  282,  282,  282, 1364,
      282,  282,  282,  282,  282,  282,  282,  282,  282, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1360, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1348, 1349, 1348, 1349,
     1349, 1349, 1349, 1348, 1349, 1349, 1349, 1352, 1352, 1352,
     1352, 1352, 1351, 1352, 1352, 1352, 1354,   85, 1354,   85,
       85,   85,   85, 1354,   85,   85,   85, 1364,  282, 1364,
      282,  282,  282,  282, 1364,  282,  282,  282, 1361, 1361,
     1361, 1361, 1361, 1360, 1361, 1361, 1361, 1349, 1349, 1348,

     1349, 1348, 1348, 1352, 1352, 1352, 1351,   85,   85, 1354,
       85, 1354, 1354,  282,  282, 1364,  282, 1364, 1364, 1361,
     1361, 1361, 1360, 1349, 1348, 1348, 1352, 1351,   85, 1354,
     1354,  282, 1364, 1364, 1361, 1360, 1348, 1348, 1351, 1354,
     1354, 1364, 1364, 1360, 1348, 1354, 1364,    0, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348
    } ;

static yyconst short int yy_nxt[4266] =
    {   0,
       12,   13,   14,   13,   15,   12,   12,   16,   17,   18,
       19,   20,   12,   21,   22,   23,   24,   25,   26,   21,
       21,   21,   21,   21,   27,   28,   29,   30,   31,   32,
       33,   34,   21,   21,   21,   21,   21,   21,   21,   35,
       36,   37,   21,   21,   21,   21,   38,   21,   39,   21,
       40,   21,   21,   21,   41,   42,  170,  170,  170,  170,
      170,  170,  176,  183,  184,  190,  198,  240,  312,  240,
      177,  240,  185,  240,  191,   43,  202,  202,  202,  202,
      180,  202,  202,  202,  202,  202,  245,  202,  202,  202,
      202,  202,  240,  202,  240,  243,  213,  206,  331,  172,

       44,   12,   13,   14,   13,   15,   45,   45,   46,   47,
       18,   48,   49,   12,   50,   51,   52,   53,   54,   55,
       50,   50,   50,   50,   50,   56,   57,   58,   59,   60,
       61,   62,   63,   50,   50,   50,   50,   50,   50,   50,
       64,   65,   66,   50,   50,   50,   50,   67,   50,   68,
       50,   69,   50,   50,   50,   70,   71,  202,  202,  202,
      202,  240,  202,  240,  202,  202,  202,  202,   72,  202,
      202,  202,  202,  202,  243,  202,   73,  170,  170,  170,
      258,  205,  207,  274,  252,  208,  202,  202,  202,  202,
      240,  202,  240,  209,  170,  241,  170,  240,  211,  240,

      243,   74,   75,   13,   76,   77,   78,   75,   75,   79,
       80,   81,   82,   83,   75,   84,   85,   86,   87,   88,
       89,   84,   84,   84,   84,   84,   90,   91,   92,   93,
       94,   95,   96,   97,   84,   84,   84,   84,   84,   84,
       84,   98,   99,  100,   84,   84,   84,   84,  101,   84,
      102,   84,  103,   84,   84,   84,  104,  105,  243,  202,
      202,  202,  202,  246,  202,  202,  202,  202,  202,  260,
      202,  202,  202,  202,  202,  243,  202,  106,  210,  202,
      202,  202,  202,  251,  202,  243,  250,  212,  202,  202,
      202,  202,  249,  202,  197,  214,  220,  243,  243, 1345,

      197,  218,  107,  108,  109,  110,  111,  112,  108,  108,
      113,  114,  115,  116,  117,  108,  118,  119,  120,  121,
      122,  123,  118,  118,  118,  118,  118,  124,  125,  126,
      127,  128,  129,  130,  131,  118,  118,  118,  118,  118,
      118,  118,  132,  133,  134,  118,  118,  118,  118,  135,
      118,  136,  118,  137,  118,  118,  118,  138,  139,  243,
      202,  202,  202,  202,  243,  202,  202,  202,  202,  202,
      267,  202,  229,  229,  230,  231,  229,  243,  140,  215,
      216,  229,  264,  240,  229,  240,  247,  312,  217,  243,
      254,  255,  263,  242,  248,  243,  219,  316,  257,  256,

      243,  230,  231,  141,   12,  142,  143,  144,   15,   12,
       12,   16,   17,   18,  145,  146,   12,  147,  148,  149,
      150,  151,  152,  147,  147,  147,  147,  147,  153,  154,
      155,  156,  157,  158,  159,  160,  147,  147,  147,  147,
      147,  147,  147,  161,  162,  163,  147,  147,  147,  147,
      164,  147,  165,  147,  166,  147,  147,  147,  167,   42,
      199,  202,  202,  202,  202,  274,  202,  202,  202,  202,
      202,  312,  202,  202,  202,  202,  202,  259,  202,  168,
      200,  202,  202,  202,  202,  320,  202,  202,  202,  202,
      202,  243,  202,  243,  312,  269,  221,  269,  243,  222,

      312,  317,  195,  243,  169,  201,  265,  321,  223,  266,
      359,  261,  224,  202,  202,  202,  202,  312,  202,  226,
      262,  270,  360,  225,  202,  202,  202,  202,  484,  202,
      271,  202,  202,  202,  202,  251,  202,  243,  279,  202,
      202,  202,  202,  285,  202,  279,  279,  234,  312,  301,
      272,  323,  233,  279,  243,  227,  275,  276,  277,  228,
      209,  212,  235,  202,  202,  202,  288,  202,  170,  170,
      170,  286,  266,  312,  236,  273,  170,  276,  170,  279,
      279,  350,  237,  279,  287,  312,  279,  279,  279,  289,
      322,  279,  279,  293,  279,  351,  290,  291,  279, 1345,

      279,  309,  310,  311,  227,  292,  279,  238,  239,  240,
      329,  240,  239,  239,  239,  239,  239,  239,  239,  312,
      239,  239,  240,  295,  240,  239,  239,  239,  239,  239,
      239,  239,  279,  239,  279,  279,  279,  312,  315,  279,
      279,  294,  279,  279,  279, 1345,  312,  279,  296,  330,
      244,  274,  274,  299,  328,  274,  274,  274,  274,  274,
      300,  274,  243,  274,  274,  274,  417,  279,  274,  274,
      274,  274,  274,  312,  274,  279,  274,  279,  297,  170,
      170,  170,  279,  312,  312,  279,  312,  298,  642,  318,
      279,  303,  312,  280,  274,  274,  305,  319,  274,  274,

      274,  274,  274,  302,  274,  324,  274,  312, 1344,  279,
      287,  170,  310,  170,  281,  274,  274,  279,  334,  274,
      274,  274,  274,  274,  312,  274,  306,  274,  414,  335,
      312,  312,  282,  274,  274,  312,  243,  274,  274,  274,
      274,  274,  344,  274,  337,  274,  307,  279,  347,  325,
      326,  332,  345,  312,  346,  279,  339,  336,  327,  283,
      333,  338,  367,  348,  199,  199,  578,  284,  302,  312,
      322,  308,  170,  170,  170,  368,  202,  202,  202,  202,
      243,  202,  230,  231,  340,  200,  202,  202,  202,  202,
      240,  202,  240,  243,  373,  202,  202,  202,  202,  240,

      202,  240,  430,  374,  274,  240,  337,  240,  412,  341,
      201,  202,  202,  202,  202,  242,  202,  202,  202,  202,
      202,  243,  202,  413,  375,  170,  170,  170,  378,  312,
      202,  202,  202,  202,  376,  202,  377,  202,  202,  202,
      202,  407,  202,  379,  489,  381,  380,  202,  202,  202,
      202,  312,  202,  202,  202,  202,  202,  243,  202,  382,
      202,  202,  202,  202,  420,  202,  202,  202,  202,  202,
      644,  202,  243,  408,  384,  383,  202,  202,  202,  202,
      385,  202,  386,  243,  387,  202,  202,  202,  202,  243,
      202,  202,  202,  202,  202,  418,  202,  312,  243,  389,

      434,  388,  202,  202,  202,  202,  421,  202,  202,  202,
      202,  202,  390,  202,  647,  202,  202,  202,  202,  419,
      202,  426,  243,  243,  391,  243,  422, 1339,  392,  393,
      202,  202,  202,  202,  243,  202,  202,  202,  202,  202,
      243,  202,  202,  202,  202,  202,  243,  202,  202,  202,
      202,  202,  428,  202,  202,  202,  202,  202,  423,  202,
      202,  202,  202,  202,  431,  202,  394,  202,  202,  202,
      202,  269,  202,  269,  243,  396,  409,  202,  202,  202,
      202,  395,  202,  415, 1338,  398,  410,  243,  411,  312,
      397,  229,  229,  230,  231,  229,  424,  416,  399,  243,

      229,  400,  427,  229,  202,  202,  202,  202,  425,  202,
      243,  312,  243,  243,  401,  403,  202,  202,  202,  202,
      497,  202,  402,  197,  197,  504,  197,  197,  274,  269,
      379,  269,  197, 1337,  429,  197,  437,  243,  439,  404,
      202,  202,  202,  202,  243,  202,  202,  202,  202,  202,
      243,  202,  243,  270,  234,  235,  202,  202,  202,  432,
      202,  406,  269,  271,  269,  436,  304,  236,  197,  243,
      312,  312,  433,  435,  197,  237,  275,  276,  277,  170,
      170,  170,  440,  272,  170,  276,  170,  243,  304,  446,
      197,  440,  440,  487,  440,  440,  197,  451,  448,  312,

      238,  440,  477,  440,  447,  440, 1336,  440,  273,  438,
      274,  499,  312,  438,  438,  438,  438,  438,  482,  438,
      312,  438,  438,  274,  312,  312,  438,  438,  438,  438,
      438,  312,  438,  483,  438,  441,  438,  274,  507,  496,
      438,  438,  438,  438,  438,  312,  438,  488,  438,  442,
      438,  274,  648,  440,  438,  438,  438,  438,  438,  449,
      438,  452,  438,  440,  440,  440,  312,  505,  443,  478,
      455,  312,  440,  450,  440,  440,  440,  312,  444,  453,
      445,  312,  440,  440,  440,  440,  454,  440,  440,  457,
      312,  456,  490,  440,  440,  440,  458,  582,  440,  440,

      440,  492,  440,  440,  440,  500,  440,  243,  459,  440,
      460,  440,  440,  440,  440,  440,  440,  461,  312,  440,
      440,  491,  312,  440,  440,  462,  440,  494,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  495,
      464,  579,  466,  312,  440,  243,  493,  440,  440,  440,
      440,  463,  465,  473,  440,  467,  440,  440,  440,  312,
      474,  309,  310,  311,  312,  468,  312,  472,  440,  440,
      440,  312,  469,  440,  312,  576,  470,  170,  170,  170,
      475,  312,  479,  440,  485,  440,  170,  310,  170,  588,
      498,  243,  480,  312,  481,  199,  339,  502,  486,  274,

      312,  501,  533,  243,  574,  476,  506,  243,  575,  534,
      503,  243,  243,  535,  577,  340,  202,  202,  202,  202,
      593,  202,  202,  202,  202,  202,  584,  202,  202,  202,
      202,  202,  243,  202,  581,  243,  542,  540,  243,  583,
      341,  243,  586,  541,  202,  202,  202,  202,  243,  202,
      202,  202,  202,  202,  243,  202,  202,  202,  202,  202,
      544,  202,  202,  202,  202,  202,  597,  202,  243,  585,
      543,  312,  202,  202,  202,  202,  545,  202,  202,  202,
      202,  202,  589,  202,  243,  243,  546,  590,  202,  202,
      202,  202,  548,  202,  202,  202,  202,  202,  547,  202,

      202,  202,  202,  202,  941,  202,  550,  243,  594,  587,
      549,  202,  202,  202,  202,  745,  202,  202,  202,  202,
      202,  243,  202,  552,  243,  551,  592,  243,  591,  553,
      202,  202,  202,  202,  243,  202,  202,  202,  202,  202,
      554,  202,  202,  202,  202,  202,  243,  202,  202,  202,
      202,  202,  243,  202,  595,  243,  243,  555,  202,  202,
      202,  202,  312,  202,  598,  640,  557,  312,  243,  556,
      202,  202,  202,  202,  596,  202,  646,  602,  603,  559,
      202,  202,  202,  202,  558,  202,  202,  202,  202,  202,
      312,  202,  202,  202,  202,  202,  274,  202,  202,  202,

      202,  202,  243,  202,  733,  560,  439,  202,  202,  202,
      202,  641,  202,  243,  202,  202,  202,  202,  561,  202,
      202,  202,  202,  202,  604,  202,  202,  202,  202,  202,
      274,  202,  202,  202,  202,  202,  312,  202,  562,  564,
      563,  202,  202,  202,  202,  312,  202,  202,  202,  202,
      202,  565,  202,  312,  202,  202,  202,  202,  566,  202,
      569,  638,  567,  243,  440,  667,  568,  572,  197,  197,
      312,  197,  197,  649,  440,  243,  440,  197,  570, 1329,
      197,  202,  202,  202,  202,  605,  202,  571,  599,  608,
      440,  645,  573,  440,  440,  600,  312,  440,  606,  601,

      440,  607,  440,  440,  440,  440,  440,  440,  610,  440,
      609,  440,  440,  312,  312,  440,  312,  656,  440,  611,
      650,  440,  440,  440,  440,  440,  612,  440,  440,  440,
      440,  613,  440,  614,  616,  440,  440,  312,  615,  440,
      312,  440,  440,  659,  440,  440,  440,  440,  617,  618,
      440,  620,  619,  440,  440,  660,  639,  658,  440,  440,
      440,  312,  440,  440,  440,  440,  440,  621,  440,  440,
      440,  440,  622,  440,  440,  625,  643,  312,  623,  440,
      440,  312,  652,  440,  440,  440,  440,  624,  440,  440,
      440,  440,  626,  440,  440,  312,  312,  653,  440,  440,

      440,  312,  440,  440,  440,  440,  440,  627,  651,  440,
      440,  440,  440,  681,  440,  440,  740,  654,  630,  440,
      440,  243,  440,  629,  312,  440,  628,  440,  440,  440,
      312,  440,  682,  661,  631,  634,  635,  440,  440,  243,
      440,  632,  304,  440,  197,  633,  304,  440,  197,  440,
      197,  473,  636,  472,  197,  440,  440,  474,  312,  312,
      312,  637,  663,  657,  312,  666,  440,  312,  440,  664,
      440,  655,  243,  665,  735,  732,  243,  475,  243,  738,
      440,  243,  440,  202,  202,  202,  202,  662,  202,  202,
      202,  202,  202,  701,  202,  202,  202,  202,  202,  702,

      202,  730,  476, 1328,  752,  668,  731,  243,  669,  202,
      202,  202,  202,  736,  202,  243,  202,  202,  202,  202,
      243,  202,  703,  674,  704,  202,  202,  202,  202,  734,
      202,  202,  202,  202,  202,  746,  202,  202,  202,  202,
      202,  741,  202,  243,  243,  243,  243,  705,  202,  202,
      202,  202,  737,  202,  202,  202,  202,  202,  243,  202,
      742,  706,  202,  202,  202,  202,  754,  202,  707,  202,
      202,  202,  202,  708,  202,  243,  681,  744,  709,  243,
      243,  710,  202,  202,  202,  202,  748,  202,  758,  683,
      743,  202,  202,  202,  202,  711,  202,  202,  202,  202,

      202, 1326,  202,  202,  202,  202,  202,  243,  202,  713,
      243,  243,  712,  202,  202,  202,  202,  749,  202,  714,
      202,  202,  202,  202,  760,  202,  202,  202,  202,  202,
      312,  202,  715,  202,  202,  202,  202,  751,  202,  202,
      202,  202,  202,  750,  202,  243,  691,  202,  202,  202,
      202,  716,  202, 1325,  243,  718,  243,  717,  202,  202,
      202,  202,  816,  202,  202,  202,  202,  202,  312,  202,
      202,  202,  202,  202,  756,  202,  747,  202,  202,  202,
      202,  243,  202,  202,  202,  202,  202,  243,  202,  243,
      202,  202,  202,  202,  719,  202,  202,  202,  202,  202,

      759,  202,  440,  753,  720,  202,  202,  202,  202,  812,
      202,  766,  440,  312,  440,  674,  721,  722,  202,  202,
      202,  202,  243,  202,  312,  723,  202,  202,  202,  202,
      724,  202,  312,  725,  202,  202,  202,  202,  755,  202,
      726,  243,  728,  202,  202,  202,  202,  761,  202,  796,
      440,  762, 1297,  312,  440,  727,  705,  757,  440,  440,
      440,  764,  440,  729,  440,  440,  440,  765,  440,  440,
      440,  440,  763,  440,  440,  440, 1324,  440,  440,  798,
      776,  440,  767,  440,  440,  440,  440,  440,  440,  772,
      769,  440,  768,  440,  440,  440,  774,  440,  770,  440,

      771,  440,  440,  312,  440,  440,  440,  440,  773,  775,
      440,  440,  440,  440,  440,  440,  778,  801,  777,  440,
      440,  312,  440,  440,  312,  440,  440,  440,  782,  440,
      440,  440,  805,  440,  440,  440,  440,  779,  440,  781,
      440,  780,  440,  440,  440,  312,  440,  440,  312,  312,
      792,  440,  440,  440,  793,  440,  440,  440,  795,  440,
      783,  440,  440,  440,  440,  440,  440,  312,  440,  871,
      440,  440,  312,  312,  784,  440,  440,  440,  243,  786,
      440,  440,  440,  440,  785,  787,  440,  440,  440,  794,
      312,  800,  788,  790,  789,  312,  312,  440,  797,  440,

      791,  312,  312,  681,  683,  312,  312,  312,  312,  312,
      799,  803,  804,  809,  312,  312,  691,  312,  312,  312,
      806,  841,  802,  312,  312,  844,  202,  202,  202,  202,
      312,  202,  873,  807,  808,  842,  872,  243,  240,  845,
      240,  846,  202,  202,  202,  202,  875,  202,  243,  243,
      811,  810,  813,  817,  815,  814,  818,  202,  202,  202,
      202,  848,  202,  202,  202,  202,  202,  885,  202,  847,
      822,  202,  202,  202,  202,  243,  202,  202,  202,  202,
      202,  243,  202,  202,  202,  202,  202,  877,  202,  890,
      880,  243,  849,  202,  202,  202,  202,  874,  202,  240,

      826,  240,  243,  851,  202,  202,  202,  202,  850,  202,
      202,  202,  202,  202,  243,  202,  202,  202,  202,  202,
      312,  202,  202,  202,  202,  202,  243,  202,  853,  202,
      202,  202,  202,  876,  202,  852,  830,  202,  202,  202,
      202,  240,  202,  240,  202,  202,  202,  202,  854,  202,
      202,  202,  202,  202,  939,  202,  202,  202,  202,  202,
      857,  202,  243,  312,  878,  855,  243,  858,  881,  879,
      856,  202,  202,  202,  202,  312,  202,  202,  202,  202,
      202,  243,  202,  202,  202,  202,  202,  243,  202,  884,
      859,  202,  202,  202,  202,  312,  202,  202,  202,  202,

      202,  929,  202,  202,  202,  202,  202,  882,  202,  202,
      202,  202,  202,  240,  202,  240,  860,  202,  202,  202,
      202,  243,  202,  243,  243,  883,  861,  202,  202,  202,
      202,  312,  202,  312, 1056,  862,  202,  202,  202,  202,
      926,  202,  889,  202,  202,  202,  202,  864,  202,  863,
      886,  728,  865,  202,  202,  202,  202,  887,  202,  243,
      243,  243,  243,  243,  243,  312,  866,  867,  243,  940,
      243,  868,  932,  312,  888,  892,  870,  899,  440,  893,
      895,  896,  891,  925,  440,  869,  898,  312,  440,  822,
      440,  440,  901,  894,  440,  897,  440,  900,  440,  440,

      312,  440,  440,  440,  243,  312,  440,  902,  440,  440,
      440,  440,  440,  904,  440,  905,  440,  440,  440,  927,
      903,  440,  440,  934, 1011,  907,  440,  440,  312,  440,
      440,  440,  440,  440,  440,  906,  440,  440,  440,  909,
      440,  440,  440,  908,  928,  440,  913,  440,  440,  440,
      312,  440,  910,  440,  911,  440,  912,  440,  440,  440,
      440, 1323,  440,  440,  312,  930,  440,  440,  914,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  312,  312,  826,  312,  440,  440,  915,
      931,  440,  440,  440,  312,  917,  916,  440,  440,  440,

      440,  440,  440,  312,  440,  933,  312,  935,  830,  937,
      920,  440,  919,  440,  918,  312,  312,  312,  312,  922,
      936,  312,  312,  923,  921,  949,  996,  243,  998,  950,
      938,  202,  202,  202,  202,  942,  202,  924,  949,  243,
     1001,  997,  974,  243,  202,  202,  202,  202,  944,  202,
      943,  951,  947,  240,  243,  240,  946,  312,  202,  202,
      202,  202,  945,  202,  243, 1000,  948,  202,  202,  202,
      202, 1147,  202,  202,  202,  202,  202,  240,  202,  240,
      202,  202,  202,  202,  975,  202,  202,  202,  202,  202,
      999,  202,  976,  977,  243, 1003,  979,  202,  202,  202,

      202,  240,  202,  240, 1004,  978,  202,  202,  202,  202,
     1005,  202,  243,  958,  202,  202,  202,  202, 1008,  202,
      243,  980,  981,  202,  202,  202,  202,  243,  202, 1007,
      960,  202,  202,  202,  202,  243,  202,  202,  202,  202,
      202,  243,  202,  202,  202,  202,  202,  994,  202,  983,
      963,  995,  243,  982,  202,  202,  202,  202,  312,  202,
      202,  202,  202,  202,  243,  202,  202,  202,  202,  202,
     1016,  202,  202,  202,  202,  202, 1148,  202,  202,  202,
      202,  202,  243,  202,  202,  202,  202,  202, 1006,  202,
      243,  243,  985,  202,  202,  202,  202,  243,  202, 1010,

      984,  312, 1013,  951,  987, 1012,  202,  202,  202,  202,
      986,  202,  202,  202,  202,  202,  989,  202,  202,  202,
      202,  202,  988,  202,  202,  202,  202,  202,  990,  202,
      243,  243,  243,  243,  243,  312,  312,  312,  949, 1014,
     1049, 1017, 1044, 1015,  992, 1018,  312,  440,  991, 1021,
     1019,  440, 1009,  993, 1020,  440,  440,  440, 1045,  440,
     1022,  440,  440, 1023,  312,  440,  440,  440,  440, 1024,
      440, 1053,  440, 1026,  440,  274,  440, 1028, 1030,  440,
      440,  312, 1025,  440,  440, 1058,  440, 1029,  440,  440,
     1027,  440,  440,  440,  440,  440,  440,  440,  312, 1032,

      440, 1046,  440,  440,  440, 1033, 1031,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  312, 1050,  440,  440,
      440,  440,  440,  440,  440,  440,  440, 1035,  312,  440,
      440,  440,  440, 1052,  440,  440, 1034,  440, 1037,  440,
      440,  312,  440, 1047, 1039, 1036,  440,  440,  312,  440,
      958,  440, 1040, 1038,  312,  312,  440,  440,  440,  440,
      312, 1048,  312, 1051,  960, 1042,  312,  312, 1041, 1043,
      312,  312,  963,  312,  312,  312,  202,  202,  202,  202,
      243,  202, 1055, 1108,  202,  202,  202,  202, 1083,  202,
      240, 1102,  240, 1057, 1059, 1054,  240,  243,  240, 1103,

     1109, 1060, 1062,  243, 1063,  243,  202,  202,  202,  202,
     1061,  202,  202,  202,  202,  202, 1106,  202,  243,  202,
      202,  202,  202, 1111,  202,  202,  202,  202,  202,  240,
      202,  240, 1084, 1086,  243, 1104, 1105, 1085,  202,  202,
      202,  202,  243,  202,  243, 1107,  243, 1087,  202,  202,
      202,  202,  243,  202,  202,  202,  202,  202,  240,  202,
      240, 1110,  243, 1088,  202,  202,  202,  202,  240,  202,
      240,  312,  243, 1090, 1114, 1089,  202,  202,  202,  202,
     1143, 1092,  243,  202,  202,  202,  202, 1091,  202,  202,
      202,  202,  202, 1112,  202,  202,  202,  202,  202, 1118,

      202,  202,  202,  202,  202,  243,  202,  202,  202,  202,
      202,  312,  202,  202,  202,  202,  202,  274,  202,  202,
      202,  202,  202,  243,  202, 1113,  243,  243, 1093,  202,
      202,  202,  202, 1094,  202,  202,  202,  202,  202,  440,
      202, 1095,  243, 1115,  243, 1096,  312, 1116, 1117,  440,
     1151,  440, 1097, 1121,  440,  312,  312,  440, 1098,  243,
     1099,  440, 1140, 1119,  440, 1120,  440,  440, 1146,  440,
     1122,  440,  440, 1123, 1100,  440, 1124, 1141,  440,  440,
     1101, 1125,  440,  243,  440,  440,  440,  440,  440,  440,
     1126,  440, 1128, 1127,  440, 1130,  440,  440,  440,  312,

      440, 1204,  243,  440, 1129, 1272,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  312,  312,  440, 1142,
      440,  440,  440,  440,  440,  440,  440,  312,  440, 1131,
      312, 1132,  440,  440,  440,  440, 1145,  440,  440,  312,
      440, 1133, 1134,  440, 1144,  440, 1135,  312,  312,  312,
      312,  312,  312, 1137, 1136,  243, 1197, 1150,  243, 1231,
     1138,  202,  202,  202,  202, 1139,  202,  202,  202,  202,
      202, 1152,  202,  243, 1177, 1200, 1203,  243, 1153, 1178,
     1195,  202,  202,  202,  202, 1156,  202, 1154, 1155, 1194,
     1157, 1158,  243,  312,  243, 1179,  202,  202,  202,  202,

      243,  202, 1232, 1162,  202,  202,  202,  202, 1209,  202,
      202,  202,  202,  202,  312,  202,  202,  202,  202,  202,
     1196,  202,  243, 1180,  202,  202,  202,  202, 1233,  202,
      243,  202,  202,  202,  202, 1181,  202,  202,  202,  202,
      202,  243,  202, 1201, 1207,  243, 1182,  202,  202,  202,
      202,  243,  202,  202,  202,  202,  202, 1183,  202,  202,
      202,  202,  202, 1206,  202,  202,  202,  202,  202, 1311,
      202,  202,  202,  202,  202,  240,  202,  240,  202,  202,
      202,  202, 1185,  202,  243,  243,  312,  274, 1187, 1186,
      202,  202,  202,  202, 1230,  202, 1205,  202,  202,  202,

      202, 1188,  202, 1198, 1199,  243, 1208,  243,  243,  243,
     1212, 1189,  312, 1202, 1162, 1215, 1191, 1190,  440, 1214,
      440,  440,  440, 1307, 1213,  440,  274, 1210,  440, 1211,
      440,  440,  440,  440, 1319,  440, 1192,  440, 1216,  440,
      440, 1303,  440, 1193,  440,  440, 1217, 1302,  440,  440,
      440,  440,  440,  440, 1218,  440,  440,  440,  440,  440,
      440, 1219,  440,  440, 1220,  440,  440,  440,  440,  440,
      440,  440,  440,  312,  440,  312,  312,  440, 1223,  440,
      440,  312,  440,  440,  440, 1221,  312,  440, 1222, 1234,
     1235, 1224,  312,  440,  440,  440,  440,  440,  312,  440,

     1225,  312, 1236, 1226,  312,  312,  312,  312, 1227,  202,
      202,  202,  202, 1267,  202, 1269, 1238, 1228,  312,  240,
     1229,  240, 1240, 1239,  202,  202,  202,  202, 1301,  202,
      243, 1247,  243, 1258, 1270, 1241,  243,  243, 1244, 1271,
     1292,  243, 1242, 1300, 1273, 1243,  243, 1245, 1246,  202,
      202,  202,  202,  243,  202, 1277, 1249,  202,  202,  202,
      202, 1275,  202,  202,  202,  202,  202,  243,  202,  202,
      202,  202,  202,  274,  202,  202,  202,  202,  202, 1259,
      202,  202,  202,  202,  202,  312,  202, 1276,  243, 1260,
     1262, 1309,  202,  202,  202,  202, 1261,  202,  202,  202,

      202,  202, 1290,  202,  202,  202,  202,  202,  274,  202,
      202,  202,  202,  202, 1343,  202,  202,  202,  202,  202,
     1299,  202,  202,  202,  202,  202,  312,  202,  202,  202,
      202,  202,  240,  202,  240, 1278, 1264,  202,  202,  202,
      202,  440,  202, 1280, 1298, 1289,  440, 1285, 1265,  440,
      312,  440, 1247,  440,  440, 1266,  440, 1279,  440,  440,
      440,  440,  312, 1281,  440,  440,  440,  312,  440, 1249,
      440, 1274,  440, 1282,  440,  440, 1284,  440,  440, 1283,
      440,  440,  440, 1291,  440,  440,  440,  312,  440,  440,
      312,  440,  440,  440,  440,  440,  440,  440,  440,  440,

      440,  440,  312,  440,  312,  312,  440,  440,  440,  240,
     1310,  240, 1286,  440, 1293,  440, 1287,  440,  312,  440,
      243, 1308,  240, 1288,  240, 1320, 1295,  243,  312, 1296,
      202,  202,  202,  202,  312,  202,  202,  202,  202,  202,
     1321,  202,  202,  202,  202,  202,  240,  202,  240, 1300,
      274,  202,  202,  202,  202, 1304,  202,  202,  202,  202,
      202, 1347,  202, 1305, 1302,  202,  202,  202,  202, 1312,
      202,  202,  202,  202,  202, 1306,  202,  202,  202,  202,
      202,  312,  202, 1300,  440,  440,  243,  312,  312,  312,
      440, 1302, 1316, 1313,  440,  440, 1314,  440,  440, 1315,

      440, 1317,  440, 1318,  440,  440, 1322,  274,  440,  440,
      440,  240,  440,  240,  440,  440,  440,  440, 1330,  440,
      312,  440,  440,  312,  440,  202,  202,  202,  202, 1294,
      202,  202,  202,  202,  202,  243,  202,  202,  202,  202,
      202,  240,  202,  240, 1325,  240,  440,  240, 1333,  440,
      312,  312,  274, 1325,  440, 1327,  440, 1334,  440,  440,
     1332,  440, 1340,  240,  440,  240,  440,  243,  243, 1335,
      202,  202,  202,  202,  240,  202,  240, 1337, 1342,  243,
      312,  240, 1337,  240,  440,  240,  240,  240,  240,  243,
      243,  243,  243, 1268,  440, 1331,  440, 1346, 1263, 1257,

     1256, 1255, 1254, 1253, 1252, 1251, 1250, 1249, 1248, 1247,
     1237,  312,  243, 1184, 1176, 1341,  197, 1175,  197,  197,
      197,  197,  202,  202,  202,  204,  204,  204,  232,  232,
      232,  232,  232,  232,  239, 1174,  239,  239,  239,  239,
      243, 1173,  243,  243,  243,  243,  268, 1172,  268,  268,
      268,  268,  274, 1171, 1170,  274,  274,  274,  279, 1169,
     1168,  279,  279,  279,  304, 1167,  304,  304,  304,  304,
      312,  312,  314,  314,  229,  229,  229,  229,  229,  229,
      405, 1166,  405,  405,  405,  405,  438, 1165, 1164,  438,
      438,  438,  440, 1163, 1162,  440,  440,  440,  471, 1161,

      471,  471,  471,  471, 1160, 1159, 1149,  312,  274,  274,
      274,  274,  274,  243, 1082, 1081, 1080, 1079, 1078, 1077,
     1076, 1075, 1074, 1073, 1072, 1071, 1070, 1069, 1068, 1067,
     1066, 1065, 1064,  274,  274,  274, 1002,  973,  972,  971,
      970,  969,  968,  967,  966,  965,  964,  963,  962,  961,
      960,  959,  958,  957,  956,  955,  954,  953,  952,  951,
      312,  312,  274,  274,  274,  274,  243,  243,  843,  840,
      839,  838,  837,  836,  835,  834,  833,  832,  831,  830,
      829,  828,  827,  826,  825,  824,  823,  822,  821,  820,
      819,  312,  312,  243,  243,  739,  700,  699,  698,  697,

      696,  695,  694,  693,  692,  691,  690,  689,  688,  687,
      686,  685,  684,  683,  680,  679,  678,  677,  676,  675,
      674,  673,  672,  671,  670,  312,  274,  243,  580,  539,
      538,  537,  536,  532,  531,  530,  529,  528,  527,  526,
      525,  524,  523,  522,  521,  520,  519,  518,  517,  516,
      515,  514,  513,  512,  511,  510,  509,  508,  312,  313,
      274,  243,  203,  198,  372,  371,  370,  369,  366,  365,
      364,  363,  362,  361,  358,  357,  356,  355,  354,  353,
      352,  349,  343,  342,  171,  312,  313,  278,  253,  203,
      196,  195,  194,  193,  192,  189,  188,  187,  186,  182,

      181,  180,  179,  178,  175,  174,  173,  171, 1348,   11,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348
    } ;

static yyconst short int yy_chk[4266] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,   13,   13,   13,   14,
       14,   14,   25,   31,   31,   36,   43,   75,  161,   75,
       25,   78,   31,   78,   36,    2,   50,   50,   50,   50,
       43,   50,   52,   52,   52,   52,   86,   52,   58,   58,
       58,   58,   79,   58,   79,   86,   58,   52,  161, 1349,

        2,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    4,   51,   51,   51,
       51,   80,   51,   80,   54,   54,   54,   54,    4,   54,
       53,   53,   53,   53,   96,   53,    4,   76,   76,   76,
       96,   51,   53, 1347,   92,   54,   56,   56,   56,   56,
       81,   56,   81,   54,   77,   77,   77,   82,   56,   82,

       92,    4,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    6,   98,   55,
       55,   55,   55,   87,   55,   57,   57,   57,   57,   98,
       57,   59,   59,   59,   59,   87,   59,    6,   55,   61,
       61,   61,   61,   91,   61,   91,   90,   57,   63,   63,
       63,   63,   89,   63,  139,   59,   63,   89,   90, 1344,

      139,   61,    6,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    8,  104,
       60,   60,   60,   60,  101,   60,   62,   62,   62,   62,
      104,   62,   71,   71,   71,   71,   71,  100,    8,   60,
       60,   71,  101,   83,   71,   83,   88,  149,   60,   88,
       94,   94,  100,   83,   88,   94,   62,  149,   95,   94,

       95,  229,  229,    8,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,   10,
       44,   64,   64,   64,   64, 1342,   64,   65,   65,   65,
       65,  152,   65,   66,   66,   66,   66,   97,   66,   10,
       44,   67,   67,   67,   67,  152,   67,   68,   68,   68,
       68,  103,   68,   97,  150,  105,   64,  105,  102,   65,

      153,  150,   44,   99,   10,   44,  102,  153,   65,  103,
      186,   99,   66,   69,   69,   69,   69,  319,   69,   68,
       99,  106,  186,   67,   70,   70,   70,   70,  319,   70,
      107,   72,   72,   72,   72,  106,   72,  106,  136,   73,
       73,   73,   73,  123,   73,  123,  136,   73,  155,  136,
      107,  155,   72,  123,  107,   69,  109,  109,  109,   70,
       72,   73,   74,   74,   74,   74,  126,   74,  110,  110,
      110,  124,  107,  154,   74,  107,  111,  111,  111,  126,
      124,  178,   74,  125,  125,  159,  127,  126,  124,  127,
      154,  125,  129,  129,  127,  178,  128,  128,  128, 1339,

      129,  142,  142,  142,   74,  128,  128,   74,   84,   84,
      159,   84,   84,   84,   84,   84,   84,   84,   84,  148,
       84,   85,   85,  131,   85,   85,   85,   85,   85,   85,
       85,   85,  130,   85,  132,  134,  131,  158,  148,  135,
      130,  130,  132,  134,  131, 1338,  160,  135,  132,  160,
       85,  118,  118,  134,  158,  118,  118,  118,  118,  118,
      135,  118,  250,  118,  119,  119,  250,  133,  119,  119,
      119,  119,  119,  151,  119,  133,  119,  138,  133,  143,
      143,  143,  137,  481,  163,  138,  156,  133,  481,  151,
      137,  138,  164,  119,  120,  120,  140,  151,  120,  120,

      120,  120,  120,  137,  120,  156,  120,  166, 1336,  140,
      140,  144,  144,  144,  120,  121,  121,  140,  163,  121,
      121,  121,  121,  121,  162,  121,  141,  121,  248,  164,
      165,  167,  121,  122,  122,  157,  248,  122,  122,  122,
      122,  122,  175,  122,  166,  122,  141,  141,  176,  157,
      157,  162,  175,  168,  175,  141,  168,  165,  157,  122,
      162,  167,  193,  176,  169,  201,  411,  122,  141,  169,
      168,  141,  170,  170,  170,  193,  204,  204,  204,  204,
      411,  204,  231,  231,  169,  201,  205,  205,  205,  205,
      239,  205,  239,  262,  205,  206,  206,  206,  206,  240,

      206,  240,  262,  206, 1333,  242,  169,  242,  247,  169,
      201,  207,  207,  207,  207,  242,  207,  208,  208,  208,
      208,  247,  208,  247,  207,  241,  241,  241,  208,  323,
      209,  209,  209,  209,  207,  209,  207,  210,  210,  210,
      210,  244,  210,  208,  323,  210,  209,  211,  211,  211,
      211,  483,  211,  212,  212,  212,  212,  244,  212,  210,
      213,  213,  213,  213,  253,  213,  214,  214,  214,  214,
      483,  214,  253,  245,  212,  211,  215,  215,  215,  215,
      213,  215,  214,  265,  215,  216,  216,  216,  216,  245,
      216,  217,  217,  217,  217,  251,  217,  486,  251,  217,

      265,  216,  218,  218,  218,  218,  254,  218,  219,  219,
      219,  219,  218,  219,  486,  220,  220,  220,  220,  252,
      220,  258,  254,  252,  218,  258,  255, 1328,  219,  220,
      221,  221,  221,  221,  255,  221,  222,  222,  222,  222,
      260,  222,  223,  223,  223,  223,  263,  223,  224,  224,
      224,  224,  260,  224,  225,  225,  225,  225,  256,  225,
      226,  226,  226,  226,  263,  226,  221,  227,  227,  227,
      227,  268,  227,  268,  256,  223,  246,  228,  228,  228,
      228,  222,  228,  249, 1326,  225,  246,  246,  246,  336,
      224,  232,  232,  232,  232,  232,  257,  249,  225,  249,

      232,  226,  259,  232,  233,  233,  233,  233,  257,  233,
      257,  330,  259,  261,  227,  233,  234,  234,  234,  234,
      330,  234,  228,  235,  235,  336,  235,  235,  278,  269,
      233,  269,  235, 1324,  261,  235,  270,  270,  278,  234,
      236,  236,  236,  236,  267,  236,  237,  237,  237,  237,
      266,  237,  264,  272,  237,  238,  238,  238,  238,  264,
      238,  236,  271,  273,  271,  267,  304,  238,  304,  272,
      321,  332,  264,  266,  304,  238,  275,  275,  275,  276,
      276,  276,  286,  273,  277,  277,  277,  273,  306,  283,
      306,  283,  286,  321,  286,  284,  306,  286,  284,  315,

      238,  283,  315,  283,  283,  284, 1323,  284,  273,  279,
      279,  332,  318,  279,  279,  279,  279,  279,  318,  279,
      339,  279,  280,  280,  329,  337,  280,  280,  280,  280,
      280,  322,  280,  318,  280,  280,  281,  281,  339,  329,
      281,  281,  281,  281,  281,  487,  281,  322,  281,  281,
      282,  282,  487,  287,  282,  282,  282,  282,  282,  285,
      282,  287,  282,  287,  285,  287,  316,  337,  282,  316,
      290, 1320,  288,  285,  285,  290,  285,  333,  282,  288,
      282,  324,  288,  289,  288,  290,  289,  290,  291,  292,
      326,  291,  324,  289,  292,  289,  293,  415,  291,  293,

      291,  326,  296,  294,  292,  333,  292,  415,  293,  293,
      294,  293,  296,  294,  296,  294,  295,  295,  325,  297,
      298,  325,  328,  299,  300,  296,  295,  328,  295,  297,
      298,  297,  298,  299,  300,  299,  300,  301,  302,  328,
      298,  412,  300,  327,  303,  412,  327,  301,  302,  301,
      302,  297,  299,  307,  303,  300,  303,  305,  307,  331,
      308,  309,  309,  309,  334,  301,  338,  305,  307,  305,
      307,  335,  302,  308,  317,  409,  303,  310,  310,  310,
      308,  320,  317,  308,  320,  308,  311,  311,  311,  421,
      331,  409,  317,  340,  317,  341,  340,  335,  320, 1318,

      341,  334,  367,  421,  407,  308,  338,  407,  408,  367,
      335,  408,  410,  367,  410,  341,  373,  373,  373,  373,
      426,  373,  374,  374,  374,  374,  417,  374,  375,  375,
      375,  375,  414,  375,  414,  426,  375,  373,  417,  416,
      341,  416,  419,  374,  376,  376,  376,  376,  430,  376,
      377,  377,  377,  377,  419,  377,  378,  378,  378,  378,
      377,  378,  379,  379,  379,  379,  430,  379,  418,  418,
      376,  813,  380,  380,  380,  380,  378,  380,  381,  381,
      381,  381,  422,  381,  423,  422,  379,  423,  382,  382,
      382,  382,  381,  382,  383,  383,  383,  383,  380,  383,

      384,  384,  384,  384,  813,  384,  383,  427,  427,  420,
      382,  385,  385,  385,  385,  588,  385,  386,  386,  386,
      386,  420,  386,  385,  425,  384,  425,  588,  424,  386,
      387,  387,  387,  387,  424,  387,  388,  388,  388,  388,
      387,  388,  389,  389,  389,  389,  428,  389,  390,  390,
      390,  390,  429,  390,  428,  433,  431,  388,  391,  391,
      391,  391,  479,  391,  431,  479,  390,  485,  434,  389,
      392,  392,  392,  392,  429,  392,  485,  433,  434,  392,
      393,  393,  393,  393,  391,  393,  394,  394,  394,  394,
      480,  394,  395,  395,  395,  395,  439,  395,  396,  396,

      396,  396,  435,  396,  577,  393,  439,  397,  397,  397,
      397,  480,  397,  577,  398,  398,  398,  398,  394,  398,
      399,  399,  399,  399,  435,  399,  400,  400,  400,  400,
     1316,  400,  401,  401,  401,  401,  504,  401,  395,  397,
      396,  402,  402,  402,  402,  477,  402,  403,  403,  403,
      403,  398,  403,  488,  404,  404,  404,  404,  398,  404,
      400,  477,  398,  436,  440,  504,  399,  403,  405,  405,
      484,  405,  405,  488,  440,  432,  440,  405,  401, 1309,
      405,  406,  406,  406,  406,  436,  406,  402,  432,  443,
      441,  484,  406,  442,  443,  432,  495,  444,  441,  432,

      441,  442,  441,  442,  443,  442,  443,  444,  445,  444,
      444,  445,  446,  489,  499,  447,  498,  495,  448,  446,
      489,  445,  446,  445,  446,  447,  447,  447,  448,  450,
      448,  448,  449,  449,  451,  451,  452,  497,  450,  450,
      478,  450,  449,  498,  449,  451,  452,  451,  452,  453,
      453,  455,  454,  454,  455,  499,  478,  497,  457,  456,
      453,  482,  453,  454,  455,  454,  455,  456,  457,  456,
      457,  456,  457,  458,  459,  460,  482,  491,  458,  460,
      461,  492,  491,  458,  459,  458,  459,  459,  462,  460,
      461,  460,  461,  463,  464,  493,  500,  492,  462,  465,

      462,  490,  467,  463,  464,  463,  464,  462,  490,  465,
      466,  465,  467,  519,  467,  468,  584,  493,  465,  469,
      466,  584,  466,  464,  503,  468,  463,  468,  470,  469,
      502,  469,  519,  500,  466,  467,  468,  472,  470, 1308,
      470,  466,  471,  473,  471,  466,  474,  472,  474,  472,
      471,  475,  469,  473,  474,  473,  475,  476,  494,  496,
      501,  470,  502,  496,  505,  503,  475,  506,  475,  502,
      476,  494,  576,  502,  579,  576,  579,  476,  582,  582,
      476,  595,  476,  540,  540,  540,  540,  501,  540,  541,
      541,  541,  541,  540,  541,  542,  542,  542,  542,  541,

      542,  574,  476, 1307,  595,  505,  575,  580,  506,  543,
      543,  543,  543,  580,  543,  574,  544,  544,  544,  544,
      575,  544,  542,  544,  543,  545,  545,  545,  545,  578,
      545,  546,  546,  546,  546,  589,  546,  547,  547,  547,
      547,  585,  547,  589,  598,  581,  578,  545,  548,  548,
      548,  548,  581,  548,  549,  549,  549,  549,  585,  549,
      585,  546,  550,  550,  550,  550,  598,  550,  547,  551,
      551,  551,  551,  548,  551,  602,  551,  587,  549,  591,
      587,  550,  552,  552,  552,  552,  591,  552,  602,  552,
      586,  553,  553,  553,  553,  551,  553,  554,  554,  554,

      554, 1303,  554,  555,  555,  555,  555,  586,  555,  554,
      592,  604,  553,  556,  556,  556,  556,  592,  556,  555,
      557,  557,  557,  557,  604,  557,  558,  558,  558,  558,
      666,  558,  556,  559,  559,  559,  559,  594,  559,  560,
      560,  560,  560,  593,  560,  593,  560,  561,  561,  561,
      561,  557,  561, 1301,  594,  559,  600,  558,  562,  562,
      562,  562,  666,  562,  563,  563,  563,  563,  662,  563,
      564,  564,  564,  564,  600,  564,  590,  565,  565,  565,
      565,  590,  565,  566,  566,  566,  566,  597,  566,  603,
      567,  567,  567,  567,  561,  567,  568,  568,  568,  568,

      603,  568,  611,  597,  563,  569,  569,  569,  569,  662,
      569,  611,  611,  642,  611,  642,  564,  565,  570,  570,
      570,  570,  599,  570, 1244,  566,  571,  571,  571,  571,
      567,  571,  643,  568,  572,  572,  572,  572,  599,  572,
      569,  601,  572,  573,  573,  573,  573,  606,  573,  643,
      606,  607, 1244,  645,  607,  570,  572,  601,  608,  609,
      606,  609,  606,  573,  607,  612,  607,  610,  608,  609,
      608,  609,  608,  610,  613,  612, 1299,  612,  614,  645,
      620,  620,  612,  610,  613,  610,  613,  615,  614,  617,
      614,  620,  613,  620,  616,  617,  618,  615,  615,  615,

      616,  619,  618,  648,  616,  617,  616,  617,  617,  619,
      622,  619,  618,  619,  618,  621,  622,  648,  621,  623,
      622,  653,  622,  624, 1297,  621,  627,  621,  626,  623,
      625,  623,  653,  624,  626,  624,  627,  623,  627,  625,
      625,  624,  625,  628,  626,  638,  626,  629,  641,  639,
      638,  630,  631,  628,  639,  628,  632,  629,  641,  629,
      627,  630,  631,  630,  631,  633,  632,  640,  632,  730,
      634,  635,  647,  644,  629,  633,  636,  633,  730,  631,
      634,  635,  634,  635,  630,  632,  636,  637,  636,  640,
      646,  647,  633,  635,  634,  651,  657,  637,  644,  637,

      636,  649,  650,  649,  650,  652,  654,  655,  656,  659,
      646,  651,  652,  657,  658,  661,  658,  663,  664,  665,
      654,  698,  649,  667,  668,  700,  701,  701,  701,  701,
     1296,  701,  732,  655,  656,  698,  731,  732,  734,  700,
      734,  701,  703,  703,  703,  703,  735,  703,  731,  735,
      661,  659,  663,  667,  665,  664,  668,  702,  702,  702,
      702,  703,  702,  704,  704,  704,  704,  748,  704,  702,
      704,  705,  705,  705,  705,  755,  705,  706,  706,  706,
      706,  748,  706,  707,  707,  707,  707,  737,  707,  755,
      742,  737,  705,  708,  708,  708,  708,  733,  708,  741,

      708,  741,  742,  707,  709,  709,  709,  709,  706,  709,
      710,  710,  710,  710,  733,  710,  711,  711,  711,  711,
      810,  711,  712,  712,  712,  712,  736,  712,  711,  713,
      713,  713,  713,  736,  713,  709,  713,  714,  714,  714,
      714,  743,  714,  743,  715,  715,  715,  715,  712,  715,
      716,  716,  716,  716,  810,  716,  717,  717,  717,  717,
      716,  717,  739, 1295,  738,  714,  744,  717,  744,  739,
      715,  718,  718,  718,  718,  797,  718,  719,  719,  719,
      719,  738,  719,  720,  720,  720,  720,  747,  720,  747,
      718,  721,  721,  721,  721,  941,  721,  722,  722,  722,

      722,  797,  722,  723,  723,  723,  723,  745,  723,  724,
      724,  724,  724,  751,  724,  751,  719,  725,  725,  725,
      725,  746,  725,  753,  745,  746,  720,  726,  726,  726,
      726,  811,  726,  793,  941,  722,  727,  727,  727,  727,
      793,  727,  753,  729,  729,  729,  729,  724,  729,  723,
      749,  729,  725,  728,  728,  728,  728,  750,  728,  752,
      756,  757,  750,  749,  759,  802,  725,  726,  758,  811,
      760,  727,  802,  792,  752,  757,  728,  762,  762,  758,
      759,  760,  756,  792,  761,  727,  761,  795,  762,  795,
      762,  763,  764,  758,  761,  760,  761,  763,  764,  766,

      805,  763,  767,  763,  890,  794,  768,  766,  764,  766,
      764,  766,  767,  768,  767,  769,  768,  770,  768,  794,
      767,  769,  771,  805,  890,  773,  773,  770,  796,  770,
      775,  769,  771,  769,  771,  770,  773,  777,  773,  776,
      775,  778,  775,  775,  796,  776,  780,  777,  780,  777,
      798,  778,  777,  778,  778,  776,  779,  776,  780,  779,
      780, 1294,  781,  783,  800,  798,  784,  785,  781,  779,
      786,  779,  781,  783,  781,  783,  784,  785,  784,  785,
      786,  787,  786,  799,  803,  799,  806,  788,  789,  783,
      800,  787,  790,  787,  814,  786,  784,  788,  789,  788,

      789,  791,  790,  808,  790,  803,  804,  806,  804,  808,
      789,  791,  788,  791,  787,  807,  809,  815,  816,  790,
      807,  817,  818,  791,  789,  819,  872,  875,  875,  819,
      809,  846,  846,  846,  846,  814,  846,  791,  846,  873,
      879,  873,  846,  872,  847,  847,  847,  847,  816,  847,
      815,  847,  818,  874,  879,  874,  817, 1052,  848,  848,
      848,  848,  816,  848,  877,  877,  818,  849,  849,  849,
      849, 1052,  849,  850,  850,  850,  850,  878,  850,  878,
      851,  851,  851,  851,  848,  851,  852,  852,  852,  852,
      876,  852,  849,  850,  876,  881,  852,  853,  853,  853,

      853,  882,  853,  882,  883,  851,  854,  854,  854,  854,
      884,  854,  881,  854,  855,  855,  855,  855,  887,  855,
      883,  853,  855,  856,  856,  856,  856,  884,  856,  886,
      856,  857,  857,  857,  857,  887,  857,  858,  858,  858,
      858,  886,  858,  859,  859,  859,  859,  871,  859,  858,
      859,  871,  895,  857,  860,  860,  860,  860, 1053,  860,
      861,  861,  861,  861,  871,  861,  862,  862,  862,  862,
      895,  862,  863,  863,  863,  863, 1053,  863,  864,  864,
      864,  864,  892,  864,  865,  865,  865,  865,  885,  865,
      885,  889,  861,  866,  866,  866,  866,  891,  866,  889,

      860,  926,  892,  926,  863,  891,  867,  867,  867,  867,
      862,  867,  868,  868,  868,  868,  865,  868,  869,  869,
      869,  869,  864,  869,  870,  870,  870,  870,  866,  870,
      888,  893,  894,  896,  897,  931,  925,  927,  925,  893,
      931,  896,  925,  894,  868,  897,  943,  900,  867,  899,
      898,  902,  888,  869,  898,  899,  898,  900,  927,  900,
      900,  902,  903,  902,  937,  899,  898,  899,  898,  903,
      904,  937,  903,  906,  903, 1280,  906,  908,  911,  907,
      904,  928,  904,  908,  911,  943,  906,  910,  906,  907,
      907,  907,  910,  908,  911,  908,  911,  912,  932,  913,

      913,  928,  910,  915,  910,  914,  912,  912,  916,  912,
      913,  914,  913,  915,  917,  915,  936,  932,  916,  918,
      916,  914,  919,  914,  917,  920,  917,  916,  929,  918,
      921,  918,  919,  936,  919,  920,  915,  920,  918,  922,
      921,  930,  921,  929,  920,  917,  923,  924,  933,  922,
      933,  922,  921,  919,  939,  940,  923,  924,  923,  924,
      934,  930,  935,  934,  935,  923,  942,  944,  922,  924,
      938,  945,  938,  946,  948,  947,  974,  974,  974,  974,
     1004,  974,  940, 1004,  975,  975,  975,  975,  974,  975,
      994,  995,  994,  942,  944,  939,  996,  998,  996,  998,

     1006,  945,  947,  995,  948, 1006,  976,  976,  976,  976,
      946,  976,  977,  977,  977,  977, 1001,  977, 1001,  978,
      978,  978,  978, 1009,  978,  979,  979,  979,  979, 1003,
      979, 1003,  976,  978,  999,  999, 1000,  977,  980,  980,
      980,  980, 1009,  980, 1002, 1002, 1000,  979,  981,  981,
      981,  981, 1012,  981,  982,  982,  982,  982, 1005,  982,
     1005, 1007, 1007,  980,  983,  983,  983,  983, 1008,  983,
     1008, 1048, 1010,  982, 1012,  981,  984,  984,  984,  984,
     1048,  984, 1016,  985,  985,  985,  985,  983,  985,  986,
      986,  986,  986, 1010,  986,  987,  987,  987,  987, 1016,

      987,  988,  988,  988,  988, 1011,  988,  989,  989,  989,
      989, 1056,  989,  990,  990,  990,  990, 1278,  990,  991,
      991,  991,  991, 1013,  991, 1011, 1014, 1015,  985,  992,
      992,  992,  992,  986,  992,  993,  993,  993,  993, 1022,
      993,  987, 1017, 1013, 1018,  988, 1051, 1014, 1015, 1022,
     1056, 1022,  989, 1020, 1020, 1044, 1046, 1023,  990, 1277,
      991, 1024, 1044, 1017, 1020, 1018, 1020, 1023, 1051, 1023,
     1023, 1024, 1026, 1024,  992, 1025, 1025, 1046, 1027, 1029,
      993, 1026, 1026, 1113, 1026, 1025, 1031, 1025, 1027, 1029,
     1027, 1029, 1031, 1029, 1032, 1034, 1031, 1035, 1031, 1047,

     1036, 1113, 1200, 1034, 1032, 1200, 1032, 1035, 1037, 1035,
     1036, 1038, 1036, 1034, 1039, 1034, 1050, 1055, 1037, 1047,
     1037, 1038, 1040, 1038, 1039, 1041, 1039, 1049, 1042, 1035,
     1057, 1036, 1040, 1043, 1040, 1041, 1050, 1041, 1042, 1058,
     1042, 1037, 1038, 1043, 1049, 1043, 1039, 1059, 1060, 1061,
     1062, 1063, 1141, 1041, 1040, 1112, 1105, 1055, 1276, 1141,
     1042, 1083, 1083, 1083, 1083, 1043, 1083, 1084, 1084, 1084,
     1084, 1057, 1084, 1105, 1083, 1109, 1112, 1109, 1058, 1084,
     1103, 1085, 1085, 1085, 1085, 1061, 1085, 1059, 1060, 1102,
     1062, 1063, 1103, 1142, 1118, 1085, 1086, 1086, 1086, 1086,

     1102, 1086, 1142, 1086, 1087, 1087, 1087, 1087, 1118, 1087,
     1088, 1088, 1088, 1088, 1144, 1088, 1089, 1089, 1089, 1089,
     1104, 1089, 1116, 1087, 1090, 1090, 1090, 1090, 1144, 1090,
     1104, 1091, 1091, 1091, 1091, 1089, 1091, 1093, 1093, 1093,
     1093, 1110, 1093, 1110, 1116, 1115, 1090, 1094, 1094, 1094,
     1094, 1275, 1094, 1095, 1095, 1095, 1095, 1091, 1095, 1096,
     1096, 1096, 1096, 1115, 1096, 1097, 1097, 1097, 1097, 1272,
     1097, 1098, 1098, 1098, 1098, 1111, 1098, 1111, 1099, 1099,
     1099, 1099, 1093, 1099, 1117, 1114, 1140, 1285, 1095, 1094,
     1100, 1100, 1100, 1100, 1140, 1100, 1114, 1101, 1101, 1101,

     1101, 1096, 1101, 1106, 1108, 1119, 1117, 1120, 1106, 1108,
     1121, 1097, 1143, 1111, 1143, 1124, 1099, 1098, 1123, 1123,
     1121, 1124, 1121, 1263, 1122, 1122, 1130, 1119, 1123, 1120,
     1123, 1124, 1125, 1124, 1285, 1122, 1100, 1122, 1125, 1126,
     1127, 1254, 1125, 1101, 1125, 1128, 1127, 1253, 1129, 1126,
     1127, 1126, 1127, 1131, 1128, 1128, 1133, 1128, 1129, 1132,
     1129, 1129, 1134, 1131, 1130, 1131, 1133, 1135, 1133, 1132,
     1136, 1132, 1134, 1147, 1134, 1146, 1150, 1135, 1133, 1135,
     1136, 1148, 1136, 1137, 1138, 1131, 1151, 1139, 1132, 1146,
     1147, 1134, 1152, 1137, 1138, 1137, 1138, 1139, 1153, 1139,

     1135, 1154, 1148, 1136, 1155, 1156, 1157, 1158, 1137, 1178,
     1178, 1178, 1178, 1194, 1178, 1196, 1150, 1138, 1235, 1197,
     1139, 1197, 1152, 1151, 1177, 1177, 1177, 1177, 1252, 1177,
     1194, 1177, 1196, 1178, 1198, 1153, 1198, 1199, 1156, 1199,
     1235, 1204, 1154, 1251, 1201, 1155, 1209, 1157, 1158, 1179,
     1179, 1179, 1179, 1201, 1179, 1209, 1179, 1180, 1180, 1180,
     1180, 1204, 1180, 1181, 1181, 1181, 1181, 1206, 1181, 1182,
     1182, 1182, 1182, 1334, 1182, 1183, 1183, 1183, 1183, 1180,
     1183, 1185, 1185, 1185, 1185, 1233, 1185, 1206, 1270, 1181,
     1183, 1270, 1186, 1186, 1186, 1186, 1182, 1186, 1187, 1187,

     1187, 1187, 1233, 1187, 1188, 1188, 1188, 1188, 1220, 1188,
     1189, 1189, 1189, 1189, 1334, 1189, 1190, 1190, 1190, 1190,
     1250, 1190, 1191, 1191, 1191, 1191, 1231, 1191, 1192, 1192,
     1192, 1192, 1202, 1192, 1202, 1212, 1186, 1193, 1193, 1193,
     1193, 1212, 1193, 1214, 1248, 1231, 1213, 1220, 1188, 1214,
     1230, 1212, 1230, 1212, 1216, 1191, 1213, 1213, 1213, 1214,
     1217, 1214, 1234, 1216, 1216, 1218, 1216, 1232, 1221, 1232,
     1217, 1202, 1217, 1217, 1219, 1218, 1219, 1218, 1221, 1218,
     1221, 1222, 1223, 1234, 1219, 1224, 1219, 1239, 1225, 1226,
     1241, 1222, 1223, 1222, 1223, 1224, 1228, 1224, 1225, 1226,

     1225, 1226, 1246, 1227, 1236, 1289, 1228, 1229, 1228, 1267,
     1271, 1267, 1222, 1227, 1236, 1227, 1224, 1229, 1290, 1229,
     1268, 1268, 1269, 1227, 1269, 1289, 1239, 1271, 1245, 1241,
     1258, 1258, 1258, 1258, 1243, 1258, 1259, 1259, 1259, 1259,
     1290, 1259, 1260, 1260, 1260, 1260, 1274, 1260, 1274, 1260,
     1343, 1261, 1261, 1261, 1261, 1258, 1261, 1262, 1262, 1262,
     1262, 1343, 1262, 1259, 1262, 1264, 1264, 1264, 1264, 1273,
     1264, 1265, 1265, 1265, 1265, 1261, 1265, 1266, 1266, 1266,
     1266, 1291, 1266, 1291, 1279, 1281, 1273, 1292, 1242, 1293,
     1283, 1293, 1282, 1274, 1279, 1281, 1279, 1281, 1282, 1281,

     1283, 1283, 1283, 1284, 1286, 1287, 1292, 1319, 1282, 1284,
     1282, 1310, 1288, 1310, 1286, 1287, 1286, 1287, 1311, 1284,
     1240, 1284, 1288, 1238, 1288, 1304, 1304, 1304, 1304, 1237,
     1304, 1305, 1305, 1305, 1305, 1311, 1305, 1306, 1306, 1306,
     1306, 1312, 1306, 1312, 1306, 1313, 1314, 1313, 1317, 1315,
     1321, 1322, 1215, 1322, 1317, 1305, 1314, 1319, 1314, 1315,
     1315, 1315, 1329, 1330, 1317, 1330, 1317, 1211, 1210, 1321,
     1327, 1327, 1327, 1327, 1331, 1327, 1331, 1327, 1332, 1329,
     1335, 1340, 1335, 1340, 1332, 1346, 1341, 1346, 1341, 1208,
     1207, 1205, 1203, 1195, 1332, 1313, 1332, 1341, 1184, 1174,

     1171, 1169, 1167, 1166, 1165, 1164, 1163, 1161, 1160, 1159,
     1149, 1145, 1107, 1092, 1082, 1331, 1350, 1081, 1350, 1350,
     1350, 1350, 1351, 1351, 1351, 1352, 1352, 1352, 1353, 1353,
     1353, 1353, 1353, 1353, 1354, 1080, 1354, 1354, 1354, 1354,
     1355, 1079, 1355, 1355, 1355, 1355, 1356, 1078, 1356, 1356,
     1356, 1356, 1357, 1077, 1076, 1357, 1357, 1357, 1358, 1075,
     1074, 1358, 1358, 1358, 1359, 1073, 1359, 1359, 1359, 1359,
     1360, 1360, 1361, 1361, 1362, 1362, 1362, 1362, 1362, 1362,
     1363, 1072, 1363, 1363, 1363, 1363, 1364, 1071, 1070, 1364,
     1364, 1364, 1365, 1068, 1067, 1365, 1365, 1365, 1366, 1066,

     1366, 1366, 1366, 1366, 1065, 1064, 1054, 1045, 1033, 1030,
     1028, 1021, 1019,  997,  973,  972,  971,  970,  969,  968,
      967,  966,  965,  964,  962,  961,  959,  957,  956,  955,
      954,  953,  950,  909,  905,  901,  880,  845,  844,  843,
      842,  841,  840,  839,  838,  837,  836,  835,  834,  833,
      832,  831,  829,  828,  827,  825,  824,  823,  821,  820,
      812,  801,  782,  774,  772,  765,  754,  740,  699,  697,
      696,  695,  693,  692,  690,  689,  688,  687,  686,  685,
      684,  682,  679,  678,  677,  676,  675,  673,  672,  671,
      670,  669,  660,  605,  596,  583,  538,  537,  536,  535,

      534,  533,  532,  531,  529,  528,  527,  526,  525,  524,
      523,  522,  521,  520,  518,  517,  516,  515,  514,  513,
      512,  511,  510,  509,  508,  507,  438,  437,  413,  371,
      370,  369,  368,  366,  365,  364,  363,  362,  361,  360,
      359,  358,  357,  356,  355,  354,  353,  352,  351,  350,
      349,  348,  347,  346,  345,  344,  343,  342,  314,  313,
      274,  243,  203,  200,  198,  196,  195,  194,  192,  191,
      190,  189,  188,  187,  185,  184,  183,  182,  181,  180,
      179,  177,  174,  173,  171,  147,  146,  117,   93,   49,
       41,   40,   39,   38,   37,   35,   34,   33,   32,   30,

       29,   28,   27,   26,   24,   23,   22,   20,   11, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#define INITIAL 0
#line 2 "levcomp.lpp"

// levcomp.l:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
// 
// Based loosely on NetHack's lev_comp.l

#include "AppHdr.h"
#include "levcomp.tab.h"
#include <cstring>
#include <queue>

static bool alloced = false;

std::queue<const char *> free_queue;

static void flush_free_queue(int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(20);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

static void settext()
{
    clean();
    if ((yylval.text = strdup(yytext)))
        alloced = true;
}

#define MAPDEF 1

#define ARGUMENT 2

#define MNAME 3

#define KEYWORDS 4

#define YY_NEVER_INTERACTIVE 1
#line 2098 "levcomp.lex.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 60 "levcomp.lpp"


#line 2255 "levcomp.lex.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1349 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4210 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 62 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 64 "levcomp.lpp"
;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 66 "levcomp.lpp"
{
                        settext();
                        return MAP_LINE;
                    }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 71 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 73 "levcomp.lpp"
;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 75 "levcomp.lpp"
{ BEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 76 "levcomp.lpp"
return DEFAULT_DEPTH;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 77 "levcomp.lpp"
return DEPTH;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 78 "levcomp.lpp"
return ORIENT;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 79 "levcomp.lpp"
{ BEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 80 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 81 "levcomp.lpp"
return FLAGS;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 82 "levcomp.lpp"
{ BEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 83 "levcomp.lpp"
{ BEGIN(ARGUMENT); return SYMBOL; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 84 "levcomp.lpp"
{ BEGIN(MNAME); return MONS; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 86 "levcomp.lpp"
return BRANCH;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 87 "levcomp.lpp"
return DEFAULT;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 88 "levcomp.lpp"
return DESC;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 89 "levcomp.lpp"
return BRANCH;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 90 "levcomp.lpp"
return ROOT_DEPTH;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 91 "levcomp.lpp"
return FLOOR_COLOUR;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 92 "levcomp.lpp"
return ROCK_COLOUR;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 94 "levcomp.lpp"
return LEVEL;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 95 "levcomp.lpp"
return END;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 96 "levcomp.lpp"
return PVAULT;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 97 "levcomp.lpp"
return PMINIVAULT;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 99 "levcomp.lpp"
{ BEGIN(ARGUMENT); return ENTRY_MSG; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 100 "levcomp.lpp"
{ BEGIN(ARGUMENT); return EXIT_MSG; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 102 "levcomp.lpp"
return MONSTERS;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 103 "levcomp.lpp"
return ENDMONSTERS;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 105 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 110 "levcomp.lpp"
;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 111 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 113 "levcomp.lpp"
{ 
                        settext();
                        return MONSTER_NAME; 
                    }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 118 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 119 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 120 "levcomp.lpp"
;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 122 "levcomp.lpp"
return PANDEMONIC;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 123 "levcomp.lpp"
return NO_HMIRROR;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 124 "levcomp.lpp"
return NO_VMIRROR;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 125 "levcomp.lpp"
return NO_ROTATE;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 127 "levcomp.lpp"
return ENCOMPASS;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 128 "levcomp.lpp"
return NORTH;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 129 "levcomp.lpp"
return SOUTH;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 130 "levcomp.lpp"
return EAST;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 131 "levcomp.lpp"
return WEST;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 132 "levcomp.lpp"
return NORTHEAST;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 133 "levcomp.lpp"
return NORTHWEST;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 134 "levcomp.lpp"
return SOUTHEAST;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 135 "levcomp.lpp"
return SOUTHWEST;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 136 "levcomp.lpp"
return FLOAT;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 138 "levcomp.lpp"
return DASH;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 139 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 141 "levcomp.lpp"
{
                        clean();
                        yylval.i = atoi(yytext);
                        return INTEGER;
                    }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 147 "levcomp.lpp"
{ 
                        BEGIN(INITIAL);
                        settext();
                        return STRING; 
                    }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 153 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 155 "levcomp.lpp"
;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 157 "levcomp.lpp"
return OPAREN;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 158 "levcomp.lpp"
return CPAREN;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 160 "levcomp.lpp"
return QUOTE;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 162 "levcomp.lpp"
{
                        settext();
                        return IDENTIFIER;
                    }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 167 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 169 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 2682 "levcomp.lex.cc"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(MAPDEF):
			case YY_STATE_EOF(ARGUMENT):
			case YY_STATE_EOF(MNAME):
			case YY_STATE_EOF(KEYWORDS):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1349 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1349 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1348);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');
	if ( yy_current_buffer->yy_at_bol )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 169 "levcomp.lpp"


int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}
